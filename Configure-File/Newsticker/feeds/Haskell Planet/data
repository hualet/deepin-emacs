;; -*- coding: utf-8 -*-
(("Planet Haskell" "Planet Haskell - http://planet.haskell.org/" "http://planet.haskell.org/" (20485 11242 207617) feed 0 nil nil ((title nil "Planet Haskell") (link nil "http://planet.haskell.org/") (language nil "en") (description nil "Planet Haskell - http://planet.haskell.org/") (item nil (title nil "Neil Brown: Emulating Shared Mutable Variables with Message-Passing Processes") (guid ((isPermalink . "false")) "http://chplib.wordpress.com/?p=49") (link nil "http://chplib.wordpress.com/2009/10/14/emulating-shared-mutable-variables-with-message-passing-processes/") (description nil "<div class=\"snap_preview\"><br /><p>CHP supports a message-passing style of concurrency.  Shared mutable variables are not intended to be used &#8212; which is quite easy to keep to in a functional language like Haskell, where mutable variables are special, like IORef, MVar or TVar. (Contrast this with C, where mutating a variable from several threads is dangerously easy!)  But sometimes you might find that you need some shared mutable data with safe updates &#8212; perhaps a global setting that most processes need access to.  Instead of planting an MVar (or TVar) in the middle of your CHP program, you can instead use CHP&#8217;s message passing model to implement shared mutable variables.</p>\n<p>The first challenge of shared mutable data is that the reads should not overlap the writes.  You don&#8217;t want a situation where two processes try to overwrite the shared variable and you end up with half of each value.  We can avoid this by representing a shared variable with an active process.  The process has an incoming channel (for sending in new values of the variable) and an outgoing channel (for reading out the current value of the variable).  These channels can be shared amongst many readers and writers of the variable, using anyToOneChannel and oneToAnyChannel  (with claim, as touched upon in <a href=\"http://chplib.wordpress.com/2009/10/06/the-printing-process/\">a previous post</a>).  Our first attempt at the shared variable process is simple:</p>\n<pre>sharedRW :: a -&gt; Chanin a -&gt; Chanout a -&gt; CHP ()\nsharedRW start input output = sharedRW' start\n  <font color=\"Blue\">where</font>\n    sharedRW' x = ((readChannel input) <b>&lt;-&gt;</b> (writeChannel output x <b>&gt;&gt;</b> return x))\n                    <b>&gt;&gt;=</b> sharedRW'\n</pre>\n<p>The process sits and waits for one of two things (using <tt><b>&lt;-&gt;</b></tt>, CHP&#8217;s choice operator): either a new value from its input channel, or a communication of the old value on the output channel (in which case the previous value is retained for the next iteration).  The following test (that uses some forthcoming CHP testing additions) reads and writes the variable 1000 times, adding one each time.  If we begin with value 1, we expect (and get) 1001 at the end:</p>\n<pre>succer :: Int -&gt; Chanin Int -&gt; Chanout Int -&gt; CHP ()\nsuccer n input output = replicateM_ n <b>$</b> readChannel input <b>&gt;&gt;=</b> writeChannel output <b>.</b> succ\n\ntestRW1 :: CHP CHPTestResult\ntestRW1 = <font color=\"Blue\">do</font> toV &lt;- oneToOneChannel\n             fromV &lt;- oneToOneChannel\n             sharedRW 1 (reader toV) (writer fromV)\n               <b>`withCheck`</b> <font color=\"Blue\">do</font> liftCHP <b>$</b> succer 1000 (reader fromV) (writer toV)\n                              final &lt;- liftCHP <b>$</b> readChannel <b>$</b> reader fromV\n                              poison (reader fromV) <b>&gt;&gt;</b> poison (writer toV)\n                              assertCHPEqual' \"Final value\" 1001 final\n</pre>\n<p>However, there is a problem that is not revealed by the above test.  We have implemented a shared mutable variable, but we&#8217;ve also inherited the disadvantages!  If you change the test so that it has three such processes in parallel, all accessing the shared variable (with shared channels), reading then writing back (adding one), a problem occurs:</p>\n<pre>succer' :: Int -&gt; Shared Chanin Int -&gt; Shared Chanout Int -&gt; CHP ()\nsuccer' n input output\n  = replicateM_ n <b>$</b> <font color=\"Blue\">do</font> x &lt;- claim input readChannel\n                       claim output (flip writeChannel (succ x))\n\ntestRW2 :: CHP CHPTestResult\ntestRW2 = <font color=\"Blue\">do</font> toV &lt;- anyToOneChannel\n             fromV &lt;- oneToAnyChannel\n             sharedRW 1 (reader toV) (writer fromV)\n               <b>`withCheck`</b> <font color=\"Blue\">do</font> <font color=\"Blue\">let</font> p = succer' 1000 (reader fromV) (writer toV)\n                              liftCHP <b>$</b> p <b>&lt;||&gt;</b> p <b>&lt;||&gt;</b> p\n                              final &lt;- liftCHP <b>$</b> claim (reader fromV) readChannel\n                              liftCHP <b>$</b> claim (reader fromV) poison <b>&gt;&gt;</b> claim (writer toV) poison\n                              assertCHPEqual' \"Final value\" 3001 final\n</pre>\n<p>The failing output is:</p>\n<pre>### Failure in: 1:RW2\nFinal value; expected: 3001; actual: 1659\n</pre>\n<p>The problem is that if two processes read the variable, and then both processes write to the variable, whichever order the writes happen in, only 1 will be added.  This is just the sort of problem that can occur with atomic reads and writes (rather than mutexes) on shared variables in languages such as C.  We can fix this type of update problem neatly by redefining our shared variable process to accept a <i>modification function</i> rather than a new value (this is Haskell, so no issue in sending a function down a channel).  This modification will then be applied atomically with respect to any other modifications.  The modification can be conditional on the previous value, or just <tt>const someNewValue</tt>.  Here&#8217;s the revised process:</p>\n<pre>sharedVar :: NFData a =&gt; a -&gt; Chanin (a -&gt; a) -&gt; Chanout a -&gt; CHP ()\nsharedVar start input output = sharedVar' start\n  <font color=\"Blue\">where</font>\n    sharedVar' x = ( (forceApplyTo x <b>&lt;$&gt;</b> readChannel input)\n                       <b>&lt;-&gt;</b> (writeChannel output x <b>&gt;&gt;</b> return x)\n                   ) <b>&gt;&gt;=</b> sharedVar'\n\n    forceApplyTo x f = (id <b>$|</b> rnf) (f x)\n</pre>\n<p>Note that because this process is applying lots of consecutive functions to the value without ever examining it, it could lead to space leaks &#8212; so I use some strict application magic from the strategies library to prevent this.</p>\n<p>Our example uses the pattern of waiting to either read a new value or to engage in an output of the old value &#8212; a pattern that is likely to crop up repeatedly in future posts.  It is something that is not directly supported by MVars: you cannot wait for a choice of several actions involving MVars.  Nor is this pattern easily supported by TVars:  having both sides in a synchronisation wait for a choice of synchronisations cannot be done without ending up with something like the STM algorithms that already underpin CHP.</p>\n<p>If you want anything more complicated than the shared variable shown here, such as updating two values atomically, you should look to STM and TVars after all, but at least for simple cases where you require one shared variable, CHP can fulfil that need.</p>\n  <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gocomments/chplib.wordpress.com/49/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/chplib.wordpress.com/49/\" /></a> <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/godelicious/chplib.wordpress.com/49/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/delicious/chplib.wordpress.com/49/\" /></a> <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gostumble/chplib.wordpress.com/49/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/stumble/chplib.wordpress.com/49/\" /></a> <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/godigg/chplib.wordpress.com/49/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/digg/chplib.wordpress.com/49/\" /></a> <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/goreddit/chplib.wordpress.com/49/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/reddit/chplib.wordpress.com/49/\" /></a> <img alt=\"\" border=\"0\" src=\"http://stats.wordpress.com/b.gif?host=chplib.wordpress.com&amp;blog=9351306&amp;post=49&amp;subd=chplib&amp;ref=&amp;feed=1\" /></div>") (pubDate nil "Wed, 14 Oct 2009 12:59:41 +0000") (dc:creator nil "Neil Brown")) (item nil (title nil "Philip Wadler: Conference Collected Wisdom Wiki") (guid ((isPermalink . "false")) "tag:blogger.com,1999:blog-9757377.post-6446258288475445800") (link nil "http://wadler.blogspot.com/2009/10/conference-collected-wisdom-wiki.html") (description nil "One output of <a href=\"http://www.usenix.net/events/wowcs08/\">WOWCS</a> (the Workshop on Organizing Workshops, Conferences, and Symposia for Computer Systems) is a wiki to collect information on organizing conferences.  I haven't looked at it in detail yet, but I'm putting the link here for future reference.  Collecting experience in this way sounds like a good idea to me.<div class=\"blogger-post-footer\"><img width=\"1\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/9757377-6446258288475445800?l=wadler.blogspot.com\" /></div>") (pubDate nil "Wed, 14 Oct 2009 10:06:19 +0000") (dc:creator nil "Philip Wadler (noreply@blogger.com)")) (item nil (title nil "Philip Wadler: Robin writes a book (and you get a copy)") (guid ((isPermalink . "false")) "tag:blogger.com,1999:blog-9757377.post-8148801451076944427") (link nil "http://wadler.blogspot.com/2009/10/robin-writes-book-and-you-get-copy.html") (description nil "Here is your chance to be a patron of the arts.  Robin Sloan, the author of Mr. Penumbra (see earlier blog entry), is writing a book.  Sponsor him, and you get a copy and updates on the book's progress.  Progress reports include use of Google ad-words to choose the lead character's name, and a short story about flying written during a flight from San Francisco to New York.<div class=\"blogger-post-footer\"><img width=\"1\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/9757377-8148801451076944427?l=wadler.blogspot.com\" /></div>") (pubDate nil "Wed, 14 Oct 2009 10:06:19 +0000") (dc:creator nil "Philip Wadler (noreply@blogger.com)")) (item nil (title nil "Galois, Inc: Tech Talk: Writing Linux Kernel Modules with Haskell") (guid ((isPermalink . "false")) "http://www.galois.com/blog/?p=1093") (link nil "http://www.galois.com/blog/2009/10/13/haskellkernelmodules/") (description nil "<p>The October 20th Galois Tech Talk  will be delivered by Thomas DuBuisson, titled <strong>“Writing Linux Kernel Modules with Haskell.”</strong><strong><br />\n</strong></p>\n<ul>\n<li>Date: Tuesday, October 20th, 2009</li>\n<li>Time: 10:30am – 11:30am</li>\n<li> Location: Galois, Inc.<br />\n421 SW 6th Ave. Suite 300<br />\n(3rd floor of the Commonwealth Building)<br />\nPortland, OR 97204</li>\n</ul>\n<p><strong>Abstract</strong>: Current operating systems are developed and extended primarily with imperative languages that lack in expressiveness and safety.  Pure and functional languages fill these gaps nicely but existing tools are not ideal fits and the language abstracts away important environmental information.</p>\n<p>This talk will focus on modifications of the Glasgow Haskell Compiler to generate suitable code and nuances of binding to the Linux API. Short-comings of the language and tools will be identified along with known workarounds and potential engineering efforts.</p>\n<p><strong>Bio:</strong> Thomas DuBuisson is a PhD student in Computer Science at Portland State University, working with advisor Andrew Tolmach.  Current research efforts revolve around the use of functional languages for systems programming and improving runtime system security.</p>\n<hr /><a href=\"http://galois.com/\">Galois</a> has been holding weekly technical seminars for several years on topics from functional programming, formal methods, compiler and language design, to cryptography, and operating system construction, with talks by many figures from the programming language and formal methods communities. The talks are open and free. An RSVP is not required, but feel free to contact the <a href=\"mailto:levent.erkok@galois.com\">organizer</a> with questions and comments.") (pubDate nil "Tue, 13 Oct 2009 23:26:43 +0000") (dc:creator nil "Levent Erkok")) (item nil (title nil "Galois, Inc: Domain Specific Languages for Domain Specific Problems") (guid ((isPermalink . "false")) "http://www.galois.com/blog/?p=1090") (link nil "http://www.galois.com/blog/2009/10/13/domain-specific-languages-for-domain-specific-problems/") (description nil "<p><a href=\"http://galois.com/~dons/papers/stewart-2009-edsls.pdf\"><img class=\"alignright\" title=\"Cover page\" src=\"http://galois.com/~dons/papers/stewart-2009-edsls-cover.png\" alt=\"\" width=\"98\" height=\"138\" /></a><br />\nWe have a new position paper on the use of EDSLs and Haskell for tackling the &#8220;programmability gap&#8221; of emerging high performance computing architectures &#8212; such as GPGPUs. It will be presented tomorrow at <a href=\"http://www.lanl.gov/conferences/lacss/2009/\">LACSS</a> in Santa Fe. (<a href=\"http://www.galois.com/~dons/papers/stewart-2009-edsls.pdf\">Download</a>) :: PDF</p>\n<p><em>Domain Specific Languages for Domain Specific Problems</em><br />\n<em>Don Stewart, Galois.</em><br />\n<em><a href=\"javascript:show('ws1');\">Workshop on Non-Traditional Programming Models for High-Performance Computing</a>, LACSS 2009.</em></p>\n<p>As the complexity of large-scale computing architecture increases, the effort needed to program these machines efficiently has grown dramatically. The challenge is how to bridge this &#8220;programmability gap&#8221;, making the hardware more accessible to domain experts. We argue for an approach based on<br />\nexecutable <em>embedded domain specific languages </em>(EDSLs)&#8212;small languages with focused expressive power hosted directly in existing high-level programming languages such as Haskell. We provide examples of EDSLs in use in industry today, and describe the advantages EDSLs have over general purpose languages in productivity, performance, correctness and cost.</p>\n<p><em>Thanks to Magnus Carlsson, Dylan McNamee, Wouter Swiestra, Derek Elkins and Alex Mason for feedback on drafts.</em></p>") (pubDate nil "Tue, 13 Oct 2009 18:22:37 +0000") (dc:creator nil "donstewart")) (item nil (title nil "FP-Syd: Sydney FP Group: FP-Syd #18.") (guid ((isPermalink . "false")) "http://www.mega-nerd.com/erikd/Blog/2009/10/13/fp-syd-18") (link nil "http://www.mega-nerd.com/erikd/Blog/FP-Syd/fp-syd-18.html") (description nil "<p>\nWay back on August 23rd we held the 18th meeting of FP-Syd, the Sydney\nFunctional Programming group.\nAs usual, the meeting was held at Google's Sydney offices and we had about 24\npeople attend to hear our two presenters.\n</p>\n\n<p>\nFirst up we had Mark Wotton and his presentation \n	<a href=\"http://groups.google.com/group/fp-syd/web/TBC_and_flow.pdf\">\n	\"Testing By Convention and Flow\"</a>.\nTBC (\n	<a href=\"http://hackage.haskell.org/package/TBC\">\n	on Hackage</a>)\nis a harness for running tests written with HUnit or Quickcheck.\nThe main idea is that if your tests are written to follow a set of conventions,\na lot of the boiler can be skipped used TBC.\n</p>\n\n<p>\nThe second presentation was by Ben Lippmeier on his work on getting Haskell's\n	<a href=\"http://fp-syd.googlegroups.com/web/ghcOnSparc.pdf\">\n	GHC compiler working on SUN's OpenSparc T2 processor</a>.\nThe OpenSparc T2 is interesting because it has 8 cores per processor and 8\nhardware threads per core and hence is an interesting target for GHC's parallel\nevaluation model.\n</p>\n\n<p>\nA big thanks to Shane Stephens and Google for providing the meeting venue and\nsome light refreshments. \n</p>") (pubDate nil "Tue, 13 Oct 2009 08:55:00 +0000")) (item nil (title nil "\"Osfameron\": Undone - sci-fi comedy on BBC radio") (guid ((isPermalink . "false")) "http://greenokapi.net/blog/?p=172") (link nil "http://greenokapi.net/blog/2009/10/12/undone-sci-fi-comedy-on-bbc-radio/") (description nil "Just a quick post about this cute scifi-ish radio show, <a href=\"http://www.bbc.co.uk/programmes/b00dzp17\">Ben Moor's <i>Undone</i></a>.  Someone pointed me at it a couple of years ago, noting that the protagonist Edna Turner reminded him of the lovely Sally Sparrow from <a href=\"http://en.wikipedia.org/wiki/Blink_(Doctor_Who)\">Blink</a>.  I loved the wordplay, the surreal alternate reality (for example, \"Los muchachos que necesitan la insulina, Mexico City's top diabetic mariachi band\"), and the choice of music.  And now I discover there was a 2nd series, and even a <i>3rd</i> which will be broadcast in November.\n<p>\nThough I like the offbeat parallel reality more when it's low key (the series finales are more high-fantasy end-of-the-world stuff) the story arc is shaping up quite interestingly, as the whole premise of the scenario is put into question (hopefully this won't affect the surreal punning).\n<p>\nYou can catch up on iPlayer &mdash; though, bizarrely, they haven't stacked previous episodes, so you'd only catch the series 1 ending now, bad BBC!  And while I'm knocking Auntie, why don't the microsite or the iPlayer programme information give any details on the music used?  The manic choral theme is fantastic, and the incidental music is also excellent.  Any clues?</p></p>") (pubDate nil "Mon, 12 Oct 2009 19:33:08 +0000") (dc:creator nil "osfameron")) (item nil (title nil "Neil Brown: The octopus, the boids and GHC 6.12.1rc1") (guid ((isPermalink . "false")) "http://chplib.wordpress.com/?p=376") (link nil "http://chplib.wordpress.com/2009/10/12/the-octopus-the-boids-and-ghc-6-12-1rc1/") (description nil "<div class=\"snap_preview\"><br /><p>I had been eagerly awaiting the release candidate of the latest GHC (6.12).  Last night, the <a href=\"http://www.haskell.org/pipermail/glasgow-haskell-users/2009-October/017800.html\">GHC team delivered</a>.  Straight away, I downloaded and installed it on octopus, the 8-core machine I use for benchmarking.  In the <a href=\"http://chplib.wordpress.com/2009/09/16/boids-simulation-part-5/\">last part of the boids guide</a> I did some benchmarking on octopus to see what speed-up I got with the boids.  This was the result (click on image for full-size, wordpress&#8217;s thumbnails are quite poor):</p>\n<p><a href=\"http://chplib.files.wordpress.com/2009/09/boids-graph-4.png\"><img src=\"http://chplib.files.wordpress.com/2009/09/boids-graph-4.png?w=300&#038;h=225\" alt=\"boids-graph-4\" title=\"boids-graph-4\" width=\"300\" height=\"225\" class=\"aligncenter size-medium wp-image-100\" /></a></p>\n<p>Since then, I have optimised the CHP library, and installed GHC 6.12.1rc1.  The result is a better graph, that takes less time sequentially, and has a better speed-up profile (including taking out that nasty upswing at the end of the first graph &#8212; click for full-size):</p>\n<p><a href=\"http://chplib.files.wordpress.com/2009/10/boids-graph-5b.png\"><img src=\"http://chplib.files.wordpress.com/2009/10/boids-graph-5b.png?w=300&#038;h=225\" alt=\"boids-graph-5b\" title=\"boids-graph-5b\" width=\"300\" height=\"225\" class=\"aligncenter size-medium wp-image-383\" /></a></p>\n<p><i>Edit: the graph now includes the GHC 6.10 time (including CHP optimisations) and GHC 6.12.1-rc1 time (same CHP optimisations), so you can get an idea of the differences.  Apologies for not overlaying it on one graph, but I have mislaid the source figures for the original graph.  I should benchmark all this properly and put the error bars on, etc.</i></p>\n<p>I&#8217;m pleased with the effect that the optimisations and the GHC upgrade have had.  The thing I really want to play with next is Satnam Singh&#8217;s <a href=\"http://raintown.org/?page_id=132\">ThreadScope</a>, which visualises the thread usage with GHC 6.12, and will hopefully allow me to play with profiling-directed optimisation of CHP programs.</p>\n  <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gocomments/chplib.wordpress.com/376/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/chplib.wordpress.com/376/\" /></a> <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/godelicious/chplib.wordpress.com/376/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/delicious/chplib.wordpress.com/376/\" /></a> <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gostumble/chplib.wordpress.com/376/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/stumble/chplib.wordpress.com/376/\" /></a> <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/godigg/chplib.wordpress.com/376/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/digg/chplib.wordpress.com/376/\" /></a> <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/goreddit/chplib.wordpress.com/376/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/reddit/chplib.wordpress.com/376/\" /></a> <img alt=\"\" border=\"0\" src=\"http://stats.wordpress.com/b.gif?host=chplib.wordpress.com&amp;blog=9351306&amp;post=376&amp;subd=chplib&amp;ref=&amp;feed=1\" /></div>") (pubDate nil "Mon, 12 Oct 2009 16:42:37 +0000") (dc:creator nil "Neil Brown")) (item nil (title nil "Brent Yorgey: Call for submissions: Monad.Reader issue 15") (guid ((isPermalink . "false")) "http://byorgey.wordpress.com/?p=308") (link nil "http://byorgey.wordpress.com/2009/10/12/call-for-submissions-monad-reader-issue-15/") (description nil "<div class=\"snap_preview\"><br /><p>I&#8217;m excited to be <a href=\"http://article.gmane.org/gmane.comp.lang.haskell.cafe/64213/\">taking over the editorship</a> of the <a href=\"http://themonadreader.wordpress.com/\">Monad.Reader</a>.  I&#8217;ll be putting together Issue 15 in January&#8212;the <a href=\"http://themonadreader.wordpress.com/2009/10/11/call-for-copy-monad-reader-issue-15/\">deadline for submissions</a> will be <b>January 8, 2010</b>.  Please consider writing something!  You don&#8217;t need to be an expert; past articles have included things like tutorials, book reviews, new ideas, beginner perspectives, illustrations of nifty code, explanations of a new library or piece of software&#8230;  Collaboration is encouraged, too.  Have a great idea for an article but not sure you could pull it off for one reason or another?  Send an email to <a href=\"http://haskell.org/haskellwiki/Mailing_lists\">haskell-cafe@haskell.org</a> asking for a coauthor.  Writing an article is a great way to learn and to create a high-quality resource for others learning FP.</p>\n<p>If you plan to write something&#8212;or are considering it&#8212;let me know.  Submission guidelines can be found on the <a href=\"http://themonadreader.wordpress.com/contributing/\">Monad.Reader website</a>.</p>\n  <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gocomments/byorgey.wordpress.com/308/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/byorgey.wordpress.com/308/\" /></a> <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/godelicious/byorgey.wordpress.com/308/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/delicious/byorgey.wordpress.com/308/\" /></a> <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gostumble/byorgey.wordpress.com/308/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/stumble/byorgey.wordpress.com/308/\" /></a> <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/godigg/byorgey.wordpress.com/308/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/digg/byorgey.wordpress.com/308/\" /></a> <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/goreddit/byorgey.wordpress.com/308/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/reddit/byorgey.wordpress.com/308/\" /></a> <img alt=\"\" border=\"0\" src=\"http://stats.wordpress.com/b.gif?host=byorgey.wordpress.com&amp;blog=1152889&amp;post=308&amp;subd=byorgey&amp;ref=&amp;feed=1\" /></div>") (pubDate nil "Mon, 12 Oct 2009 14:40:25 +0000") (dc:creator nil "Brent")) (item nil (title nil "Brent Yorgey: diagrams 0.2.1, and future plans") (guid ((isPermalink . "false")) "http://byorgey.wordpress.com/?p=301") (link nil "http://byorgey.wordpress.com/2009/09/24/diagrams-0-2-1-and-future-plans/") (description nil "<div class=\"snap_preview\"><br /><p>First of all, I&#8217;ve just released version 0.2.1 of the Haskell <a href=\"http://hackage.haskell.org/package/diagrams\">diagrams library</a>.  This is a minor release which fixes a few bugs and adds a few new combinators, most notably a grid layout combinator contributed by Ganesh Sittampalam.  For more information and a full list of the features new to 0.2.1, see the <a href=\"http://code.haskell.org/diagrams/\">diagrams web page</a>.</p>\n<p>The real reason for the release, however, is to get existing new features out the door before gearing up for a planned major rewrite of the backend to use a constraint-solving layout engine.  This will allow for much greater elegance and flexibility, as well as a number of features (such as arrows connecting different parts of the diagram) which would be difficult or impossible to implement in the current framework.</p>\n<p>My ultimate vision is for the diagrams library to become a viable alternative to declarative drawing systems such as <a href=\"http://www.tug.org/metapost.html\">MetaPost</a> and <a href=\"http://asymptote.sourceforge.net/\">Asymptote</a>, with the distinct advantages that it will be</p>\n<ul>\n<li><i>purely</i> declarative, and</li>\n<li>an <i>embedded</i> DSL, providing the full power of Haskell and its ecosystem, as opposed to the ad-hoc specialized languages used by MetaPost and Asymptote.</li>\n</ul>\n<p>If this sounds exciting to you, I hope you&#8217;ll join me, either by trying out diagrams for your projects and providing feedback, or by contributing some code.  If you&#8217;re interested in helping with the rewrite itself, let me know; I also plan to set up a core/contrib model like that of <a href=\"http://xmonad.org\">xmonad</a>, so there should also be plenty of opportunities for contributing independent add-on modules which enhance the core functionality.</p>\n  <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gocomments/byorgey.wordpress.com/301/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/byorgey.wordpress.com/301/\" /></a> <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/godelicious/byorgey.wordpress.com/301/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/delicious/byorgey.wordpress.com/301/\" /></a> <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gostumble/byorgey.wordpress.com/301/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/stumble/byorgey.wordpress.com/301/\" /></a> <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/godigg/byorgey.wordpress.com/301/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/digg/byorgey.wordpress.com/301/\" /></a> <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/goreddit/byorgey.wordpress.com/301/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/reddit/byorgey.wordpress.com/301/\" /></a> <img alt=\"\" border=\"0\" src=\"http://stats.wordpress.com/b.gif?host=byorgey.wordpress.com&amp;blog=1152889&amp;post=301&amp;subd=byorgey&amp;ref=&amp;feed=1\" /></div>") (pubDate nil "Mon, 12 Oct 2009 14:32:56 +0000") (dc:creator nil "Brent")) (item nil (title nil "Don Stewart (dons): Self-optimizing data structures: using types to make lists faster") (guid ((isPermalink . "false")) "http://donsbot.wordpress.com/?p=259") (link nil "http://donsbot.wordpress.com/2009/10/11/self-optimizing-data-structures-using-types-to-make-lists-faster/") (description nil "<div class=\"snap_preview\"><br /><p>There are lots of optimization opportunities in a statically typed, purely functional language. This post describes an approach that improves the performance of off-the-shelf Haskell list functions by about 25% on average. The code is available as a drop-in <a href=\"http://hackage.haskell.org/packages/archive/adaptive-containers/0.3/doc/html/Data-Adaptive-List.html\">replacement for Data.List</a>.<img class=\"alignright size-full wp-image-406\" title=\"inkscape\" src=\"http://donsbot.files.wordpress.com/2009/10/inkscape.png?w=169&#038;h=143\" alt=\"inkscape\" width=\"169\" height=\"143\" /></p>\n<p><em>This is part of an ongoing series on high-performance Haskell programming. Related posts include <a href=\"http://donsbot.wordpress.com/2008/06/04/haskell-as-fast-as-c-working-at-a-high-altitude-for-low-level-performance/\">stream fusion for lists</a>, <a href=\"http://donsbot.wordpress.com/2009/03/09/evolving-faster-haskell-programs/\">programming the inliner</a>, <a href=\"http://donsbot.wordpress.com/2009/09/26/very-fast-scalable-mutable-maps-and-hashes-for-haskell/\">Judy arrays and Haskell</a>, <a href=\"http://donsbot.wordpress.com/2009/09/16/data-binary-performance-improvments-for-haskell-binary-parsing/\">making binary parsing faster</a> and <a href=\"http://donsbot.wordpress.com/2009/09/07/stream-fusion-for-haskell-arrays/\">applying stream fusion to arrays</a>.</em></p>\n<h3>Background</h3>\n<p>Statically typed, purely functional code is a sweet spot for optimization hackers. All that information available at compile time lets us write some pretty radical transformations, and know they are safe. <a href=\"http://donsbot.wordpress.com/2008/06/04/haskell-as-fast-as-c-working-at-a-high-altitude-for-low-level-performance/\">Stream fusion</a>, for example, relies on having type and effect information available statically, and uses that to make complexity-changing rewrites of your code. Clever algebraic transformations such as <a href=\"http://research.microsoft.com/en-us/um/people/simonpj/papers/spec-constr/index.htm\">call-pattern specialization</a> can make some pretty aggressive performance improvements. We can also make the runtime more efficient: by <a href=\"http://donsbot.wordpress.com/2009/09/03/parallel-programming-in-haskell-a-reading-list/\">introducing parallelism</a>, or again, exploiting type and effect information via <a href=\"http://research.microsoft.com/en-us/um/people/simonpj/papers/ptr-tag/index.htm\">pointer tagging.</a> All this is easier in a strongly, statically typed and pure setting &#8212; there&#8217;s just less stuff you have to worry about when doing the transformations.</p>\n<p>This post introduces an optimization technique based on types: self-optimizing polymorphic data types. When instantiated to a particular type, the code presented will generate both a custom, specialized data structure, and specialized functions over that type. The result is a general mechanism to improve the data density, and thus performance, of <a href=\"http://en.wikipedia.org/wiki/Type_polymorphism#Parametric_polymorphism\">parametrically polymorphic</a> data structures (where the same code operates generically on any type), such as lists, trees and finite maps. The general concept should be useful in any language with parametrically polymorphic types, and its implementation in Haskell, via class-associated data types is particularly elegant (requiring no compiler modification).</p>\n<h3>Polymorphism</h3>\n<p>Parametric polymorphism is a great programmer tool. It improves expressivity, by letting the programmer use the same code at any possible type, yet still retains type safety. For example, the list type is a polymorphic type, and the length function computes the length of any lists, no matter what the element type is.</p>\n<pre>-- The list type: either empty, or cons, holds any type 'a'\ndata [] a = [] | a : [a]\n\nPrelude&gt; :t length\nlength :: [a] -&gt; Int\n</pre>\n<p>The type system ensures that we can never write length to depend on a property of the element type, ensuring the code is maximally generic. It is simply not possible to mess with the elements of the list, given the type. Any attempt to do so will be a compiler error. This gives us some strong guarantees of abstraction, which we will take advantage of for optimization purposes.</p>\n<p>Such polymorphic types and functions are flexible, but we pay a cost for this. In order for the code to work on any type &#8216;a&#8217;, we must ensure that all values have a uniform representation. In most languages, this is via an object or closure &#8211; some reference to heap allocated data &#8211; and Haskell is no exception. All polymorphic components will be stored as pointers to heap allocated thunks.</p>\n<p>You can see this tradeoff most vividly in this picture of a list of pairs:</p>\n<p><a href=\"http://code.haskell.org/~dons/images/vacuum/tuple-list.png\"><img class=\"aligncenter\" title=\"Polymorphci list\" src=\"http://code.haskell.org/~dons/images/vacuum/tuple-list.png\" alt=\"\" width=\"683\" height=\"530\" /></a></p>\n<p>The uniform representation means that all values are represented via pointers to values, so the same code (e.g. map, filter) will work on any element type. But look .. we have cons nodes with pointers to pair nodes, which in turn point to integer nodes. (Also note the explicit sharing that is visible &#8211; the integer 1 and 2 are shared between multiple uses &#8211; made possible by purity).</p>\n<p>Such a structure is generic, but has poor data density. If the compiler could see that the integer nodes hold word-sized values, it could unpack them into their constructors. GHC can already unpack monomorphic types, removing all indirection and &#8216;thunkiness&#8217; associated with the data, via a manual <a href=\"http://www.haskell.org/ghc/docs/latest/html/users_guide/pragmas.html#unpack-pragma\">unpack pragma</a> at the data declaration site:</p>\n<pre>data PairIntInt = Pair {-# UNPACK #-} Int {-# UNPACK #-} Int\n</pre>\n<p>The Int values will now just be stored directly as word-sized fields in the Pair heap object. GHC can also infer the location of these pragmas if you use strict fields, and enable <a href=\"http://www.haskell.org/ghc/docs/latest/html/users_guide/options-optimise.html#id455084\">the -funbox-strict-fields optimization</a>:</p>\n<pre>data PairIntInt = Pair !Int !Int\n</pre>\n<p>However, this technique only works on monomorphic fields. It does not make sense for polymorphic fields, since they have variable size, and the compiler does not (except in very specific circumstances) have access to information about what types are in use.</p>\n<p>To unpack, say, all elements of a list of pairs, we need to instead generate a custom type:</p>\n<pre>data ListPairs  = Empty\n                | Cons !Int !Int ListPairs\n</pre>\n<p>This will happily represent each node with all elements stored locally, but is no longer polymorphic &#8211; so any functions have to be written specially for this type. The result however, is a much denser data representation:</p>\n<p><a href=\"http://code.haskell.org/~dons/images/vacuum/list-pair.png\"><img class=\"aligncenter\" title=\"Unpacked lists\" src=\"http://code.haskell.org/~dons/images/vacuum/list-pair.png\" alt=\"\" width=\"178\" height=\"394\" /></a></p>\n<p>Note that unpacking changes the evaluation strategy of the data. Those elements are now strict. The spine of the list is still lazy, however, so it is still just as useful a type for control structures and generators. GHC is remarkably flexible about the control the programmer has over the evaluation strategy (strict, lazy, mixture), so we&#8217;ll take advantage of that in this library to produce a spine-lazy, element strict list type that is able to do this unpacking and specialization for us. I encourage you to explore mixed strict and lazy structures as well.</p>\n<p>(An aside: these graphs were generated directly from the live Haskell heap via <a href=\"http://hackage.haskell.org/package/vacuum-cairo\">vacuum</a> &#8211; another great new tool for Haskell development. I&#8217;ve not written about this yet, but you can see <a href=\"http://www.youtube.com/watch?v=X4-212uMgy8\">a video of it in use</a> here. You can trace any Haskell heap structure to a graph representation, saving it as svg or png, or inspecting it live from the REPL).</p>\n<p>So, how do we teach GHC to do this transformation automatically, and how do we do that without sacrificing code reuse &#8212; I only want to write the list library once!</p>\n<h3>Class-associated data types</h3>\n<p>Our problem can be stated as:</p>\n<ul>\n<li>when we use a data structure at a particular element type, we require both custom functions, and a custom data type, to be generated</li>\n</ul>\n<p>This gives us an insight into how to produce a solution. <a href=\"http://en.wikipedia.org/wiki/Type_class\">Type classes in Haskell</a> are precisely the mechanism for having per-type functions. And a recent major extension to type classes has been the addition of class-associated data types (in their most general form, as <a href=\"http://www.haskell.org/haskellwiki/GHC/Type_families#What_are_type_families.3F\">type families)</a>.</p>\n<p>These two features together will allow us to specialize the container type at each element type, and generate specialized functions for each use, removing &#8220;<strong>the uniform-representation tax</strong>&#8221; and improving performance across the board.</p>\n<h3>Implementation</h3>\n<p>Where previously, the data type for lists is defined as:</p>\n<pre>data [] a = [] | a : [a]\n</pre>\n<p>we will instead associate the data type with a class, and leave the implementation to later: We also have to lift  the introduction and elimination forms for the type into the class (as we have no explicit constructors or pattern matching anymore):</p>\n<pre>class AdaptList a where\n     data List a</pre>\n<pre>     -- | The empty list\n     empty   :: List a\n\n     -- | Prepend a value onto a list\n     cons    :: a -&gt; List a -&gt; List a\n\n     -- | Is the list empty?\n     null    :: List a -&gt; Bool\n\n     -- | The first element of the list\n     head    :: List a -&gt; a\n\n     -- | The tail of the list\n     tail    :: List a -&gt; List a</pre>\n<p>Now we just need to write some functions over this abstract list type. First, conversion, to and from &#8220;real&#8221; lists:</p>\n<pre>-- | /O(n)/, convert an adaptive list to a regular list\ntoList :: AdaptList a =&gt; List a -&gt; [a]\ntoList xs\n | null xs   = []\n | otherwise = head xs : toList (tail xs)\n\n-- | /O(n)/, convert an adaptive list to a regular list\nfromList :: AdaptList a =&gt; [a] -&gt; List a\nfromList []     = empty\nfromList (x:xs) = x `cons` fromList xs</pre>\n<p>Note how we have to replace explicit pattern matching with calls to the elimination forms (head, tail, uncons), and constructors are replaced with calls into the type class methods (cons, empty). We will see that GHC is able to inline away all the type class dictionaries, resulting in specialized code when used at any specific type.</p>\n<p>Some general functions on lists: map, fold, filter:</p>\n<pre>-- | /O(n)/. 'map' @f xs@ is the list obtained by applying @f@ to each element\n-- of @xs@\n--\nmap :: (AdaptList a, AdaptList b) =&gt; (a -&gt; b) -&gt; List a -&gt; List b\nmap f as = go as\n where\n go xs\n   | null xs   = empty\n   | otherwise = f (head xs) `cons` go (tail xs)\n{-# INLINE map #-}</pre>\n<pre>-- | /O(n)/. 'foldl', applied to a binary operator, a starting value (typically\n-- the left-identity of the operator), and a list, reduces the list\n-- using the binary operator, from left to right\n--\nfoldl :: AdaptList b =&gt; (a -&gt; b -&gt; a) -&gt; a -&gt; List b -&gt; a\nfoldl f z0 xs0 = go z0 xs0\n where\n go !z xs\n   | null xs   = z\n   | otherwise = go (f z (head xs)) (tail xs)\n{-# INLINE foldl #-}\n\n-- | /O(n)/. 'filter', applied to a predicate and a list, returns the list of\n-- those elements that satisfy the predicate\n--\nfilter :: AdaptList a =&gt; (a -&gt; Bool) -&gt; List a -&gt; List a\nfilter p xs0\n | null xs0  = empty\n | otherwise = go xs0\n where\n  go xs\n   | null xs     = empty\n   | p x         = x `cons` go ys\n   | otherwise   =          go ys\n   where x  = head xs\n         ys = tail xs\n{-# INLINE filter #-}\n</pre>\n<p>These implementations are essentially identical to the Haskell98 Prelude definitions, but with all constructors replaced with type class methods, and pattern matching replaced with &#8220;smart deconstructors&#8221;. Also, all recursive functions are written in worker/wrapper style, so they may be inlined (crucial to enable the function to be specialized).</p>\n<p>So now we have an interface to lists and functions on them, but no concrete list type defined. We will do this via a class-associated type, with one instance for each element type we care about. This is a generic strategy, and so can be automated via some SYB-style generic code generation tricks. The result is a set of instances enumerating all the different specialized data representations statically:</p>\n<pre>instance AdaptList Int where\n\n data List Int = EmptyInt | ConsInt {-# UNPACK #-}!Int (List Int)\n\n empty = EmptyInt\n cons  = ConsInt\n\n null EmptyInt = True\n null _ = False\n\n head EmptyInt = errorEmptyList \"head\"\n head (ConsInt x _) = x\n\n tail EmptyInt = errorEmptyList \"tail\"\n tail (ConsInt _ x) = x\n</pre>\n<p>And so on for all the other types. Now, when we write a function on say, List Int, GHC will replace all our code with the specialized data type, where the Int elements are unpacked. All calls to the smart constructors and deconstructors will be replaced with the specialized versions as well.</p>\n<p>We should thus get denser, faster list types and functions.</p>\n<p>You can see <a href=\"http://hackage.haskell.org/package/adaptive-containers\">the full implementation here</a>, as well as the same technique applied to sums and products, and with the full list API filled out. I&#8217;m calling these &#8220;adaptive&#8221; data structures, as they adapt to a different shape based on how you use them.</p>\n<p>Let&#8217;s benchmark and see if things get any faster. As usual, I will use <a href=\"http://www.serpentine.com/blog/2009/09/29/criterion-a-new-benchmarking-library-for-haskell/\">criterion</a> to do the measurement and graphing. The best open source benchmarking library around &#8211; makes benchmarking fun, the way QuickCheck makes testing fun.</p>\n<h3>Benchmarks: map</h3>\n<p>In these benchmarks, I&#8217;m measuring the standard GHC 6.10 Data.List functions, and the base list data type, against the version on Hackage. In each case, I generate 100k random integers (using the <a href=\"http://hackage.haskell.org/package/mersenne-random\">mersenne-random generator</a>), build a list from those numbers, and measure the time to traverse the structure using each pair of functions. Criterion takes care of running the functions hundreds of times until meaningful data can be extracted. The execution time probability graphs are presented here. Note that they&#8217;re on different scales each time.</p>\n<p>So, the numbers. <strong>Specialized map is 34% faster</strong>. Mean goes from 31.9ms to 21.2ms. <strong>Garbage collection is reduced by 40%</strong> (which seems typical across the board for these functions.</p>\n<p>Regular Haskell list type and functions:</p>\n<p><img class=\"aligncenter size-full wp-image-394\" title=\"data.list.map-densities-800x200\" src=\"http://donsbot.files.wordpress.com/2009/10/data-list-map-densities-800x2001.png?w=700&#038;h=175\" alt=\"data.list.map-densities-800x200\" width=\"700\" height=\"175\" /></p>\n<p>Specializing list map::</p>\n<p><img class=\"aligncenter size-full wp-image-395\" title=\"data.adaptive.list.map-densities-800x200\" src=\"http://donsbot.files.wordpress.com/2009/10/data-adaptive-list-map-densities-800x2001.png?w=700&#038;h=175\" alt=\"data.adaptive.list.map-densities-800x200\" width=\"700\" height=\"175\" /></p>\n<p>Looking at the core, we see that when used at an Int type, we get a specialized loop with unboxed parameters generated (no additional un- or re-boxing is required to store values back into the data structure!). This is a transformation GHC can&#8217;t do automatically, due to the uniform representation requirement.</p>\n<p>Here&#8217;s the core for &#8216;adaptive sum&#8217;, taken from <a href=\"http://hackage.haskell.org/package/ghc-core\">ghc-core</a>,</p>\n<pre>$wgo :: Data.Adaptive.List.List Int -&gt; Int# -&gt; Int#\n$wgo xs n = case xs of\n    EmptyInt     -&gt; n\n    ConsInt y ys -&gt; $wgo ys (+# n y)\n</pre>\n<p>Compared to regular lists, we see the additional unboxing of the list parameter that is required:</p>\n<pre>    $wlgo :: Int# -&gt; [Int] -&gt; Int#\n    $wlgo n xs = case xs of\n        []     -&gt; n\n        (y:ys) -&gt; case y of\n                     I# y# -&gt; $wlgo (+# n y#) ys\n</pre>\n<h3>Benchmarks: filter</h3>\n<p><strong>Filter is 15% faster</strong>. Mean goes from 42.5ms to 36.2ms.</p>\n<p><img class=\"aligncenter size-full wp-image-396\" title=\"data.list.filter-densities-800x200\" src=\"http://donsbot.files.wordpress.com/2009/10/data-list-filter-densities-800x200.png?w=700&#038;h=175\" alt=\"data.list.filter-densities-800x200\" width=\"700\" height=\"175\" />Specialized version:</p>\n<h3><img class=\"aligncenter size-full wp-image-397\" title=\"data.adaptive.list.filter-densities-800x200\" src=\"http://donsbot.files.wordpress.com/2009/10/data-adaptive-list-filter-densities-800x200.png?w=700&#038;h=175\" alt=\"data.adaptive.list.filter-densities-800x200\" width=\"700\" height=\"175\" />Benchmarks: foldl</h3>\n<p><strong>Reducing a list is 23% faster</strong> (sum, length, maximum, product, minimum). Mean goes from 11.2ms to 8.7ms.</p>\n<p><img class=\"aligncenter size-full wp-image-398\" title=\"data.list.foldl'-densities-800x200\" src=\"http://donsbot.files.wordpress.com/2009/10/data-list-foldl-densities-800x200.png?w=700&#038;h=175\" alt=\"data.list.foldl'-densities-800x200\" width=\"700\" height=\"175\" />and when specialized:</p>\n<p><img class=\"aligncenter size-full wp-image-399\" title=\"data.adaptive.list.foldl'-densities-800x200\" src=\"http://donsbot.files.wordpress.com/2009/10/data-adaptive-list-foldl-densities-800x200.png?w=700&#038;h=175\" alt=\"data.adaptive.list.foldl'-densities-800x200\" width=\"700\" height=\"175\" /></p>\n<h3>Notes</h3>\n<p>One of the obivous questions is: what about fusion? <a href=\"http://www.cse.unsw.edu.au/~dons/papers/CLS07.html\">Stream fusion</a> is an entirely different automatic optimization that optimizes multiple traversals over a data structure into a single, more complicated traversal, dramatically improving time and space usage. The data structures and functions shown in this post complement fusion well &#8212; we can still fuse loops, on speciazlied data and functions, removing unnecessary traversals. Stream fusion also enables opportunities for specialization, which will no longer be of much use, as our data types have specialized themselves.</p>\n<p>We also lose sharing in this approach. Sorry, but your Int fields will be copied by value. The approach makes most sense for small atomic types anyway, which may be unpacked, and these are precisely the types where sharing is unlikely to be helpful.</p>\n<p>Essentially, we now treat the list type and constructors as an abstract <strong>view</strong> on to some custom, specialized representation. We may be able to regain pattern matching on the abstract structures via GHC&#8217;s <a href=\"http://www.haskell.org/ghc/docs/latest/html/users_guide/syntax-extns.html#view-patterns\">view patterns</a>. I&#8217;ve not tried this yet, but it looks easy enough.</p>\n<p>The list implementation is a useful proof of concept &#8212; you can use it in your list-heavy programs today if you want. The most promising direction, though, in my view, is for container types such as IntMap and Sequence, where already the constructors are abstract, and there&#8217;s a small set of primitive operations, and we really care about data density. There may be some big wins for coalescing of nodes in IntMap, for example.</p>\n<h3>Results</h3>\n<p>In summary, we have a general approach to allow, for the first time, uniform specialization of both parametrically polymorphic functions and data, resulting in good speedups with only library modifications required. The Haskell type system, via class-associated type classes, is sufficiently expressive to describe abstract and concrete representation mappings, and the GHC optimizer (particular the inliner, and the unpacking pragma) are enough to precisely control the layout of data, along with the generation of custom functions for each type. The approach should give speedups in any language with a uniform representation policy, though it is certainly easier when you don&#8217;t need to modify the compiler.The approach here is very specific, and may be subsumed by more general global information optimization techniques, such as super compilation (coming to GHC). We also rely on the magic of the GHC Inliner to remove all traces of type class dictionaries.</p>\n<p>The next steps will be to combine this with list fusion, to have the fastest lazy lists I know of, and to try it out on IntMap and friends, to yield faster polymorphic container types.</p>\n<p>The result is satisfying: your Haskell code goes faster, while remaining high level and pure.</p>\n<h3>Further reading</h3>\n<p>This is the first time I&#8217;ve written down this approach, but the idea has been kicking around for a few months. You can see my <a href=\"http://www.scribd.com/doc/19637058/Improving-Data-Structures\">WG2.8 talk</a> on the subject here, and a video of my talking about <a href=\"http://vimeo.com/4258084\">initial experiments</a> in this direction at the Utrecht hackathon. I&#8217;d be interested if readers know of any related work for this joint-specialization of data and function code, to eliminate the indirection cost of parametric polymorphism.</p>\n Tagged: design, performance, research, types <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gocomments/donsbot.wordpress.com/259/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/donsbot.wordpress.com/259/\" /></a> <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/godelicious/donsbot.wordpress.com/259/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/delicious/donsbot.wordpress.com/259/\" /></a> <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gostumble/donsbot.wordpress.com/259/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/stumble/donsbot.wordpress.com/259/\" /></a> <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/godigg/donsbot.wordpress.com/259/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/digg/donsbot.wordpress.com/259/\" /></a> <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/goreddit/donsbot.wordpress.com/259/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/reddit/donsbot.wordpress.com/259/\" /></a> <img alt=\"\" border=\"0\" src=\"http://stats.wordpress.com/b.gif?host=donsbot.wordpress.com&amp;blog=6244403&amp;post=259&amp;subd=donsbot&amp;ref=&amp;feed=1\" /></div>") (pubDate nil "Sun, 11 Oct 2009 22:38:31 +0000") (dc:creator nil "dons00")) (item nil (title nil "Martijn van Steenbergen: Context Synonyms") (guid ((isPermalink . "false")) "http://martijn.van.steenbergen.nl/journal/?p=416") (link nil "http://martijn.van.steenbergen.nl/journal/2009/10/11/context-synonyms/") (description nil "<p>Sometimes a function&#8217;s type class context grows so big that you would like to group the various type class constraints together and give it a sensible name, especially if that big context is used many times in your module. Consider for example the <code>fold</code> function from module <code><a href=\"http://hackage.haskell.org/packages/archive/multirec/0.4/doc/html/Generics-MultiRec-FoldAlgK.html\">Generics.MultiRec.FoldAlgK</a></code>:</p>\n<pre>\nfold :: (Fam phi, HFunctor phi (PF phi), Fold (PF phi)) => Algebra phi r -> phi ix -> ix -> r\n</pre>\n<p>Context synonyms aim to make it possible to give long contexts a name and reuse it throughout modules. Using a context synonym, the example above can be rewritten to:</p>\n<pre>\ncontext FoldFam phi = (Fam phi, HFunctor phi (PF phi), Fold (PF phi))\nfold :: FoldFam phi => Algebra phi r -> phi ix -> ix -> r\n</pre>\n<p>Note that context synonyms are reminiscent of <a href=\"http://repetae.net/recent/out/classalias.html\">class aliases</a>, but that proposal is a lot more involved than this one. Here we are only aiming to give long contexts a convenient short name.</p>\n<p>During the <a href=\"http://www.haskell.org/haskellwiki/Hac5\">fifth Haskell Hackathon</a>, a team of programmers (including myself) set out to implement an extension to GHC to make exactly this possible. We were aware of a trick that makes context synonyms already somewhat possible: create a new class and make the right-hand side of the context synonym the superclass constraints of the new type class:</p>\n<pre>\nclass    (Fam phi, HFunctor phi (PF phi), Fold (PF phi)) => FoldFam phi\n</pre>\n<p>The problem with this approach, however, is that types for which you would like to use the <code>FoldFam</code> constraint are not automatically instances of this new class. Only last week it dawned on me that you can remedy this by supplying one big general instance that makes <em>every</em> type an instance:</p>\n<pre>\ninstance (Fam phi, HFunctor phi (PF phi), Fold (PF phi)) => FoldFam phi\n</pre>\n<p>Such an instance is sometimes used as in <code>instance Monad f => Applicative f where ...</code>, but this doesn&#8217;t have the desired effect in Haskell. Our <code>FoldFam</code> instance, however, is <em>exactly</em> what we want: match any type with that instance, then check the constraints. This also means we cannot add any more specific instances, which is also what we want.</p>\n<p>So it seems we were trying to implement a feature that already sort of exists. To make things worse, Erik pointed out that this use of type classes and instances is documented literally in the <a href=\"http://www.haskell.org/ghc/docs/6.0/html/users_guide/type-extensions.html#UNDECIDABLE-INSTANCES\">GHC docs</a> as old as version 6.0! If only we had known during the Hackathon.</p>") (pubDate nil "Sun, 11 Oct 2009 16:49:49 +0000") (dc:creator nil "Martijn")) (item nil (title nil "Magnus Therning: Twitter Weekly Updates for 2009-10-11") (guid ((isPermalink . "false")) "http://therning.org/magnus/archives/758") (link nil "http://therning.org/magnus/archives/758") (description nil "<ul class=\"aktt_tweet_digest\">\n    <li>Ha! Twitter Tools did put together a weekly &quot;digest&quot;. Great. <a href=\"http://twitter.com/magthe/statuses/4624834955\" class=\"aktt_tweet_time\">#</a></li>\n    <li>Aargh! I suspect haskell has damaged me permanently. <a href=\"http://twitter.com/magthe/statuses/4636237066\" class=\"aktt_tweet_time\">#</a></li>\n    <li>Writing Epiphany extensions in Vala is all about jumping through hoops to avoid C. <a href=\"http://twitter.com/magthe/statuses/4638392706\" class=\"aktt_tweet_time\">#</a></li>\n    <li>Nice to see that dataenc is getting used by hi-profile Haskell projects&#8230; just received Q from darcs devs re requirements. <a href=\"http://twitter.com/magthe/statuses/4682216551\" class=\"aktt_tweet_time\">#</a></li>\n    <li>Guide to Viv's language: yanna = lion, moomi = hippo <img src=\"http://therning.org/magnus/wp-includes/images/smilies/icon_smile.gif\" alt=\":-)\" class=\"wp-smiley\" />  <a href=\"http://twitter.com/magthe/statuses/4702951600\" class=\"aktt_tweet_time\">#</a></li>\n    <li>Ah, my Google Wave invite just arrived. That'll make for some fun today. <a href=\"http://twitter.com/magthe/statuses/4728198039\" class=\"aktt_tweet_time\">#</a></li>\n    <li>Where else but in Britain? <a href=\"http://tinyurl.com/y9teum7\" rel=\"nofollow\">http://tinyurl.com/y9teum7</a> <a href=\"http://twitter.com/magthe/statuses/4728347314\" class=\"aktt_tweet_time\">#</a></li>\n    <li>Vim could really do with an outliner that is powerful AND easy to install. <a href=\"http://twitter.com/magthe/statuses/4736557179\" class=\"aktt_tweet_time\">#</a></li>\n    <li>Thanks El Siglirismo: <a href=\"http://tinyurl.com/yll25m8\" rel=\"nofollow\">http://tinyurl.com/yll25m8</a> <a href=\"http://twitter.com/magthe/statuses/4757257640\" class=\"aktt_tweet_time\">#</a></li>\n    <li>Enjoying Micro Men, thanks @<a href=\"http://twitter.com/jsk\" class=\"aktt_username\">jsk</a> <a href=\"http://twitter.com/magthe/statuses/4768836648\" class=\"aktt_tweet_time\">#</a></li>\n    <li>Enjoying Swedish Fish and assembling IEKA furniture. Feeling VERY Swedish today. <a href=\"http://twitter.com/magthe/statuses/4781790633\" class=\"aktt_tweet_time\">#</a></li>\n    <li>Electrical tools greatly improves the IKEA post-shopping experience. <a href=\"http://twitter.com/magthe/statuses/4783898910\" class=\"aktt_tweet_time\">#</a></li>\n</ul>\n\n<p class=\"aktt_credit\">Powered by <a href=\"http://alexking.org/projects/wordpress\">Twitter Tools</a></p>\n<div class=\"bookmarkify\"><a name=\"bookmarkify\"></a><div class=\"linkbuttons\"><a href=\"http://digg.com/submit?phase=2&amp;url=http://therning.org/magnus/archives/758&amp;title=Twitter Weekly Updates for 2009-10-11\" title=\"Digg It!\"><img src=\"http://therning.org/magnus/wp-content/plugins/bookmarkify/digg.png\" alt=\"[Digg] \" /></a> <a href=\"http://reddit.com/submit?url=http://therning.org/magnus/archives/758&amp;title=Twitter Weekly Updates for 2009-10-11\" title=\"Reddit\"><img src=\"http://therning.org/magnus/wp-content/plugins/bookmarkify/reddit.png\" alt=\"[Reddit] \" /></a>  <a title=\"See more bookmark and sharing options...\" href=\"http://therning.org/magnus/archives/758#bookmarkify\" rel=\"nofollow\"><small>More&nbsp;&raquo;</small></a></div></div>") (pubDate nil "Sun, 11 Oct 2009 14:59:00 +0000") (dc:creator nil "Magnus")) (item nil (title nil "Joachim Breitner: arbtt: Now with Documentation") (guid ((isPermalink . "false")) "https://www.joachim-breitner.de/blog/archives/342-guid.html") (link nil "https://www.joachim-breitner.de/blog/archives/342-arbtt-Now-with-Documentation.html") (description nil "<p>Yesterday I did what Free Software authors supposedly don’t do. I wrote documentation. In fact, I had a relatively detailed README already, but I thought this would be a good opportunity to create a more elaborate documentation, using the ubiquitous  DocBook. You can read the <a href=\"http://darcs.nomeata.de/arbtt/doc/users_guide/\">HTML documentation for arbtt</a> online, where it’s automatically updated when I push to the <a href=\"http://darcs.nomeata.de/arbtt\">darcs repository</a>. You can see, I use the same CSS file that most Haskell-related DocBook documentation seems to use.</p><p>One motivation to use <a href=\"http://www.docbook.org/\">DocBook</a> was that I can extract manpages from it, which should be present if I package arbtt for Debian. I was about to complain that references from the manpages to other part of the documentation can not work sensibly, but using the <a href=\"http://www.sagehill.net/docbookxsl/Profiling.html\">“profiling” feature</a> of docbook-xsl, I can replace them by a textual reference to the user’s manual if the file is processed for manpage output. Have a look at <a href=\"http://darcs.nomeata.de/cgi-bin/darcsweb.cgi?r=arbtt;a=commitdiff;h=20091011095133-23c07-07121a9d8fc2fa653342b367227a6d464e0dc437.gz\">my changes for that</a> if you want to know how it works.</p><p>For some reason, the &lt;refentry&gt;-tags that make up the manpages are split to separate files when generating chunked HTML output, but they do not appear in the table of contents. You have to find a spot in the text where they are linked, as they are now in the section “<a href=\"http://darcs.nomeata.de/arbtt/doc/users_guide/references.html\">Program references</a>”, to find them. This is unfortunate, I expect that a few readers might miss this important part of the documentation. Am I doing something wrong?</p><p>For the configuration file, I put an <a href=\"http://darcs.nomeata.de/arbtt/doc/users_guide/configuration.html#grammar\">EBNF-style grammar description</a> in the documentation. There is a special <a href=\"http://www.docbook.org/schemas/ebnf.html\">DocBook module</a> for that, but I’m not satisfied with it. On the right hand side of production rules, it has only special support for nonterminals, but no tags to semantically mark up choice, repetition etc. I followed the lead found at the <a href=\"http://yaml.org/spec/1.2/spec.dbk\">YAML specification</a> and put &lt;quote&gt;-Tags around literal parts of the grammar, but this is not valid according to the DocBook DTD. Speaking of the DTD: I guess since the EBNF-stuff is just a module, the tag &lt;productionset&gt; is not a valid content of &lt;figure&gt;. So, if I choose to use the EBNF module in a sensible way, I will not have a valid DocBook file.</p><p>All in all, I am satisified with the result. Especially that nobody can say any more “I like your program, but I can’t contribute, because I don’t know Haskell”. Just improve the docs! :-)</p>") (pubDate nil "Sun, 11 Oct 2009 10:01:00 +0000") (dc:creator nil "mail@joachim-breitner.de (nomeata)")) (item nil (title nil "Dan Piponi (sigfpe): Vectors, Invariance, and Math APIs") (guid ((isPermalink . "false")) "tag:blogger.com,1999:blog-11295132.post-3880470744869663438") (link nil "http://blog.sigfpe.com/2009/10/vectors-invariance-and-math-apis.html") (description nil "Many software libraries, especially those for physics or 3D graphics, are equipped with tools for working with vectors. I'd like to point out how in these libraries the functions for manipulating vectors sometimes have special and useful properties that make it worthwhile to separate them out into their own interface.<br /><br /><h3>Two types of Function</h3><br />Suppose an object of mass m is moving with velocity <b>v</b> and we apply force <b>f</b> to it for time t. What is the final velocity? This is given by g:<br /><blockquote><br />g(m,t,<b>f</b>,<b>v</b>) = <b>v</b>+(t/m)*<b>f</b><br /></blockquote><br />Now suppose that R is a rotation operation, typically represented by a matrix. What happens if we apply it to both of the vector arguments of g? <br /><blockquote><br />g(m,t,R<b>f</b>,R<b>v</b>) = R<b>v</b>+(t/m)*R<b>f</b> = Rg(m,t,<b>f</b>,<b>v</b>)<br /></blockquote><br />In other words, rotating the vector arguments is the same as rotating the vector result.<br /><br />Another example: Consider the function that gives the force on an electric charge as a function of its velocity and the magnetic field:<br /><blockquote><br />f(e,<b>v</b>,<b>B</b>) = e<b>v</b>&times;<b>B</b><br /></blockquote><br />It's essentially just the cross product. If you rotate both of the arguments to the cross product then the result is <a href=\"http://en.wikipedia.org/wiki/Cross_product#Algebraic_properties\">rotated</a> too. The result is that<br /><blockquote><br />f(e,R<b>v</b>,R<b>B</b>) = Rf(e,<b>v</b>,<b>B</b>)<br /></blockquote><br /><br />On the other hand, many 3D APIs come with a function to perform componentwise multiplication of vectors. Write vectors <b>x</b> as triples (x<sub>0</sub>,x<sub>1</sub>,x<sub>2</sub>), and so on, we can write such a function as:<br /><blockquote><br />f(<b>x</b>,<b>y</b>) = (x<sub>0</sub>y<sub>0</sub>,x<sub>1</sub>y<sub>1</sub>,x<sub>2</sub>y<sub>2</sub>)<br /></blockquote><br />You can show that this doesn't have a similar property.<br /><br /><h3>Rotational Invariance</h3><br />To make things easy, let's restrict ourselves to functions of scalars and vectors. And when I say vector, I'm talking strictly about vectors representing magnitude and direction, but not positions. Examples of such vectors are velocities, accelerations, angular velocities, magnetic fields, and the difference between two positions. A function is said to be <i>rotationally invariant</i> if applying a rotation R to all of its vector arguments results in the same thing as applying R to all of the vectors in its value. This allows you to have a function that returns multiple vectors, like a tuple or array.<br /><br />The first two functions I described above were rotationally invariant but the third wasn't. Notice how the first two examples also described physical processes. This is the important point: as far as we know, all of the laws of physics are <a href=\"http://en.wikipedia.org/wiki/Rotational_invariance\">rotationally invariant</a>. If you write down an equation describing a physical process then replacing all of the vectors in it by their rotated counterparts must also result in a valid equation. So if you're describing a physical process with a computer program, and you end up with a function that isn't rotationally invariant, you've made a mistake somewhere.<br /><br /><h3>Vector APIs</h3><br />Vector APIs frequently come with all manner of functions. Some have the invariance property and some don't. If you write code that you'd like to be rotationally invariant, but it turns out that it isn't, you usually have to examine the code to find the bug. But if you separate the invariant functions into their own interface, and then write code using just that interface, the code is guaranteed to be invariant. If your programming language has reasonably strict types then you may even be able to arrange things so that the type signature of the function alone is enough to tell you that the function is invariant. In effect you are able to make the compiler prove that your function is invariant.<br /><br />(As an aside, this is an example of why a good type system does much more than you might at first have guessed. They don't just stop you making typos, they can do things like prove that your programs satisfy certain geometrical properties.)<br /><br />So what functions would you have in such an API? Among the essential rotationally invariant functions are:<br /><br />1. Multiplcation of a vector by a scalar<br />2. Addition of vectors<br />3. Dot product<br />4. Cross product<br /><br />In terms of these you can build functions such as<br /><br />1. Vector length<br />2. Vector normalization<br />3. Rotation of one vector around an axis specified by another vector<br />4. Linear interpolation between vectors<br /><br />What kinds of functions would be excluded?<br /><br />1. Constructing a vector from three scalars, ie. f(x,y,z) = (x,y,z).<br />2. Constructing a vector form a single scalar, ie. f(x) = (x,x,x).<br />3. Extracting the ith component of a vector, ie. f(i,(x<sub>0</sub>,x<sub>1</sub>,x<sub>2</sub>)) = x<sub>i</sub>.<br />4. Pointwise multiplication of vectors.<br />5. Computing the elementwise cosine of a vector.<br /><br />On seeing the first excluded example above you might ask \"how am I supposed to construct vectors?\" The point is that you don't program exclusively with an invariant API, you simply use it whenever you need to prove invariance.<br /><br /><h3>Coordinate System Invariance</h3><br />One purpose of writing to a particular interface is that it allows the API to hide implementation details from the user. Using a rotationally invariant API has a role to serve here. For example, many 3D renderers allow you to write <a href=\"http://en.wikipedia.org/wiki/Shader\">shaders</a>. These are essentially functions that compute the colour of a piece of geometry that needs rendering. You write a shader and the renderer then calls your shader as needed when a fragment of geometry passes through its pipeline. Frequently these are used for lighting calculations but there are all kinds of other things that may be computed in shaders.<br /><br />In a 3D renderer different parts of the computation are often performed in different coordinate systems. For example it may be convenient to perform lighting calculations in a coordinate system oriented with the direction of the light. But the author of a renderer doesn't want to be committed to a particular choice. In order to do this, it is essential to be able to write shaders that are agnostic about which coordinate system is being used. If we work with rotationally invariant functions, our shaders are guaranteed to be agnostic in this way (assuming that the only kind of coordinate change that takes place is a rotation).<br /><br /><h3>Lots More Types</h3><br />I've concentrated on just one type of invariance, rotational invariance. If we consider more types of invariance then more types of interface naturally emerge. It would take too long to cover all of the details here so I'm just going to briefly sketch the beginnings of the more general case. So just read this section as a list of pointers to further reading.<br /><br />For example, some functions are invariant under translations. These can be thoght of as functions of points in space. If we allow more general linear transformations then we find that some common functions transform 'oppositely' to vectors. In particular, normals to surfaces transform in this way. In fact, Pixar's <a href=\"http://en.wikipedia.org/wiki/RenderMan_Interface_Specification\">Renderman</a> has three distinct types, vectors, points and normals that captures these different invariances.<br /><br />If we go back to rotations again but now extend these by allowing reflections then we find an interesting new phenomenon. For example, consider the result of reflecting in the x-y-plane, followed by reflecting in the y-z-plane followed by reflecting in the x-z-plane. This simply multiplies vectors by -1. Dot product is invariant under this: (-<b>x</b>)&middot;(-<b>y</b>)=<b>x</b>&middot;<b>y</b>. But cross product isn't because (-<b>x</b>)&times;(-<b>y</b>)=<b>x</b>&times;<b>y</b>. Even though the cross product is apparently vector, it doesn't get multiplied by -1. When we start considering invariance under reflection we find that some vectors behave differently. These are the <a href=\"http://en.wikipedia.org/wiki/Pseudovector\">pseudovectors</a> and in effect they have their own separate type and interface. Interestingly, nature likes to keep pseudovectors and vectors separate except in <a href=\"http://en.wikipedia.org/wiki/Parity_%28physics%29\">parity violating</a> phenomena. There are even <a href=\"http://en.wikipedia.org/wiki/Pseudoscalar\">pseudoscalars</a>.<br /><br />Incidentally, if you consider invariance under scaling you're led to the idea of encoding <a href=\"http://en.wikipedia.org/wiki/Dimensional_analysis\">dimensions</a> in your <a href=\"http://research.sun.com/projects/plrg/Fortress/overview.html\">types</a>.<br /><br /><h3>Conclusion</h3><br />If you're writing a vector API think about the invariance properties that your functions may have. If any are useful then it may be worth placing those in a separate interface. The more distinct types you have, the more properties you can make your compiler prove. Obviously this needs to be balanced against practicality, complexity for users and what you actually need. To some extent, many existing APIs make some of these distinctions with varying degrees of strictness. The main point I want to make clear is that these distinctions are based on <i>invariance</i> properties, something that not all developers of such APIs are aware of.<br /><br />At some point I hope to return to this topic and enumerate all of the common vector-like types in a single framework. Unfortunately it's a big topic and I've only been able to scratch the surface here. In particular there are some subtle interplays between dimensions and types.<br /><br />On a deeper level, I think there must be some type theoretical framework in which these invariance properties are <a href=\"http://homepages.inf.ed.ac.uk/wadler/topics/parametricity.html\">free theorems</a>.<br /><br />Update: I believe some of this material is covered in Jimm Blinn's <a href=\"http://portal.acm.org/citation.cfm?id=1069625\">Vectors and Geometry and Objects, Oh My!</a>, but I don't have access to that. I suspect that there is one big difference in my presentation: I'm not so interested here in vectors (or normals or whatever) in themselves but as defining interfaces to functions with invariance properties. Like the way category theorists shift the focus from objects to arrows. It makes a difference because it immediately gives theorems that our code is guaranteed to satisfy. It's the invariance property of the cross product (say) that is useful here, not the fact that the components of a vector transform a certain way when we change coordinates (because I might not even want to refer to coordinates in my code).<br /><br /><h3>Example Code</h3><br /><br />To show that I'm talking about something very simple, but still powerful, here's some Haskell code:<br /><br /><pre><br />&gt; data Triple = T Float Float Float deriving Show<br /><br />&gt; class Vector v where<br />&gt;   (.+) :: v -&gt; v -&gt; v<br />&gt;   (.*) :: Float -&gt; v -&gt; v<br />&gt;   dot :: v -&gt; v -&gt; Float<br />&gt;   cross :: v -&gt; v -&gt; v<br /><br />&gt; instance Vector Triple where<br />&gt;   T x y z .+ T u v w = T (x+u) (y+v) (z+w)<br />&gt;   a .* T x y z = T (a*x) (a*y) (a*z)<br />&gt;   dot (T x y z) (T u v w) = x*u+y*v+z*w<br />&gt;   cross (T x y z) (T u v w) = T<br />&gt;       (y*w-v*z)<br />&gt;       (z*u-x*w)<br />&gt;       (x*v-y*u)<br /><br /></pre><br />You can freely apply the four primitive functions to elements of type <tt>Triple</tt> but if you have a function of, say, signature<br /><br /><pre><br />&gt; f :: Vector v =&gt; (v,v,Float) -&gt; [(v,v)]<br /><br /></pre><br />you are guaranteed it is invariant.<div class=\"blogger-post-footer\"><img width=\"1\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/11295132-3880470744869663438?l=blog.sigfpe.com\" /></div>") (pubDate nil "Sun, 11 Oct 2009 09:17:37 +0000") (dc:creator nil "sigfpe (noreply@blogger.com)")) (item nil (title nil "Creighton Hogg: How to teach Category Theory?") (guid ((isPermalink . "false")) "tag:blogger.com,1999:blog-2615156186192493130.post-7742885174345324752") (link nil "http://abstractabsurd.blogspot.com/2009/10/how-to-teach-category-theory.html") (description nil "So I'm teaching an intro to category theory course this fall at Portland State, my new place of employment.  <div><br /></div><div>Now, I think it's going alright.  I have only 6 people in on this class, including one professor, but I imagine that if I teach it again in the future and advertise it a bit harder that there will be more.</div><div><br /></div><div>It's been an interesting experience, though, because I've realized one of the big problems with trying to explain category theory:  it's too young a field.  We have all the definitions, but none of the metaphors.  There's no coherent narrative to give you intuition.  \"Categories for the Working Mathematician\", one of my all time favorite books, cheats pretty seriously on this front.  It never gives a basic vocabulary to use to <i>describe</i> any of these structures, it just gives so many examples from other areas of math that you start to build an intuition; however, you have almost no words with which to explain this intuition.</div><div><br /></div><div>I was inspired to write more about this because of a thread on <a href=\"http://www.reddit.com/r/haskell/comments/9ski4/a_more_approachable_approach_to_category_theory/\">reddit</a>.  I strongly disagree with the sentiment that one should be able to explain the concepts of category theory in terms of functional programming.  Some ideas in category theory- such as representable functors, adjoints, hom-sets, topoi - are general enough that any attempts to squash them into Haskell code is simplifying to the point of confusion.  An example of this is Dan Piponi's old post on the <a href=\"http://blog.sigfpe.com/2006/11/yoneda-lemma.html\">Yoneda lemma</a>.  While it's good and gives intuition, it's also a bit of a lie- the Haskell arrow (->) is not actually a hom-set and Yoneda is all about the relation between hom-sets and natural transformations that allows you to embed any category C into the category of functors from C to Set, a category with much richer logical structure.  As much as the analogy to Haskell helps, I think it hurts by making the big, general, picture harder to see.</div><div><br /></div><div>So is the solution to suck it up and just bang your head against Mac Lane, never thinking about how it relates to code?  Of course not!  Let's take a slight detour, first, before talking about what to do.</div><div><br /></div><div>So Paul Graham has this famous essay - famous enough I don't even see a point to linking it - about \"Blub programmers\" and how they're blind to the powers of better tools because they only know Blub.  It probably wasn't Graham's intent, but this essay is usually referenced by language evangelists to explain why some programmer they talk to isn't instantly willing to adopt their favorite language despite how awesome it is.  It's a seductive explanation.  The people who disagree with them don't \"get it\" or just aren't trying.</div><div><br /></div><div>The more likely reason?  They're terrible at explaining why their language is good.</div><div><br /></div><div>When I was a grad student in physics, most of the grad students (myself included, much to my shame) joked about how dumb all the pre-med students were and how they never wanted to do any work, because that was the most convenient explanation for why there were so many complaints about how hard &amp; confusing the labs, lectures, etc. were.</div><div><br /></div><div>The more likely reason?  We were terrible at explaining physics.</div><div><br /></div><div>That brings me back to the course I'm teaching.  I'm spending the majority of my time trying to figure out real metaphors for explaining category theory, especially with respect to its uses in Computer Science.  </div><div><br /></div><div>So far, the basic story I'm going with is that category theory is about \"modeling structures\".  Functors are about instances of models in a target category.  Natural transformations are ways to move between two models in a \"coherent\" fashion.  I'm still fleshing out this language, and I don't know how terribly helpful it will be at the end of the day, but I'll be cleaning up and releasing my notes at the end of the term as one long pdf.  The point is that there's still a lot of programmers, computer scientists, and even mathematicians that don't see category theory for the beautiful foundational math I see.  Now, it's possible that they're all stupid or don't want to work.</div><div><br /></div><div>The more likely reason?</div><div class=\"blogger-post-footer\"><img width=\"1\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/2615156186192493130-7742885174345324752?l=abstractabsurd.blogspot.com\" /></div>") (pubDate nil "Sun, 11 Oct 2009 00:06:00 +0000") (dc:creator nil "noreply@blogger.com (Creighton Hogg)")) (item nil (title nil "Haskell Weekly News: Haskell Weekly News: October 10, 2009") (guid ((isPermalink . "false")) "http://sequence.complete.org/446 at http://sequence.complete.org") (link nil "http://sequence.complete.org/hwn/20091010") (description nil "Haskell Weekly News: October 10, 2009\n<p>Welcome to issue 135 of HWN, a newsletter covering\n   developments in the <a href=\"http://haskell.org/\">Haskell</a> community.</p>\n<p>What with Don Stewart's <a href=\"http://www.haskell.org/pipermail/haskell-cafe/2009-October/067203.html\">call</a> to <a href=\"http://www.reddit.com/r/haskell/comments/9qk54/haskell_should_own_the_edsl_space_a_call_to_arms/\">arms</a>\nto lead Haskell to conquest over (E)DSL-land, I've once again tried\nto highlight discussion of EDSL's this week. Fortunately, it was\nactually more difficult choosing what _not_ to include this week,\nsince there was so much discussion about DSLs and Syntax extensions\n(a related notion, in my opinion). Also, this week Bryan O'Sullivan\nput his Criterion Library to good use on the `text` package, leading to <a href=\"http://www.serpentine.com/blog/2009/10/09/announcing-a-major-revision-of-the-haskell-text-library/\">code</a>\n\nwhich is more than ten times faster than before! With all this fantastic news,\nI won't hold you up any longer, Haskellers, the Haskell Weekly News!</p>\n<h4>Announcements</h4> <p><em>CfPart: FMICS 2009, 2-3 November 2009, Final\nCall</em>. FMICS 2009 workshop chair\n   <a href=\"http://article.gmane.org/gmane.comp.lang.haskell.general/17555\">announced</a>\n   the final call for particpaction for FMICS 2009</p>\n<p><em>ICFP videos now available</em>. Wouter Swierstra\n   <a href=\"http://article.gmane.org/gmane.comp.lang.haskell.general/17552\">announced</a>\n   the availablity of videos from the International Conference on Functional\n   Programming (ICFP)</p>\n\n<p><em>GPipe-1.0.0: A functional graphics API for programmable\nGPUs</em>. Tobias Bexelius\n   <a href=\"http://article.gmane.org/gmane.comp.lang.haskell.general/17546\">announced</a>\n   the first release of GPie, a functional graphics API for programmable\n   GPUs.</p>\n<p><em>text 0.5, a major revision of the Unicode text library</em>. Bryan\nO'Sullivan\n   <a href=\"http://article.gmane.org/gmane.comp.lang.haskell.cafe/64591\">announced</a>\n   a new, major version of the text package. New API features, and huge\n   improvments in speed, as Bryan says, 'Get it while it's fresh on Hackage,\n   folks!'</p>\n<p><em>vty-ui 0.2</em>. Jonathan Daugherty\n   <a href=\"http://article.gmane.org/gmane.comp.lang.haskell.cafe/64529\">announced</a>\n\n   a new version of the vty-ui package, with fewer bugs, more widgets,\n   and cleaner code due to new more powerful abstractions.</p>\n<p><em>htzaar-0.0.1</em>. Tom Hawkins\n   <a href=\"http://article.gmane.org/gmane.comp.lang.haskell.cafe/64516\">announced</a>\n   HTZAAR, a Haskell implementation of TZAAR</p>\n<p><em>Graphalyze-0.8.0.0 and SourceGraph-0.5.5.0</em>. Ivan Lazar Miljenovic\n   <a href=\"http://article.gmane.org/gmane.comp.lang.haskell.cafe/64399\">announced</a>\n   To keep this editor happy, Ivan released two new packaged in one\n   announcement. This time, he's added Legend support to Graphalyze, but\n   also many new changes to SourceGraph, including a legend so you can see\n   what all the symbols mean, Better color support, and much more.</p>\n\n<p><em>TxtSushi 0.4.0</em>. Keith Sheppard\n   <a href=\"http://article.gmane.org/gmane.comp.lang.haskell.cafe/64301\">announced</a>\n   a new version of TxtSushi, a set of command line utilities for processing\n   CSV and TSV files.</p>\n<h4>Discussion</h4> <p><em>Applicative do?</em> Philippa Cowderoy\n   <a href=\"http://thread.gmane.org/gmane.comp.lang.haskell.cafe/64616\">asked\n   about</a> a `do` like syntax for Applicative functors.</p>\n<p><em>How to add use custom preprocessor in cabal</em>. Bernd Brassel\n   <a href=\"http://thread.gmane.org/gmane.comp.lang.haskell.cafe/64558\">asked</a>\n\n   how to add a custom preprocessor to the build chain of a cabal file.</p>\n<p><em>On DSLs - one last time</em>. Gunther Schmidt\n   <a href=\"http://thread.gmane.org/gmane.comp.lang.haskell.cafe/64552\">summarized</a>\n   his impressions on al the recent discussion of DSLs</p>\n<p><em>What is a DSL?</em> Oleg\n   <a href=\"http://thread.gmane.org/gmane.comp.lang.haskell.cafe/64533\">offered</a>\n   some insight into different <a href=\"http://thread.gmane.org/gmane.comp.lang.haskell.cafe/\">properties</a>\n\n   that can be part of a single tagless framework. He also\n   pointed to some slides and other materials such as a website\n   <a href=\"http://dsl09.blogspot.com/\">here</a> and slides <a href=\"http://dsl09.blogspot.com/2009/07/panel.html\">here</a> about DSL\n   implementations and definitions.</p>\n<p><em>What is a DSL?</em> Gunther Schmidt\n   <a href=\"http://thread.gmane.org/gmane.comp.lang.haskell.cafe/64474\">posed</a>\n   the question, 'What is a DSL', and with some further questions added by\n   yours truly, a lively discussion about the definition of a DSL ensued.</p>\n\n<p><em>Finally tagless - stuck with implementation of 'lam'</em>. Gunther\nSchmidt\n   <a href=\"http://thread.gmane.org/gmane.comp.lang.haskell.cafe/64343\">asked</a>\n   another question about Finally Tagless DSLs and resolving an issue with\n   the implementation of 'lam'</p>\n<h4>Blog noise</h4> <a href=\"http://planet.haskell.org\">Haskell news</a> from\nthe  <a href=\"http://haskell.org/haskellwiki/Blog_articles\">blogosphere.</a>\nBlog posts from people new to the Haskell community are\nmarked with >>>, be sure to welcome them!  <ul><li><p>Darcs: <a href=\"http://blog.darcs.net/2009/10/darcs-weekly-news-43.html\"><em>darcs\nweekly news #43</em></a>. </p></li>\n\n    <li><p>JP Moresmau: <a href=\"http://jpmoresmau.blogspot.com/2009/10/what-client-for-haskell-multi-player.html\"><em>What\n    client for an Haskell Multi Player Game?</em></a>. </p></li>\n    <li><p>Mikael Vejdemo Johansson (Syzygy-): <a href=\"http://blog.mikael.johanssons.org/archive/2009/10/math198-third-lecture-is-up/\"><em>[MATH198]\n    Third lecture is up</em></a>. </p></li> <li><p>Bryan O'Sullivan: <a href=\"http://www.serpentine.com/blog/2009/10/09/announcing-a-major-revision-of-the-haskell-text-library/\"><em>Announcing\n    a major revision of the Haskell text\n    library</em></a>. </p></li> <li><p>Eric Kow (kowey): <a href=\"http://koweycode.blogspot.com/2009/10/darcs-hashed-storage-work-merged-woo.html\"><em>darcs\n    hashed-storage work merged (woo!)</em></a>. </p></li> <li><p>David Amos: <a href=\"http://haskellformaths.blogspot.com/2009/10/symmetries-of-pgnfq.html\"><em>Symmetries\n    of PG(n,Fq)</em></a>. </p></li> <li><p>The GHC Team: <a href=\"http://ghcmutterings.wordpress.com/2009/10/06/parallelism-concurrency/\"><em>Parallelism\n    /= Concurrency</em></a>. </p></li> <li><p>>>> Nefigah: <a href=\"http://my.life-is-virtual.com/2009/10/07/fake-world-haskell-part-1/\"><em>Fake\n    World Haskell</em></a>. Nefigah, a recent addition to the\n    community, has been working through RWH, and is providing some\n    excellent examples. Though, This editor prefers the title 'Real\n    Life Haskell' as opposed to his choice.</p></li> <li><p>Tom Schrijvers: <a href=\"http://tomschrijvers.blogspot.com/2009/10/release-06-of-monadic-constraint.html\"><em>Release\n    0.6 of Monadic Constraint\n    Programming</em></a>. </p></li> <li><p>Neil Brown: <a href=\"http://chplib.wordpress.com/2009/10/07/concurrency-can-be-deterministic/\"><em>Concurrency\n    Can Be Deterministic (But The Type System Doesn&#8217;t\n    Know It)</em></a>. </p></li> <li><p>Clint Moore: <a href=\"http://www.l2mlogistics.com/2009/10/curiously-parallel.html\"><em>Curiously\n    Parallel</em></a>. </p></li> <li><p>Galois, Inc: <a href=\"http://www.galois.com/blog/2009/10/06/huffman-universal/\"><em>Tech\n    Talk: Constructing A Universal Domain for Reasoning About\n    Haskell Datatypes</em></a>. </p></li> <li><p>Neil Brown: <a href=\"http://chplib.wordpress.com/2009/10/06/the-printing-process/\"><em>Terminal\n    Concurrency: The Printing\n    Process</em></a>. </p></li> <li><p>Sean Leather: <a href=\"http://feedproxy.google.com/~r/splonderzoek/~3/4E8TZPDZ-aM/upwards-and-downwards-accumulations-on.html\"><em>'Upwards\n    and downwards accumulations on trees' translated into\n    Haskell</em></a>. </p></li> <li><p>Mikael Vejdemo Johansson (Syzygy-): <a href=\"http://blog.mikael.johanssons.org/archive/2009/10/math-198-second-lecture/\"><em>[MATH\n    198] Second lecture</em></a>. </p></li> <li><p>Chris Smith: <a href=\"http://cdsmith.wordpress.com/2009/10/04/view-patterns-as-pattern-matching-for-records/\"><em>View\n    Patterns as Pattern Matching for\n    Records</em></a>. </p></li> <li><p>Chris Smith: <a href=\"http://cdsmith.wordpress.com/2009/10/03/playing-with-records/\"><em>Playing\n    With Records</em></a>. </p></li> <li><p>FP Lunch: <a href=\"http://sneezy.cs.nott.ac.uk/fplunch/weblog/?p=237\"><em>Left Kan\n    extensions of containers</em></a>. </p></li></ul>\n\n<h4>Quotes of the Week</h4> <ul><li><em>Baughn</em>: Blum Blum Shub, a PRNG\nderived from poking around R'Lyeh.</li>\n    <li><em>ksf</em>: * lambdabot locks up ksf in a Monad &lt;ksf&gt;\n    mmmmh it's warm and fuzzy in here.</li> <li><em>monochrom</em>:\n    Don't wrap your head around Haskell. Immerse! Wrap Haskell around your\n    head.</li> <li><em>chak</em>: ... In other words, FP is inevitable.</li>\n\n    <li><em>robreim</em>: I'm in your base hacking all your lambdas</li>\n    <li><em>gwern</em>: RAM is overrated, swap is where it's at ;)</li>\n    <li><em>idnar</em>: [to gwern] swap to a ramdisk! ;P</li></ul>\n<h4>About the Haskell Weekly News</h4> <p>New editions are posted to\n   <a href=\"http://www.haskell.org/mailman/listinfo/haskell\">the Haskell\n   mailing list</a> as well as to <a href=\"http://sequence.complete.org/\">the\n   Haskell Sequence</a> and <a href=\"http://planet.haskell.org/\">Planet\n   Haskell</a>.  <a href=\"http://sequence.complete.org/node/feed\">RSS</a>\n\n   is also available, and headlines appear on <a href=\"http://haskell.org\">haskell.org</a>.</p>\n<p>To help create new editions of this newsletter, please\n   see the information on <a href=\"http://haskell.org/haskellwiki/HWN\">how\n   to contribute</a>. Send stories to <code>jfredett . at . gmail . dot\n   . com</code>.  The darcs repository is available at <code>darcs\n   get <a href=\"http://patch-tag.com/r/jfredett/HWN2/pullrepo\n   HWN2\">http://patch-tag.com/r/jfredett/HWN2/pullrepo HWN2</a> .</code></p>") (pubDate nil "Sat, 10 Oct 2009 16:50:20 +0000") (dc:creator nil "jfredett")) (item nil (title nil "Darcs: darcs weekly news #43") (guid ((isPermalink . "false")) "tag:blogger.com,1999:blog-819021106854702432.post-558393002575908") (link nil "http://blog.darcs.net/2009/10/darcs-weekly-news-43.html") (description nil "<h3 id=\"news-and-discussions\">News and discussions</h3><dl><dt>1. Work on hashed-storage, implemented by Petr and reviewed by Ganesh, was finally merged into the main darcs repository. Eric provided explanations for people who want a faster darcs now:</dt></dl><ul><li><a href=\"http://lists.osuosl.org/pipermail/darcs-users/2009-October/021826.html\">http://lists.osuosl.org/pipermail/darcs-users/2009-October/021826.html</a></li></ul>2. Ganesh sent a patch providing a \"no conflicting patch\" filter to darcs pull, discussion ensued:<ul><li><a href=\"http://lists.osuosl.org/pipermail/darcs-users/2009-September/021642.html\">http://lists.osuosl.org/pipermail/darcs-users/2009-September/021642.html</a></li></ul><dl><dt>3. Jason investigated on performance of the current implementation of regular expression handling:</dt></dl><ul><li><a href=\"http://lists.osuosl.org/pipermail/darcs-users/2009-October/021721.html\">http://lists.osuosl.org/pipermail/darcs-users/2009-October/021721.html</a></li></ul><dl><dt>4. Eric talked about Summer of Code 2010 and how to raise our chances to have someone paid to work on darcs again next summer:</dt></dl><ul><li><a href=\"http://lists.osuosl.org/pipermail/darcs-users/2009-October/021761.html\">http://lists.osuosl.org/pipermail/darcs-users/2009-October/021761.html</a></li></ul><h3 id=\"issues-resolved-in-the-last-week-5\">Issues resolved in the last week (5)</h3><dl><dt>issue1447 mf-hcafe-15c311f0c</dt><dd><ul><li>different online help for send/apply --cc</li><li><a href=\"http://bugs.darcs.net/issue1447\">http://bugs.darcs.net/issue1447</a></li></ul></dd><dt>issue1488 Petr Rockai</dt><dd><ul><li>darcs-hs does not suffer from this.</li><li><a href=\"http://bugs.darcs.net/issue1488\">http://bugs.darcs.net/issue1488</a></li></ul></dd><dt>issue1583 Eric Kow</dt><dd><ul><li>on darcs get, suggest upgrading source repo to hashed.</li><li><a href=\"http://bugs.darcs.net/issue1583\">http://bugs.darcs.net/issue1583</a></li></ul></dd><dt>issue1618 Kamil Dworakowski</dt><dd><ul><li>1618: preserve log on amend failure</li><li><a href=\"http://bugs.darcs.net/issue1618\">http://bugs.darcs.net/issue1618</a></li></ul></dd><dt>issue1620 Kamil Dworakowski</dt><dd><ul><li>amend lies about living logfile</li><li><a href=\"http://bugs.darcs.net/issue1620\">http://bugs.darcs.net/issue1620</a></li></ul></dd></dl><h3 id=\"patches-applied-in-the-last-week-108\">Patches applied in the last week (108)</h3>See <a href=\"http://code.haskell.org/darcs/darcs-news/entries/2009-10-09\">text entry</a> for details.<div class=\"blogger-post-footer\"><img width=\"1\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/819021106854702432-558393002575908?l=blog.darcs.net\" /></div>") (pubDate nil "Fri, 09 Oct 2009 17:01:55 +0000") (dc:creator nil "guillaume (noreply@blogger.com)")) (item nil (title nil "JP Moresmau: What client for an Haskell Multi Player Game?") (guid ((isPermalink . "false")) "tag:blogger.com,1999:blog-37404288.post-1505346415888307766") (link nil "http://jpmoresmau.blogspot.com/2009/10/what-client-for-haskell-multi-player.html") (description nil "I've been thinking again, in between working on <a href=\"http://eclipsefp.sourceforge.net/\">eclipsefp</a>, about writing a multi player role-playing game in Haskell. OK, I'm not going to write something the size of WoW by myself in my free time (unfortunately my day job doesn't involve any game programming nor any Haskell hacking :-(), but since I enjoyed writing <a href=\"http://hackage.haskell.org/package/MazesOfMonad\">Mazes of Monad</a>, I figured that a game is a good way to learn things. A MMORPG should get me into concurrency, persistence, graphics, performance etc...<br /><br />What I'm trying to figure out at the moment is what architecture to use. Mainly, if I have no doubt there is going to be a server somewhere running Haskell code, I wonder about the client. Should I try to write a browser based game coupled with a Haskell web server? That way, users could easily play the game when (if) it gets to a usable state, and I won't have to worry about cross platform issues for the client. Getting proper server side events or push should be fun, and of course if I end up using something like <a href=\"http://dev.w3.org/html5/websockets/\">web sockets</a> I will probably require a fairly cutting edge browser, which negates the advantage. I'm not too sure meddling with AJAX long polling and dynamic HTML is such a attractive option.<br />The other path is to write a Haskell client. Granted, users will have to download it, which means either me dealing with cross platform issues (provide several exes) or restricting my users to people happy to use cabal install. But I'll get maybe into stuff like <a href=\"http://www.haskell.org/haskellwiki/Opengl\">OpenGL in Haskell</a>, and do everything in Haskell instead of mixing Haskell with HTML and JavaScript (I've just stumbled upon <a href=\"http://hackage.haskell.org/package/jmacro\">jmacro</a>, which could be cool I guess).<br /><br />I'm sure everybody has faced that question at some stage. Ah well, for the moment I'm still wondering what my game will do, so I guess I have time to play with a few things before I make my mind up.<div class=\"blogger-post-footer\"><img width=\"1\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/37404288-1505346415888307766?l=jpmoresmau.blogspot.com\" /></div>") (pubDate nil "Fri, 09 Oct 2009 14:05:04 +0000") (dc:creator nil "JP Moresmau (noreply@blogger.com)")) (item nil (title nil "\"Osfameron\": Beans pt2: docs, tests, and more types") (guid ((isPermalink . "false")) "http://greenokapi.net/blog/?p=171") (link nil "http://greenokapi.net/blog/2009/10/09/beans-pt2-docs-tests-and-more-types/") (description nil "<p>\nA couple of comments on the <a href=\"http://greenokapi.net/blog/2009/09/17/the-moose-counts-beans-managing-my-finances-with-perl/\">first post</a> suggested that I look\ninto the command-line bookkeeping application <a href=\"http://wiki.github.com/jwiegley/ledger\">ledger</a>, or\nindeed, its Haskell version <a href=\"http://hledger.org/\">hledger</a>.  They look very\ninteresting, but rather hard to wrap my head around.  So though I'm going to\nbear them in mind for later, I'll carry on doing these <i>sketches</i> till I\nunderstand the problem space better, at which point, perhaps I'll either a)\nsteal some ideas from them, or b) realise they are undoubtedly the way forward\nand start using them.\n\n<p>\nI used <a href=\"http://search.cpan.org/~petdance/Module-Starter/lib/Module/Starter.pm\">Module::Starter</a> to retrospectively turn this project\ninto something I can release as a distribution to CPAN, with docs, tests, a\nMakefile, and so on.\n\n<blockquote><code>module-starter --module=Beans --mi --author=osfameron --email=osfameron@cpan.org</code></blockquote>\n\n<p>\nThis also creates some skeleton docs, so I've gone in to add a few actual\nnotes (mainly just pointing at this blog), and to delete a few sections that\nmodule-starter puts in by default:\n<dl>\n<dt> AnnoCPAN </dt>\n    <dd> (I don't think this is particularly useful, and don't see the need to\nadvertise it from my module, as it's already linked to from search.cpan.org)</dd>\n<dt> CPANratings </dt>\n    <dd> This <i>is</i> useful, but again, it's already linked to from\nsearch.cpan.org.  Why should I link to it from my module?  Should I also include\nbuttons to pimp it on reddit and digg?\n</dd></dl>\n\n<p>\nThen I added some tests in t/01-basic.t, for example:\n\n<code><pre>\nmy $item = Beans::Item->new(\n    name     => 'Mortgage',\n    value    => 500.00,\n    due_date => '2009-10-01',\n    comment  => 'Home sweet home',\n    tags     => [qw/ mortgage foo bar /],\n    );\n\nok $item, 'Object created successfully';\n\nis $item->name,  'Mortgage',      'Name ok';\nis $item->value, 500,             'Value ok';\nis $item->due_date->month, 10,    'Date ok';\n</pre></code>\n\n<p>\nAll very noddy stuff, but it helped me find a bug in the version I'd blogged\nearlier!  I hadn't told the date fields to use the coercion I'd set, so\nthe above code failed, complaining quite rightly that '2009-10-01' isn't a\n<tt>DateTime</tt> object!\n\n<p>\nSo I amended the date fields like so:\n\n<code><pre>\n     has due_date  => ( isa      => DateTime, \n                        is       => 'rw', \n                        required => 1, \n                        <b>coerce   => 1</b>,\n                      );\n</pre></code>\n\n<p>\nand all was again well.  Yay for failing tests!\nThis brings me to a suggestion from John Napiorkowski to use <a href=\"http://search.cpan.org/~nuffin/MooseX-Types-DateTime/lib/MooseX/Types/DateTime.pm\"><tt>MooseX::Types::DateTimeX</tt></a> to get my coercion\nfor free.  This does indeed work, and I've changed the code to use it, though\nit doesn't by default use DateTime::Format::Natural &mdash; we'll come back to\nthis later.\n\n<p>\nWhile we're looking at types, let's fix the crufty implementation of tags.\nWe've currently got an <tt>ArrayRef[NonEmptyStr]</tt>, but really, we don't want\nan Array, because we want to be able to:\n<ul>\n<li> Check whether a given tag is active\n<li> Enable a tag (without duplicating it if it's already present)\n<li> Delete a tag.\n</li></li></li></ul>\nThese aren't so much features of arrays as of hashes, or, even better,\n<i>set</i>s.  I was about to enter a rabbit hole of implementing using a hash\nand <tt>::Meta::Attribute::Native::Trait::</tt> when Stevan suggested \n<a href=\"http://search.cpan.org/~samv/Set-Object/lib/Set/Object.pm\"><tt>Set::Object</tt></a> and its wrapper\n<a href=\"http://search.cpan.org/~nuffin/MooseX-Types-Set-Object/lib/MooseX/Types/Set/Object.pm\"><tt>MooseX::Types::Set::Object</tt></a>.\n\n<p>\nThis changes our code to:\n<code><pre>\n    has tags      => (\n                       isa      => 'Set::Object',\n                       is       => 'rw',\n                       accessor => '_tags',\n                       coerce   => 1, # also accept array refs\n                       handles => {\n                           tags       => 'members', # random order\n                           add_tag    => 'insert',\n                           remove_tag => 'remove',\n                           has_tag    => 'member'\n                         },\n                     );\n</pre></code>\n\n<p>\nwhich we can test like so:\n\n<p>\n<code><pre>\nis_deeply [ sort $item->tags],\n    [qw/ bar foo mortgage /],     'Tags ok'\n        or diag Dumper($item->tags);\n\nok $item->has_tag('foo'),         'Has tag foo';\nok $item->has_tag('bar'),         'Has tag bar';\nok $item->has_tag('mortgage'),    'Has tag mortgage';\nok ! $item->has_tag('baz'),       'Nonexistant tag baz';\n$item->add_tag('baz');\nok $item->has_tag('baz'),         'Now has baz';\n$item->remove_tag('foo');\nok ! $item->has_tag('foo'),       'Now lost tag foo';\n</pre></code>\n\n<p>\nSet::Object's <tt>members</tt> function returns the contents in hashed order\n(i.e., effectively random), but given that we know our \"objects\" are actually\nstrings, I'd prefer them in sorted order, which would simplify the is_deeply\ntest above.  We could do this as a method instead, or possibly use \n<tt>around</tt> to sort the results, but we'll come back to this soon!</p></p></p></p></p></p></p></p></p></p></p></p>") (pubDate nil "Fri, 09 Oct 2009 12:06:09 +0000") (dc:creator nil "osfameron")) (item nil (title nil "Mikael Vejdemo Johansson (Syzygy-): [MATH198] Third lecture is up") (guid ((isPermalink . "false")) "http://blog.mikael.johanssons.org/archive/2009/10/math198-third-lecture-is-up/") (link nil "http://blog.mikael.johanssons.org/archive/2009/10/math198-third-lecture-is-up/") (description nil "<p>The third lecture is up on the <a href=\"http://haskell.org/haskellwiki/User:Michiexile/MATH198/Lecture_3\">haskell wiki</a>.</p>") (pubDate nil "Fri, 09 Oct 2009 07:09:56 +0000") (dc:creator nil "Michi")) (item nil (title nil "Bryan O'Sullivan: Announcing a major revision of the Haskell text library") (guid ((isPermalink . "false")) "http://www.serpentine.com/blog/?p=477") (link nil "http://www.serpentine.com/blog/2009/10/09/announcing-a-major-revision-of-the-haskell-text-library/") (description nil "<p>I'm pleased to announce the availability of version 0.5 of <a href=\"http://hackage.haskell.org/package/text\">text</a>, a library that provides fast Unicode text handling for Haskell.</p>\n<p>This version contains numerous changes compared to version 0.4, in three broad categories:</p>\n<ul><li><p>I made improvements to the performance of some common functions by, in many cases, more than 10x.</p></li><li><p>I have substantially refined the API.</p></li><li><p>Many bugs fixed, almost all of them subtle, thanks to the ever-astounding QuickCheck library.</p></li></ul>\n<div id=\"performance-improvements\"><h2>Performance improvements</h2><p>In real-world code, many of the most frequently performed text manipulation operations involve searching for substrings. I've written a fast search function, based on Fredrik Lundh's very elegant adaptation of the Boyer-Moore-Horspool-Sunday algorithm, and rewritten all of the functions that perform searches internally to use it (without changing any of the APIs in question, of course).</p><p>Retooling with this function has made a big difference to performance. Here are measurements of old-style searches, searches over the popular <a href=\"http://hackage.haskell.org/package/bytestring\">ByteString</a> type, and new-style searches:</p><p><img src=\"http://www.serpentine.com/wordpress/wp-content/uploads/2009/10/big-slow-densities-450x175.png\" alt=\"big slow densities\" /></p><p><img src=\"http://www.serpentine.com/wordpress/wp-content/uploads/2009/10/big-bytestring-densities-450x175.png\" alt=\"big bytestring densities\" /></p><p><img src=\"http://www.serpentine.com/wordpress/wp-content/uploads/2009/10/big-fast-densities-450x175.png\" alt=\"big fast densities\" /></p><p>For this data set, the new search code is 10.4 times faster than the old, and 24% faster than the ByteString search code.</p><p>If we perform a search for a short snippet of DNA in a large data set, we see a similar pattern:</p><p><img src=\"http://www.serpentine.com/wordpress/wp-content/uploads/2009/10/dna-slow-densities-450x175.png\" alt=\"dna slow densities\" /></p><p><img src=\"http://www.serpentine.com/wordpress/wp-content/uploads/2009/10/dna-bytestring-densities-450x175.png\" alt=\"dna bytestring densities\" /></p><p><img src=\"http://www.serpentine.com/wordpress/wp-content/uploads/2009/10/dna-fast-densities-450x175.png\" alt=\"dna fast densities\" /></p><p>Over the DNA data set, the new search code is 15.3 times faster than the old, and 85% faster than the ByteString search code.</p><p>By the way, it was writing&#8212;and wanting to measure the performance of&#8212;this new search function that led me to create the <a href=\"http://www.serpentine.com/blog/2009/09/29/criterion-a-new-benchmarking-library-for-haskell/\">criterion</a> benchmarking package, which in turn begat the <a href=\"http://hackage.haskell.org/package/statistics\">statistics</a> package. What a month of hacking it's been!</p></div>\n<div id=\"api-changes\"><h2>API changes</h2><p>While the API of the text package still somewhat resembles the venerable <a href=\"http://www.haskell.org/ghc/docs/latest/html/libraries/base/Data-Listhtml\">Data.List</a> API (which is now almost two decades old), I have modified it to be both narrower and more useful for text processing tasks.</p><p>All of the integer-index-based search functions are now gone, since using integer offsets into Unicode strings is a bad idea (especially when the underlying representation uses a variable-length encoding).</p><p>Instead, the search functions break up the original string. Consider the new <code>find</code> function, for instance:</p><pre class=\"sourceCode haskell\"><code><span class=\"Function FunctionDefinition\">find ::</span><span class=\"Normal NormalText\"> Text -&gt; Text -&gt; (Text, [(Text, Text)])</span><br /></code></pre><p>This function returns all non-overlapping instances of <code>needle</code> in <code>haystack</code>. The first element of the returned pair is the prefix of <code>haystack</code> prior to any matches of <code>needle</code>. The second is a list of pairs.</p><p>The first element of each pair in the list is a span from the beginning of a match to the beginning of the next match, while the second is a span from the beginning of the match to the end of the input.</p><pre class=\"sourceCode haskell\"><code><span class=\"Normal NormalText\">find </span><span class=\"String\">\"::\"</span><span class=\"Normal NormalText\"> </span><span class=\"String\">\"\"</span><br /><span class=\"Normal NormalText\">  ==&gt; (</span><span class=\"String\">\"\"</span><span class=\"Normal NormalText\">, [])</span><br /><br /><span class=\"Normal NormalText\">find </span><span class=\"String\">\"/\"</span><span class=\"Normal NormalText\"> </span><span class=\"String\">\"a/b/c/d\"</span><br /><span class=\"Normal NormalText\">  ==&gt; (</span><span class=\"String\">\"a\"</span><span class=\"Normal NormalText\">, [(</span><span class=\"String\">\"/b\"</span><span class=\"Normal NormalText\">,</span><span class=\"String\">\"/b/c/d\"</span><span class=\"Normal NormalText\">), (</span><span class=\"String\">\"/c\"</span><span class=\"Normal NormalText\">,</span><span class=\"String\">\"/c/d\"</span><span class=\"Normal NormalText\">), (</span><span class=\"String\">\"/d\"</span><span class=\"Normal NormalText\">,</span><span class=\"String\">\"/d\"</span><span class=\"Normal NormalText\">)])</span><br /></code></pre><p>Notice that no matter how much of the result list you consume, you can always reconstruct the entire original <code>haystack</code> from the elements you've already seen.</p><p>More often, you won't want something nearly this general. Instead, you may want a function that simply splits a string on a separator:</p><pre class=\"sourceCode haskell\"><code><span class=\"Function FunctionDefinition\">split ::</span><span class=\"Normal NormalText\"> Text -&gt; Text -&gt; [Text]</span><br /></code></pre><p>Here are a few examples of how the <code>split</code> function works:</p><pre class=\"sourceCode haskell\"><code><span class=\"Normal NormalText\">split </span><span class=\"String\">\"\\r\\n\"</span><span class=\"Normal NormalText\"> </span><span class=\"String\">\"a\\r\\nb\\r\\nd\\r\\ne\"</span><br /><span class=\"Normal NormalText\">  ==&gt; [</span><span class=\"String\">\"a\"</span><span class=\"Normal NormalText\">,</span><span class=\"String\">\"b\"</span><span class=\"Normal NormalText\">,</span><span class=\"String\">\"d\"</span><span class=\"Normal NormalText\">,</span><span class=\"String\">\"e\"</span><span class=\"Normal NormalText\">]</span><br /><br /><span class=\"Normal NormalText\">split </span><span class=\"String\">\"aaa\"</span><span class=\"Normal NormalText\"> </span><span class=\"String\">\"aaaXaaaXaaaXaaa\"</span><br /><span class=\"Normal NormalText\">  ==&gt; [</span><span class=\"String\">\"\"</span><span class=\"Normal NormalText\">,</span><span class=\"String\">\"X\"</span><span class=\"Normal NormalText\">,</span><span class=\"String\">\"X\"</span><span class=\"Normal NormalText\">,</span><span class=\"String\">\"X\"</span><span class=\"Normal NormalText\">,</span><span class=\"String\">\"\"</span><span class=\"Normal NormalText\">]</span><br /><br /><span class=\"Normal NormalText\">split </span><span class=\"String\">\"x\"</span><span class=\"Normal NormalText\"> </span><span class=\"String\">\"x\"</span><br /><span class=\"Normal NormalText\">  ==&gt; [</span><span class=\"String\">\"\"</span><span class=\"Normal NormalText\">,</span><span class=\"String\">\"\"</span><span class=\"Normal NormalText\">]</span><br /></code></pre><p>Some of the functions supplied by the list API are not very useful in the context of a text-oriented API. Consider <code>break</code>:</p><pre class=\"sourceCode haskell\"><code><span class=\"Function\">break</span><span class=\"Normal NormalText\"> :: (a -&gt; </span><span class=\"DataType TypeConstructor\">Bool</span><span class=\"Normal NormalText\">) -&gt; [a] -&gt; ([a],[a])</span><br /></code></pre><p>I use this name in the text package, but give the function a simpler and more useful type signature (its behaviour is otherwise the same):</p><pre class=\"sourceCode haskell\"><code><span class=\"Function\">break</span><span class=\"Normal NormalText\"> :: Text -&gt; Text -&gt; (Text, Text)</span><br /></code></pre><p>If, for some reason, you still want the predicate-based functions, they're usually available, but (in most cases) with a \"<code>By</code>\" suffix added, to provide uniform naming:</p><pre class=\"sourceCode haskell\"><code><span class=\"Function FunctionDefinition\">breakBy ::</span><span class=\"Normal NormalText\"> (</span><span class=\"DataType TypeConstructor\">Char</span><span class=\"Normal NormalText\"> -&gt; </span><span class=\"DataType TypeConstructor\">Bool</span><span class=\"Normal NormalText\">) -&gt; Text -&gt; (Text, Text)</span><br /></code></pre></div>\n<div id=\"testing-and-bug-fixes\"><h2>Testing and bug fixes</h2><p>Even though the text package already had a very high degree of test coverage, I still found perhaps a dozen bugs while working on this release. The bugs in question were almost without exception quite subtle, and it would have been tremendously difficult to reproduce them, or to fix them with confidence, without the assistance of the QuickCheck library.</p><p>By the way, even though I've been using it for years, I still find myself feeling very strongly that the QuickCheck library is simply amazing. If unit testing is like riding a tricycle with wobbly wheels, working with QuickCheck more closely resembles flying a sleek starship. Wow.</p><p>At the moment, the profile of code covered by QuickCheck tests looks like this:</p><ul><li><p>96% of public top-level definitions</p></li><li><p>85% of conditional expressions</p></li><li><p>88% of all expressions</p></li></ul><p>(In case you're wondering, these are higher levels of test coverage than those achieved by the widely used bytestring package, so you should have high confidence that the code in the text package is pretty solid.)</p></div>") (pubDate nil "Fri, 09 Oct 2009 07:05:15 +0000") (dc:creator nil "Bryan O'Sullivan (bos@serpentine.com)")) (item nil (title nil "Colin Adams: Equation") (guid ((isPermalink . "false")) "http://colina.demon.co.uk/785 at http://colina.demon.co.uk") (link nil "http://colina.demon.co.uk/?q=node/785") (description nil "<p>Haskell + Eiffel = 2 * (contempt for Java)</p>") (pubDate nil "Fri, 09 Oct 2009 04:28:41 +0000") (dc:creator nil "colin")) (item nil (title nil "Manuel M T Chakravarty: The Status of the P Versus NP Problem") (guid ((isPermalink . "false")) "http://justtesting.org/post/208046776") (link nil "http://justtesting.org/post/208046776") (description nil "The current issue of CACM (Communications of the ACM) has a very nice summary of the long-standing question of whether nondeterministic polynomial-time problems (NP) can also be solved in polynomial-time (P). In particular, it discusses the implications of this question on computing and other scientific disciplines in some detail: <a href=\"http://cacm.acm.org/magazines/2009/9/38904-the-status-of-the-p-versus-np-problem/\"><a href=\"http://cacm.acm.org/magazines/2009/9/38904-the-status-of-the-p-versus-np-problem/\">http://cacm.acm.org/magazines/2009/9/38904-the-status-of-the-p-versus-np-problem/</a></a>      <p>  <a href=\"http://posterous.com\">Posted via email</a>   from <a href=\"http://justtesting.posterous.com/the-status-of-the-p-versus-np-problem-1\">Just Testing</a> | <a href=\"http://justtesting.posterous.com/the-status-of-the-p-versus-np-problem-1#comment\"><span>Comment »</span></a>  </p>") (pubDate nil "Fri, 09 Oct 2009 02:08:39 +0000")) (item nil (title nil "David Amos: Symmetries of PG(n,Fq)") (guid ((isPermalink . "false")) "tag:blogger.com,1999:blog-5195188167565410449.post-5701363515709149075") (link nil "http://haskellformaths.blogspot.com/2009/10/symmetries-of-pgnfq.html") (description nil "<div>Previously in this blog we looked at the affine geometries AG(n,Fq), and their symmetries. Following that, we looked at the points and lines in the projective geometries PG(n,Fq). This week I want to look at the symmetries of PG(n,Fq).</div><div><div><br /></div><div>However, first, something I forgot to mention last week. When we looked at the points in PG(n,Fq), we saw that they can be thought of as the points of AG(n,Fq), plus some additional points \"at infinity\". What I forgot to do last week was to discuss how the lines in PG(n,Fq) relate to the lines in AG(n,Fq).</div><div><br /></div><div>Here's PG(2,F3) again:</div><div><br /></div><div><a href=\"http://3.bp.blogspot.com/_XQ7FznWBAYE/Ss42alXwUrI/AAAAAAAAAEM/bTxJx6Vy0eg/s1600-h/ptspg2f3txt.gif\"><img src=\"http://3.bp.blogspot.com/_XQ7FznWBAYE/Ss42alXwUrI/AAAAAAAAAEM/bTxJx6Vy0eg/s320/ptspg2f3txt.gif\" border=\"0\" alt=\"\" id=\"BLOGGER_PHOTO_ID_5390305634345308850\" /></a></div><div><br /></div><div>Recall that the points in PG(2,F3) are (by definition) the lines through the origin in F3^3, each of which can be represented, as here, by one of the non-zero points on it. (Note that for technical reasons, the coordinates are shown as zyx instead of xyz.) We see that these \"points\" of PG(2,F3) consist of something looking very much like AG(2,F3) - the blue points - together with some additional points, which are said to be \"at infinity\".</div><div><br /></div><div>Then, the lines of PG(2,F3) are (by definition) the planes through 0 in F3^3. What is the relationship between lines in AG(2,F3) and \"lines\" in PG(2,F3)? Well, any line in (the copy of) AG(2,F3) (embedded in PG(2,F3)) is contained in a plane through 0 in F3^3. So each line in AG(2,F3) gives rise to a line in PG(2,F3). In PG(2,F3), however, the line will have an additional point \"at infinity\".</div><div><br /></div><div>For example, there is a line in AG(2,F3) consisting of the points {(0,0),(1,0),(2,0)}. These embed into PG(2,F3) as {(1:0:0), (1:1:0), (1:2:0)}. We can ask what is the closure in PG(2,F3) of these points - the least \"flat\" (point, line, plane, etc) that contains them:</div><div><br /></div><div><code></code></div><div>&gt; closurePG [ [1,0,0],[1,1,0],[1,2,0] ] :: [[F3]]</div><div>[[0,1,0],[1,0,0],[1,1,0],[1,2,0]]</div><div></div></div><div><br /></div><div>So in PG(2,F3), the line gains a point at infinity, (0:1:0).</div><div><br /></div><div>Similarly, there is a line in AG(2,F3) consisting of the points {(0,1),(1,1),(2,1)}. These embed into PG(2,F3) as {(1:0:1), (1:1:1), (1:2:1)}.</div><div><br /></div><div><code></code></div><div>&gt; closurePG [ [1,0,1],[1,1,1],[1,2,1] ] :: [[F3]]</div><div>[[0,1,0],[1,0,1],[1,1,1],[1,2,1]]</div><div></div><div><br /></div><div>Notice that both lines from AG(2,F3) gained the same point at infinity. This is because the two lines were parallel. In PG(2,F3), \"parallel lines meet at infinity\".</div><div><br /></div><div>So each line in AG(2,F3) extends to a line in PG(2,F3), gaining an extra point at infinity. In addition to these lines, there is one more line in PG(2,F3) - a line at infinity consisting of the points {(0:0:1), (0:1:0), (0:1:1), (0:1:2)}, corresponding to the plane z = 0 in F3^3.</div><div><br /></div><div>So, that was all stuff that I should really have talked about last time, but I forgot.</div><div><br /></div><div>                  --*--</div><div><br /></div><div>Okay, so back to the symmetries of PG(n,Fq). So we consider PG(n,Fq) as an incidence structure between points and lines, and we ask which permutations of the points preserve collinearity. That is, given a permutation g of the points of PG(n,Fq), we say that it is a symmetry (or automorphism, or collineation) of PG(n,Fq) if, whenever a and b are collinear points, then so are a^g and b^g, and vice versa.</div><div><br /></div><div>We can find the symmetries of PG(n,Fq) by forming its incidence graph. This is the bipartite graph having as vertices: the points of PG(n,Fq) on the left (or in blue), the lines of PG(n,Fq) on the right (or in red), with an edge joining a point vertex to a line vertex if the point is incident with the line.</div><div><br /></div><div>Here's the code:</div><div><br /></div><div><pre><code></code></pre></div><div>incidenceGraphPG n fq = G vs es where</div><div>     points = ptsPG n fq</div><div>     lines = linesPG n fq</div><div>     vs = L.sort $ map Left points ++ map Right lines</div><div>     es = L.sort [ [Left x, Right b] | b &lt;- lines, x &lt;- closurePG b]</div><div></div><div><br /></div><div>Let's look at an example. Here's PG(2,F2):</div><div><br /></div><div><a href=\"http://3.bp.blogspot.com/_XQ7FznWBAYE/Ss42bM9e7rI/AAAAAAAAAEU/rO_aus8srpk/s1600-h/ptspg2f2txt.png\"><img src=\"http://3.bp.blogspot.com/_XQ7FznWBAYE/Ss42bM9e7rI/AAAAAAAAAEU/rO_aus8srpk/s320/ptspg2f2txt.png\" border=\"0\" alt=\"\" id=\"BLOGGER_PHOTO_ID_5390305644972535474\" /></a></div><div><br /></div><div>The lines in PG(2,F2), corresponding to planes through 0 in F2^3, are:</div><div><br /></div><div><code></code></div><div>&gt; mapM_ (print . closurePG) $ linesPG 2 f2</div><div>[[0,1,0],[1,0,0],[1,1,0]]</div><div>[[0,1,1],[1,0,0],[1,1,1]]</div><div>[[0,1,0],[1,0,1],[1,1,1]]</div><div>[[0,1,1],[1,0,1],[1,1,0]]</div><div>[[0,0,1],[1,0,0],[1,0,1]]</div><div>[[0,0,1],[1,1,0],[1,1,1]]</div><div>[[0,0,1],[0,1,0],[0,1,1]]</div><div></div><div><br /></div><div>PG(2,F2) is called the Fano plane, and is often represented by the picture below:</div><div><br /></div><div><a href=\"http://1.bp.blogspot.com/_XQ7FznWBAYE/Ss42bUS_pzI/AAAAAAAAAEc/kCGO6J9F1E4/s1600-h/fanoplanetxt.png\"><img src=\"http://1.bp.blogspot.com/_XQ7FznWBAYE/Ss42bUS_pzI/AAAAAAAAAEc/kCGO6J9F1E4/s320/fanoplanetxt.png\" border=\"0\" alt=\"\" id=\"BLOGGER_PHOTO_ID_5390305646941808434\" /></a></div><div><br /></div><div>You can easily check that this is right. Notice the embedded AG(2,F2) in the bottom left, with parallel lines meeting \"at infinity\" as expected.</div><div><br /></div><div>The incidence graph of the Fano plane is called the Heawood graph, and it is often represented like this:</div><div><br /></div><div><a href=\"http://2.bp.blogspot.com/_XQ7FznWBAYE/Ss42bvV_bOI/AAAAAAAAAEk/ItTPaNEaECw/s1600-h/heawoodlabelled.png\"><img src=\"http://2.bp.blogspot.com/_XQ7FznWBAYE/Ss42bvV_bOI/AAAAAAAAAEk/ItTPaNEaECw/s320/heawoodlabelled.png\" border=\"0\" alt=\"\" id=\"BLOGGER_PHOTO_ID_5390305654202133730\" /></a></div><div><br /></div><div>The blue vertices are the points of the Fano plane, the red vertices are the lines. For each red vertex, you can check that the three blue vertices it is connected to are indeed a line of the Fano plane.</div><div><br /></div><div>Then we can find the automorphisms of the Fano plane as follows:</div><div><br /></div><div><code></code></div><div>&gt; let heawood = incidenceGraphPG 2 f2</div><div>&gt; let auts = incidenceAuts heawood</div><div>&gt; mapM_ print auts</div><div>[[[0,0,1],[0,1,0]],[[1,0,1],[1,1,0]]]</div><div>[[[0,0,1],[0,1,1],[0,1,0]],[[1,0,1],[1,1,1],[1,1,0]]]</div><div>[[[0,0,1],[1,0,0],[0,1,0]],[[0,1,1],[1,0,1],[1,1,0]]]</div><div>[[[0,1,0],[0,1,1]],[[1,1,0],[1,1,1]]]</div><div>[[[0,1,0],[1,0,0]],[[0,1,1],[1,0,1]]]</div><div>[[[0,1,0],[1,1,0],[1,0,0]],[[0,1,1],[1,1,1],[1,0,1]]]</div><div>[[[1,0,0],[1,0,1]],[[1,1,0],[1,1,1]]]</div><div>[[[1,0,0],[1,1,0]],[[1,0,1],[1,1,1]]]</div><div>&gt; orderSGS auts</div><div>168</div><div></div><div><br /></div><div>Now the symmetries of PG(n,Fq) actually have a very simple description in terms of matrices. Consider the invertible matrices of degree n+1 over Fq - the general linear group GL(n+1,Fq). These matrices act on vectors in Fq^(n+1) by multiplication, and in doing so, they permute the lines and planes through 0 in Fq^(n+1), whilst preserving containment of lines within planes. In other words, they permute the points and lines of PG(n,Fq) and preserve collinearity. However, any scalar matrix within GL(n+1,Fq) - that is, kI, where k is in Fq\\{0} and I is the identity - acts as the identity on PG(n,Fq) - since if (x0:x1:...:xn) is a \"point\" of PG(n,Fq), then (kx0:kx1:...:kxn) represents the same point. So the group of projective transformations of PG(n,Fq) is actually GL(n+1,Fq) factored out by scalar multiplications. This group is called the projective general linear group, PGL(n+1,Fq).</div><div><br /></div><div>If we are given a symmetry of PG(n,Fq), expressed as a permutation, then we can express it as a matrix by looking at what it does to the basis vectors. For example, consider the symmetry [[[0,0,1],[0,1,0]],[[1,0,1],[1,1,0]]] of PG(2,F2) from above. It sends [1,0,0] to [1,0,0], [0,1,0] to [0,0,1], and [0,0,1] to [0,1,0]. So it can be represented by the matrix</div><div><code></code></div><div>[1 0 0]</div><div>[0 0 1]</div><div>[0 1 0]</div><div></div><div><br /></div><div>We already worked out the order of GL(n,Fq) in the orderGL function. There are q-1 non-zero scalars to factor out by. So the order of PGL(n,Fq) will be given by the following:</div><div><br /></div><div><code></code></div><div>orderPGL n q = orderGL n q `div` (q-1)</div><div></div><div><br /></div><div>Let's test it (remembering that we want PGL(n+1,Fq) for PG(n,Fq)):</div><div><br /></div><div><code></code></div><div>&gt; orderPGL 3 2</div><div>168</div><div>&gt; orderSGS $ incidenceAuts $ incidenceGraphPG 2 f3</div><div>5616</div><div>&gt; orderPGL 3 3</div><div>5616</div><div>&gt; orderSGS $ incidenceAuts $ incidenceGraphPG 2 f4</div><div>120960</div><div>&gt; orderPGL 3 4</div><div>60480</div><div></div><div><br /></div><div>With F4, we get twice as many automorphisms as we might have expected. If you've been paying attention, you'll remember that this is because F4 has a field automorphism (the Frobenius automorphism) of order 2. The extended group, PGL(n,Fq) plus field automorphisms, is called PGammaL(n,Fq) (or better - but I'm not sure this will work for everybody - P&#x0393;L(n,Fq)).</div><div><br /></div><div>Now, this is kind of a trivial point, but I think it's significant: PG(n,Fq) has <i>more</i> symmetries than AG(n,Fq). Somehow, by adding the points at infinity, PG(n,Fq) has made AG(n,Fq) \"whole\", making it more symmetrical.</div><div><br /></div><div>Anyway, that'll do for now. Next week, just a few more odds and ends about finite geometries.</div><div><br /></div><div class=\"blogger-post-footer\"><img width=\"1\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/5195188167565410449-5701363515709149075?l=haskellformaths.blogspot.com\" /></div>") (pubDate nil "Thu, 08 Oct 2009 21:21:17 +0000") (dc:creator nil "DavidA (noreply@blogger.com)")) (item nil (title nil "Eric Kow (kowey): darcs hashed-storage work merged (woo!)") (guid ((isPermalink . "false")) "tag:blogger.com,1999:blog-21123659.post-9087798580733835413") (link nil "http://koweycode.blogspot.com/2009/10/darcs-hashed-storage-work-merged-woo.html") (description nil "<p><span>The following is a copy of my recent post to the darcs-users mailing list.</span><br /></p><p>Hi everybody,</p><p>So you may have noticed me saying this in a couple of recent threads. Petr Ročkai's hashed-storage work from his 2009 Google Summer of Code project has been merged!</p><p>I thought I would take a few moments to give everybody an overview of how this work benefits us, and where we'll be going in the future.</p><div id=\"in-a-nutshell\"><h4>In a nutshell</h4><p>What does this mean for you? Faster repository-local operations.</p><p>Hashed format repositories (with darcs-1 and darcs-2 patches alike) should now be faster to use on a daily basis. We saw the very beginnings of this work in Darcs 2.3.0 with a faster darcs whatsnew. Now these speed improvements cover <em>all</em> repository-local operations.</p><p>The next Darcs beta is a couple of months away, but before that, I would like to encourage you to try this out for yourself:</p><pre>darcs get --lazy http://darcs.net<br />cd darcs.net<br />cabal install</pre><p>For best results, please run <tt>darcs optimize --upgrade</tt> followed by <tt>darcs optimize --pristine</tt>. Pay attention over the next couple of weeks when you try a record, amend, revert, unrecord. If we've done our work right, there should be nothing to see. Darcs should be less noticeable, with fewer \"Synchronizing pristine\" messages and a faster return to the command prompt. We think you'll like it. But please get back to us. Is Darcs faster for you?</p><p>If you're particularly interested, I will step through these changes in greater detail at the end of this message. Meanwhile, I would like to step back a little and take stock of how these improvements fit in to the bigger picture.</p></div><div id=\"the-road-ahead\"><h4>The road ahead</h4><p>The hashed storage work is a big step forward and definitely a cause for celebration. I think it is useful to reflect on this progress and consider how it fits in with our progress since darcs 1.0.9:</p><blockquote><ul><li>ssh connection sharing (darcs transfer mode)</li><li>HTTP pipelining</li><li>lazy repositories</li><li>the global cache</li></ul></blockquote><p>and now</p><blockquote><ul><li>index-based diffing</li><li>hashed-storage efficiency</li></ul></blockquote><p>We cannot promise that Darcs will magically become fast overnight. But what we can and will do is continue chipping away at it, solving problems one at a time; release by release, a little bit better, a little bit faster every time until one day we can look back and marvel at all the progress we've made.</p><p>So Petr's work makes Darcs easier to live with on a day-to-day basis. But that's not enough. Now we need to turn our attention to that crucial first impression; what happens when people try Darcs out for the first time is that they darcs get a repository they want and... then... they... wait...</p><p>This is embarrassing, but we can fix it. In fact, we already have started working on the problem. The next version of hashed-storage will likely introduce a notion of \"packs\" in which the many often very small files that Darcs keeps track of will be concatenated into more substantial \"packs\" that compress better and reduce the ill effects of latency. My hope is that we will be able to complete the packs work by Darcs 2.5.</p><p>There's a lot more progress to be made: smarter patch representations, tuning for large patches, file-to-patch caching for long histories. And that's just performance! For more details about our performance work, please have a look at</p><blockquote><p><a href=\"http://tinyurl.com/darcs-performance2\">http://tinyurl.com/darcs-performance2</a></p></blockquote><p>If you could do anything to help, benchmark, profile, anything at all, please let us know :-)</p><p>The fight continues.</p></div><div id=\"thank-you\"><h4>Thank-you!</h4><p>Petr and Ganesh deserve a huge round of applause. Petr, thanks for thinking up this work, getting it done and pushing it through. Ganesh, thanks for an extremely thorough and thoughtful review. The two of you, thanks for holding on, for tenacious cooperation in the face of adversity.</p><p>Thanks also to all the wider Darcs community for all your support, comments, patch reviews.</p><p>I'm looking forward to seeing you at the upcoming Darcs hacking sprint. The sprint will take place in Vienna, Austria on the weekend of 14-15 November. Everybody, especially Darcs and Haskell newbies, is welcome to join in. Details on <a href=\"http://wiki.darcs.net/Sprints/2009-11\">http://wiki.darcs.net/Sprints/2009-11</a></p><p>And if I may take a paragraph to mention this, Darcs needs your support. Every little counts, if you can send patches, review patches, tweak documentation, profile, benchmark, submit bug reports. Barring that, you could also make a contribution to our travel fund via the Software Freedom Conservancy. See <a href=\"http://darcs.net/donations.html\">http://darcs.net/donations.html</a> for details.</p><p>Thanks everybody and enjoy!</p><p>Eric</p></div><div id=\"changes-in-detail\"><h4>Changes in detail</h4><ul><li><p>Darcs uses an \"index\" file to compute working directory and pristine cache diffs. This avoids timestamps going out of synch when you have multiple local branches, which saves a huge and needless slowdown.</p></li><li><p>Hashed storage is more efficient in general. Even if you already have perfect timestamps, the new optimisations should make Darcs faster in general.</p></li><li><p>The new 'darcs optimize --pristine' reduces spurious mismatches on directories.</p></li><li><p>Darcs no longer requires a one second sleep after applying patches.</p></li></ul></div><div class=\"blogger-post-footer\"><img width=\"1\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/21123659-9087798580733835413?l=koweycode.blogspot.com\" /></div>") (pubDate nil "Thu, 08 Oct 2009 19:47:59 +0000") (dc:creator nil "kowey (noreply@blogger.com)")) (item nil (title nil "Clint Moore: RWC Release") (guid ((isPermalink . "false")) "tag:blogger.com,1999:blog-6413440605058096337.post-5387444684188592007") (link nil "http://www.l2mlogistics.com/2009/10/rwc-release.html") (description nil "Actually, it's more like \"I wonder if these binaries work on other machines?\".<br /><br />Get your data directory <a href=\"http://dl.getdropbox.com/u/47442/uxxcfx/rwc-data-091008.tgz\">here</a><br /><br />Pick a binary for your particular system:<br /><br /><a href=\"http://dl.getdropbox.com/u/47442/uxxcfx/rwc-lnx-64-091008\">Linux x86_64</a><br /><a href=\"http://dl.getdropbox.com/u/47442/uxxcfx/rwc-osx-32-091008\">Mac OS X 10.5</a><br /><br />Now drop the binary into the data directory and run the binary through a terminal or however you choose - just make sure that the cwd when you run it is the top of the data directory.  Finally, go to http://localhost:8081/ and poke around.<br /><br />There are two pretty big bugs that will most likely make it so you won't want to use this particular release as an everyday client.<br /><br />1. There's no direct message support yet.<br />2. This facebook handling in this particular release is disabled because it's amazingly broken.  I'll fix it by the next release.<br /><br />Oh, there's a little hidden menu if you click an avatar for marking all messages from that user as read, and... one more thing that I can't remember.  I'm going to write some docs one of these days, I swear.<div class=\"blogger-post-footer\"><img width=\"1\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/6413440605058096337-5387444684188592007?l=www.l2mlogistics.com\" /></div>") (pubDate nil "Thu, 08 Oct 2009 10:05:58 +0000") (dc:creator nil "hydo (noreply@blogger.com)")) (item nil (title nil "\"The GHC Team\": Parallelism /= Concurrency") (guid ((isPermalink . "false")) "http://ghcmutterings.wordpress.com/?p=94") (link nil "http://ghcmutterings.wordpress.com/2009/10/06/parallelism-concurrency/") (description nil "<div class=\"snap_preview\"><br /><p>If you want to make programs go faster on parallel hardware, that you need some kind of concurrency.  Right?</p>\n<p>In this article I&#8217;d like to explain why the above statement is false, and why we should be very clear about the distinction between concurrency and parallelism.  I should stress that these ideas are not mine, and are by no means new, but I think it&#8217;s important that this issue is well understood if we&#8217;re to find a way to enable everyday programmers to use multicore CPUs.  I was moved to write about this after reading Tim Bray&#8217;s articles on <a href=\"http://www.tbray.org/ongoing/When/200x/2009/09/27/Concur-dot-next\">Concur.next</a>: while I agree with a lot of what&#8217;s said there, particularly statements like</p>\n<blockquote><p>Exposing real pre-emptive threading with shared mutable data structures to application programmers is <em>wrong</em></p></blockquote>\n<p>it seems that parallelism and concurrency are still being conflated. Yes we need concurrency in our languages, but if all we want to do is make programs run faster on a multicore, concurrency should be a last resort.</p>\n<p>First, I&#8217;ll try to establish the terminology.</p>\n<p>A <strong>concurrent</strong> program is one with multiple threads of control.  Each thread of control has effects on the world, and those threads are interleaved in some arbitrary way by the scheduler.  We say that a concurrent programming language is <em>non-deterministic</em>, because the total effect of the program may depend on the particular interleaving at runtime.  The programmer has the tricky task of controlling this non-determinism using synchronisation, to make sure that the program ends up doing what it was supposed to do regardless of the scheduling order.  And that&#8217;s no mean feat, because there&#8217;s no reasonable way to test that you have covered all the cases.  This is regardless of what synchronisation technology you&#8217;re using: yes, STM is better than locks, and message passing has its advantages, but all of these are just ways to communicate between threads in a non-deterministic language.</p>\n<p>A <strong>parallel</strong> program, on the other hand, is one that merely runs on multiple processors, with the goal of hopefully running faster than it would on a single CPU.</p>\n<p>So where did this dangerous assumption that Parallelism == Concurrency come from?  It&#8217;s a natural consequence of languages with side-effects: when your language has side-effects everywhere, then any time you try to do more than one thing at a time you essentially have non-determinism caused by the interleaving of the effects from each operation.  So in side-effecty languages, the only way to get parallelism is concurrency; it&#8217;s therefore not surprising that we often see the two conflated.</p>\n<p>However, in a side-effect-free language, you are free to run different parts of the program at the same time without observing any difference in the result.  This is one reason that our salvation lies in programming languages with controlled side-effects.  The way forward for those side-effecty languages is to start being more explicit about the effects, so that the effect-free parts can be identified and exploited.</p>\n<p>It pains me to see <a href=\"http://www.sauria.com/blog/2009/10/05/the-cambrian-period-of-concurrency/\">Haskell&#8217;s concurrency compared against the concurrency support in other languages</a>, when the goal is simply to make use of multicore CPUs (<strong>Edit</strong>: Ted <a href=\"http://www.sauria.com/blog/2009/10/06/concurrency-parallelism/\">followed up with a clarification</a>).   It&#8217;s missing the point: yes of course Haskell has the best concurrency support <img src=\"http://s.wordpress.com/wp-includes/images/smilies/icon_smile.gif\" alt=\":-)\" class=\"wp-smiley\" /> , but for this problem domain it has something even better: deterministic parallelism.  In Haskell you can use multicore CPUs without getting your hands dirty with concurrency and non-determinism, without having to get the synchronisation right, and with a guarantee that the parallel program gives the same answer every time, just more quickly.</p>\n<p>There are two facets to Haskell&#8217;s determinstic parallelism support:</p>\n<ul>\n<li> par/pseq and Strategies.  These give you a way to add parallelism to an existing program, usually without requiring much restructuring.  For instance, there&#8217;s a parallel version of &#8216;map&#8217;.    Support for this kind of parallelism is maturing with the soon to be released GHC 6.12.1, where we made some <a href=\"http://www.haskell.org/~simonmar/bib/multicore-ghc-09_abstract.html\">significant performance improvements</a> over previous versions.</li>\n<li><a href=\"http://www.cse.unsw.edu.au/~chak/papers/PLKC08.html\">Nested Data Parallelism</a>.  This is for taking advantage of parallelism in algorithms that are best expressed by composing operations on (possibly nested) arrays.  The compiler takes care of flattening the array structure, fusing array operations, and dividing the work amongst the available CPUs.  Data-Parallel Haskell will let us take advantage of GPUs and many-core machines for large-scale data-parallelism in the future.  Right now, DPH support in GHC is experimental, but work on it continues.</li>\n</ul>\n<p>That&#8217;s not to say that concurrency doesn&#8217;t have its place.  So when should you use concurrency?  Concurrency is most useful as a method for structuring a program that needs to communicate with multiple external clients simultaneously, or respond to multiple asynchronous inputs.  It&#8217;s perfect for a GUI that needs to respond to user input while talking to a database and updating the display at the same time, for a network application that talks to multiple clients simultaneously, or a program that communicates with multiple hardware devices, for example.  Concurrency lets you structure the program as if each individual communication is a sequential task, or a <em>thread</em>, and in these kinds of settings it&#8217;s often the ideal abstraction.  STM is vitally important for making this kind of programming more tractable.</p>\n<p>As luck would have it, we can run concurrent programs in parallel without changing their semantics.  However, concurrent programs are often not compute-bound, so there&#8217;s not a great deal to be gained by actually running them in parallel, except perhaps for lower latency.</p>\n<p>Having said all this, there is some overlap between concurrency and parallelism.  Some algorithms use multiple threads for parallelism deliberately; for example, search-type problems in which multiple threads search branches of a problem space, where knowledge gained in one branch may be exploited in other concurrent searches.  SAT-solvers and game-playing algorithms are good examples.  An open problem is how to incorporate this kind of non-deterministic parallelism in a safe way: in Haskell these algorithms would end up in the IO monad, despite the fact that the result could be deterministic.  Still, I believe these kinds of problems are in the minority, and we can get a long way with purely deterministic parallelism.</p>\n<p>You&#8217;ll be glad to know that with GHC you can freely mix parallelism and concurrency on multicore CPUs to your heart&#8217;s content.  Knock yourself out <img src=\"http://s.wordpress.com/wp-includes/images/smilies/icon_smile.gif\" alt=\":-)\" class=\"wp-smiley\" /> </p>\n  <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gocomments/ghcmutterings.wordpress.com/94/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/ghcmutterings.wordpress.com/94/\" /></a> <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/godelicious/ghcmutterings.wordpress.com/94/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/delicious/ghcmutterings.wordpress.com/94/\" /></a> <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gostumble/ghcmutterings.wordpress.com/94/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/stumble/ghcmutterings.wordpress.com/94/\" /></a> <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/godigg/ghcmutterings.wordpress.com/94/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/digg/ghcmutterings.wordpress.com/94/\" /></a> <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/goreddit/ghcmutterings.wordpress.com/94/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/reddit/ghcmutterings.wordpress.com/94/\" /></a> <img alt=\"\" border=\"0\" src=\"http://stats.wordpress.com/b.gif?host=ghcmutterings.wordpress.com&amp;blog=4970297&amp;post=94&amp;subd=ghcmutterings&amp;ref=&amp;feed=1\" /></div>") (pubDate nil "Thu, 08 Oct 2009 08:12:23 +0000") (dc:creator nil "simonmar")))) ("Edward Z. Yang: How Ur/Web records work and what it might mean for Haskell" "<div class=\"document\">\n<p><a href=\"http://www.impredicative.com/ur/\" class=\"reference external\">Ur</a> is a programming language, which among other things, has a rather interesting record system.  Record systems are a topic of rather <a href=\"http://hackage.haskell.org/trac/ghc/wiki/Records\" class=\"reference external\">intense debate</a> in the Haskell community, and I noticed that someone had remarked “[Ur/Web has a  <a href=\"http://www.impredicative.com/ur/tutorial/tlc.html\" class=\"reference external\">http://www.impredicative.com/ur/tutorial/tlc.html</a> very advanced records system]. If someone could look at  the UR implementation paper and attempt to distill a records explanation to a Haskell point of view that would be very helpful!” This post attempts to perform that distillation, based off my experiences interacting with the Ur record system and one of its primary reasons for existence: metaprogramming. (Minor nomenclature note: Ur is the base language, while Ur/Web is a specialization of the base language for web programming, that also happens to actually have a compiler. For the sake of technical precision, I will refer to the language as Ur throughout this article.)</p>\n<div id=\"records-and-algebraic-data-types-are-not-the-same-thing\" class=\"section\">\n<h3>Records and algebraic data types are not the same thing</h3>\n<p>In Haskell, if you want to define a record, you have to go and write out a <tt class=\"docutils literal\">data</tt> declaration:</p>\n<pre class=\"literal-block\">data Foo = Foo { bar :: Int, baz :: Bool }\n</pre>\n<p>In Ur, these two concepts are separate: you can define an algebraic data type (the <tt class=\"docutils literal\">Foo</tt> constructor) and you can write types which describe a record (the <tt class=\"docutils literal\">{ foo :: Int, bar :: Bool}</tt> bit of the type). To emphasize this point, there are actually a lot of ways I can spell this record in Ur/Web. I can define a type synonym:</p>\n<pre class=\"literal-block\">type foo = { Bar : int, Baz : bool }\n</pre>\n<p>which offers me no protection from mixing it up with a structurally similar but semantically different <tt class=\"docutils literal\">type qux = { Bar : int, Baz : bool }</tt>, or I can define:</p>\n<pre class=\"literal-block\">datatype foo = Foo of { Bar : int, Baz : bool }\n</pre>\n<p>which desugars into:</p>\n<pre class=\"literal-block\">type foo' = { Bar : int, Baz : bool }\ndatatype foo = Foo of foo'\n</pre>\n<p>that is to say, the datatype has a single constructor, which takes only one argument, which is a record! This definition is closer to the spirit of the original Haskell definition. (ML users might be familiar with this style; Ur definitely comes from that lineage.)</p>\n<p>This design of separating algebraic data types from records means we now have obvious facilities for record construction (<tt class=\"docutils literal\">let val x = { Bar = 2, Baz = true }</tt>) and record projection (<tt class=\"docutils literal\">x.Bar</tt>); though if I have a datatype I have to unwrap it before I can project from it. These record types are unique up to permutation (order doesn't matter), which makes them a bit more interesting than <tt class=\"docutils literal\">HList</tt>. They are also nicely parsimonious: unit is just the empty record type <tt class=\"docutils literal\">{}</tt>, and tuples are just records with special field names: <tt class=\"docutils literal\">1</tt>, <tt class=\"docutils literal\">2</tt>, etc.</p>\n</div>\n<div id=\"types-and-kinds-of-records\" class=\"section\">\n<h3>Types and kinds of records</h3>\n<p>Now, if this was all there was to the Ur record system, it wouldn't be very interesting.  But actually, the field <tt class=\"docutils literal\">#Bar</tt> is a first class expression in the language, and the curly brace record type syntax is actually syntax sugar! Unpacking this will require us to define quite a few new kinds, as well as a lot of type level computation.</p>\n<p>In vanilla Haskell, we have only one kind: <tt class=\"docutils literal\">*</tt>, which in Ur parlance is a <tt class=\"docutils literal\">Type</tt>. Values inhabit types which inhabit this kind. Ur's record system, however, demands more exotic kinds: one such kind is the <tt class=\"docutils literal\">Name</tt> kind, which represents a record field name (<tt class=\"docutils literal\">#Foo</tt> is one). However, GHC has this already: it is the <a href=\"http://hackage.haskell.org/trac/ghc/wiki/TypeNats/Basics\" class=\"reference external\">recently added</a> <tt class=\"docutils literal\">Symbol</tt> kind. What GHC doesn't have, however, is the kind constructor <tt class=\"docutils literal\">{k}</tt>, which is the kind of a “type-level record.” If value-level records are things that contain data, type-level records are the things that <em>describe</em> value-level records. They are not, however, the <em>type</em> of the value-level records (because if they were, their kind would be <tt class=\"docutils literal\">Type</tt>). Let’s look at a concrete example.</p>\n<p>When I write:</p>\n<pre class=\"literal-block\">type foo = { Bar : int, Baz : bool }\n</pre>\n<p>What I’m really writing is:</p>\n<pre class=\"literal-block\">type foo = $[ Bar = int, Baz = bool ]\n</pre>\n<p>The <tt class=\"docutils literal\">$</tt> is a type level operator, being applied to the expression <tt class=\"docutils literal\">[ Bar = int, Baz = bool ]</tt>, which is a type level record, specifically of kind <tt class=\"docutils literal\">{Type}</tt> (the “values” of the record are types). The dollar sign takes type level records, and transforms them into <tt class=\"docutils literal\">Type</tt> (so that they can actually be inhabited by values).</p>\n<p>This may seem like a meaningless distinction, until you realize that Ur has type level operators which work only on type level records, and not types in general. The two most important primitive type level operations are concatenation and map. They both do what you might expect: concatenation takes two records and puts them together, and map takes a type level function and applies it to every member of the record: so I can easily transform <tt class=\"docutils literal\">[ Bar = int, Baz = bool ]</tt> into <tt class=\"docutils literal\">[ Bar = list int, Baz = list bool ]</tt> by mapping the list type constructor. Extensible records and metaprogramming dispatched in one swoop!</p>\n<p>Now, recall that field names all live in a global namespace. So what happens if I attempt to do <tt class=\"docutils literal\">[ Bar = bool ] ++ [ Bar = int ]</tt>? The Ur type checker will reject this statement as ill-typed, because I have not provided the (unsatisfiable) proof obligation that these records are <em>disjoint</em>. In general, if I have two record types <tt class=\"docutils literal\">t1</tt> and <tt class=\"docutils literal\">t2</tt> which I would like to concatenate, I need a disjointness proof <tt class=\"docutils literal\">[t1 ~ t2]</tt>. Handling disjointness proofs feels rather unusual to users coming from traditional functional programming languages, but not all that odd for users of dependently typed languages. In fact, the Ur/Web compiler makes handling disjointness obligations very easy, automatically inferring them for you if possible and knowing some basic facts about about concatenate and map.</p>\n</div>\n<div id=\"type-level-computation\" class=\"section\">\n<h3>Type level computation</h3>\n<p>The Ur record system crucially relies on type level computation for its expressiveness: we can expand, shrink and map over records, and we can also take advantage of “folders”, which are functions which use the type level records as structure to allow generic folding over records. For more information about these, I suggest consulting the <a href=\"http://www.impredicative.com/ur/tutorial/tlc.html\" class=\"reference external\">type level computation tutorial</a>. But in order to offer these features in a user friendly way, Ur crucially relies on a compiler which has some level of knowledge of how these operators work, in order to avoid making users discharge lots of trivial proof obligations.</p>\n<p>Unfortunately, here I must admit ignorance as to how the rest of the Haskell record proposals work, as well as how a record system like this would interact with Haskell (Ur does have typeclasses, so this interaction is at least reasonably well studied.) While this proposal has the benefit of having a well specified system in an existing language, it is complex, and definitely shooting for the moon. But I think it says a bit about what might have to be added, beyond type-level strings, to fulfill <a href=\"http://www.haskell.org/pipermail/glasgow-haskell-users/2011-December/021410.html\" class=\"reference external\">Gershom Bazerman's vision here</a>:</p>\n<blockquote>\nIt seems to me that there's only one essential missing language feature, which is appropriately-kinded type-level strings (and, ideally, the ability to reflect these strings back down to the value level). Given that, template haskell, and the HList bag of tricks, I'm confident that a fair number of elegant records packages can be crafted. Based on that experience, we can then decide what syntactic sugar would be useful to elide the TH layer altogether.</blockquote>\n</div>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/ezyang/~4/1TrPB8Vhsyg\" height=\"1\" width=\"1\" />" "http://feedproxy.google.com/~r/ezyang/~3/1TrPB8Vhsyg/" (20368 62233) obsolete 1 nil nil ((title nil "Edward Z. Yang: How Ur/Web records work and what it might mean for Haskell") (guid ((isPermaLink . "false")) "http://blog.ezyang.com/?p=6745") (link nil "http://feedproxy.google.com/~r/ezyang/~3/1TrPB8Vhsyg/") (description nil "<div class=\"document\">\n\n\n\n<p><a href=\"http://www.impredicative.com/ur/\" class=\"reference external\">Ur</a> is a programming language, which among other things, has a rather interesting record system.  Record systems are a topic of rather <a href=\"http://hackage.haskell.org/trac/ghc/wiki/Records\" class=\"reference external\">intense debate</a> in the Haskell community, and I noticed that someone had remarked “[Ur/Web has a  <a href=\"http://www.impredicative.com/ur/tutorial/tlc.html\" class=\"reference external\">http://www.impredicative.com/ur/tutorial/tlc.html</a> very advanced records system]. If someone could look at  the UR implementation paper and attempt to distill a records explanation to a Haskell point of view that would be very helpful!” This post attempts to perform that distillation, based off my experiences interacting with the Ur record system and one of its primary reasons for existence: metaprogramming. (Minor nomenclature note: Ur is the base language, while Ur/Web is a specialization of the base language for web programming, that also happens to actually have a compiler. For the sake of technical precision, I will refer to the language as Ur throughout this article.)</p>\n<div id=\"records-and-algebraic-data-types-are-not-the-same-thing\" class=\"section\">\n<h3>Records and algebraic data types are not the same thing</h3>\n<p>In Haskell, if you want to define a record, you have to go and write out a <tt class=\"docutils literal\">data</tt> declaration:</p>\n<pre class=\"literal-block\">data Foo = Foo { bar :: Int, baz :: Bool }\n</pre>\n<p>In Ur, these two concepts are separate: you can define an algebraic data type (the <tt class=\"docutils literal\">Foo</tt> constructor) and you can write types which describe a record (the <tt class=\"docutils literal\">{ foo :: Int, bar :: Bool}</tt> bit of the type). To emphasize this point, there are actually a lot of ways I can spell this record in Ur/Web. I can define a type synonym:</p>\n<pre class=\"literal-block\">type foo = { Bar : int, Baz : bool }\n</pre>\n<p>which offers me no protection from mixing it up with a structurally similar but semantically different <tt class=\"docutils literal\">type qux = { Bar : int, Baz : bool }</tt>, or I can define:</p>\n<pre class=\"literal-block\">datatype foo = Foo of { Bar : int, Baz : bool }\n</pre>\n<p>which desugars into:</p>\n<pre class=\"literal-block\">type foo' = { Bar : int, Baz : bool }\ndatatype foo = Foo of foo'\n</pre>\n<p>that is to say, the datatype has a single constructor, which takes only one argument, which is a record! This definition is closer to the spirit of the original Haskell definition. (ML users might be familiar with this style; Ur definitely comes from that lineage.)</p>\n<p>This design of separating algebraic data types from records means we now have obvious facilities for record construction (<tt class=\"docutils literal\">let val x = { Bar = 2, Baz = true }</tt>) and record projection (<tt class=\"docutils literal\">x.Bar</tt>); though if I have a datatype I have to unwrap it before I can project from it. These record types are unique up to permutation (order doesn't matter), which makes them a bit more interesting than <tt class=\"docutils literal\">HList</tt>. They are also nicely parsimonious: unit is just the empty record type <tt class=\"docutils literal\">{}</tt>, and tuples are just records with special field names: <tt class=\"docutils literal\">1</tt>, <tt class=\"docutils literal\">2</tt>, etc.</p>\n</div>\n<div id=\"types-and-kinds-of-records\" class=\"section\">\n<h3>Types and kinds of records</h3>\n<p>Now, if this was all there was to the Ur record system, it wouldn't be very interesting.  But actually, the field <tt class=\"docutils literal\">#Bar</tt> is a first class expression in the language, and the curly brace record type syntax is actually syntax sugar! Unpacking this will require us to define quite a few new kinds, as well as a lot of type level computation.</p>\n<p>In vanilla Haskell, we have only one kind: <tt class=\"docutils literal\">*</tt>, which in Ur parlance is a <tt class=\"docutils literal\">Type</tt>. Values inhabit types which inhabit this kind. Ur's record system, however, demands more exotic kinds: one such kind is the <tt class=\"docutils literal\">Name</tt> kind, which represents a record field name (<tt class=\"docutils literal\">#Foo</tt> is one). However, GHC has this already: it is the <a href=\"http://hackage.haskell.org/trac/ghc/wiki/TypeNats/Basics\" class=\"reference external\">recently added</a> <tt class=\"docutils literal\">Symbol</tt> kind. What GHC doesn't have, however, is the kind constructor <tt class=\"docutils literal\">{k}</tt>, which is the kind of a “type-level record.” If value-level records are things that contain data, type-level records are the things that <em>describe</em> value-level records. They are not, however, the <em>type</em> of the value-level records (because if they were, their kind would be <tt class=\"docutils literal\">Type</tt>). Let’s look at a concrete example.</p>\n<p>When I write:</p>\n<pre class=\"literal-block\">type foo = { Bar : int, Baz : bool }\n</pre>\n<p>What I’m really writing is:</p>\n<pre class=\"literal-block\">type foo = $[ Bar = int, Baz = bool ]\n</pre>\n<p>The <tt class=\"docutils literal\">$</tt> is a type level operator, being applied to the expression <tt class=\"docutils literal\">[ Bar = int, Baz = bool ]</tt>, which is a type level record, specifically of kind <tt class=\"docutils literal\">{Type}</tt> (the “values” of the record are types). The dollar sign takes type level records, and transforms them into <tt class=\"docutils literal\">Type</tt> (so that they can actually be inhabited by values).</p>\n<p>This may seem like a meaningless distinction, until you realize that Ur has type level operators which work only on type level records, and not types in general. The two most important primitive type level operations are concatenation and map. They both do what you might expect: concatenation takes two records and puts them together, and map takes a type level function and applies it to every member of the record: so I can easily transform <tt class=\"docutils literal\">[ Bar = int, Baz = bool ]</tt> into <tt class=\"docutils literal\">[ Bar = list int, Baz = list bool ]</tt> by mapping the list type constructor. Extensible records and metaprogramming dispatched in one swoop!</p>\n<p>Now, recall that field names all live in a global namespace. So what happens if I attempt to do <tt class=\"docutils literal\">[ Bar = bool ] ++ [ Bar = int ]</tt>? The Ur type checker will reject this statement as ill-typed, because I have not provided the (unsatisfiable) proof obligation that these records are <em>disjoint</em>. In general, if I have two record types <tt class=\"docutils literal\">t1</tt> and <tt class=\"docutils literal\">t2</tt> which I would like to concatenate, I need a disjointness proof <tt class=\"docutils literal\">[t1 ~ t2]</tt>. Handling disjointness proofs feels rather unusual to users coming from traditional functional programming languages, but not all that odd for users of dependently typed languages. In fact, the Ur/Web compiler makes handling disjointness obligations very easy, automatically inferring them for you if possible and knowing some basic facts about about concatenate and map.</p>\n</div>\n<div id=\"type-level-computation\" class=\"section\">\n<h3>Type level computation</h3>\n<p>The Ur record system crucially relies on type level computation for its expressiveness: we can expand, shrink and map over records, and we can also take advantage of “folders”, which are functions which use the type level records as structure to allow generic folding over records. For more information about these, I suggest consulting the <a href=\"http://www.impredicative.com/ur/tutorial/tlc.html\" class=\"reference external\">type level computation tutorial</a>. But in order to offer these features in a user friendly way, Ur crucially relies on a compiler which has some level of knowledge of how these operators work, in order to avoid making users discharge lots of trivial proof obligations.</p>\n<p>Unfortunately, here I must admit ignorance as to how the rest of the Haskell record proposals work, as well as how a record system like this would interact with Haskell (Ur does have typeclasses, so this interaction is at least reasonably well studied.) While this proposal has the benefit of having a well specified system in an existing language, it is complex, and definitely shooting for the moon. But I think it says a bit about what might have to be added, beyond type-level strings, to fulfill <a href=\"http://www.haskell.org/pipermail/glasgow-haskell-users/2011-December/021410.html\" class=\"reference external\">Gershom Bazerman's vision here</a>:</p>\n<blockquote>\nIt seems to me that there's only one essential missing language feature, which is appropriately-kinded type-level strings (and, ideally, the ability to reflect these strings back down to the value level). Given that, template haskell, and the HList bag of tricks, I'm confident that a fair number of elegant records packages can be crafted. Based on that experience, we can then decide what syntactic sugar would be useful to elide the TH layer altogether.</blockquote>\n</div>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/ezyang/~4/1TrPB8Vhsyg\" height=\"1\" width=\"1\" />") (pubDate nil "Fri, 20 Apr 2012 05:24:41 +0000"))) ("Chris Smith: Juggling in Haskell and Gloss" "<p>Just sharing what we’ve been talking about in my classes at LSV (Little School on Vermijo) the past few days.  It all started when a math teacher I follow on Google+ posted a link to this video on the mathematics of juggling, by Cornell professor Allen Knutson.</p>\n<span style=\"text-align: center; display: block;\"><a href=\"http://cdsmith.wordpress.com/2012/02/14/juggling-in-haskell-and-gloss/\"><img src=\"http://img.youtube.com/vi/38rf9FLhl-8/2.jpg\" alt=\"\" /></a></span>\n<p>So we all watched the video, and talked about it… and then about midnight last night, I realized this would make a perfect introduction to Gloss simulations, which we’re learning about in our Haskell programming class!  Fast forward about 20 minutes of hacking, and we have this short program:</p>\n<blockquote>\n<pre>import Graphics.Gloss\nthePattern = [5,2,5,1,2]\ninitial g = (-1, 0.0, [], cycle thePattern)\nstep dt (hand, time, balls, pattern) = (newhand, newtime, newballs, newpattern)\nwhere (throw, newtime) = properFraction (time + dt)\nnewhand    = if throw == 1 then -hand else hand\nthrown     = if throw == 1 then [ (hand, newtime, head pattern) ]\nelse []\nnewpattern = if throw == 1 then tail pattern else pattern\nnewballs   = [ (bhand, btime + dt, height)\n| (bhand, btime, height) &lt;- balls,\nbtime + dt &lt; fromIntegral height ]\n++ thrown\ndraw (hand, time, balls, pattern) = pictures [\njuggler,\npictures [ ball b | b &lt;- balls ]\n]\nball (bhand, btime, height) = translate (50*x) (50*y) (circleSolid 10)\nwhere t = 1 - 2 * (btime / fromIntegral height)\nx = if even height then bhand else bhand * t\ny = if height &lt; 3 then 0 else fromIntegral (height - 1) * (1 - t^2)\njuggler = pictures [\nline [(-50, 0), (0, 25), (50, 0)],\nline [(-30, -100), (0, -50), (30, -100)],\nline [( 0, 25), (0, -50)],\ntranslate 0 50 (circle 25)\n]</pre>\n</blockquote>\n<p>Feel free to <a href=\"http://dac4.designacourse.com:8000/simulateInBrowser?digest=pVrxT4T5JmIWBjSRK3ROfA%3d%3d\">check it out</a>.</p>\n<p>This isn’t the best code in the world, because I deliberately write it to avoid as many ideas as I can that we haven’t talked about in my Haskell class.  Among those, for example, are any kind of user-defined data types, or any structured data other than tuples and lists!  I’ve also used list comprehensions when maps and filters might be clearer, for the same reason: we’ve <em>done</em> list comprehensions in class!  Those are coming soon, but for the time being, it’s not too hard to see what’s going on here.  A couple notes about the world type:</p>\n<ul>\n<li>The state of world comprises four pieces of information: which hand will throw next, how much time has passed since the last throw, what balls are in the air, and what pattern is coming up next.  Since we don’t have user-defined types and it makes the math easy, I’ve described hands as -1 for left, and +1 for right.</li>\n<li>The balls in the air form a list, but each element of that list is another tuple, containing the hand the ball was thrown from, how long it has been in the air, and its height.</li>\n</ul>\n<p>So like all Gloss simulations, we need to specify three things:</p>\n<ol>\n<li><em>The initial state.</em>  This is the left hand, no time since the last throw, no balls in the air, and the pattern sitting ahead of us.  The cycle function turns a finite list into an infinite repeating one.</li>\n<li><em>The step function.</em>  This is where most of the logic sits… there are a lot of bits, but it does what you’d expect!  Every second, a ball is thrown, and the hand switches sides.  We update the balls to add to their time in the air, and keep only the ones that haven’t landed.  When a ball is thrown, we add it.  And each time we drop a number from the pattern.</li>\n<li><em>The draw function.</em>  This draws the juggler and all of the balls.  The balls are drawn with some faux-physicsy thing that, frankly, is just the result of fiddling and isn’t an accurate physics simulation.  I can get away with that when teaching middle schoolers!  Hey, at least they follow parabolas; just not all with the same acceleration.  In class I just skimmed over the math for where the ball appears, since the class right now is about the state type, and drawing is something they’ve been doing all year anyway.</li>\n</ol>\n<p>Definitely a lot of fun.  I encourage you to copy and paste the code above into <a href=\"http://dac4.designacourse.com:8000/sim\">http://dac4.designacourse.com:8000/sim</a> and fiddle with the patterns and see what they look like!</p>\n<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/cdsmith.wordpress.com/495/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/cdsmith.wordpress.com/495/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godelicious/cdsmith.wordpress.com/495/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/delicious/cdsmith.wordpress.com/495/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gofacebook/cdsmith.wordpress.com/495/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/facebook/cdsmith.wordpress.com/495/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gotwitter/cdsmith.wordpress.com/495/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/twitter/cdsmith.wordpress.com/495/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gostumble/cdsmith.wordpress.com/495/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/stumble/cdsmith.wordpress.com/495/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godigg/cdsmith.wordpress.com/495/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/digg/cdsmith.wordpress.com/495/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/goreddit/cdsmith.wordpress.com/495/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/reddit/cdsmith.wordpress.com/495/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=cdsmith.wordpress.com&amp;blog=1158345&amp;post=495&amp;subd=cdsmith&amp;ref=&amp;feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" "http://cdsmith.wordpress.com/2012/02/14/juggling-in-haskell-and-gloss/" (20368 31298) obsolete 2 nil nil ((title nil "Chris Smith: Juggling in Haskell and Gloss") (guid ((isPermaLink . "false")) "http://cdsmith.wordpress.com/?p=495") (link nil "http://cdsmith.wordpress.com/2012/02/14/juggling-in-haskell-and-gloss/") (description nil "<p>Just sharing what we’ve been talking about in my classes at LSV (Little School on Vermijo) the past few days.  It all started when a math teacher I follow on Google+ posted a link to this video on the mathematics of juggling, by Cornell professor Allen Knutson.</p>\n<span style=\"text-align: center; display: block;\"><a href=\"http://cdsmith.wordpress.com/2012/02/14/juggling-in-haskell-and-gloss/\"><img src=\"http://img.youtube.com/vi/38rf9FLhl-8/2.jpg\" alt=\"\" /></a></span>\n<p>So we all watched the video, and talked about it… and then about midnight last night, I realized this would make a perfect introduction to Gloss simulations, which we’re learning about in our Haskell programming class!  Fast forward about 20 minutes of hacking, and we have this short program:</p>\n<blockquote>\n<pre>import Graphics.Gloss\nthePattern = [5,2,5,1,2]\ninitial g = (-1, 0.0, [], cycle thePattern)\nstep dt (hand, time, balls, pattern) = (newhand, newtime, newballs, newpattern)\n    where (throw, newtime) = properFraction (time + dt)\n          newhand    = if throw == 1 then -hand else hand\n          thrown     = if throw == 1 then [ (hand, newtime, head pattern) ]\n                                     else []\n          newpattern = if throw == 1 then tail pattern else pattern\n          newballs   = [ (bhand, btime + dt, height)\n                       | (bhand, btime, height) &lt;- balls,\n                         btime + dt &lt; fromIntegral height ]\n                       ++ thrown\ndraw (hand, time, balls, pattern) = pictures [\n    juggler,\n    pictures [ ball b | b &lt;- balls ]\n    ]\nball (bhand, btime, height) = translate (50*x) (50*y) (circleSolid 10)\n    where t = 1 - 2 * (btime / fromIntegral height)\n          x = if even height then bhand else bhand * t\n          y = if height &lt; 3 then 0 else fromIntegral (height - 1) * (1 - t^2)\njuggler = pictures [\n    line [(-50, 0), (0, 25), (50, 0)],\n    line [(-30, -100), (0, -50), (30, -100)],\n    line [( 0, 25), (0, -50)],\n    translate 0 50 (circle 25)\n    ]</pre>\n</blockquote>\n<p>Feel free to <a href=\"http://dac4.designacourse.com:8000/simulateInBrowser?digest=pVrxT4T5JmIWBjSRK3ROfA%3d%3d\">check it out</a>.</p>\n<p>This isn’t the best code in the world, because I deliberately write it to avoid as many ideas as I can that we haven’t talked about in my Haskell class.  Among those, for example, are any kind of user-defined data types, or any structured data other than tuples and lists!  I’ve also used list comprehensions when maps and filters might be clearer, for the same reason: we’ve <em>done</em> list comprehensions in class!  Those are coming soon, but for the time being, it’s not too hard to see what’s going on here.  A couple notes about the world type:</p>\n<ul>\n<li>The state of world comprises four pieces of information: which hand will throw next, how much time has passed since the last throw, what balls are in the air, and what pattern is coming up next.  Since we don’t have user-defined types and it makes the math easy, I’ve described hands as -1 for left, and +1 for right.</li>\n<li>The balls in the air form a list, but each element of that list is another tuple, containing the hand the ball was thrown from, how long it has been in the air, and its height.</li>\n</ul>\n<p>So like all Gloss simulations, we need to specify three things:</p>\n<ol>\n<li><em>The initial state.</em>  This is the left hand, no time since the last throw, no balls in the air, and the pattern sitting ahead of us.  The cycle function turns a finite list into an infinite repeating one.</li>\n<li><em>The step function.</em>  This is where most of the logic sits… there are a lot of bits, but it does what you’d expect!  Every second, a ball is thrown, and the hand switches sides.  We update the balls to add to their time in the air, and keep only the ones that haven’t landed.  When a ball is thrown, we add it.  And each time we drop a number from the pattern.</li>\n<li><em>The draw function.</em>  This draws the juggler and all of the balls.  The balls are drawn with some faux-physicsy thing that, frankly, is just the result of fiddling and isn’t an accurate physics simulation.  I can get away with that when teaching middle schoolers!  Hey, at least they follow parabolas; just not all with the same acceleration.  In class I just skimmed over the math for where the ball appears, since the class right now is about the state type, and drawing is something they’ve been doing all year anyway.</li>\n</ol>\n<p>Definitely a lot of fun.  I encourage you to copy and paste the code above into <a href=\"http://dac4.designacourse.com:8000/sim\">http://dac4.designacourse.com:8000/sim</a> and fiddle with the patterns and see what they look like!</p>\n<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/cdsmith.wordpress.com/495/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/cdsmith.wordpress.com/495/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godelicious/cdsmith.wordpress.com/495/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/delicious/cdsmith.wordpress.com/495/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gofacebook/cdsmith.wordpress.com/495/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/facebook/cdsmith.wordpress.com/495/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gotwitter/cdsmith.wordpress.com/495/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/twitter/cdsmith.wordpress.com/495/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gostumble/cdsmith.wordpress.com/495/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/stumble/cdsmith.wordpress.com/495/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godigg/cdsmith.wordpress.com/495/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/digg/cdsmith.wordpress.com/495/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/goreddit/cdsmith.wordpress.com/495/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/reddit/cdsmith.wordpress.com/495/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=cdsmith.wordpress.com&amp;blog=1158345&amp;post=495&amp;subd=cdsmith&amp;ref=&amp;feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />") (pubDate nil "Thu, 19 Apr 2012 20:49:06 +0000"))) ("Chris Smith: Why Do Monads Matter?" "<p>(<em>A Side Note:</em> I’ve been formulating the final thoughts on this post for about a week now. In an entirely unrelated coincidence, a good friend of mine and fellow Haskell programmer, Doug Beardsley, ended up <a href=\"http://softwaresimply.blogspot.com/2012/04/less-travelled-monad-tutorial-part-1.html\">writing two posts</a> <a href=\"http://softwaresimply.blogspot.com/2012/04/ltmt-part-2-monads.html\">about monads</a> over the weekend as well. Weird! But don’t fret; this isn’t really the same thing at all. I’m not writing to teach Haskell programmers how to use monads. I’m writing about a kind of intuition about why these concepts turn out to matter in the first place. You won’t find much here by way of how to program in Haskell.)</p>\n<h2>Category Theory for Software Development?</h2>\n<p><em>Match made in heaven? Or abstraction distraction?</em></p>\n<p><em></em>If you’re a software developer, have you heard about monads and wondered what they were? Have you tried to learn Haskell, and struggled with them? Wondered why people worry so much about them? Have you watched the videos from Microsoft’s “Channel 9″ and heard a bunch of researchy Microsoft folk talk about them, but had trouble relating them to your day-to-day programming experience?</p>\n<p>Or if you’re interested in mathematics, have you heard murmurs in the past about how category theory interests computer science people? Looked for some clear statement of why we care, and what problems we might be interested in? Wondered if it’s really true <em>at all</em>? Perhaps you are like a friend of mine (and a first-rate algebraist, too, so it’s entirely reasonable to have these questions) who asked me about this a year or so ago, remembered hearing a lot of excitement in the early 90s about category theory and computer science, but never heard whether it had really panned out or was a dead end?</p>\n<p>These are the kinds of questions I begin with. My goal is to demonstrate for you, with details and examples:</p>\n<ul>\n<li>Where category-based intuition and ideas, and monads in particular, come from in computer programming.</li>\n<li>Why the future of programming <em>does</em> lie in these ideas, and their omission in today’s mainstream languages has cost us dearly.</li>\n<li>What the state of the art looks like in applying category-based ideas to problems in computer programming.</li>\n</ul>\n<p>If you’re coming into this without a knowledge of category theory, never fear; this may be one of the gentlest introductions to the idea of categories and monads that you will find. But you’ll want to slow down and take a moment to understand the definition of a category and related ideas like function composition; these are absolutely crucial. Then you want to completely skip or just skim through the section called “What’s This Got To Do With Monads?” where I tell you how what we’re talking about here relates to the traditional math meaning of monads. Don’t worry, you don’t need to know that <em>at all</em>.</p>\n<p>On the other hand, if you’re a mathematician, you may want to skim the bits where I review basic category theory, and just dig in where I am talking about the computer programming perspective. Just be forewarned, my introduction to monads will be via Kleisli categories, so take a minute when we get to that part and make sure you’re familiar with how the relationship works out.</p>\n<p>Ready? Here goes!</p>\n<h2>Computer Programming and Functions: A Tenuous Relationship</h2>\n<p>Quick quiz: Do computer programmers use functions?</p>\n<p>Ask any computer programmer you know, and you will hear: YES! Functions are some of the most basic tools computer programmers use. Then you’ll get odd looks, for asking such a silly question. <em>Of course</em> computer programmers use functions. That’s like asking if carpenters use nails! Right?</p>\n<p>The truth, though, is a bit more complicated. To a mathematician, a function is just an association of input values to output values… and <em>that is all</em>! Any two functions that associate the same input values to the same output values are the same. Yes, you can represent functions by formulas (sometimes, anyway), but you can also represent them with just tables of inputs and outputs, or if they are functions between real numbers, as graphs. If you ask computer programmers for examples of functions, though, you will start hearing about some pretty bizarre things. I call these the “I must have skipped that day of calculus” functions. These are things that computer programmers are quite happy referring to as functions, but that to a mathematician are not really functions at all!</p>\n<ul>\n<li>“Functions” that return randomly chosen numbers… and if evaluated several times, will give a different answer each time.</li>\n<li>“Functions” that return one answer on Sundays, but a different answer on Mondays, yet another on Tuesdays, and so on.</li>\n<li>“Functions” that cause words to appear on some nearby computer screen every time you calculate their values.</li>\n</ul>\n<p>What’s going on here? Most computer programmers go about their lives happily calling these things functions, but really they are something different. But wait a second! They do have quite a lot in common with functions. Namely, they have: (a) parameters, representing their domain; and (b) return values, representing their range. (Many computer programmers are happy to talk about functions that have no parameters, or no return values… but there’s no need to be overly picky here. We can just regard their domains and ranges as one-element sets, so that no actual information is conveyed, but we can keep up appearances.)</p>\n<p>Even more importantly, these “functions” share one more thing with the functions of mathematicians: they are constantly being <em>composed</em> by taking the result from one function and passing it along as a parameter to another function. When I say composed, I mean it almost exactly in the basic mathematics sense of function composition: (<em>f</em> · <em>g</em>)(<em>x</em>) = <em>f</em>(<em>g</em>(<em>x</em>)). In fact, the whole reason our “functions” exist at all is to be composed with each other! Once upon a time, in the early days of computers, we liked to keep track of information by just sticking it in known places in the computer’s memory; but all this shared knowledge about where to find information made it hard to write parts separately and fit them together, so we mostly switched to this idea of functions and composition instead.</p>\n<p>Here’s the executive summary so far:</p>\n<ol>\n<li>When computer programmers talk about functions, they do <span style=\"text-decoration: underline;\"><em>not</em></span> mean exactly what mathematicians do.</li>\n<li>What they <em><span style=\"text-decoration: underline;\">do</span></em> mean is the idea of having <em>inputs</em> (domains), <em>outputs</em> (ranges), and most importantly <em>composition</em>.</li>\n</ol>\n<h2>Along Came The Category…</h2>\n<p>So in the previous section, we ended up with our hands full of things that sort of look like functions. They have domains and ranges, and they can be composed. But at the same time, they are <em>not</em> functions in the mathematics sense. Baffling? No, not really. Mathematicians deal with stuff like that a lot. They have a name for systems of function-esque things of exactly that form. That name is… cue the drumroll, please… <span style=\"text-decoration: underline;\"><em>CATEGORIES</em></span>!</p>\n<p>In math-speak, categories are:</p>\n<ol>\n<li>collections of “objects” (you should think of <em>sets</em>),</li>\n<li>and “arrows” (you should think of <em>functions</em> between sets),</li>\n<li>where each arrow has a <em>domain</em> and a <em>range</em>,</li>\n<li>each object has an “identity” arrow (think of the identity function, where <em>f</em>(<em>x</em>) = <em>x</em>)</li>\n<li>and arrows can be <em>composed</em> when the domains and ranges match up right.</li>\n</ol>\n<p>Before we agree to call something a category, we also throw in a few rules, such as if you compose any function with an identity, it doesn’t actually change, and composing functions obeys the associative property. These should be unsurprising, so if they seem strange to you, please take a moment, grab a pencil, and try working it out using the definition of function composition earlier: (<em>f</em> · <em>g</em>)(<em>x</em>) = <em>f</em>(<em>g</em>(<em>x</em>)), and simplifying.</p>\n<p>The nice thing about categories is this: it’s not just some pointless abstraction that a bunch of mathematicians made up. Categories are defined that way because people have looked at literally hundreds of things that all look sort of like functions with domains and ranges and compositions. Things from algebra, like groups and rings and vector spaces; things from analysis, like metric spaces and topological spaces; things from combinatorics, like elements of partially ordered sets and paths in graphs; things from formal logic and foundations, like proofs and propositions. Almost without fail, they can be described using all the ideas we just looked at! In short, categories are the<em> right</em> intuition for talking about composing things with domains and ranges, which is exactly the situation we’re in.</p>\n<h2>The Four Horsemen of the Catapocalypse</h2>\n<p>Now you can see why categories come into the picture: they are the right intuition for things that maybe aren’t functions, but can be composed like functions. But just because a category exists doesn’t mean it’s worth talking about. What makes this worth talking about is that the category-related ideas aren’t just there, but actually express common concerns for computer programmers.</p>\n<p>It’s now time to get a little more specific, and introduce the four examples that will guide us the rest of the way through this exploration. Each example highlights one way that the “functions” used by computer programmers might be different from the functions that mathematicians talk about. These examples represent actual kinds of problems that computer programmers have run into and solved, and we’ll look more at the practical side of them later. For now, we’ll just be happy getting familiar with the general ideas.</p>\n<h4>The First Horseman: Failure</h4>\n<p>The first problem is failure. Computer programmers do lots of things that might fail. Reading from files (they might not exist, or on a computer with more than one user, they might not be set to allow you to read them), talking over the internet (the network might be broken or too slow), even just doing plain old calculations with a large amount of data (you might run out of memory). Because of this, dealing with failure is a constant concern.</p>\n<p>In general, in modern computer programming tools, it’s always understood that a function might fail. You may get an answer, but you also may get a reason that the task could not be completed. When that happens, programmers are responsible for dealing with it responsibly: letting someone know, cleaning up the leftover mess in computer memory from a half-complete task, and just otherwise putting the pieces back together. A major factor in programming techniques or tools is how easy they make it for programmers to cope with the constant possibility of failure.</p>\n<h4>The Second Horseman: Dependence</h4>\n<p>The second problem is dependence on outside information. While functions of mathematics are nice and self-contained, computer programmers often don’t have that luxury. Computer programs are messes of configuration. Even simple mobile phones have pages and pages of settings. What language does the user speak? How often should you save off a copy of their work? Should you encrypt communication over the network? Rare is the application today that doesn’t have a “Settings” or “Preferences” menu item. In many other contexts, too, computer programs depend on information that is a sort of “common knowledge” throughout the application, or some part of the application.</p>\n<p>Ways of dealing with this have progressed through the ages. When everything was stored in well-known memory locations anyway, it was easy enough to just look there for information you need; but that led to problems when different parts of a program needed different information and sections of programs could step on each other’s toes. The massively influential technique known as <em>object-oriented programming </em>can be seen as partly an attempt to solve exactly this problem by grouping functions into a context with information that they depend on. The simplest and most flexible answer would be to just pass the information around to all the functions where it is needed… but when that’s a lot of places, passing around all those parameters can be very, very inconvenient.</p>\n<h4>The Third Horseman: Uncertainty</h4>\n<p>The third problem is uncertainty, also known as non-determinism. A normal function associates an input to an output. A <em>non-deterministic</em> function associates an input to some number of <em>possible </em>outputs. Non-determinism is less well-known than the first two problems, but possibly only because it hasn’t yet seen a convincing solution in a general purpose language! Consider:</p>\n<ul>\n<li>Theoretical computer science talks about non-determinism all the time, because it’s the right approach for discussing a lot of computational problems, ranging from parsing to search to verification.  That language just hasn’t made its way into the programming practice.</li>\n<li>Non-determinism comes up when querying, searching, or considering many possible answers. These are precisely the places that programmers end up relying on a variety of domain specific languages, ranging from SQL to Prolog, and more recently language-integrated technologies like LINQ.</li>\n<li>Even with specialized languages for heavy-duty querying and search tasks, we still end up writing a <em>lot</em> of our own nested looping and control structures for the purpose of looking through possibilities when it’s not worth crossing that language barrier.  This kind of thing is responsible for some of the more complex code structures you find these days.</li>\n</ul>\n<p>While the first two problems of failure and dependence are at least partly solved by current mainstream programming languages, non-determinism is as yet solved mostly by special-purpose sub-languages, with LINQ as the notable exception.</p>\n<h4>The Fourth Horseman: Destruction</h4>\n<p>Finally, the fourth problem is destruction.  Evaluating a math-type function is observable only in that you now know the answer.  But in computer programming, functions can have permanent effects on the world: displaying information, waiting on responses from other computers or people, printing documents, even quite literally exploding things, if they are running on military systems!  Because of this, things that aren’t specified in mathematics, like the order in which evaluation happens, matter quite a lot here.</p>\n<p>The destructive nature (by which we just mean having effects that can’t be undone) of computer programming functions has plenty of consequences. It makes programming more error-prone. It makes it harder to divide up a task and work on different parts simultaneously, such as you might want to do with a modern multi-core computer, because doing the parts in the wrong order might be incorrect. But at the same time, these destructive effects are in a sense the whole point of computer programming; a program that has no observable effects would not be worth running! So in practically all mainstream programming languages, our functions do have to cope with the problem of destruction.</p>\n<h2>Back To The Function</h2>\n<p>Now we’ve seen the faces of some problems we find in the computer programming world. We build software that might fail, has to deal with a ton of extra context, models non-deterministic choice, and sometimes has observable effects on the world that constrain when we can perform the computation.</p>\n<p>It may now seem that we’ve left the nice and neat world of mathematical functions far behind. We have not!  On closer inspection, we’ll see that if we can just squint hard enough, each of these quasi-functions can actually be seen as true, honest-to-goodness functions after all.  There is a cost, though. To turn them into real functions, we need to change the <em>range </em>of those functions to something else.  Let’s see how it works for each of our function types in turn:</p>\n<h4>Functioning With Failure</h4>\n<p>Our first example of pseudo-functions were those that might fail. It’s not hard to see that a function that could fail is really just a function whose results include two things:</p>\n<ul>\n<li>successes, which are the intended possible results; and</li>\n<li>failures, which are descriptions of why the attempt failed.</li>\n</ul>\n<p>So for any set <em>A</em>, we’ll define a new set called <em>Err(A)</em> to be just <em>A</em> together with possible reasons we might have failed. Now a possibly failing function from a set <em>A</em> to a set <em>B</em> is really just an ordinary function from <em>A</em> to <em>Err(B)</em>.</p>\n<h4>Functioning With Dependence</h4>\n<p>Our second type of pseudo-functions were those that depended on information that they got from the world around them: perhaps preferences or application settings. We play a similar trick here, but for a set <em>A</em>, we will define the set <em>Pref(A)</em> to be the <em>set of functions</em> from application settings to the set <em>A</em>. Now watch closely: a function <em>in context</em> from <em>A</em> to <em>B</em> is just an ordinary function from <em>A</em> to <em>Pref(B)</em>. In other words, you give it a value from the set <em>A</em>, and it gives you back <em>another </em><em>function</em> that maps from application settings to the set <em></em><em>B</em>.</p>\n<p>As confusing as that might sound, a function whose range is another function is really just a function of two parameters, except that it takes its parameters one at a time! Take a minute to convince yourself of this. The conversion between these two equivalent ideas is sometimes called “currying”. So by changing the <em></em><em>range</em> of our function, we actually effectively added a new parameter, and it now receives the application settings as a parameter. Remember that except for being inconvenient (we’ll deal with that later), that’s exactly what we wished for.</p>\n<h4>Functioning With Uncertainty</h4>\n<p>This is perhaps the most obvious example of all. Our third type were those that represent non-determinism: instead of one specific answer, they have many possible answers. This is easy enough: for each set <em></em><em>A</em>, define <em>P(A)</em> to be the <em>power </em><em>set</em> of <em></em><em>A</em>, whose members are themselves sets of values of <em></em><em>A</em>. Then a non-deterministic function from <em>A</em> to <em>B</em> is just an ordinary function from <em>A</em> to <em>P(B)</em>.</p>\n<h4>Functioning With Destruction</h4>\n<p>Our final trick is to deal with functions that have destructive effects. Here we’ll need to be a bit more elaborate in constructing a new range: for each set <em>A</em>, we define <em>IO(A)</em> (standing for <em>input/output</em>, which captures the notion of effects that interact with the rest of the world). An element of the set <em>IO(A)</em> is a list of <em></em><em>instructions</em> for obtaining a member of <em>A</em>. It is not a member of <em>A</em>, merely a way to obtain one, and that procedure might have any number of observable effects.</p>\n<p>Now we play the same trick and change the range: a <em>destructive function</em> from <em>A</em> to <em>B</em> is just an ordinary plain old mathematical function from <em>A</em> to <em>IO(B)</em>. In other words, if you give me an <em>A</em>, then as a plain old function I can’t actually do the steps to get a <em>B</em>, but I can certainly tell you what they are.</p>\n<p><em>But what about composition?</em> It’s great to be back in the world of plain functions, but remember what got us here in the first place? We liked functions because we liked composition; but it seems we’ve now lost composition! If I have a possibly failing function from <em>A</em> to <em>B</em>, and another from <em>B</em> to <em>C</em>, well now I’ve turned them into functions from <em>A</em> to <em>Err(B)</em> and then <em>B</em> to <em>Err(C)</em>. Those function domains and ranges don’t match up, and I can’t compose them!</p>\n<p>Oh no…</p>\n<h2>Hold Your Horses, Heinrich Kleisli to the Rescue!</h2>\n<p>Well, all is not lost. I just haven’t yet told you how to compose these “special” functions.</p>\n<p>Because some math dude found these things before us, we call our “special” functions by a name: Kleisli arrows.  There are two things going on here at once, so keep your eyes open: first, Kleisli arrows are just plain old ordinary functions, but with weird-looking ranges. Since they are just functions, you can compose them <em>as </em><em>functions</em>, and that’s just fine.  But at the same time, they are “special”, and we can compose them <em>as Kleisli arrows</em>, too.</p>\n<p>Remember what we decided earlier? The right way to think about composition is by talking about a category. Sets are a category, and that’s fine if you want plain function composition. But now we want a <em></em><em>new</em> kind of category, too. It’s called the Kleisli category. If you don’t remember what all the parts of a category are, take a second to review them. To define a category, I need objects, arrows, identities, and composition.</p>\n<ul>\n<li>To keep things simple, the objects in this new category will be the same: they are just sets of things.</li>\n<li>The arrows in this category are, unsurprisingly, the Kleisli arrows.</li>\n<li>I haven’t told you yet what the identities and composition look like, so let’s do that next.</li>\n</ul>\n<p>First, we look at <em><strong>failure</strong></em>. We’re given a failure Kleisli arrow from <em>A</em> to <em>B</em>, and one from <em>B</em> to <em>C</em>. We want to compose them into a Kleisli arrow from <em>A</em> to <em>C</em>. In other words, we have an ordinary function from <em>A</em> to <em>Err(B)</em>, and a function from <em>B</em> to <em>Err(C)</em>, and we want one from <em>A</em> to <em>Err(C)</em>.  Take a minute to think about what to do.</p>\n<p>The central idea of error handling is that if the first function gives an error, then we should stop and report the error. Only if the first function succeeds should we continue on to the second function, and give the result from that (regardless of whether it’s an error or a success).</p>\n<p>To summarize:</p>\n<ol>\n<li>If <em>g</em>(<em>x</em>) is an error, then (<em>f</em> · <em>g</em>)(<em>x</em>) = <em>g</em>(<em>x</em>).</li>\n<li>If <em>g</em>(<em>x</em>) is a success, then (<em>f</em> · <em>g</em>)(<em>x</em>) = <em>f</em>(<em>g</em>(<em>x</em>)).</li>\n</ol>\n<p>To complete the definition of a category, we also need to decide about the <em>identity</em> Kleisli arrows. These are the ones that don’t do anything, so that if you compose them with any other Kleisli arrow, it doesn’t change the other one. Identities are functions from <em>A</em> to <em>Err(A)</em>, and it turns out these are just the functions <em>f</em>(<em>x</em>) = <em>x</em>, just like for sets. Notice that means they never return an error; only a successful result.</p>\n<p>I’ll run more briefly through the remaining three examples, but I encourage readers who aren’t yet clear on how this will work to write them out in more detail and use this opportunity to become more comfortable with defining a second category of Kleisli arrows.</p>\n<p>Next we have Klesli arrows for <em><strong>dependence</strong></em>, which are functions from <em></em><em>A</em> to <em>Pref(B)</em>.  Recall that adding the <em>Pref</em> to the range is equivalent to adding a new parameter for the application preferences. The key idea here is that if I have two functions that both need to know the application preferences, I should give the <em></em><em>same</em> preferences to both. Then composing two of these Kleisli arrows just builds a new function that gets the extra preferences parameter, and passes the same one along to the two component parts. And identities? A Kleisli identity will get that extra preferences parameter, but will ignore it and just return its input anyway.</p>\n<p>The Kleisli arrows for <em><strong>uncertainty</strong></em>, or non-determinism, are functions from <em>A</em> to <em>P(B)</em>, the power set of <em>B</em>. The key idea for non-determinism is that at each stage, we want to try all possible values that might exist at this point, and collect the results from all of them. So the composition calculates the second function for <em></em><em>each</em> possible result of the first, then the resulting possibilities are merged together with a set union. The identities, of course, aren’t really non-deterministic at all, and just return one-element sets containing their input.</p>\n<p>Finally, Kleisli arrows for <em><strong>destructive</strong><strong> effects</strong></em> are functions from <em>A</em> to <em>IO(B)</em>. The key idea here is to combine instructions by following them in a step-by-step manner: first do one, then the next. So the composition writes instructions to perform the first action, look up the second action from the result, and then perform the second action, in that order. A Kleisli identity here is just an instruction to do nothing at all and announce the input as the result. So for each of the four motivating examples, we created a new category, the Kleisli category.</p>\n<p>These new categories have their own function-like things, and related ideas of composition and identities, that express the unique nature of each specific problem. By using the appropriate notion of composition in the right Kleisli category, you can solve any of these long-standing computer programming problems in a nice composable way.</p>\n<p>And that’s why you should care about monads.</p>\n<p><em>Monads?!?</em> Oh yes, I should mention that we’ve just learned about monads. We simply forgot to use the word.</p>\n<h2>What’s This Got To Do With Monads?</h2>\n<p>This section is for those of you who want to know how the stuff we said earlier are related to monads as they are understood in mathematics.  If you open Wikipedia, or most category theory textbooks, and look up monads, they won’t look very much like what we just did. You’ll see something about an endofunctor, and two natural transformation, and properties about commuting triangles and squares.</p>\n<p>We haven’t talked about functors at all, much less natural transformations… so how could we have possibly learned about monads? It turns out there’s more than one way to describe monads.  The one we’ve just gone through is an entirely valid one. The shifts we made to the ranges of our functions earlier – <em>Err</em>, <em>Pref</em>, <em>P</em>, and <em>IO –</em> are actually examples of monads. To make sure they are monads in the conventional math way, we’d have to work pretty hard: first, prove that they are <em>functors</em>. Then build two <em>natural transformations</em> called η and µ, and prove that they are natural. Finally, prove the three monad laws.</p>\n<p>But wait, there’s an easier way!  Heinrich Kleisli, whom we’ve already met from the categories earlier, pointed out that if you can build a category like the ones we did in the last section, whose arrows are just functions with a modified range, then your category is <em>guaranteed</em> to also give you a monad. That’s quite convenient, because as computer programmers, we tend to care a lot more about our Kleisli arrows than we do about a mathematician’s idea of monads.  Remember, those Kleisli arrows are exactly the modified notion of functions that we were <em>already</em> using, long before we ever heard a word about category theory!  And Kleisli tells us that as long as composition works the way we expect with our Kleisli arrows (namely, that it’s associative and the identities act like identities), then all that other stuff we’re supposed to prove to show we have a monad just happens for us automatically.</p>\n<p>Still, it’s an interesting side question to look at the relationship between the two. I won’t give all the details, but I’ll give the structure, and then leave the interested reader with some familiarity with category theory to fill in the proofs of the relevant properties. We’ll use <em>Err</em> as our monad, just to pick a specific example, but nothing here is specific to <em>Err</em>.</p>\n<ol>\n<li>We start with <em>Err</em>, which is already a map from objects to objects. But the traditional definition of a monad also requires that it be a <em>functor</em>. That is, given a function <em>f</em> from <em>A</em> to <em>B</em>, I need a way to construct a function <em>Err(f)</em> from <em>Err(A)</em> to <em>Err(B)</em>. I do it as follows: in the <em>underlying</em> category (not the Kleisli category, just the category of sets), I find an identity function from <em>Err(A)</em> to <em>Err(A)</em>. Then I find a Kleisli identity from <em>B</em> to <em>Err(B)</em>. I compose that Kleisli identity in the <em>underlying</em> category with <em>f</em>, and get a function from <em>A</em> to <em>Err(B)</em>. I can now do a Kleisli composition of the identity from <em>Err(A)</em> to <em>Err(A)</em> and the function from <em>A</em> to <em>Err(B)</em>, and get a function from <em>Err(A)</em> to <em>Err(B)</em>. That’s the one I’ll call <em>Err(f)</em>.</li>\n<li>Next, I need a natural transformation η, from the identity functor to <em></em><em>Err</em>. This is easy: the components of η are the Kleisli identities.</li>\n<li>Finally, I need a natural transformation µ from <em>Err</em>² to <em>Err</em>. To get the component of µ at <em>A</em>, I take the identity functions in the underlying category from <em>Err (Err A)</em> to <em>Err (Err A)</em>, and then from <em>Err A</em> to <em>Err A</em>, and I combine them with Kleisli composition to get a function from <em>Err (Err A)</em> to <em>Err A</em>. This is the component of µ.</li>\n</ol>\n<p>The construction in the opposite direction is easier. Given a monad <em>Err</em>with ? and µ, the Kliesli category is constructed as follows.</p>\n<ol>\n<li>The identities are just the components of η.</li>\n<li>Given a function <em>f</em> from <em>A</em> to <em>Err(B)</em> and a function <em>g</em> from <em>B</em> to <em>Err(C)</em>, I compose the two as µ · <em>Err(g)</em> · <em>f</em>.</li>\n</ol>\n<p>Again, the details and the proofs of the appropriate monad and category laws are left to the reader. I hope this brief aside has been useful. I now return to using the word “monad” but talking about monads via Kleisli categories.</p>\n<h2>Joining The Monadic Revolution</h2>\n<p>Once again, let’s pause to sum up.</p>\n<ul>\n<li>Computer programmers like to work by composing some things together, which we call functions.</li>\n<li>They aren’t functions in the obvious way… but they do make up a category.</li>\n<li>Actually, they are functions after all, but only if you squint and change the ranges into something weirder.</li>\n<li>The category that they form is called a Kleisli category, and it’s basically another way of looking at monads.</li>\n<li>These monads / Kleisli categories nicely describe the techniques we use to solve practical problems.</li>\n</ul>\n<p>It’s not just about those four examples, either.  Those are typical of many, many more ideas about programming models that can be described in the same framework. I think it’s fair to sum up and say, at this point, that someone interested in studying and analyzing programming languages and models should be familiar with some ideas from category theory, and with monads in particular.</p>\n<p>But still, what about the humble computer programmer, who is not designing a new language, is not writing research papers analyzing programming languages, but just wants to solve ordinary everyday problems?  That’s a fair question.  As long as monads remain just a mathematical formalism for understanding what computer programmers mean by functions, the practicing computer programmer has a good claim to not needing to understand them.</p>\n<p>It’s becoming clear, though, that monads are on their way into practical programming concerns, too.  In the past, these Kleisli arrows, the modified notions of “function” used by computer programmers, were built into our programming languages.  Functions in C used a Kleisli arrow, and C++ functions used a different one.  The language specification would tell us what is and what is not possible using a function in this language, and if we wanted something different, too bad.  Maybe once a decade, we’d make the swap to a brand new programming language, and bask in the warm rays of some new language features for a while.</p>\n<h4>The Past: Error Handling</h4>\n<p>Consider the <em>Err</em> monad, which gave us functions that might fail and report their failure in structured ways.  Modulo some details and extensions, this is basically structured exception handling. Looking to history, programmers worked without exception handling in their programming languages for many years. Of course, languages like C are all Turing complete, and can solve any possible computational problem, proper error handling included. But we don’t apply categories to think about possible computations; categories are for thinking about composition. Without exception handling in the notion of a “function” that’s provided by languages like C, programmers were left to do that composition by hand.</p>\n<p>As a result, any C function that could fail had to indicate that failure using a return value.  In many cases, conventional wisdom built up saying things like “return values are for indicating success or failure, <em>not</em> for giving back answers”. Coding conventions called for most if not all function calls to be followed with <em>if</em> statements checking for failure, and the resulting code was borderline unreadable.  This was the heyday of flowcharts and pseudo-code, because no one expected to be able to understand real code at a glance!  In reality, though, programmers only checked for errors when they thought they was possible, and a lot of errors went undetected. Programs were often unreliable, and likely untold billions of dollars spent on extra development work and troubleshooting.</p>\n<p>What was the reason for this?  It’s quite simple: the C programming language and others of its time provided an insufficient kind of Kleisli arrow!  If their Kleisli arrow had included the functionality from the <em>Err</em> monad we defined above, this could have been avoided.  But the notion of what a function means in C is fixed, so the answer was to deal with it, and eventually migrate to a different programming language, rewriting a lot of software, and likely costing another untold billions of dollars.</p>\n<h4>The Present: Global Variables and Context</h4>\n<p>What about the <em>Pref</em> monad, and others like it? As discussed earlier, this is about defining computations in a larger context of available information and state of the world.</p>\n<p>In the past, we had global variables, the slightly more modern equivalent of just storing information at a known place in computer memory. Quick and dirty, but even 30 years ago, programmers knew they were the wrong answer, and wouldn’t be manageable for larger programs. Object oriented programming tried to alleviate the problem a little, by having functions run in a specific “object” that serves as their context, and that was implicitly passed around at least within the implementation of the object itself. To get this, everyone effectively had to change programming languages to get a better Kleisli arrow again.  But even so, object-oriented languages don’t give a perfect answer to this problem.</p>\n<h4>The Near Future (/ Present): Purity, Effects, Parallelism, Non-Determinism, Continuations, and More!</h4>\n<p>This point is about the future, but I’ll start out by pointing out that everything here is already possible, but just requires an appropriate choice of programming language!</p>\n<p>One current challenge for the computer programming community is finding effective ways to handle parallelism. Ironically, while past examples have focused on the problem of putting too little power into a language’s Kleisli arrow, the problem this time is too much!  Plain (also known as “pure”) functions present lots of opportunities for parallelism. When code is executed in parallel, it may run faster, or if the parallelism is poorly designed it may even run slower, but in any case it will <em>certainly</em> still give the same answer. But when the Kleisli arrow incorporates destructive updates, that is no longer the case. Now parallelism is risky, and might give unexpected or incorrect results due to so-called <em>race </em><em>conditions</em>.</p>\n<p>We can’t just remove destructive updates from a language’s Kleisli arrow, though.  A program that has no observable effects at all isn’t useful. What is useful is the ability to separate the portions of code that perform destructive update from those that just compute pure functions.  So for the first time, we need a language with more than one kinds of Kleisli arrow, in the same language!</p>\n<p>There is already at least one language that offers precisely this. Programmers in the Haskell language can build their own monads, and work in the Kleisli category of a monad of their choosing.  The programming language offers a nice syntax for making this approach readable and easy to use.  If something might fail, you can throw it in <em>Err</em>.  If it needs access to the application settings, throw it in <em>Pref</em>.  If it needs to do input or output, throw it in <em>IO</em>.  Haskell web application frameworks and similar projects start by defining an appropriate monad with the appropriate features for <em>that kind</em> of application.</p>\n<p>Another current trend in the computer programming community is toward building more domain-specific programming models. The language Erlang became popular specifically for providing a new programming model with advantages for parallelism.  Microsoft’s .NET framework incorporates LINQ, which offers a programming model that’s better for bulk processing and querying of collections of data.  Rails popularized domain-specific languages for web applications.  Other languages offer continuations as a way to more easily build specify computations in a more flexible way.  All of these are examples of working in new and different Kleisli arrows that capture exactly the model appropriate for a given task.</p>\n<p>It comes down to this: If we believe that there is one single notion of “function” that is most appropriate for all of computer programming, then as practical programmers we can find a language that defines functions that way, and then forget about the more general idea of monads or Kleisli arrows as a relic of theoreticians.  But it’s not looking that way.  The programming community is moving quickly toward different notions of what a function means for different contexts, for different tasks, even for different individual applications.  So it’s useful to have the language, the tools, and the intuition for comparing different procedural abstractions.  That’s what monads give us.</p>\n<h4>Abstraction Over Monads</h4>\n<p>Using a language with a choice of monads offers some other advantages here, too.  It gives us back our abstraction.  In Haskell, for example, it’s possible to write code that is applicable in multiple different monads. A surprising amount of the programming done with one monad in mind actually has meaning in very different monads! For example, consider the following Haskell type:</p>\n<p style=\"padding-left: 30px;\"><em>sequence :: Monad m =&gt; [m a] -&gt; m [a]</em></p>\n<p>What this means is that for any monad, which we’ll call <em>M</em>, sequence converts from a list of values of <em>M(A)</em> into <em>M(List(A))</em>, the monad applied to lists themselves.  Let’s take a minute to consider what this means for each of our four examples. For <em>Err</em>, it takes a list of results that might be failures, and if any of them are failures, it fails; but if not, then it gives back a list of all the results.  It’s basically a convenient way to check a whole list of computations for a failure. For <em>Pref</em>, it takes a single set of application preferences, and distributes that to everything in the list, giving back a list of the results. For the power-set monad, <em>P</em>, it would take a list of sets, and give back a set of all the ways to choose one item from each set.  And for <em>IO</em>, it takes a list of instruction cards, and gives back the single card with instructions for doing all of them in turn.  Amazingly, this one function, which had only one implementation, managed to make sense and do something useful for all four of our examples of monads!</p>\n<p>Along with a choice of monads comes the ability to abstract over that choice, and write meaningful code that works in <em>any</em> monad that you do end up choosing.</p>\n<p>Between all of these forces, I predict that within the next ten years, software developers will be expected to discuss monads in the same way that most developers currently have a working vocabulary of design patterns or agile methodologies.</p>\n<h2>Beyond Monads: More Categorical Programming</h2>\n<p>While most of this has been about monads, I don’t want to leave anyone with the impression that monads are the only influence of categories in computer programming.  All of the following ideas have found their way into programming practice, mostly (so far) within the Haskell programming language community because of its flexibility and a deep academic culture and history.</p>\n<ul>\n<li><em>Monad transformers</em> are a powerful technique for combining the effects of more than one monad to build rich and powerful programming models.</li>\n<li><em>Functors</em> and <em>applicative functors</em> (a.k.a. strong lax monoidal functors for mathematicians) are weaker than monads, but more widely applicable.</li>\n<li>Other kinds of categories that are not Kleisli categories can often be defined and composed to solve specific problems. Freyd categories are also useful.</li>\n</ul>\n<p>I’ll stop there, but only as an encouragement to look more into the various abstractions from category theory that programmers have found useful. A good starting point is the (Haskell-specific) <a href=\"http://www.haskell.org/haskellwiki/Typeclassopedia\">Typeclassopedia</a> by Brent Yorgey. That’s just a door into the many possibilities of applying category-based ideas and intuitions in computer programming.</p>\n<p>But I hope I was able to convey how these ideas aren’t just made up, but are actually the natural extension of what computer programmers have been doing for decades.</p>\n<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/cdsmith.wordpress.com/544/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/cdsmith.wordpress.com/544/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godelicious/cdsmith.wordpress.com/544/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/delicious/cdsmith.wordpress.com/544/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gofacebook/cdsmith.wordpress.com/544/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/facebook/cdsmith.wordpress.com/544/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gotwitter/cdsmith.wordpress.com/544/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/twitter/cdsmith.wordpress.com/544/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gostumble/cdsmith.wordpress.com/544/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/stumble/cdsmith.wordpress.com/544/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godigg/cdsmith.wordpress.com/544/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/digg/cdsmith.wordpress.com/544/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/goreddit/cdsmith.wordpress.com/544/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/reddit/cdsmith.wordpress.com/544/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=cdsmith.wordpress.com&amp;blog=1158345&amp;post=544&amp;subd=cdsmith&amp;ref=&amp;feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" "http://cdsmith.wordpress.com/2012/04/18/why-do-monads-matter/" (20368 29080) obsolete 3 nil nil ((title nil "Chris Smith: Why Do Monads Matter?") (guid ((isPermaLink . "false")) "http://cdsmith.wordpress.com/?p=544") (link nil "http://cdsmith.wordpress.com/2012/04/18/why-do-monads-matter/") (description nil "<p>(<em>A Side Note:</em> I’ve been formulating the final thoughts on this post for about a week now. In an entirely unrelated coincidence, a good friend of mine and fellow Haskell programmer, Doug Beardsley, ended up <a href=\"http://softwaresimply.blogspot.com/2012/04/less-travelled-monad-tutorial-part-1.html\">writing two posts</a> <a href=\"http://softwaresimply.blogspot.com/2012/04/ltmt-part-2-monads.html\">about monads</a> over the weekend as well. Weird! But don’t fret; this isn’t really the same thing at all. I’m not writing to teach Haskell programmers how to use monads. I’m writing about a kind of intuition about why these concepts turn out to matter in the first place. You won’t find much here by way of how to program in Haskell.)</p>\n<h2>Category Theory for Software Development?</h2>\n<p><em>Match made in heaven? Or abstraction distraction?</em></p>\n<p><em></em>If you’re a software developer, have you heard about monads and wondered what they were? Have you tried to learn Haskell, and struggled with them? Wondered why people worry so much about them? Have you watched the videos from Microsoft’s “Channel 9″ and heard a bunch of researchy Microsoft folk talk about them, but had trouble relating them to your day-to-day programming experience?</p>\n<p>Or if you’re interested in mathematics, have you heard murmurs in the past about how category theory interests computer science people? Looked for some clear statement of why we care, and what problems we might be interested in? Wondered if it’s really true <em>at all</em>? Perhaps you are like a friend of mine (and a first-rate algebraist, too, so it’s entirely reasonable to have these questions) who asked me about this a year or so ago, remembered hearing a lot of excitement in the early 90s about category theory and computer science, but never heard whether it had really panned out or was a dead end?</p>\n<p>These are the kinds of questions I begin with. My goal is to demonstrate for you, with details and examples:</p>\n<ul>\n<li>Where category-based intuition and ideas, and monads in particular, come from in computer programming.</li>\n<li>Why the future of programming <em>does</em> lie in these ideas, and their omission in today’s mainstream languages has cost us dearly.</li>\n<li>What the state of the art looks like in applying category-based ideas to problems in computer programming.</li>\n</ul>\n<p>If you’re coming into this without a knowledge of category theory, never fear; this may be one of the gentlest introductions to the idea of categories and monads that you will find. But you’ll want to slow down and take a moment to understand the definition of a category and related ideas like function composition; these are absolutely crucial. Then you want to completely skip or just skim through the section called “What’s This Got To Do With Monads?” where I tell you how what we’re talking about here relates to the traditional math meaning of monads. Don’t worry, you don’t need to know that <em>at all</em>.</p>\n<p>On the other hand, if you’re a mathematician, you may want to skim the bits where I review basic category theory, and just dig in where I am talking about the computer programming perspective. Just be forewarned, my introduction to monads will be via Kleisli categories, so take a minute when we get to that part and make sure you’re familiar with how the relationship works out.</p>\n<p>Ready? Here goes!</p>\n<h2>Computer Programming and Functions: A Tenuous Relationship</h2>\n<p>Quick quiz: Do computer programmers use functions?</p>\n<p>Ask any computer programmer you know, and you will hear: YES! Functions are some of the most basic tools computer programmers use. Then you’ll get odd looks, for asking such a silly question. <em>Of course</em> computer programmers use functions. That’s like asking if carpenters use nails! Right?</p>\n<p>The truth, though, is a bit more complicated. To a mathematician, a function is just an association of input values to output values… and <em>that is all</em>! Any two functions that associate the same input values to the same output values are the same. Yes, you can represent functions by formulas (sometimes, anyway), but you can also represent them with just tables of inputs and outputs, or if they are functions between real numbers, as graphs. If you ask computer programmers for examples of functions, though, you will start hearing about some pretty bizarre things. I call these the “I must have skipped that day of calculus” functions. These are things that computer programmers are quite happy referring to as functions, but that to a mathematician are not really functions at all!</p>\n<ul>\n<li>“Functions” that return randomly chosen numbers… and if evaluated several times, will give a different answer each time.</li>\n<li>“Functions” that return one answer on Sundays, but a different answer on Mondays, yet another on Tuesdays, and so on.</li>\n<li>“Functions” that cause words to appear on some nearby computer screen every time you calculate their values.</li>\n</ul>\n<p>What’s going on here? Most computer programmers go about their lives happily calling these things functions, but really they are something different. But wait a second! They do have quite a lot in common with functions. Namely, they have: (a) parameters, representing their domain; and (b) return values, representing their range. (Many computer programmers are happy to talk about functions that have no parameters, or no return values… but there’s no need to be overly picky here. We can just regard their domains and ranges as one-element sets, so that no actual information is conveyed, but we can keep up appearances.)</p>\n<p>Even more importantly, these “functions” share one more thing with the functions of mathematicians: they are constantly being <em>composed</em> by taking the result from one function and passing it along as a parameter to another function. When I say composed, I mean it almost exactly in the basic mathematics sense of function composition: (<em>f</em> · <em>g</em>)(<em>x</em>) = <em>f</em>(<em>g</em>(<em>x</em>)). In fact, the whole reason our “functions” exist at all is to be composed with each other! Once upon a time, in the early days of computers, we liked to keep track of information by just sticking it in known places in the computer’s memory; but all this shared knowledge about where to find information made it hard to write parts separately and fit them together, so we mostly switched to this idea of functions and composition instead.</p>\n<p>Here’s the executive summary so far:</p>\n<ol>\n<li>When computer programmers talk about functions, they do <span style=\"text-decoration: underline;\"><em>not</em></span> mean exactly what mathematicians do.</li>\n<li>What they <em><span style=\"text-decoration: underline;\">do</span></em> mean is the idea of having <em>inputs</em> (domains), <em>outputs</em> (ranges), and most importantly <em>composition</em>.</li>\n</ol>\n<h2>Along Came The Category…</h2>\n<p>So in the previous section, we ended up with our hands full of things that sort of look like functions. They have domains and ranges, and they can be composed. But at the same time, they are <em>not</em> functions in the mathematics sense. Baffling? No, not really. Mathematicians deal with stuff like that a lot. They have a name for systems of function-esque things of exactly that form. That name is… cue the drumroll, please… <span style=\"text-decoration: underline;\"><em>CATEGORIES</em></span>!</p>\n<p>In math-speak, categories are:</p>\n<ol>\n<li>collections of “objects” (you should think of <em>sets</em>),</li>\n<li>and “arrows” (you should think of <em>functions</em> between sets),</li>\n<li>where each arrow has a <em>domain</em> and a <em>range</em>,</li>\n<li>each object has an “identity” arrow (think of the identity function, where <em>f</em>(<em>x</em>) = <em>x</em>)</li>\n<li>and arrows can be <em>composed</em> when the domains and ranges match up right.</li>\n</ol>\n<p>Before we agree to call something a category, we also throw in a few rules, such as if you compose any function with an identity, it doesn’t actually change, and composing functions obeys the associative property. These should be unsurprising, so if they seem strange to you, please take a moment, grab a pencil, and try working it out using the definition of function composition earlier: (<em>f</em> · <em>g</em>)(<em>x</em>) = <em>f</em>(<em>g</em>(<em>x</em>)), and simplifying.</p>\n<p>The nice thing about categories is this: it’s not just some pointless abstraction that a bunch of mathematicians made up. Categories are defined that way because people have looked at literally hundreds of things that all look sort of like functions with domains and ranges and compositions. Things from algebra, like groups and rings and vector spaces; things from analysis, like metric spaces and topological spaces; things from combinatorics, like elements of partially ordered sets and paths in graphs; things from formal logic and foundations, like proofs and propositions. Almost without fail, they can be described using all the ideas we just looked at! In short, categories are the<em> right</em> intuition for talking about composing things with domains and ranges, which is exactly the situation we’re in.</p>\n<h2>The Four Horsemen of the Catapocalypse</h2>\n<p>Now you can see why categories come into the picture: they are the right intuition for things that maybe aren’t functions, but can be composed like functions. But just because a category exists doesn’t mean it’s worth talking about. What makes this worth talking about is that the category-related ideas aren’t just there, but actually express common concerns for computer programmers.</p>\n<p>It’s now time to get a little more specific, and introduce the four examples that will guide us the rest of the way through this exploration. Each example highlights one way that the “functions” used by computer programmers might be different from the functions that mathematicians talk about. These examples represent actual kinds of problems that computer programmers have run into and solved, and we’ll look more at the practical side of them later. For now, we’ll just be happy getting familiar with the general ideas.</p>\n<h4>The First Horseman: Failure</h4>\n<p>The first problem is failure. Computer programmers do lots of things that might fail. Reading from files (they might not exist, or on a computer with more than one user, they might not be set to allow you to read them), talking over the internet (the network might be broken or too slow), even just doing plain old calculations with a large amount of data (you might run out of memory). Because of this, dealing with failure is a constant concern.</p>\n<p>In general, in modern computer programming tools, it’s always understood that a function might fail. You may get an answer, but you also may get a reason that the task could not be completed. When that happens, programmers are responsible for dealing with it responsibly: letting someone know, cleaning up the leftover mess in computer memory from a half-complete task, and just otherwise putting the pieces back together. A major factor in programming techniques or tools is how easy they make it for programmers to cope with the constant possibility of failure.</p>\n<h4>The Second Horseman: Dependence</h4>\n<p>The second problem is dependence on outside information. While functions of mathematics are nice and self-contained, computer programmers often don’t have that luxury. Computer programs are messes of configuration. Even simple mobile phones have pages and pages of settings. What language does the user speak? How often should you save off a copy of their work? Should you encrypt communication over the network? Rare is the application today that doesn’t have a “Settings” or “Preferences” menu item. In many other contexts, too, computer programs depend on information that is a sort of “common knowledge” throughout the application, or some part of the application.</p>\n<p>Ways of dealing with this have progressed through the ages. When everything was stored in well-known memory locations anyway, it was easy enough to just look there for information you need; but that led to problems when different parts of a program needed different information and sections of programs could step on each other’s toes. The massively influential technique known as <em>object-oriented programming </em>can be seen as partly an attempt to solve exactly this problem by grouping functions into a context with information that they depend on. The simplest and most flexible answer would be to just pass the information around to all the functions where it is needed… but when that’s a lot of places, passing around all those parameters can be very, very inconvenient.</p>\n<h4>The Third Horseman: Uncertainty</h4>\n<p>The third problem is uncertainty, also known as non-determinism. A normal function associates an input to an output. A <em>non-deterministic</em> function associates an input to some number of <em>possible </em>outputs. Non-determinism is less well-known than the first two problems, but possibly only because it hasn’t yet seen a convincing solution in a general purpose language! Consider:</p>\n<ul>\n<li>Theoretical computer science talks about non-determinism all the time, because it’s the right approach for discussing a lot of computational problems, ranging from parsing to search to verification.  That language just hasn’t made its way into the programming practice.</li>\n<li>Non-determinism comes up when querying, searching, or considering many possible answers. These are precisely the places that programmers end up relying on a variety of domain specific languages, ranging from SQL to Prolog, and more recently language-integrated technologies like LINQ.</li>\n<li>Even with specialized languages for heavy-duty querying and search tasks, we still end up writing a <em>lot</em> of our own nested looping and control structures for the purpose of looking through possibilities when it’s not worth crossing that language barrier.  This kind of thing is responsible for some of the more complex code structures you find these days.</li>\n</ul>\n<p>While the first two problems of failure and dependence are at least partly solved by current mainstream programming languages, non-determinism is as yet solved mostly by special-purpose sub-languages, with LINQ as the notable exception.</p>\n<h4>The Fourth Horseman: Destruction</h4>\n<p>Finally, the fourth problem is destruction.  Evaluating a math-type function is observable only in that you now know the answer.  But in computer programming, functions can have permanent effects on the world: displaying information, waiting on responses from other computers or people, printing documents, even quite literally exploding things, if they are running on military systems!  Because of this, things that aren’t specified in mathematics, like the order in which evaluation happens, matter quite a lot here.</p>\n<p>The destructive nature (by which we just mean having effects that can’t be undone) of computer programming functions has plenty of consequences. It makes programming more error-prone. It makes it harder to divide up a task and work on different parts simultaneously, such as you might want to do with a modern multi-core computer, because doing the parts in the wrong order might be incorrect. But at the same time, these destructive effects are in a sense the whole point of computer programming; a program that has no observable effects would not be worth running! So in practically all mainstream programming languages, our functions do have to cope with the problem of destruction.</p>\n<h2>Back To The Function</h2>\n<p>Now we’ve seen the faces of some problems we find in the computer programming world. We build software that might fail, has to deal with a ton of extra context, models non-deterministic choice, and sometimes has observable effects on the world that constrain when we can perform the computation.</p>\n<p>It may now seem that we’ve left the nice and neat world of mathematical functions far behind. We have not!  On closer inspection, we’ll see that if we can just squint hard enough, each of these quasi-functions can actually be seen as true, honest-to-goodness functions after all.  There is a cost, though. To turn them into real functions, we need to change the <em>range </em>of those functions to something else.  Let’s see how it works for each of our function types in turn:</p>\n<h4>Functioning With Failure</h4>\n<p>Our first example of pseudo-functions were those that might fail. It’s not hard to see that a function that could fail is really just a function whose results include two things:</p>\n<ul>\n<li>successes, which are the intended possible results; and</li>\n<li>failures, which are descriptions of why the attempt failed.</li>\n</ul>\n<p>So for any set <em>A</em>, we’ll define a new set called <em>Err(A)</em> to be just <em>A</em> together with possible reasons we might have failed. Now a possibly failing function from a set <em>A</em> to a set <em>B</em> is really just an ordinary function from <em>A</em> to <em>Err(B)</em>.</p>\n<h4>Functioning With Dependence</h4>\n<p>Our second type of pseudo-functions were those that depended on information that they got from the world around them: perhaps preferences or application settings. We play a similar trick here, but for a set <em>A</em>, we will define the set <em>Pref(A)</em> to be the <em>set of functions</em> from application settings to the set <em>A</em>. Now watch closely: a function <em>in context</em> from <em>A</em> to <em>B</em> is just an ordinary function from <em>A</em> to <em>Pref(B)</em>. In other words, you give it a value from the set <em>A</em>, and it gives you back <em>another </em><em>function</em> that maps from application settings to the set <em></em><em>B</em>.</p>\n<p>As confusing as that might sound, a function whose range is another function is really just a function of two parameters, except that it takes its parameters one at a time! Take a minute to convince yourself of this. The conversion between these two equivalent ideas is sometimes called “currying”. So by changing the <em></em><em>range</em> of our function, we actually effectively added a new parameter, and it now receives the application settings as a parameter. Remember that except for being inconvenient (we’ll deal with that later), that’s exactly what we wished for.</p>\n<h4>Functioning With Uncertainty</h4>\n<p>This is perhaps the most obvious example of all. Our third type were those that represent non-determinism: instead of one specific answer, they have many possible answers. This is easy enough: for each set <em></em><em>A</em>, define <em>P(A)</em> to be the <em>power </em><em>set</em> of <em></em><em>A</em>, whose members are themselves sets of values of <em></em><em>A</em>. Then a non-deterministic function from <em>A</em> to <em>B</em> is just an ordinary function from <em>A</em> to <em>P(B)</em>.</p>\n<h4>Functioning With Destruction</h4>\n<p>Our final trick is to deal with functions that have destructive effects. Here we’ll need to be a bit more elaborate in constructing a new range: for each set <em>A</em>, we define <em>IO(A)</em> (standing for <em>input/output</em>, which captures the notion of effects that interact with the rest of the world). An element of the set <em>IO(A)</em> is a list of <em></em><em>instructions</em> for obtaining a member of <em>A</em>. It is not a member of <em>A</em>, merely a way to obtain one, and that procedure might have any number of observable effects.</p>\n<p>Now we play the same trick and change the range: a <em>destructive function</em> from <em>A</em> to <em>B</em> is just an ordinary plain old mathematical function from <em>A</em> to <em>IO(B)</em>. In other words, if you give me an <em>A</em>, then as a plain old function I can’t actually do the steps to get a <em>B</em>, but I can certainly tell you what they are.</p>\n<p><em>But what about composition?</em> It’s great to be back in the world of plain functions, but remember what got us here in the first place? We liked functions because we liked composition; but it seems we’ve now lost composition! If I have a possibly failing function from <em>A</em> to <em>B</em>, and another from <em>B</em> to <em>C</em>, well now I’ve turned them into functions from <em>A</em> to <em>Err(B)</em> and then <em>B</em> to <em>Err(C)</em>. Those function domains and ranges don’t match up, and I can’t compose them!</p>\n<p>Oh no…</p>\n<h2>Hold Your Horses, Heinrich Kleisli to the Rescue!</h2>\n<p>Well, all is not lost. I just haven’t yet told you how to compose these “special” functions.</p>\n<p>Because some math dude found these things before us, we call our “special” functions by a name: Kleisli arrows.  There are two things going on here at once, so keep your eyes open: first, Kleisli arrows are just plain old ordinary functions, but with weird-looking ranges. Since they are just functions, you can compose them <em>as </em><em>functions</em>, and that’s just fine.  But at the same time, they are “special”, and we can compose them <em>as Kleisli arrows</em>, too.</p>\n<p>Remember what we decided earlier? The right way to think about composition is by talking about a category. Sets are a category, and that’s fine if you want plain function composition. But now we want a <em></em><em>new</em> kind of category, too. It’s called the Kleisli category. If you don’t remember what all the parts of a category are, take a second to review them. To define a category, I need objects, arrows, identities, and composition.</p>\n<ul>\n<li>To keep things simple, the objects in this new category will be the same: they are just sets of things.</li>\n<li>The arrows in this category are, unsurprisingly, the Kleisli arrows.</li>\n<li>I haven’t told you yet what the identities and composition look like, so let’s do that next.</li>\n</ul>\n<p>First, we look at <em><strong>failure</strong></em>. We’re given a failure Kleisli arrow from <em>A</em> to <em>B</em>, and one from <em>B</em> to <em>C</em>. We want to compose them into a Kleisli arrow from <em>A</em> to <em>C</em>. In other words, we have an ordinary function from <em>A</em> to <em>Err(B)</em>, and a function from <em>B</em> to <em>Err(C)</em>, and we want one from <em>A</em> to <em>Err(C)</em>.  Take a minute to think about what to do.</p>\n<p>The central idea of error handling is that if the first function gives an error, then we should stop and report the error. Only if the first function succeeds should we continue on to the second function, and give the result from that (regardless of whether it’s an error or a success).</p>\n<p>To summarize:</p>\n<ol>\n<li>If <em>g</em>(<em>x</em>) is an error, then (<em>f</em> · <em>g</em>)(<em>x</em>) = <em>g</em>(<em>x</em>).</li>\n<li>If <em>g</em>(<em>x</em>) is a success, then (<em>f</em> · <em>g</em>)(<em>x</em>) = <em>f</em>(<em>g</em>(<em>x</em>)).</li>\n</ol>\n<p>To complete the definition of a category, we also need to decide about the <em>identity</em> Kleisli arrows. These are the ones that don’t do anything, so that if you compose them with any other Kleisli arrow, it doesn’t change the other one. Identities are functions from <em>A</em> to <em>Err(A)</em>, and it turns out these are just the functions <em>f</em>(<em>x</em>) = <em>x</em>, just like for sets. Notice that means they never return an error; only a successful result.</p>\n<p>I’ll run more briefly through the remaining three examples, but I encourage readers who aren’t yet clear on how this will work to write them out in more detail and use this opportunity to become more comfortable with defining a second category of Kleisli arrows.</p>\n<p>Next we have Klesli arrows for <em><strong>dependence</strong></em>, which are functions from <em></em><em>A</em> to <em>Pref(B)</em>.  Recall that adding the <em>Pref</em> to the range is equivalent to adding a new parameter for the application preferences. The key idea here is that if I have two functions that both need to know the application preferences, I should give the <em></em><em>same</em> preferences to both. Then composing two of these Kleisli arrows just builds a new function that gets the extra preferences parameter, and passes the same one along to the two component parts. And identities? A Kleisli identity will get that extra preferences parameter, but will ignore it and just return its input anyway.</p>\n<p>The Kleisli arrows for <em><strong>uncertainty</strong></em>, or non-determinism, are functions from <em>A</em> to <em>P(B)</em>, the power set of <em>B</em>. The key idea for non-determinism is that at each stage, we want to try all possible values that might exist at this point, and collect the results from all of them. So the composition calculates the second function for <em></em><em>each</em> possible result of the first, then the resulting possibilities are merged together with a set union. The identities, of course, aren’t really non-deterministic at all, and just return one-element sets containing their input.</p>\n<p>Finally, Kleisli arrows for <em><strong>destructive</strong><strong> effects</strong></em> are functions from <em>A</em> to <em>IO(B)</em>. The key idea here is to combine instructions by following them in a step-by-step manner: first do one, then the next. So the composition writes instructions to perform the first action, look up the second action from the result, and then perform the second action, in that order. A Kleisli identity here is just an instruction to do nothing at all and announce the input as the result. So for each of the four motivating examples, we created a new category, the Kleisli category.</p>\n<p>These new categories have their own function-like things, and related ideas of composition and identities, that express the unique nature of each specific problem. By using the appropriate notion of composition in the right Kleisli category, you can solve any of these long-standing computer programming problems in a nice composable way.</p>\n<p>And that’s why you should care about monads.</p>\n<p><em>Monads?!?</em> Oh yes, I should mention that we’ve just learned about monads. We simply forgot to use the word.</p>\n<h2>What’s This Got To Do With Monads?</h2>\n<p>This section is for those of you who want to know how the stuff we said earlier are related to monads as they are understood in mathematics.  If you open Wikipedia, or most category theory textbooks, and look up monads, they won’t look very much like what we just did. You’ll see something about an endofunctor, and two natural transformation, and properties about commuting triangles and squares.</p>\n<p>We haven’t talked about functors at all, much less natural transformations… so how could we have possibly learned about monads? It turns out there’s more than one way to describe monads.  The one we’ve just gone through is an entirely valid one. The shifts we made to the ranges of our functions earlier – <em>Err</em>, <em>Pref</em>, <em>P</em>, and <em>IO –</em> are actually examples of monads. To make sure they are monads in the conventional math way, we’d have to work pretty hard: first, prove that they are <em>functors</em>. Then build two <em>natural transformations</em> called η and µ, and prove that they are natural. Finally, prove the three monad laws.</p>\n<p>But wait, there’s an easier way!  Heinrich Kleisli, whom we’ve already met from the categories earlier, pointed out that if you can build a category like the ones we did in the last section, whose arrows are just functions with a modified range, then your category is <em>guaranteed</em> to also give you a monad. That’s quite convenient, because as computer programmers, we tend to care a lot more about our Kleisli arrows than we do about a mathematician’s idea of monads.  Remember, those Kleisli arrows are exactly the modified notion of functions that we were <em>already</em> using, long before we ever heard a word about category theory!  And Kleisli tells us that as long as composition works the way we expect with our Kleisli arrows (namely, that it’s associative and the identities act like identities), then all that other stuff we’re supposed to prove to show we have a monad just happens for us automatically.</p>\n<p>Still, it’s an interesting side question to look at the relationship between the two. I won’t give all the details, but I’ll give the structure, and then leave the interested reader with some familiarity with category theory to fill in the proofs of the relevant properties. We’ll use <em>Err</em> as our monad, just to pick a specific example, but nothing here is specific to <em>Err</em>.</p>\n<ol>\n<li>We start with <em>Err</em>, which is already a map from objects to objects. But the traditional definition of a monad also requires that it be a <em>functor</em>. That is, given a function <em>f</em> from <em>A</em> to <em>B</em>, I need a way to construct a function <em>Err(f)</em> from <em>Err(A)</em> to <em>Err(B)</em>. I do it as follows: in the <em>underlying</em> category (not the Kleisli category, just the category of sets), I find an identity function from <em>Err(A)</em> to <em>Err(A)</em>. Then I find a Kleisli identity from <em>B</em> to <em>Err(B)</em>. I compose that Kleisli identity in the <em>underlying</em> category with <em>f</em>, and get a function from <em>A</em> to <em>Err(B)</em>. I can now do a Kleisli composition of the identity from <em>Err(A)</em> to <em>Err(A)</em> and the function from <em>A</em> to <em>Err(B)</em>, and get a function from <em>Err(A)</em> to <em>Err(B)</em>. That’s the one I’ll call <em>Err(f)</em>.</li>\n<li>Next, I need a natural transformation η, from the identity functor to <em></em><em>Err</em>. This is easy: the components of η are the Kleisli identities.</li>\n<li>Finally, I need a natural transformation µ from <em>Err</em>² to <em>Err</em>. To get the component of µ at <em>A</em>, I take the identity functions in the underlying category from <em>Err (Err A)</em> to <em>Err (Err A)</em>, and then from <em>Err A</em> to <em>Err A</em>, and I combine them with Kleisli composition to get a function from <em>Err (Err A)</em> to <em>Err A</em>. This is the component of µ.</li>\n</ol>\n<p>The construction in the opposite direction is easier. Given a monad <em>Err</em>with ? and µ, the Kliesli category is constructed as follows.</p>\n<ol>\n<li>The identities are just the components of η.</li>\n<li>Given a function <em>f</em> from <em>A</em> to <em>Err(B)</em> and a function <em>g</em> from <em>B</em> to <em>Err(C)</em>, I compose the two as µ · <em>Err(g)</em> · <em>f</em>.</li>\n</ol>\n<p>Again, the details and the proofs of the appropriate monad and category laws are left to the reader. I hope this brief aside has been useful. I now return to using the word “monad” but talking about monads via Kleisli categories.</p>\n<h2>Joining The Monadic Revolution</h2>\n<p>Once again, let’s pause to sum up.</p>\n<ul>\n<li>Computer programmers like to work by composing some things together, which we call functions.</li>\n<li>They aren’t functions in the obvious way… but they do make up a category.</li>\n<li>Actually, they are functions after all, but only if you squint and change the ranges into something weirder.</li>\n<li>The category that they form is called a Kleisli category, and it’s basically another way of looking at monads.</li>\n<li>These monads / Kleisli categories nicely describe the techniques we use to solve practical problems.</li>\n</ul>\n<p>It’s not just about those four examples, either.  Those are typical of many, many more ideas about programming models that can be described in the same framework. I think it’s fair to sum up and say, at this point, that someone interested in studying and analyzing programming languages and models should be familiar with some ideas from category theory, and with monads in particular.</p>\n<p>But still, what about the humble computer programmer, who is not designing a new language, is not writing research papers analyzing programming languages, but just wants to solve ordinary everyday problems?  That’s a fair question.  As long as monads remain just a mathematical formalism for understanding what computer programmers mean by functions, the practicing computer programmer has a good claim to not needing to understand them.</p>\n<p>It’s becoming clear, though, that monads are on their way into practical programming concerns, too.  In the past, these Kleisli arrows, the modified notions of “function” used by computer programmers, were built into our programming languages.  Functions in C used a Kleisli arrow, and C++ functions used a different one.  The language specification would tell us what is and what is not possible using a function in this language, and if we wanted something different, too bad.  Maybe once a decade, we’d make the swap to a brand new programming language, and bask in the warm rays of some new language features for a while.</p>\n<h4>The Past: Error Handling</h4>\n<p>Consider the <em>Err</em> monad, which gave us functions that might fail and report their failure in structured ways.  Modulo some details and extensions, this is basically structured exception handling. Looking to history, programmers worked without exception handling in their programming languages for many years. Of course, languages like C are all Turing complete, and can solve any possible computational problem, proper error handling included. But we don’t apply categories to think about possible computations; categories are for thinking about composition. Without exception handling in the notion of a “function” that’s provided by languages like C, programmers were left to do that composition by hand.</p>\n<p>As a result, any C function that could fail had to indicate that failure using a return value.  In many cases, conventional wisdom built up saying things like “return values are for indicating success or failure, <em>not</em> for giving back answers”. Coding conventions called for most if not all function calls to be followed with <em>if</em> statements checking for failure, and the resulting code was borderline unreadable.  This was the heyday of flowcharts and pseudo-code, because no one expected to be able to understand real code at a glance!  In reality, though, programmers only checked for errors when they thought they was possible, and a lot of errors went undetected. Programs were often unreliable, and likely untold billions of dollars spent on extra development work and troubleshooting.</p>\n<p>What was the reason for this?  It’s quite simple: the C programming language and others of its time provided an insufficient kind of Kleisli arrow!  If their Kleisli arrow had included the functionality from the <em>Err</em> monad we defined above, this could have been avoided.  But the notion of what a function means in C is fixed, so the answer was to deal with it, and eventually migrate to a different programming language, rewriting a lot of software, and likely costing another untold billions of dollars.</p>\n<h4>The Present: Global Variables and Context</h4>\n<p>What about the <em>Pref</em> monad, and others like it? As discussed earlier, this is about defining computations in a larger context of available information and state of the world.</p>\n<p>In the past, we had global variables, the slightly more modern equivalent of just storing information at a known place in computer memory. Quick and dirty, but even 30 years ago, programmers knew they were the wrong answer, and wouldn’t be manageable for larger programs. Object oriented programming tried to alleviate the problem a little, by having functions run in a specific “object” that serves as their context, and that was implicitly passed around at least within the implementation of the object itself. To get this, everyone effectively had to change programming languages to get a better Kleisli arrow again.  But even so, object-oriented languages don’t give a perfect answer to this problem.</p>\n<h4>The Near Future (/ Present): Purity, Effects, Parallelism, Non-Determinism, Continuations, and More!</h4>\n<p>This point is about the future, but I’ll start out by pointing out that everything here is already possible, but just requires an appropriate choice of programming language!</p>\n<p>One current challenge for the computer programming community is finding effective ways to handle parallelism. Ironically, while past examples have focused on the problem of putting too little power into a language’s Kleisli arrow, the problem this time is too much!  Plain (also known as “pure”) functions present lots of opportunities for parallelism. When code is executed in parallel, it may run faster, or if the parallelism is poorly designed it may even run slower, but in any case it will <em>certainly</em> still give the same answer. But when the Kleisli arrow incorporates destructive updates, that is no longer the case. Now parallelism is risky, and might give unexpected or incorrect results due to so-called <em>race </em><em>conditions</em>.</p>\n<p>We can’t just remove destructive updates from a language’s Kleisli arrow, though.  A program that has no observable effects at all isn’t useful. What is useful is the ability to separate the portions of code that perform destructive update from those that just compute pure functions.  So for the first time, we need a language with more than one kinds of Kleisli arrow, in the same language!</p>\n<p>There is already at least one language that offers precisely this. Programmers in the Haskell language can build their own monads, and work in the Kleisli category of a monad of their choosing.  The programming language offers a nice syntax for making this approach readable and easy to use.  If something might fail, you can throw it in <em>Err</em>.  If it needs access to the application settings, throw it in <em>Pref</em>.  If it needs to do input or output, throw it in <em>IO</em>.  Haskell web application frameworks and similar projects start by defining an appropriate monad with the appropriate features for <em>that kind</em> of application.</p>\n<p>Another current trend in the computer programming community is toward building more domain-specific programming models. The language Erlang became popular specifically for providing a new programming model with advantages for parallelism.  Microsoft’s .NET framework incorporates LINQ, which offers a programming model that’s better for bulk processing and querying of collections of data.  Rails popularized domain-specific languages for web applications.  Other languages offer continuations as a way to more easily build specify computations in a more flexible way.  All of these are examples of working in new and different Kleisli arrows that capture exactly the model appropriate for a given task.</p>\n<p>It comes down to this: If we believe that there is one single notion of “function” that is most appropriate for all of computer programming, then as practical programmers we can find a language that defines functions that way, and then forget about the more general idea of monads or Kleisli arrows as a relic of theoreticians.  But it’s not looking that way.  The programming community is moving quickly toward different notions of what a function means for different contexts, for different tasks, even for different individual applications.  So it’s useful to have the language, the tools, and the intuition for comparing different procedural abstractions.  That’s what monads give us.</p>\n<h4>Abstraction Over Monads</h4>\n<p>Using a language with a choice of monads offers some other advantages here, too.  It gives us back our abstraction.  In Haskell, for example, it’s possible to write code that is applicable in multiple different monads. A surprising amount of the programming done with one monad in mind actually has meaning in very different monads! For example, consider the following Haskell type:</p>\n<p style=\"padding-left: 30px;\"><em>sequence :: Monad m =&gt; [m a] -&gt; m [a]</em></p>\n<p>What this means is that for any monad, which we’ll call <em>M</em>, sequence converts from a list of values of <em>M(A)</em> into <em>M(List(A))</em>, the monad applied to lists themselves.  Let’s take a minute to consider what this means for each of our four examples. For <em>Err</em>, it takes a list of results that might be failures, and if any of them are failures, it fails; but if not, then it gives back a list of all the results.  It’s basically a convenient way to check a whole list of computations for a failure. For <em>Pref</em>, it takes a single set of application preferences, and distributes that to everything in the list, giving back a list of the results. For the power-set monad, <em>P</em>, it would take a list of sets, and give back a set of all the ways to choose one item from each set.  And for <em>IO</em>, it takes a list of instruction cards, and gives back the single card with instructions for doing all of them in turn.  Amazingly, this one function, which had only one implementation, managed to make sense and do something useful for all four of our examples of monads!</p>\n<p>Along with a choice of monads comes the ability to abstract over that choice, and write meaningful code that works in <em>any</em> monad that you do end up choosing.</p>\n<p>Between all of these forces, I predict that within the next ten years, software developers will be expected to discuss monads in the same way that most developers currently have a working vocabulary of design patterns or agile methodologies.</p>\n<h2>Beyond Monads: More Categorical Programming</h2>\n<p>While most of this has been about monads, I don’t want to leave anyone with the impression that monads are the only influence of categories in computer programming.  All of the following ideas have found their way into programming practice, mostly (so far) within the Haskell programming language community because of its flexibility and a deep academic culture and history.</p>\n<ul>\n<li><em>Monad transformers</em> are a powerful technique for combining the effects of more than one monad to build rich and powerful programming models.</li>\n<li><em>Functors</em> and <em>applicative functors</em> (a.k.a. strong lax monoidal functors for mathematicians) are weaker than monads, but more widely applicable.</li>\n<li>Other kinds of categories that are not Kleisli categories can often be defined and composed to solve specific problems. Freyd categories are also useful.</li>\n</ul>\n<p>I’ll stop there, but only as an encouragement to look more into the various abstractions from category theory that programmers have found useful. A good starting point is the (Haskell-specific) <a href=\"http://www.haskell.org/haskellwiki/Typeclassopedia\">Typeclassopedia</a> by Brent Yorgey. That’s just a door into the many possibilities of applying category-based ideas and intuitions in computer programming.</p>\n<p>But I hope I was able to convey how these ideas aren’t just made up, but are actually the natural extension of what computer programmers have been doing for decades.</p>\n<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/cdsmith.wordpress.com/544/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/cdsmith.wordpress.com/544/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godelicious/cdsmith.wordpress.com/544/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/delicious/cdsmith.wordpress.com/544/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gofacebook/cdsmith.wordpress.com/544/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/facebook/cdsmith.wordpress.com/544/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gotwitter/cdsmith.wordpress.com/544/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/twitter/cdsmith.wordpress.com/544/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gostumble/cdsmith.wordpress.com/544/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/stumble/cdsmith.wordpress.com/544/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godigg/cdsmith.wordpress.com/544/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/digg/cdsmith.wordpress.com/544/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/goreddit/cdsmith.wordpress.com/544/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/reddit/cdsmith.wordpress.com/544/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=cdsmith.wordpress.com&amp;blog=1158345&amp;post=544&amp;subd=cdsmith&amp;ref=&amp;feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />") (pubDate nil "Thu, 19 Apr 2012 20:12:08 +0000"))) ("Yesod Web Framework: A Debugging Adventure: OpenID" "<p>I got an email today reporting a bug on Haskellers.com. Someone's OpenID (to\nprotect the innocent, we'll call it <code>https://example.com</code>) was not working.\nHere's the story of debugging it.</p><p>I started off (of course) by trying to reproduce it. I went to Haskellers and\ntried logging in with the OpenID, and sure enough got this cryptic message:</p><pre><code>data: end of file</code></pre><p>This immediately caught my attention, because I didn't remember ever creating\nsuch an error message. So I thought about the library stack at play here:</p><ol><li>haskellers.com</li><li>yesod-auth</li><li>authenticate</li><li>http-conduit</li><li>tls</li></ol><p>I figured that the error message must have come from <code>tls</code>, because it's the\nonly library in that stack that I didn't write. So I put together a quick test\ncase to use <code>http-conduit</code> to connect to the server. And it worked perfectly. So\nthe bug seemed to not be from either <code>http-conduit</code> or <code>tls</code>.</p><p>OK, let's start over from the top of the stack. I took my <code>yesod-auth</code> test\nprogram and tried to connect to log in to example.com. Same error message. So\nit's not caused by Haskellers. I tried using my authenticate test program.\nAgain, same error message. But now I know it must be coming from somewhere in\nauthenticate, right?</p><p>Now's the time to use the golden hammer of debugging: print statements. Using\nthis powerful and sophisticated technique, I traced the problem to\n<a href=\"https://github.com/yesodweb/authenticate/blob/master/authenticate/Web/Authenticate/OpenId.hs#L34\">getForwardUrl</a>,\nthen to\n<a href=\"https://github.com/yesodweb/authenticate/blob/master/authenticate/OpenId2/Discovery.hs#L51\">discover</a>,\nthen to\n<a href=\"https://github.com/yesodweb/authenticate/blob/master/authenticate/OpenId2/Discovery.hs#L66\">discoverYADIS</a>.</p><p>At this point, there were two things bothering me:</p><ul><li>I still had no idea where that error message was coming from.</li><li>discoverYADIS was being called twice. It succeeded the first time, and failed the second.</li></ul><p>It's not surprising that the discoverYADIS function is called twice, it's the very\nnature of OpenID. Usually, we connect to the OpenID specified by the user, only\nto find an HTML tag or HTTP header telling us to look elsewhere for the rest of\nthe login information. But why was it failing the second time around?</p><p>I got the two URLs that were being requested, and went back to my http-conduit test program. I ran something along the lines of:</p><pre><code>simpleHttp \"https://example.com/\"\nsimpleHttp \"https://example.com/?xrds\"</code></pre><p>No problem at all. So both URLs seemed to work. Then I got an idea: maybe it's\na problem caused by connection sharing. So I modified the test program:</p><pre><code>withManager $ \\m -&gt; do\nreq &lt;- parseurl \"https://example.com/\"\nhttpLbs req m\nhttpLbs req m</code></pre><p>Boom! I got the exact same <code>data: end of file</code> error message. Hurrah! Now\ndebugging could focus on just <code>http-conduit</code> and <code>tls</code>. Somehow, the request\nwas failing when we were reusing a connection.</p><p>But I <a href=\"https://github.com/snoyberg/http-conduit/blob/c1da8cfb65bb69e802d1e17b7872902c2bd115f2/Network/HTTP/Conduit.hs#L198\">already had code for that case</a>. tl;dr: If any exceptions occur when sending the request, and we're reusing an old connection, then start over with a fresh connection.</p><p>But what we <i>weren't</i> handling was the case when the exception was thrown when\nreading the response headers. Our example.com server was behaving as follows:</p><ul><li>Accept the first request</li><li>Send the first response</li><li>Accept the second request</li><li>Close the connection</li></ul><p>This doesn't seem very logical to me, and perhaps there was something else involved that forced the server to close the connection when it did. Either way, the fix is simple: <a href=\"https://github.com/snoyberg/http-conduit/commit/77e8c6438af599a4f819172204ece5a0c4d6a16e\">catch exceptions when reading the response headers</a>.</p><p>So there you have it: start to finish debugging of an OpenID bug.</p>" "http://www.yesodweb.com/blog/2012/04/debugging-openid" (20368 14012) obsolete 4 nil nil ((title nil "Yesod Web Framework: A Debugging Adventure: OpenID") (guid ((isPermaLink . "true")) "http://www.yesodweb.com/blog/2012/04/debugging-openid") (link nil "http://www.yesodweb.com/blog/2012/04/debugging-openid") (description nil "<p>I got an email today reporting a bug on Haskellers.com. Someone's OpenID (to\nprotect the innocent, we'll call it <code>https://example.com</code>) was not working.\nHere's the story of debugging it.</p><p>I started off (of course) by trying to reproduce it. I went to Haskellers and\ntried logging in with the OpenID, and sure enough got this cryptic message:</p><pre><code>data: end of file</code></pre><p>This immediately caught my attention, because I didn't remember ever creating\nsuch an error message. So I thought about the library stack at play here:</p><ol><li>haskellers.com</li><li>yesod-auth</li><li>authenticate</li><li>http-conduit</li><li>tls</li></ol><p>I figured that the error message must have come from <code>tls</code>, because it's the\nonly library in that stack that I didn't write. So I put together a quick test\ncase to use <code>http-conduit</code> to connect to the server. And it worked perfectly. So\nthe bug seemed to not be from either <code>http-conduit</code> or <code>tls</code>.</p><p>OK, let's start over from the top of the stack. I took my <code>yesod-auth</code> test\nprogram and tried to connect to log in to example.com. Same error message. So\nit's not caused by Haskellers. I tried using my authenticate test program.\nAgain, same error message. But now I know it must be coming from somewhere in\nauthenticate, right?</p><p>Now's the time to use the golden hammer of debugging: print statements. Using\nthis powerful and sophisticated technique, I traced the problem to\n<a href=\"https://github.com/yesodweb/authenticate/blob/master/authenticate/Web/Authenticate/OpenId.hs#L34\">getForwardUrl</a>,\nthen to\n<a href=\"https://github.com/yesodweb/authenticate/blob/master/authenticate/OpenId2/Discovery.hs#L51\">discover</a>,\nthen to\n<a href=\"https://github.com/yesodweb/authenticate/blob/master/authenticate/OpenId2/Discovery.hs#L66\">discoverYADIS</a>.</p><p>At this point, there were two things bothering me:</p><ul><li>I still had no idea where that error message was coming from.</li><li>discoverYADIS was being called twice. It succeeded the first time, and failed the second.</li></ul><p>It's not surprising that the discoverYADIS function is called twice, it's the very\nnature of OpenID. Usually, we connect to the OpenID specified by the user, only\nto find an HTML tag or HTTP header telling us to look elsewhere for the rest of\nthe login information. But why was it failing the second time around?</p><p>I got the two URLs that were being requested, and went back to my http-conduit test program. I ran something along the lines of:</p><pre><code>simpleHttp \"https://example.com/\"\nsimpleHttp \"https://example.com/?xrds\"</code></pre><p>No problem at all. So both URLs seemed to work. Then I got an idea: maybe it's\na problem caused by connection sharing. So I modified the test program:</p><pre><code>withManager $ \\m -&gt; do\n    req &lt;- parseurl \"https://example.com/\"\n    httpLbs req m\n    httpLbs req m</code></pre><p>Boom! I got the exact same <code>data: end of file</code> error message. Hurrah! Now\ndebugging could focus on just <code>http-conduit</code> and <code>tls</code>. Somehow, the request\nwas failing when we were reusing a connection.</p><p>But I <a href=\"https://github.com/snoyberg/http-conduit/blob/c1da8cfb65bb69e802d1e17b7872902c2bd115f2/Network/HTTP/Conduit.hs#L198\">already had code for that case</a>. tl;dr: If any exceptions occur when sending the request, and we're reusing an old connection, then start over with a fresh connection.</p><p>But what we <i>weren't</i> handling was the case when the exception was thrown when\nreading the response headers. Our example.com server was behaving as follows:</p><ul><li>Accept the first request</li><li>Send the first response</li><li>Accept the second request</li><li>Close the connection</li></ul><p>This doesn't seem very logical to me, and perhaps there was something else involved that forced the server to close the connection when it did. Either way, the fix is simple: <a href=\"https://github.com/snoyberg/http-conduit/commit/77e8c6438af599a4f819172204ece5a0c4d6a16e\">catch exceptions when reading the response headers</a>.</p><p>So there you have it: start to finish debugging of an OpenID bug.</p>") (pubDate nil "Thu, 19 Apr 2012 16:01:00 +0000"))) ("Well-Typed.Com: Parallel Haskell Digest 9" "<p>The Google Summer of Code is upon us and students have already submitted\ntheir proposals. There are a couple potential projects on concurrent\ndata structures, which we'll have a look at below.</p><p>We will also be continuing our tour of Haskell concurrency abstractions\nwith our word month, <em>transaction</em>. This digest is brought to you by the\nParallel GHC project, an MSR-sponsored effort to push parallel Haskell\ntechnologies out into the real world. Check our project news below to\nsee how we're doing in that front.</p><p>Finally, you may heard Functional Propaganda from a Simon or two. But\nhow would the same message affect you if it came from a hardcore C++\nhacker? If you haven't seen it making the rounds, have a quick look at\nBartosz Milewski's\n<a href=\"http://fpcomplete.com/the-downfall-of-imperative-programming/\">The Downfall of Imperative Programming</a>,\nand maybe tell your imperative friends? The FP monster is hatching from\nits academic egg; best be prepared!</p><h3> News</h3><p>Let's have a quick look at some of those GSoC proposals, particularly\nthose with a parallel Haskell theme. It's all about performance this\nyear. Two of the proposals involve using or improving parallellism in\nHaskell, and four are related to high-performance concurrency.</p><ul><li><p><a href=\"http://www.google-melange.com/gsoc/proposal/review/google/gsoc2012/dmitrydzhus/1002\">Parallel CSG engine</a></p>\n<p>Constructive Solid Geometry (CSG) is the common approach to\ndefine complex bodies in engineering applications, ray tracing engines\nand physical simulators. Dmitry Dzhus' proposal is to deliver a fast\nparallel CSG engine using the Accelerate/Repa libraries for\nvectorised computations on GPU.</p></li></ul><ul><li><p><a href=\"http://www.google-melange.com/gsoc/proposal/review/google/gsoc2012/sajith/1\">NUMA supporting features for GHC</a></p>\n<p>Sajith Sasidharan wants to reach into the GHC RTS, with the aim\nof “extracting that last ounce of performance from NUMA systems, by\nfiring all CPUs if/when necessary and by ensuring a suitably\nNUMA-aware memory allocation behavior.” Work in this area would\nbenefit folks doing scientific computing, who may need great amounts\nof task and data parallelism.</p></li></ul><ul><li><p><a href=\"http://www.google-melange.com/gsoc/proposal/review/google/gsoc2012/refold/35002\">Windows support for the new GHC I/O manager</a></p>\n<p>The new I/O manager (GHC 7) brings great scalability\nimprovements to Haskell — 10k simultaneous connections to your web\nserver? no sweat. Unfortunately for Haskellers on Windows, these\nimprovements are currently only available on Unix. Mikhail Glushenkov\n(who worked on GSoC last year to make improvements to Cabal) proposes\nto remedy this, making the new manager available on Windows. The\nchallenge is that Windows I/O completion ports have slightly\ndifferent semantics than their epoll/kqueue analogues on Unix.</p></li></ul><ul><li><p><a href=\"http://www.google-melange.com/gsoc/proposal/review/google/gsoc2012/florianhartwig/1\">Lock-free hash table and priority queue</a></p>\n<p>More along the theme of high performance concurrency, Florian\nHartwig's project aims to use GHC's new-ish atomic compare-and-swap\n(CAS) primitive to implement a high-performance lock-free hash table\nand a lock-free priority queue in Haskell. The CAS instruction is a\nbit of hardware support for concurrency: it compares a value in memory\nto an expected value, and iff they match, replaces it with a new\nvalue.</p></li></ul><ul><li><p><a href=\"http://www.google-melange.com/gsoc/proposal/review/google/gsoc2012/lorehead/1\">Implement Concurrent Hash-table / Hashmap</a></p>\n<p>Loren Davis also proposes a thread-safe mutable hash table\nimplementation in Haskell. Loren is still weighing some of the\nalternative approaches suggested in the Haskell community. He is\ncurrently leaning towards a lock-stripping approach as it would\nfulfill an immediate need in the community.</p></li></ul><ul><li><p><a href=\"http://www.google-melange.com/gsoc/proposal/review/google/gsoc2012/mathiasbartl/1\">Concurrent Datastructures with good Performance</a></p>\n<p>Mathias Bartl aims to implement two concurrent data types in\nHaskell, along with the usual battery of automated unit tests and\nbenchmarks. The two that Mathias has in mind are a lock-free\nconcurrent bag, and a concurrent priority queue.</p></li></ul><h3> Parallel GHC project update</h3><p>We have been continuing our work to make ThreadScope more helpful and\ninformative in tracking down your parallel and concurrent Haskell\nperformance problems. We now have the ability to collect heap statistics\nfrom the GHC runtime system and present them in ThreadScope. These\nfeatures will be available for users of a recent development GHC (7.5.x)\nor the eventual 7.6 release. In addition to heap statistics, we have\nbeen working on collecting information from hardware performance\ncounters, more specifically adding\n<a href=\"http://www.berniepope.id.au/linuxPerfEvents.html\">support for Linux Perf Events</a>.\nThis could be useful for studying IO-heavy programs, the idea being to\nvisualise system calls as being distinct from actual execution of\nHaskell code.</p><p>Speaking of performance, we are also continuing work on the new Cloud\nHaskell implementation (see Duncan Coutts'\n<a href=\"http://sneezy.cs.nott.ac.uk/fun/2012-02/coutts-2012-02-28.pdf\">Fun in the Afternoon Talk</a>),\nand have lately been focused on reducing message latency. This consists\nof work in three areas: improving binary serialisation, investigating\nthe implications of using <code>Chan</code> and <code>MVar</code> to pass messages between\nthreads, and perhaps improving the Haskell network library\nimplementation to compete better with a direct C implementation.</p><h3> Word of the month</h3><p>Lately, we've been investigating the various ways Haskell helps us to\nget to grips with concurrency. We talked about how the <code>MVar</code>, the\nHaskell variant on locks, allows us to share mutable variables between\nthreads, with some safeguards to help ensure consistency. <code>MVar</code>'s may\nprovide a nice high-level packaging around locks, but as we mentioned in\nthe last digest, they can still go horrifically wrong, just like locks\nand synchronized methods in other languages.</p><p>We could go through the usual litany of reasons why locks are bad news,\nbut maybe a healthier approach would be for us to focus on the positive.\nWhat do we want as programmers? One possibility is what Simon PJ\n(<a href=\"http://research.microsoft.com/en-us/um/people/simonpj/papers/stm/beautiful.pdf\">Beautiful Concurrency</a>)\ncalls “modular programming”, the ability to “[build] large programs by\ngluing together smaller programs”. Locks fall short of helping us to\nmeet this desire. First, because the mere act of combining two locky\nprograms may be inherently incorrect;\n<code>withdraw acct1 amt &gt;&gt; deposit acct2 amt</code> is bad because of the gap\nbetween the two actions where the money is in neither account. Second,\nbecause they seal off programs that we may otherwise like to moosh\ntogether; if process p1 waits for input on a pipe, process p2 waits for\ninput on another pipe, how do wait for either of p1 or p2? So how do we\nwrestle back this modularity from our locky masters? And how do we make\nprogramming fun again?</p><p>Our word of the month today is “transaction”. Software transactional\nmemory (STM) takes this idea of a transaction (a sequence of operations\nthat can be treated as a single atomic block) from database design. The\nHaskell implementation of STM was introduced in the 2005 paper\n<a href=\"http://research.microsoft.com/en-us/um/people/simonpj/papers/stm/stm.pdf\">Composable Memory Transactions</a>\nby Harris <em>et. al.</em> If programming fun is what you're after, this is a\npaper that comes with its own war-cry: “compositionality: a programmer\ncan control atomicity and blocking behaviour in a modular way that\nrespects abstraction barriers.”</p><p>Here are some quick highlights of the stm library. You may notice a\ncouple of things, first that this library introduces its own notion of\nvariable, the <code>TVar</code> (<code>MVar</code>,<code>IVar</code>; what, no pirate joke?) and second\nthat STM involves a new monad of its own. Unlike the <code>MVar</code> that we saw\nin the last digest, <code>TVar</code>'s do not have the same notion of being full\nor empty; they just hold values plain and simple. As for the STM monad,\nwe will see why it matters when we first try to do some IO.</p><pre> -- Control.Concurrent.STM\ndata STM a\ninstance Monad STM\natomically :: STM a -&gt; IO a\ndata TVar a\nnewTVar   :: a -&gt; STM (TVar a)\nreadTVar  :: TVar a -&gt; STM a\nwriteTVar :: TVar a -&gt; a -&gt; STM ()\nretry  :: STM a\norElse :: STM a -&gt; STM a -&gt; STM a\n</pre><p>To get a rough idea how some of this is used, let's look at the\ntransactional hello world, safely wiring money from one bank account to\nanother. For the purposes of our example, a bank account is just a\nbalance. To get some money from an account, we read the balance,\nsubtract the amount, and write the new balance. Making a deposit is just\nwithdrawing negative-money.</p><pre> type Account = TVar Int\nwithdraw :: Account -&gt; Int -&gt; STM ()\nwithdraw acc amount = do\nbal &lt;- readTVar acc\nwriteTVar acc (bal - amount)\ndeposit :: Account -&gt; Int -&gt; STM ()\ndeposit acc amount = withdraw acc (- amount)\n</pre><p>These primitive operations (withdraw and deposit) bring us to the\nquestion of modularity. How do we know that it's safe to combine these\nmini-programs into a bigger one? In other words, if we write something\nlike <code>withdraw from 42 &gt;&gt; deposit to 42</code>, how do we avoid the\npossibility of running into some twilight zone state where the money is\nneither here nor there? If people do strange things like simultaneously\ntransfering money in the other direction, will our program still work?</p><p>The answer lies in the distinction between <code>STM</code> (transactions) and <code>IO</code>\n(actions). So long as we remain in STM, we are simply assembling\ntransactions, piecing smaller ones (“withdraw from a”) into larger ones\n(“withdraw from a and deposit it to b”), but not actually performing\nthem! Having composed our transactions, we can use the function\n<code>atomically</code> to turn them into IO actions.</p><pre> -- still just a transaction\ntransfer :: Account -&gt; Account -&gt; Int -&gt; STM ()\ntransfer from to amount = do\ndeposit to amount\nwithdraw from amount\n-- now we have an action!\ndoTransfer :: Account -&gt; Account -&gt; Int -&gt; IO ()\ndoTransfer from to amount =\natomically $ transfer from to amount\n</pre><p>And <code>atomically</code> does what it says on the tin: it runs the transaction\nin a way that renders it indivisible, no twlight zones. Lest there is\nany confusion, even though the transaction is indivisible, we can\n<em>still</em> have concurrency during the course of the transaction, even\nsimultaneously read the affected <code>TVar</code>s if we want to. The\nindivisibility simply means that we never catch our transactions with\ntheir pants down. We neither read nonsense mid-transactional values\n(simultaneous reads would either get the before or after value), nor\ninjecting values into a transaction mid-stream.</p><p>To get a feel for how these guarantees are possible, it could be useful\nto take a peek under the hood. For each transaction that is run, GHC\nmaintains a thread-local log with an entry for each <code>TVar</code> accessed in\nthat transaction. Each entry contains both the old value and the new\nvalue that would be committed if the transaction is succesful. This may\nbe easier to see with a silly example:</p><pre>main = do\nv1 &lt;- atomically $ newTVar \"Joe\"\nv2 &lt;- atomically $ newTVar \"Bob\"\ndone &lt;- atomically $ newTVar 0\n-- thread A (you can just pretend forkDelayIO == forkIO)\nforkDelayIO . atomically $ do\n-- transaction log if A runs first\nx &lt;- readTVar v1      -- v1: Joe -&gt; Joe\ny &lt;- readTVar v2      -- v1: Joe -&gt; Joe, v2: Sue -&gt; Sue\nwriteTVar v1 \"Sue\"    -- v1: Joe -&gt; Sue\nwriteTVar v2 x        -- v1: Joe -&gt; Sue, v2: Bob -&gt; Joe\nwriteTVar v1 y        -- v1: Joe -&gt; Bob, v2: Bob -&gt; Joe\nmodifyTVar done (+1)  -- (stm 2.3 but easy to define)\n-- thread B\nforkDelayIO . atomically $ do\n-- (if A runs first)\nwriteTVar v1 \"Jean\"   -- v1: Bob -&gt; Jean\nwriteTVar v2 \"Paul\"   -- v1: Bob -&gt; Jean, v2: Joe -&gt; Paul\nmodifyTVar done (+1)\nwaitThreads 2 done\npeople &lt;- atomically $ do -- (if A runs first)\np1 &lt;- readTVar v1     -- v1: Jean -&gt; Jean\np2 &lt;- readTVar v2     -- v1: Jean -&gt; Jean, v2: Paul -&gt; Paul\nreturn (p1, p2)\nprint people -- if A runs first, (Jean, Paul)\n-- if B runs first, (Paul, Jean).\n-- boring details just for this example\nforkDelayIO job = forkIO $\nrandomRIO (1, 1000000) &gt;&gt;= threadDelay &gt;&gt; job\nwaitThreads n v = atomically $\ndo { d &lt;- readTVar v;  when (d &lt; n) retry }\n</pre><p>In the above, we fork off two threads, A which swaps a pair of names\nand, B which overwrites them with other names. Atomicity here means that\nother threads never see any intermediary states and state changes from\nother threads don't affect the current thread. For example, thread B\nshould never see <code>v1</code> being set to \"Sue\". Likewise, if thread A should\nstill read \"Joe\" from v1 even if B simultaneously writes \"Jean\".</p><p>This is made possible by validation of the transaction logs. Validation\nnormally occurs at the end of a transaction (we won't cover the two\nother cases here: exceptions, and thread wake-ups). It consists of\nchecking that all the expected “before” values for <code>TVar</code>s still match\nreality. If the logs are good, we commit the new values; if not, we\nsimply discard them and try the transaction again, taking the new\nreality into account. This validate-and-commit model allows us to run\ntransactions simultaneously, safely, but with the occasional rollback\nand retry to ensure atomicity.</p><p>The notion of a transaction log brings us to the notion of cost. Good\nthings don't always come cheap, and using a good thing like STM may\nrequire a little familiarity with the cost model behind it. Basically,\nit's important to keep in mind that the values we write to <code>TVar</code>'s may\ncome from some arbitrary expression, and that arbitrary expressions may\nbe arbitrarily expensive. So being forced to retry transactions may\ninvolve redoing something expensive. If the transactions affect many\nvariables, the chances of hitting a retry go up. Likewise, if the\ntransaction takes a long time to run, the chance goes up of some other\nthread making a change that triggers a retry. In the pathological worst\ncase, you can have some transactional behemoth that never manages to\ncommit; because some smaller faster transaction keeps stealing its\nthunder. So keep an eye out for starvation and the more general problem\nfor retries being expensive.</p><p>Cost may be a bit of a bummer, but there's also a Haskell-related silver\nlining behind all this. Because we have a purely functional language and\nthe enforced separation between pure functions and side-effecting\nactions, STM is actually quite practical in Haskell. The number of\nthings we need to track in a transaction log is limited to handful of\nexplicit <code>TVar</code>s rather that just about everything. If you are coming\nfrom other languages, you may have a memory of STM as being nice, but\nwildly impractical. Not so in Haskell. Eminently viable.</p><p>Aside from making STM practical, this sort of separation is also good\nfor general peace of mind. Suppose for example that we coded up a\nfeature in our banking software to send our users a text message alert\nwhenever their balances fall below a threshold. If we were in the middle\nof a complicated transaction, we might be tempted to just slap that\nlogic right in the middle of the transaction; however, the Haskell\nimplementation makes this deliberately impossible. This can be a bit\nfrustrating at first (and new Haskellers are sometimes faced with the\n“how do I get this out of the monad” puzzle), but saves us the greater\ndanger of bombarding our users with spurious retry-induced text\nmessages.</p><p>The guarantees that STM offer make it a great place to get started with\nHaskell concurrency. After all, why make software any buggier than it\nneeds to be? If you do want to get started, have a look at Simon Peyton\nJones'\n<a href=\"http://research.microsoft.com/en-us/um/people/simonpj/papers/stm/beautiful.pdf\">Beautiful Concurrency</a>.\nIt's a particularly good idea to do so, because there's some really\ninteresting ground that we've not covered here (briefly, blocking, the\n<code>retry</code> function aborts the current transaction, and causes it to be\nretried when appropriate; and choice: <code>a <code>orElse</code> b</code> tries\n<code>a</code>, and if that should retry, then <code>b</code>, and if that should also retry,\nthe whole expression again). Other great STM resources are Simon\nMarlow's\n<a href=\"http://community.haskell.org/~simonmar/par-tutorial.pdf\">tutorial on parallelism and concurrency</a>\nand the\n<a href=\"http://book.realworldhaskell.org/read/software-transactional-memory.html\">Real World Haskell chapter on STM</a>.\nWith the four resources combined, you'll see a nice range of examples\nfrom the usual bank-account one to concurrently shuffling windows\nbetween desktops.</p><h3> Blogs</h3><ul><li><p><a href=\"http://fpcomplete.com/the-downfall-of-imperative-programming/\">The Downfall of Imperative Programming</a>\n(9 Apr)</p>\n<p>Take a hardcore C++ veteran with imperative programming in his\nbloodstream and loads of experience under his belt. Now give him a\npassion for concurrency and what do you get? First, you get a keen\nawareness that the future is massively multicore. Second, you get a\nhard-won appreciation for how difficult concurrent programming can be;\nfor all jokes we make in the Haskell community about firing the\nmissiles, the consequences of data races can sometimes be\n<a href=\"http://en.wikipedia.org/wiki/Therac-25\">deadly</a>. Third, you get the\nconviction that functional programming is the inevitable way\nforward.</p>\n<p>Bartosz Milewski sums up the situation thus: Sooner or later\nyou’ll have to face the multicore reality. You will be forced to learn\nfunctional methods to the extent to which your imperative language\nsupports them. Despite that, data races will infest your code and leak\ninto released products. So you might as well take a shortcut and\nembrace a full blown functional language now.</p>\n<p>See what you make of his blog post if you have not done so\nalready. There's quite a bit of buzz about this post, so you may also\nbe interested in the\n<a href=\"http://www.reddit.com/r/programming/comments/s112h/the_downfall_of_imperative_programming_functional/\">programming reddit discussion</a>\naround it as well.</p></li></ul><ul><li><p><a href=\"http://adit.io/posts/2012-03-10-building_a_concurrent_web_scraper_with_haskell.html\">Building A Concurrent Web Scraper With Haskell</a>\n(10 Mar)</p>\n<p>Let's make a concurrent web scraper! This blog post by Aditya\nBhargava presents a hands-on introduction to both arrows (via hxt) and\nconcurrency (via parallel-io). Aditya builds from the bottom-up,\nshowing us little pieces of program that we might cobble together,\nculminating in a 52 line Haskell program that crawls web sites and\nfetches images within their pages. The parallel-io library used in\nthis tutorial provides a thread pool which minimises contention by\nguaranteeing a limit to the number of unblocked threads running at the\nsame time. It uses lock based concurrency with <code>MVar</code>'s under the\nhood.</p></li></ul><ul><li><p><a href=\"http://therning.org/magnus/archives/1009\">0MQ and Haskell</a> (6\nMar)</p>\n<p>Magnus Therning could not find any excuses to look into 0MQ. But\n“to hell with reason”, Magnus ended up deciding to just poke around\nwithout any specific goal in mind. He found a\n<a href=\"http://nichol.as/zeromq-an-introduction\">nice tutorial</a> based on\nPython and translated its mini examples into Haskell. Magnus wonders\nwhy the API for <code>subscribe</code> is <code>String</code> rather than <code>ByteString</code>\nbased. Also, he's finding that his client mysteriously dies after\nreceiving a few messages. Any comments?</p></li></ul><ul><li><p><a href=\"http://ghc-simd.blogspot.co.uk/2012/03/simd-support-for-vector-library.html\">SIMD Support for the vector library</a>\n(27 Mar)</p>\n<p>Single instruction, multiple data (SIMD) is the sort of thing you\nmight be interested in if you're into data parallelism: hardware that\ncan perform the same instruction on multiple data simultaneously.\nGeoffrey Mainland posted about his efforts to bring SIMD support to\nGHC, the bigger picture being that you ought to be able to write nice\nhigh-level Haskell and have it work as fast the low-level Haskell or C\nthat you might otherwise crank out. To try things out, Geoff\nbenchmarks taking the dot product of two vectors in various Haskell\nand C versions. No happy ending yet, unfortunately: while the\nlow-level Haskell version is competitive with C, the high-level is\nnot. Check the post out for dissection of the results down the Core\nand assembly level. Hopefully better news in a follow-up\nposting.</p></li></ul><ul><li><p><a href=\"http://ghc-simd.blogspot.co.uk/2012/04/adding-simd-support-to-data-parallel.html\">Adding SIMD Support to Data Parallel Haskell</a>\n(18 Apr)</p>\n<p>Hopefully better news? Not as such, but perhaps something more\ninteresting. In the previous post, we could make use of SIMD support\nby issuing some explicit instructions from the vector library. OK, but\nwhat about people who writing parallel code, say, by using a parallel\narrays framework? And what if you could get this SIMD support\nvirtually for free — no syntax attached? Geoff makes this possible by\nextending the\n<a href=\"http://ghc-simd.blogspot.co.uk/2012/04/adding-simd-support-to-data-parallel.html\">Data Parallel Haskell</a>\nframework so you would only have to tweak a single import statement,\nand exploitation of SIMD instructions would be automatic. See the\nposting for some nice benchmarks and also a brief introduction to Data\nParallel Haskell.</p></li></ul><ul><li><p><a href=\"http://tumblr.justtesting.org/post/19825349916/work-efficient-higher-order-vectorisation\">Work Efficient Higher-Order Vectorisation</a>\n(24 Mar)</p>\n<p>Found on Manuel Chakravarty's tumblr: Our new draft paper on Work\nEfficient Higher-Order Vectorisation introduces a novel representation\nfor nested, irregular parallel arrays that enables the work-efficient\nSIMD-ification of nested data parallelism — i.e., nested parallelism\nis transformed into flat parallelism, while maintaining the work\ncomplexity of a naive pointer-based representation of nested arrays.\nThis solves a long standing problem that dates back to the original\nimplementation of the language NESL.</p></li></ul><h3> Talks, tutorials, and packages</h3><ul><li><p><a href=\"http://www.haskell.org/pipermail/haskell-cafe/2012-March/099805.html\">stm-chans 1.3.1</a>\n(1 Mar)</p>\n<p>The stm-chans package offers a collection of channel types,\nsimilar to <code>Control.Concurrent.STM.TChan</code> but with additional\nfeatures. This latest update by wren ng thornton takes advantage of\noptimisations in the newly released stm-2.3. It's highly recommended\nthat all users bump their minimum stm-chans requirement to version\n1.3.1</p></li></ul><ul><li><p><a href=\"http://justtesting.org/gpu-computing-in-haskell-version-010-of-dataa\">accelerate 0.10.1</a>\n(12 Apr)</p>\n<p>Manuel Chakravarty has just released version 0.10.0.0 of\nAccelerate, an embedded language for GPU-accelerated array\ncomputations in Haskell that targets NVIDIA's CUDA framework and also\nhas an experimental (and partial) OpenCL backend. A considerable\namount of example code is in the companion package\naccelerate-examples. The main user-visible changes in this release are\nfrontend bug fixes.</p></li></ul><ul><li><p><a href=\"http://www.cse.chalmers.se/edu/course/pfp/\">Parallel Functional Programming course</a></p>\n<p>Students at Chalmers and Gothenburg University are currently 6\nlectures into a course on parallel functional programming. The course\nhas so far covered parallelism with <code>par</code>/<code>pseq</code>, Strategies and\nmonad-par, using ThreadScope, and skeletons as a means to structure\nparallel computations. The course page has lecture notes and exercises\nwhich could be of interest even if you aren't currently following the\ncourse.</p></li></ul><ul><li><p><a href=\"http://sneezy.cs.nott.ac.uk/fun/2012-02/coutts-2012-02-28.pdf\">Cloud Haskell</a>\n(Fun in the Afternoon)</p>\n<p>Well-Typed's Duncan Coutts was at the recent\n<a href=\"http://sneezy.cs.nott.ac.uk/fun/2012-02\">Fun in the Afternoon</a>, a\ntermly seminar on Functional Programming in the UK). Duncan presented\nsome of the motivation behind Cloud Haskell (”Erlang for Haskell”) and\ndistributed programming, along with the Cloud Haskell design, and our\nwork on a new implementation to follow on the initial protoype by Jeff\nEpstein. Our new implementation adds a swappable network transport\nlayer. If you're happy with TCP/IP, don't wait for the new\nimplementation; just <code>cabal install remote</code> and give Jeff's prototype\na try.</p></li></ul><h3> Mailing lists</h3><h4> Concurrency</h4><ul><li><p><a href=\"http://www.haskell.org/pipermail/haskell-cafe/2012-February/099300.html\">Transactional memory going mainstream with Intel Haswell</a>\n(9 Feb)</p>\n<p>Ben was wondering if any STM experts would comment on this recent\n<a href=\"http://arstechnica.com/business/news/2012/02/transactional-memory-going-mainstream-with-intel-haswell.ars\">Ars Technica article</a>\non the Intel Haswell chip. Austin Seipp pointed us to a comment by\nDuncan Coutts in the Reddit discussion (unfortunately not; the new\nextension would sledgehammer all instructions between the XBEGIN/XEND\ninstructions). Ryan Ingram suggests that maybe the extension could be\nused to optimise the existing implementation, perhaps by wrapping\ntransaction commits with XBEGIN/XEND)</p></li></ul><ul><li><p><a href=\"http://www.haskell.org/pipermail/haskell-cafe/2012-February/099456.html\">Behavior of -threaded in GHC 7.4.1?</a>\n(14 Feb)</p>\n<p>Mike Craig just debugging a recent issue with GHC 7.4.1 and the\nzeromq3-haskell library, which provides a provides an FFI binding to\nlibzmq. Unfortunately, code which used to run when compiled on GHC\n7.0.4 dies with “operation on non-socket” when built with GHC 7.4.1.\nWith the latter GHC, Mike can only run the code if he omits\n<code>-threaded</code>, or if he uses the <code>-V0</code> flag to turn off the RTS clock\nand associated signals. After more debugging, he tracked the problem\ndown to a <code>addFinalizer</code> on a <code>Socket</code> tuple. The finalizer was being\nrun prematurely, perhaps because the Socket type was being optimised\naway. Putting the finalizer on the <code>Ptr ()</code> in the tuple seems to\nsolve the problem.</p></li></ul><ul><li><p><a href=\"http://www.haskell.org/pipermail/haskell-cafe/2012-March/099830.html\">Question about concurrency, threads and GC</a>\n(2 Mar)</p>\n<p>Paul Graphov is trying to implement a networked application that\nsupports bidirectional conversations, ie. not just request/response,\nbut also sending notifications to clients. Paul is particularly\ninterested in STM, but he's stuck on a bit of a design problem. His\nthinking so far is that he'll need to start 3 threads for each client,\none to read data from the socket, one that sends queued messages to\nthat socket, and one for the main behaviour loop.</p>\n<p>Joey Adams noticed that this was the same sort of problem we\nreported in the <a href=\"http://www.well-typed.com/blog/64\">previous digest</a>.\nJoey was grappling with making making asynchronous I/O composable and\nsafe. He wound up not using the stm-channelize package that he wrote,\nand recommends instead a 3-thread solution, using a thread each for\nreceiving, sending, and coordination. Check out the small Haskell\n<a href=\"https://github.com/joeyadams/haskell-chat-server-example\">chat server</a>\nthat Joey wrote to illustrate the idea.</p>\n<p>Alexander V Vershilov suggests a data-driven behaviour based on\nconduits and stm channels. He's also provided an\n<a href=\"https://github.com/qnikst/chat-server/blob/master/src/Main.hs\">example chat server</a>,\nwhich you can compare against Joey's version. The two examples take a\nsimilar approach, and `could perhaps be combined to good\neffect.</p></li></ul><ul><li><p><a href=\"https://groups.google.com/d/msg/parallel-haskell/NI5qxYw-5RA/fTljjfXYWYUJ\">\"killThread\" hangs! (ironic)</a>\n(25 Feb)</p>\n<p>Ryan Newton is gathering information in preparation for a\npossible bug report. He's testing the new network transport layer in\ndistributed-process (Cloud Haskell) and gets hangs in <code>killThread</code>.\nStrangely, the pattern for hanging goes: GHC 6.12.3 [OK], 7.0.2\n[HANGS], 7.2.1 [HANGS], 7.4.1 [OK]. Any ideas? Simon Marlow\nsuggests it may be a bug in the RTS asychronous exception handling\ncode, fixed with commit <code>fa71e6c</code>.</p></li></ul><ul><li><p><a href=\"https://groups.google.com/d/msg/parallel-haskell/fsHrxz3ei70/FKe0kgV5mqcJ\">Synchronizations in memory allocation?</a>\n(21 Mar)</p>\n<p>Following up on the recent scaling bottleneck thread, Ryan Newton\nwondered: “What is the reason for GHC managing all this pinned memory\nfor foreign pointers itself rather than using an external C\nmalloc/free implementation and thus keeping disjoint Haskell and C\nheaps?” Simon Marlow says it's basically because GHC's\n<code>mallocForeignPtrBytes</code> is much faster than <code>malloc()</code>/<code>free()</code></p>\n<p>Ryan was asking because he is looking to how to do better on\n<a href=\"https://en.wikipedia.org/wiki/Non-Uniform_Memory_Access\">NUMA</a>\nplatforms. “We've got a NUMA-aware work-stealing scheduler now for\nmonad-par, but it isn't really helping much yet. So we need to answer\nthe question of how well our memory is being localized to\nsocket-preferred physical addresses.” NUMA isn't something the GHC\nteam have looked into for the RTS yet. He has some ideas for\nimprovements to the block allocator; more details in the thread.</p></li></ul><ul><li><p><a href=\"https://groups.google.com/d/msg/parallel-haskell/nxDoibiuGWE/N68MR19uu1kJ\">Haskell for BigData</a>\n(16 Mar)</p>\n<p>Andrei Varanovich observes that while Haskell has a lot to offer\nin the world of parallel/concurrent programming (from DPH to Cloud\nHaskell), it still lacks two important components for working with Big\nData: integration with a distributed file system, such as Hadoop\ndistributed file system, a data aggregration framework (eg.\nMapReduce, but of course something much richer; this being Haskell and\nall).</p>\n<p>Andrei was interested in submitting a Google Summer of Code\nproposal to build a big data framework for Haskell on top of Cloud\nHaskell. I didn't see a proposal this year, but maybe next time? See\nthe thread for technical suggestions, supportive comment, and pointers\nfor a succesful Haskell GSoC project.</p></li></ul><h4> Parallelism</h4><ul><li><p><em>Help wanted!</em>\n<a href=\"http://www.haskell.org/pipermail/haskell-cafe/2012-March/100349.html\">Parallelism causes space leaks</a>\n(23 Mar)</p>\n<p>Yavuz Yetim posted a small chunk of code using Strategies for\nparallelism. When he enables his <code>parList rdeepseq</code> strategy, though,\nhe gets a stack overflow on smallish input (1 MB file), even if he\nallows GHC to use a 1GB stack. Switching to <code>parMap</code>, <code>parListChunk</code>\nand other strategies don't seem to help either.</p></li></ul><ul><li><p><a href=\"http://www.haskell.org/pipermail/haskell-cafe/2012-February/099578.html\">Data.Array.Accelerate initialization timings</a>\n…<a href=\"http://www.haskell.org/pipermail/haskell-cafe/2012-February/099584.html\">more</a>\n(20 Feb)</p>\n<p>Paul Sujkov is finding that array initialisation in\nData.Array.Accelerate takes 10x the amount of time than either\nData.Array and bare C++ CUDA array initialisation. Is there anything\nPaul might be doing wrong in particular? The accelerate package\ncurrently provides two backends, an interpreter (reference\nimplementation) and a CUDA backend generating code for CUDA-capable\nNVDIA GPUs. Martin Dybdal comments that Paul should use\n<code>Data.Array.Accelerate.use</code> to generate hints to transfer arrays to\nGPU, and <code>Data.Array.Accelerate.CUDA.run</code> to actually perform the\ntransfer. Manuel Chakravarty adds that the the <code>fromList</code> function is\nreally just meant for testing, or for initialising small arrays. For\nanything bigger, going from vanilla lists is a bad idea, so have a\nlook at <code>Data.Array.Accelerate.IO</code>.</p></li></ul><ul><li><p><a href=\"http://www.haskell.org/pipermail/haskell-cafe/2012-March/099890.html\">Reasons for Super-Linear Speedup</a>\n(5 Mar)</p>\n<p>Burak Ekici has parallelized RSA decryption and encryption\nschemes by using second generation strategies. He's getting 10 times\nperformance improvements… on a quad-core CPU (with an 8MB cache). Is\nthis just mismeasurement, or are there some differences in how GHC\nhandles serial/parallel of computation, say with respect to cache\nusage? Bardur Arantsson replies that the usual explanation for this\nsort of thing is that the working data suddenly fits within the\nper-CPU L2 cache when split up.</p></li></ul><h3> StackOverflow and Reddit</h3><ul><li><a href=\"http://stackoverflow.com/questions/9475392/is-there-a-way-in-haskell-to-query-thread-state-using-threadid-after-a-forkio\">Is there a way in Haskell to query thread state using ThreadID after a forkIO?</a></li><li><a href=\"http://stackoverflow.com/questions/9616515/are-haskell-channels-control-concurrent-chan-safe-for-multiple-readers-produce\">Are haskell channels <code>Control.Concurrent.Chan</code> safe for multiple readers/producers?</a></li><li><a href=\"http://stackoverflow.com/questions/9678284/how-to-take-f-measurements-to-get-speedups\">How to take F# measurements to get speedups</a></li><li><a href=\"http://www.reddit.com/r/haskell/comments/qnq4y/using_haskell_to_program_the_gpu/\">Using Haskell to program the GPU : haskell</a></li><li><a href=\"http://www.reddit.com/r/programming/comments/s112h/the_downfall_of_imperative_programming_functional/\">The Downfall of Imperative Programming</a></li><li><a href=\"http://www.reddit.com/r/haskell/comments/sdx5v/examples_of_easy_parallelism_in_haskell/\">Examples of easy parallelism in Haskell?</a></li></ul><h3> Help and Feedback</h3><p>If you'd like to make an announcement in the next Haskell Parallel\nDigest, then get in touch with me, Eric Kow, at\n<a href=\"mailto:parallel@well-typed.com\"><code>parallel@well-typed.com</code></a>. Please\nfeel free to leave any comments and feedback!\n</p>" "http://www.well-typed.com/blog/65" (20367 63435) obsolete 5 nil nil ((title nil "Well-Typed.Com: Parallel Haskell Digest 9") (guid ((isPermaLink . "true")) "http://www.well-typed.com/blog/65") (link nil "http://www.well-typed.com/blog/65") (description nil "<p>The Google Summer of Code is upon us and students have already submitted\ntheir proposals. There are a couple potential projects on concurrent\ndata structures, which we'll have a look at below.</p><p>We will also be continuing our tour of Haskell concurrency abstractions\nwith our word month, <em>transaction</em>. This digest is brought to you by the\nParallel GHC project, an MSR-sponsored effort to push parallel Haskell\ntechnologies out into the real world. Check our project news below to\nsee how we're doing in that front.</p><p>Finally, you may heard Functional Propaganda from a Simon or two. But\nhow would the same message affect you if it came from a hardcore C++\nhacker? If you haven't seen it making the rounds, have a quick look at\nBartosz Milewski's\n<a href=\"http://fpcomplete.com/the-downfall-of-imperative-programming/\">The Downfall of Imperative Programming</a>,\nand maybe tell your imperative friends? The FP monster is hatching from\nits academic egg; best be prepared!</p><h3> News</h3><p>Let's have a quick look at some of those GSoC proposals, particularly\nthose with a parallel Haskell theme. It's all about performance this\nyear. Two of the proposals involve using or improving parallellism in\nHaskell, and four are related to high-performance concurrency.</p><ul><li><p><a href=\"http://www.google-melange.com/gsoc/proposal/review/google/gsoc2012/dmitrydzhus/1002\">Parallel CSG engine</a></p>\n \n<p>Constructive Solid Geometry (CSG) is the common approach to\ndefine complex bodies in engineering applications, ray tracing engines\nand physical simulators. Dmitry Dzhus' proposal is to deliver a fast\nparallel CSG engine using the Accelerate/Repa libraries for\nvectorised computations on GPU.</p></li></ul><ul><li><p><a href=\"http://www.google-melange.com/gsoc/proposal/review/google/gsoc2012/sajith/1\">NUMA supporting features for GHC</a></p>\n \n<p>Sajith Sasidharan wants to reach into the GHC RTS, with the aim\nof “extracting that last ounce of performance from NUMA systems, by\nfiring all CPUs if/when necessary and by ensuring a suitably\nNUMA-aware memory allocation behavior.” Work in this area would\nbenefit folks doing scientific computing, who may need great amounts\nof task and data parallelism.</p></li></ul><ul><li><p><a href=\"http://www.google-melange.com/gsoc/proposal/review/google/gsoc2012/refold/35002\">Windows support for the new GHC I/O manager</a></p>\n \n<p>The new I/O manager (GHC 7) brings great scalability\nimprovements to Haskell — 10k simultaneous connections to your web\nserver? no sweat. Unfortunately for Haskellers on Windows, these\nimprovements are currently only available on Unix. Mikhail Glushenkov\n(who worked on GSoC last year to make improvements to Cabal) proposes\nto remedy this, making the new manager available on Windows. The\nchallenge is that Windows I/O completion ports have slightly\ndifferent semantics than their epoll/kqueue analogues on Unix.</p></li></ul><ul><li><p><a href=\"http://www.google-melange.com/gsoc/proposal/review/google/gsoc2012/florianhartwig/1\">Lock-free hash table and priority queue</a></p>\n \n<p>More along the theme of high performance concurrency, Florian\nHartwig's project aims to use GHC's new-ish atomic compare-and-swap\n(CAS) primitive to implement a high-performance lock-free hash table\nand a lock-free priority queue in Haskell. The CAS instruction is a\nbit of hardware support for concurrency: it compares a value in memory\nto an expected value, and iff they match, replaces it with a new\nvalue.</p></li></ul><ul><li><p><a href=\"http://www.google-melange.com/gsoc/proposal/review/google/gsoc2012/lorehead/1\">Implement Concurrent Hash-table / Hashmap</a></p>\n \n<p>Loren Davis also proposes a thread-safe mutable hash table\nimplementation in Haskell. Loren is still weighing some of the\nalternative approaches suggested in the Haskell community. He is\ncurrently leaning towards a lock-stripping approach as it would\nfulfill an immediate need in the community.</p></li></ul><ul><li><p><a href=\"http://www.google-melange.com/gsoc/proposal/review/google/gsoc2012/mathiasbartl/1\">Concurrent Datastructures with good Performance</a></p>\n \n<p>Mathias Bartl aims to implement two concurrent data types in\nHaskell, along with the usual battery of automated unit tests and\nbenchmarks. The two that Mathias has in mind are a lock-free\nconcurrent bag, and a concurrent priority queue.</p></li></ul><h3> Parallel GHC project update</h3><p>We have been continuing our work to make ThreadScope more helpful and\ninformative in tracking down your parallel and concurrent Haskell\nperformance problems. We now have the ability to collect heap statistics\nfrom the GHC runtime system and present them in ThreadScope. These\nfeatures will be available for users of a recent development GHC (7.5.x)\nor the eventual 7.6 release. In addition to heap statistics, we have\nbeen working on collecting information from hardware performance\ncounters, more specifically adding\n<a href=\"http://www.berniepope.id.au/linuxPerfEvents.html\">support for Linux Perf Events</a>.\nThis could be useful for studying IO-heavy programs, the idea being to\nvisualise system calls as being distinct from actual execution of\nHaskell code.</p><p>Speaking of performance, we are also continuing work on the new Cloud\nHaskell implementation (see Duncan Coutts'\n<a href=\"http://sneezy.cs.nott.ac.uk/fun/2012-02/coutts-2012-02-28.pdf\">Fun in the Afternoon Talk</a>),\nand have lately been focused on reducing message latency. This consists\nof work in three areas: improving binary serialisation, investigating\nthe implications of using <code>Chan</code> and <code>MVar</code> to pass messages between\nthreads, and perhaps improving the Haskell network library\nimplementation to compete better with a direct C implementation.</p><h3> Word of the month</h3><p>Lately, we've been investigating the various ways Haskell helps us to\nget to grips with concurrency. We talked about how the <code>MVar</code>, the\nHaskell variant on locks, allows us to share mutable variables between\nthreads, with some safeguards to help ensure consistency. <code>MVar</code>'s may\nprovide a nice high-level packaging around locks, but as we mentioned in\nthe last digest, they can still go horrifically wrong, just like locks\nand synchronized methods in other languages.</p><p>We could go through the usual litany of reasons why locks are bad news,\nbut maybe a healthier approach would be for us to focus on the positive.\nWhat do we want as programmers? One possibility is what Simon PJ\n(<a href=\"http://research.microsoft.com/en-us/um/people/simonpj/papers/stm/beautiful.pdf\">Beautiful Concurrency</a>)\ncalls “modular programming”, the ability to “[build] large programs by\ngluing together smaller programs”. Locks fall short of helping us to\nmeet this desire. First, because the mere act of combining two locky\nprograms may be inherently incorrect;\n<code>withdraw acct1 amt &gt;&gt; deposit acct2 amt</code> is bad because of the gap\nbetween the two actions where the money is in neither account. Second,\nbecause they seal off programs that we may otherwise like to moosh\ntogether; if process p1 waits for input on a pipe, process p2 waits for\ninput on another pipe, how do wait for either of p1 or p2? So how do we\nwrestle back this modularity from our locky masters? And how do we make\nprogramming fun again?</p><p>Our word of the month today is “transaction”. Software transactional\nmemory (STM) takes this idea of a transaction (a sequence of operations\nthat can be treated as a single atomic block) from database design. The\nHaskell implementation of STM was introduced in the 2005 paper\n<a href=\"http://research.microsoft.com/en-us/um/people/simonpj/papers/stm/stm.pdf\">Composable Memory Transactions</a>\nby Harris <em>et. al.</em> If programming fun is what you're after, this is a\npaper that comes with its own war-cry: “compositionality: a programmer\ncan control atomicity and blocking behaviour in a modular way that\nrespects abstraction barriers.”</p><p>Here are some quick highlights of the stm library. You may notice a\ncouple of things, first that this library introduces its own notion of\nvariable, the <code>TVar</code> (<code>MVar</code>,<code>IVar</code>; what, no pirate joke?) and second\nthat STM involves a new monad of its own. Unlike the <code>MVar</code> that we saw\nin the last digest, <code>TVar</code>'s do not have the same notion of being full\nor empty; they just hold values plain and simple. As for the STM monad,\nwe will see why it matters when we first try to do some IO.</p><pre> -- Control.Concurrent.STM\n data STM a\n instance Monad STM\n \n atomically :: STM a -&gt; IO a\n \n data TVar a\n newTVar   :: a -&gt; STM (TVar a)\n readTVar  :: TVar a -&gt; STM a\n writeTVar :: TVar a -&gt; a -&gt; STM ()\n \n retry  :: STM a\n orElse :: STM a -&gt; STM a -&gt; STM a\n</pre><p>To get a rough idea how some of this is used, let's look at the\ntransactional hello world, safely wiring money from one bank account to\nanother. For the purposes of our example, a bank account is just a\nbalance. To get some money from an account, we read the balance,\nsubtract the amount, and write the new balance. Making a deposit is just\nwithdrawing negative-money.</p><pre> type Account = TVar Int\n \n withdraw :: Account -&gt; Int -&gt; STM ()        \n withdraw acc amount = do\n     bal &lt;- readTVar acc\n     writeTVar acc (bal - amount)\n \n deposit :: Account -&gt; Int -&gt; STM ()\n deposit acc amount = withdraw acc (- amount)\n</pre><p>These primitive operations (withdraw and deposit) bring us to the\nquestion of modularity. How do we know that it's safe to combine these\nmini-programs into a bigger one? In other words, if we write something\nlike <code>withdraw from 42 &gt;&gt; deposit to 42</code>, how do we avoid the\npossibility of running into some twilight zone state where the money is\nneither here nor there? If people do strange things like simultaneously\ntransfering money in the other direction, will our program still work?</p><p>The answer lies in the distinction between <code>STM</code> (transactions) and <code>IO</code>\n(actions). So long as we remain in STM, we are simply assembling\ntransactions, piecing smaller ones (“withdraw from a”) into larger ones\n(“withdraw from a and deposit it to b”), but not actually performing\nthem! Having composed our transactions, we can use the function\n<code>atomically</code> to turn them into IO actions.</p><pre> -- still just a transaction\n transfer :: Account -&gt; Account -&gt; Int -&gt; STM ()\n transfer from to amount = do\n     deposit to amount\n     withdraw from amount\n \n -- now we have an action!\n doTransfer :: Account -&gt; Account -&gt; Int -&gt; IO ()\n doTransfer from to amount =\n     atomically $ transfer from to amount\n</pre><p>And <code>atomically</code> does what it says on the tin: it runs the transaction\nin a way that renders it indivisible, no twlight zones. Lest there is\nany confusion, even though the transaction is indivisible, we can\n<em>still</em> have concurrency during the course of the transaction, even\nsimultaneously read the affected <code>TVar</code>s if we want to. The\nindivisibility simply means that we never catch our transactions with\ntheir pants down. We neither read nonsense mid-transactional values\n(simultaneous reads would either get the before or after value), nor\ninjecting values into a transaction mid-stream.</p><p>To get a feel for how these guarantees are possible, it could be useful\nto take a peek under the hood. For each transaction that is run, GHC\nmaintains a thread-local log with an entry for each <code>TVar</code> accessed in\nthat transaction. Each entry contains both the old value and the new\nvalue that would be committed if the transaction is succesful. This may\nbe easier to see with a silly example:</p><pre>main = do\n    v1 &lt;- atomically $ newTVar \"Joe\"\n    v2 &lt;- atomically $ newTVar \"Bob\"\n    done &lt;- atomically $ newTVar 0\n    -- thread A (you can just pretend forkDelayIO == forkIO)\n    forkDelayIO . atomically $ do\n                              -- transaction log if A runs first\n        x &lt;- readTVar v1      -- v1: Joe -&gt; Joe\n        y &lt;- readTVar v2      -- v1: Joe -&gt; Joe, v2: Sue -&gt; Sue \n        writeTVar v1 \"Sue\"    -- v1: Joe -&gt; Sue\n        writeTVar v2 x        -- v1: Joe -&gt; Sue, v2: Bob -&gt; Joe \n        writeTVar v1 y        -- v1: Joe -&gt; Bob, v2: Bob -&gt; Joe\n        modifyTVar done (+1)  -- (stm 2.3 but easy to define)\n    -- thread B \n    forkDelayIO . atomically $ do\n                              -- (if A runs first)\n        writeTVar v1 \"Jean\"   -- v1: Bob -&gt; Jean\n        writeTVar v2 \"Paul\"   -- v1: Bob -&gt; Jean, v2: Joe -&gt; Paul\n        modifyTVar done (+1)\n    waitThreads 2 done\n    people &lt;- atomically $ do -- (if A runs first)\n        p1 &lt;- readTVar v1     -- v1: Jean -&gt; Jean\n        p2 &lt;- readTVar v2     -- v1: Jean -&gt; Jean, v2: Paul -&gt; Paul\n        return (p1, p2)\n    print people -- if A runs first, (Jean, Paul)\n                 -- if B runs first, (Paul, Jean).\n\n-- boring details just for this example\nforkDelayIO job = forkIO $\n    randomRIO (1, 1000000) &gt;&gt;= threadDelay &gt;&gt; job\nwaitThreads n v = atomically $\n    do { d &lt;- readTVar v;  when (d &lt; n) retry }\n</pre><p>In the above, we fork off two threads, A which swaps a pair of names\nand, B which overwrites them with other names. Atomicity here means that\nother threads never see any intermediary states and state changes from\nother threads don't affect the current thread. For example, thread B\nshould never see <code>v1</code> being set to \"Sue\". Likewise, if thread A should\nstill read \"Joe\" from v1 even if B simultaneously writes \"Jean\".</p><p>This is made possible by validation of the transaction logs. Validation\nnormally occurs at the end of a transaction (we won't cover the two\nother cases here: exceptions, and thread wake-ups). It consists of\nchecking that all the expected “before” values for <code>TVar</code>s still match\nreality. If the logs are good, we commit the new values; if not, we\nsimply discard them and try the transaction again, taking the new\nreality into account. This validate-and-commit model allows us to run\ntransactions simultaneously, safely, but with the occasional rollback\nand retry to ensure atomicity.</p><p>The notion of a transaction log brings us to the notion of cost. Good\nthings don't always come cheap, and using a good thing like STM may\nrequire a little familiarity with the cost model behind it. Basically,\nit's important to keep in mind that the values we write to <code>TVar</code>'s may\ncome from some arbitrary expression, and that arbitrary expressions may\nbe arbitrarily expensive. So being forced to retry transactions may\ninvolve redoing something expensive. If the transactions affect many\nvariables, the chances of hitting a retry go up. Likewise, if the\ntransaction takes a long time to run, the chance goes up of some other\nthread making a change that triggers a retry. In the pathological worst\ncase, you can have some transactional behemoth that never manages to\ncommit; because some smaller faster transaction keeps stealing its\nthunder. So keep an eye out for starvation and the more general problem\nfor retries being expensive.</p><p>Cost may be a bit of a bummer, but there's also a Haskell-related silver\nlining behind all this. Because we have a purely functional language and\nthe enforced separation between pure functions and side-effecting\nactions, STM is actually quite practical in Haskell. The number of\nthings we need to track in a transaction log is limited to handful of\nexplicit <code>TVar</code>s rather that just about everything. If you are coming\nfrom other languages, you may have a memory of STM as being nice, but\nwildly impractical. Not so in Haskell. Eminently viable.</p><p>Aside from making STM practical, this sort of separation is also good\nfor general peace of mind. Suppose for example that we coded up a\nfeature in our banking software to send our users a text message alert\nwhenever their balances fall below a threshold. If we were in the middle\nof a complicated transaction, we might be tempted to just slap that\nlogic right in the middle of the transaction; however, the Haskell\nimplementation makes this deliberately impossible. This can be a bit\nfrustrating at first (and new Haskellers are sometimes faced with the\n“how do I get this out of the monad” puzzle), but saves us the greater\ndanger of bombarding our users with spurious retry-induced text\nmessages.</p><p>The guarantees that STM offer make it a great place to get started with\nHaskell concurrency. After all, why make software any buggier than it\nneeds to be? If you do want to get started, have a look at Simon Peyton\nJones'\n<a href=\"http://research.microsoft.com/en-us/um/people/simonpj/papers/stm/beautiful.pdf\">Beautiful Concurrency</a>.\nIt's a particularly good idea to do so, because there's some really\ninteresting ground that we've not covered here (briefly, blocking, the\n<code>retry</code> function aborts the current transaction, and causes it to be\nretried when appropriate; and choice: <code>a <code>orElse</code> b</code> tries\n<code>a</code>, and if that should retry, then <code>b</code>, and if that should also retry,\nthe whole expression again). Other great STM resources are Simon\nMarlow's\n<a href=\"http://community.haskell.org/~simonmar/par-tutorial.pdf\">tutorial on parallelism and concurrency</a>\nand the\n<a href=\"http://book.realworldhaskell.org/read/software-transactional-memory.html\">Real World Haskell chapter on STM</a>.\nWith the four resources combined, you'll see a nice range of examples\nfrom the usual bank-account one to concurrently shuffling windows\nbetween desktops.</p><h3> Blogs</h3><ul><li><p><a href=\"http://fpcomplete.com/the-downfall-of-imperative-programming/\">The Downfall of Imperative Programming</a>\n(9 Apr)</p>\n \n<p>Take a hardcore C++ veteran with imperative programming in his\nbloodstream and loads of experience under his belt. Now give him a\npassion for concurrency and what do you get? First, you get a keen\nawareness that the future is massively multicore. Second, you get a\nhard-won appreciation for how difficult concurrent programming can be;\nfor all jokes we make in the Haskell community about firing the\nmissiles, the consequences of data races can sometimes be\n<a href=\"http://en.wikipedia.org/wiki/Therac-25\">deadly</a>. Third, you get the\nconviction that functional programming is the inevitable way\nforward.</p>\n \n<p>Bartosz Milewski sums up the situation thus: Sooner or later\nyou’ll have to face the multicore reality. You will be forced to learn\nfunctional methods to the extent to which your imperative language\nsupports them. Despite that, data races will infest your code and leak\ninto released products. So you might as well take a shortcut and\nembrace a full blown functional language now.</p>\n \n<p>See what you make of his blog post if you have not done so\nalready. There's quite a bit of buzz about this post, so you may also\nbe interested in the\n<a href=\"http://www.reddit.com/r/programming/comments/s112h/the_downfall_of_imperative_programming_functional/\">programming reddit discussion</a>\naround it as well.</p></li></ul><ul><li><p><a href=\"http://adit.io/posts/2012-03-10-building_a_concurrent_web_scraper_with_haskell.html\">Building A Concurrent Web Scraper With Haskell</a>\n(10 Mar)</p>\n \n<p>Let's make a concurrent web scraper! This blog post by Aditya\nBhargava presents a hands-on introduction to both arrows (via hxt) and\nconcurrency (via parallel-io). Aditya builds from the bottom-up,\nshowing us little pieces of program that we might cobble together,\nculminating in a 52 line Haskell program that crawls web sites and\nfetches images within their pages. The parallel-io library used in\nthis tutorial provides a thread pool which minimises contention by\nguaranteeing a limit to the number of unblocked threads running at the\nsame time. It uses lock based concurrency with <code>MVar</code>'s under the\nhood.</p></li></ul><ul><li><p><a href=\"http://therning.org/magnus/archives/1009\">0MQ and Haskell</a> (6\nMar)</p>\n \n<p>Magnus Therning could not find any excuses to look into 0MQ. But\n“to hell with reason”, Magnus ended up deciding to just poke around\nwithout any specific goal in mind. He found a\n<a href=\"http://nichol.as/zeromq-an-introduction\">nice tutorial</a> based on\nPython and translated its mini examples into Haskell. Magnus wonders\nwhy the API for <code>subscribe</code> is <code>String</code> rather than <code>ByteString</code>\nbased. Also, he's finding that his client mysteriously dies after\nreceiving a few messages. Any comments?</p></li></ul><ul><li><p><a href=\"http://ghc-simd.blogspot.co.uk/2012/03/simd-support-for-vector-library.html\">SIMD Support for the vector library</a>\n(27 Mar)</p>\n \n<p>Single instruction, multiple data (SIMD) is the sort of thing you\nmight be interested in if you're into data parallelism: hardware that\ncan perform the same instruction on multiple data simultaneously.\nGeoffrey Mainland posted about his efforts to bring SIMD support to\nGHC, the bigger picture being that you ought to be able to write nice\nhigh-level Haskell and have it work as fast the low-level Haskell or C\nthat you might otherwise crank out. To try things out, Geoff\nbenchmarks taking the dot product of two vectors in various Haskell\nand C versions. No happy ending yet, unfortunately: while the\nlow-level Haskell version is competitive with C, the high-level is\nnot. Check the post out for dissection of the results down the Core\nand assembly level. Hopefully better news in a follow-up\nposting.</p></li></ul><ul><li><p><a href=\"http://ghc-simd.blogspot.co.uk/2012/04/adding-simd-support-to-data-parallel.html\">Adding SIMD Support to Data Parallel Haskell</a>\n(18 Apr)</p>\n \n<p>Hopefully better news? Not as such, but perhaps something more\ninteresting. In the previous post, we could make use of SIMD support\nby issuing some explicit instructions from the vector library. OK, but\nwhat about people who writing parallel code, say, by using a parallel\narrays framework? And what if you could get this SIMD support\nvirtually for free — no syntax attached? Geoff makes this possible by\nextending the\n<a href=\"http://ghc-simd.blogspot.co.uk/2012/04/adding-simd-support-to-data-parallel.html\">Data Parallel Haskell</a>\nframework so you would only have to tweak a single import statement,\nand exploitation of SIMD instructions would be automatic. See the\nposting for some nice benchmarks and also a brief introduction to Data\nParallel Haskell.</p></li></ul><ul><li><p><a href=\"http://tumblr.justtesting.org/post/19825349916/work-efficient-higher-order-vectorisation\">Work Efficient Higher-Order Vectorisation</a>\n(24 Mar)</p>\n \n<p>Found on Manuel Chakravarty's tumblr: Our new draft paper on Work\nEfficient Higher-Order Vectorisation introduces a novel representation\nfor nested, irregular parallel arrays that enables the work-efficient\nSIMD-ification of nested data parallelism — i.e., nested parallelism\nis transformed into flat parallelism, while maintaining the work\ncomplexity of a naive pointer-based representation of nested arrays.\nThis solves a long standing problem that dates back to the original\nimplementation of the language NESL.</p></li></ul><h3> Talks, tutorials, and packages</h3><ul><li><p><a href=\"http://www.haskell.org/pipermail/haskell-cafe/2012-March/099805.html\">stm-chans 1.3.1</a>\n(1 Mar)</p>\n \n<p>The stm-chans package offers a collection of channel types,\nsimilar to <code>Control.Concurrent.STM.TChan</code> but with additional\nfeatures. This latest update by wren ng thornton takes advantage of\noptimisations in the newly released stm-2.3. It's highly recommended\nthat all users bump their minimum stm-chans requirement to version\n1.3.1</p></li></ul><ul><li><p><a href=\"http://justtesting.org/gpu-computing-in-haskell-version-010-of-dataa\">accelerate 0.10.1</a>\n(12 Apr)</p>\n \n<p>Manuel Chakravarty has just released version 0.10.0.0 of\nAccelerate, an embedded language for GPU-accelerated array\ncomputations in Haskell that targets NVIDIA's CUDA framework and also\nhas an experimental (and partial) OpenCL backend. A considerable\namount of example code is in the companion package\naccelerate-examples. The main user-visible changes in this release are\nfrontend bug fixes.</p></li></ul><ul><li><p><a href=\"http://www.cse.chalmers.se/edu/course/pfp/\">Parallel Functional Programming course</a></p>\n \n<p>Students at Chalmers and Gothenburg University are currently 6\nlectures into a course on parallel functional programming. The course\nhas so far covered parallelism with <code>par</code>/<code>pseq</code>, Strategies and\nmonad-par, using ThreadScope, and skeletons as a means to structure\nparallel computations. The course page has lecture notes and exercises\nwhich could be of interest even if you aren't currently following the\ncourse.</p></li></ul><ul><li><p><a href=\"http://sneezy.cs.nott.ac.uk/fun/2012-02/coutts-2012-02-28.pdf\">Cloud Haskell</a>\n(Fun in the Afternoon)</p>\n \n<p>Well-Typed's Duncan Coutts was at the recent\n<a href=\"http://sneezy.cs.nott.ac.uk/fun/2012-02\">Fun in the Afternoon</a>, a\ntermly seminar on Functional Programming in the UK). Duncan presented\nsome of the motivation behind Cloud Haskell (”Erlang for Haskell”) and\ndistributed programming, along with the Cloud Haskell design, and our\nwork on a new implementation to follow on the initial protoype by Jeff\nEpstein. Our new implementation adds a swappable network transport\nlayer. If you're happy with TCP/IP, don't wait for the new\nimplementation; just <code>cabal install remote</code> and give Jeff's prototype\na try.</p></li></ul><h3> Mailing lists</h3><h4> Concurrency</h4><ul><li><p><a href=\"http://www.haskell.org/pipermail/haskell-cafe/2012-February/099300.html\">Transactional memory going mainstream with Intel Haswell</a>\n(9 Feb)</p>\n \n<p>Ben was wondering if any STM experts would comment on this recent\n<a href=\"http://arstechnica.com/business/news/2012/02/transactional-memory-going-mainstream-with-intel-haswell.ars\">Ars Technica article</a>\non the Intel Haswell chip. Austin Seipp pointed us to a comment by\nDuncan Coutts in the Reddit discussion (unfortunately not; the new\nextension would sledgehammer all instructions between the XBEGIN/XEND\ninstructions). Ryan Ingram suggests that maybe the extension could be\nused to optimise the existing implementation, perhaps by wrapping\ntransaction commits with XBEGIN/XEND)</p></li></ul><ul><li><p><a href=\"http://www.haskell.org/pipermail/haskell-cafe/2012-February/099456.html\">Behavior of -threaded in GHC 7.4.1?</a>\n(14 Feb)</p>\n \n<p>Mike Craig just debugging a recent issue with GHC 7.4.1 and the\nzeromq3-haskell library, which provides a provides an FFI binding to\nlibzmq. Unfortunately, code which used to run when compiled on GHC\n7.0.4 dies with “operation on non-socket” when built with GHC 7.4.1.\nWith the latter GHC, Mike can only run the code if he omits\n<code>-threaded</code>, or if he uses the <code>-V0</code> flag to turn off the RTS clock\nand associated signals. After more debugging, he tracked the problem\ndown to a <code>addFinalizer</code> on a <code>Socket</code> tuple. The finalizer was being\nrun prematurely, perhaps because the Socket type was being optimised\naway. Putting the finalizer on the <code>Ptr ()</code> in the tuple seems to\nsolve the problem.</p></li></ul><ul><li><p><a href=\"http://www.haskell.org/pipermail/haskell-cafe/2012-March/099830.html\">Question about concurrency, threads and GC</a>\n(2 Mar)</p>\n \n<p>Paul Graphov is trying to implement a networked application that\nsupports bidirectional conversations, ie. not just request/response,\nbut also sending notifications to clients. Paul is particularly\ninterested in STM, but he's stuck on a bit of a design problem. His\nthinking so far is that he'll need to start 3 threads for each client,\none to read data from the socket, one that sends queued messages to\nthat socket, and one for the main behaviour loop.</p>\n \n<p>Joey Adams noticed that this was the same sort of problem we\nreported in the <a href=\"http://www.well-typed.com/blog/64\">previous digest</a>.\nJoey was grappling with making making asynchronous I/O composable and\nsafe. He wound up not using the stm-channelize package that he wrote,\nand recommends instead a 3-thread solution, using a thread each for\nreceiving, sending, and coordination. Check out the small Haskell\n<a href=\"https://github.com/joeyadams/haskell-chat-server-example\">chat server</a>\nthat Joey wrote to illustrate the idea.</p>\n \n<p>Alexander V Vershilov suggests a data-driven behaviour based on\nconduits and stm channels. He's also provided an\n<a href=\"https://github.com/qnikst/chat-server/blob/master/src/Main.hs\">example chat server</a>,\nwhich you can compare against Joey's version. The two examples take a\nsimilar approach, and `could perhaps be combined to good\neffect.</p></li></ul><ul><li><p><a href=\"https://groups.google.com/d/msg/parallel-haskell/NI5qxYw-5RA/fTljjfXYWYUJ\">\"killThread\" hangs! (ironic)</a>\n(25 Feb)</p>\n \n<p>Ryan Newton is gathering information in preparation for a\npossible bug report. He's testing the new network transport layer in\ndistributed-process (Cloud Haskell) and gets hangs in <code>killThread</code>.\nStrangely, the pattern for hanging goes: GHC 6.12.3 [OK], 7.0.2\n[HANGS], 7.2.1 [HANGS], 7.4.1 [OK]. Any ideas? Simon Marlow\nsuggests it may be a bug in the RTS asychronous exception handling\ncode, fixed with commit <code>fa71e6c</code>.</p></li></ul><ul><li><p><a href=\"https://groups.google.com/d/msg/parallel-haskell/fsHrxz3ei70/FKe0kgV5mqcJ\">Synchronizations in memory allocation?</a>\n(21 Mar)</p>\n \n<p>Following up on the recent scaling bottleneck thread, Ryan Newton\nwondered: “What is the reason for GHC managing all this pinned memory\nfor foreign pointers itself rather than using an external C\nmalloc/free implementation and thus keeping disjoint Haskell and C\nheaps?” Simon Marlow says it's basically because GHC's\n<code>mallocForeignPtrBytes</code> is much faster than <code>malloc()</code>/<code>free()</code></p>\n \n<p>Ryan was asking because he is looking to how to do better on\n<a href=\"https://en.wikipedia.org/wiki/Non-Uniform_Memory_Access\">NUMA</a>\nplatforms. “We've got a NUMA-aware work-stealing scheduler now for\nmonad-par, but it isn't really helping much yet. So we need to answer\nthe question of how well our memory is being localized to\nsocket-preferred physical addresses.” NUMA isn't something the GHC\nteam have looked into for the RTS yet. He has some ideas for\nimprovements to the block allocator; more details in the thread.</p></li></ul><ul><li><p><a href=\"https://groups.google.com/d/msg/parallel-haskell/nxDoibiuGWE/N68MR19uu1kJ\">Haskell for BigData</a>\n(16 Mar)</p>\n \n<p>Andrei Varanovich observes that while Haskell has a lot to offer\nin the world of parallel/concurrent programming (from DPH to Cloud\nHaskell), it still lacks two important components for working with Big\nData: integration with a distributed file system, such as Hadoop\ndistributed file system, a data aggregration framework (eg.\nMapReduce, but of course something much richer; this being Haskell and\nall).</p>\n \n<p>Andrei was interested in submitting a Google Summer of Code\nproposal to build a big data framework for Haskell on top of Cloud\nHaskell. I didn't see a proposal this year, but maybe next time? See\nthe thread for technical suggestions, supportive comment, and pointers\nfor a succesful Haskell GSoC project.</p></li></ul><h4> Parallelism</h4><ul><li><p><em>Help wanted!</em>\n<a href=\"http://www.haskell.org/pipermail/haskell-cafe/2012-March/100349.html\">Parallelism causes space leaks</a>\n(23 Mar)</p>\n \n<p>Yavuz Yetim posted a small chunk of code using Strategies for\nparallelism. When he enables his <code>parList rdeepseq</code> strategy, though,\nhe gets a stack overflow on smallish input (1 MB file), even if he\nallows GHC to use a 1GB stack. Switching to <code>parMap</code>, <code>parListChunk</code>\nand other strategies don't seem to help either.</p></li></ul><ul><li><p><a href=\"http://www.haskell.org/pipermail/haskell-cafe/2012-February/099578.html\">Data.Array.Accelerate initialization timings</a>\n…<a href=\"http://www.haskell.org/pipermail/haskell-cafe/2012-February/099584.html\">more</a>\n(20 Feb)</p>\n \n<p>Paul Sujkov is finding that array initialisation in\nData.Array.Accelerate takes 10x the amount of time than either\nData.Array and bare C++ CUDA array initialisation. Is there anything\nPaul might be doing wrong in particular? The accelerate package\ncurrently provides two backends, an interpreter (reference\nimplementation) and a CUDA backend generating code for CUDA-capable\nNVDIA GPUs. Martin Dybdal comments that Paul should use\n<code>Data.Array.Accelerate.use</code> to generate hints to transfer arrays to\nGPU, and <code>Data.Array.Accelerate.CUDA.run</code> to actually perform the\ntransfer. Manuel Chakravarty adds that the the <code>fromList</code> function is\nreally just meant for testing, or for initialising small arrays. For\nanything bigger, going from vanilla lists is a bad idea, so have a\nlook at <code>Data.Array.Accelerate.IO</code>.</p></li></ul><ul><li><p><a href=\"http://www.haskell.org/pipermail/haskell-cafe/2012-March/099890.html\">Reasons for Super-Linear Speedup</a>\n(5 Mar)</p>\n \n<p>Burak Ekici has parallelized RSA decryption and encryption\nschemes by using second generation strategies. He's getting 10 times\nperformance improvements… on a quad-core CPU (with an 8MB cache). Is\nthis just mismeasurement, or are there some differences in how GHC\nhandles serial/parallel of computation, say with respect to cache\nusage? Bardur Arantsson replies that the usual explanation for this\nsort of thing is that the working data suddenly fits within the\nper-CPU L2 cache when split up.</p></li></ul><h3> StackOverflow and Reddit</h3><ul><li><a href=\"http://stackoverflow.com/questions/9475392/is-there-a-way-in-haskell-to-query-thread-state-using-threadid-after-a-forkio\">Is there a way in Haskell to query thread state using ThreadID after a forkIO?</a></li><li><a href=\"http://stackoverflow.com/questions/9616515/are-haskell-channels-control-concurrent-chan-safe-for-multiple-readers-produce\">Are haskell channels <code>Control.Concurrent.Chan</code> safe for multiple readers/producers?</a></li><li><a href=\"http://stackoverflow.com/questions/9678284/how-to-take-f-measurements-to-get-speedups\">How to take F# measurements to get speedups</a></li><li><a href=\"http://www.reddit.com/r/haskell/comments/qnq4y/using_haskell_to_program_the_gpu/\">Using Haskell to program the GPU : haskell</a></li><li><a href=\"http://www.reddit.com/r/programming/comments/s112h/the_downfall_of_imperative_programming_functional/\">The Downfall of Imperative Programming</a></li><li><a href=\"http://www.reddit.com/r/haskell/comments/sdx5v/examples_of_easy_parallelism_in_haskell/\">Examples of easy parallelism in Haskell?</a></li></ul><h3> Help and Feedback</h3><p>If you'd like to make an announcement in the next Haskell Parallel\nDigest, then get in touch with me, Eric Kow, at\n<a href=\"mailto:parallel@well-typed.com\"><code>parallel@well-typed.com</code></a>. Please\nfeel free to leave any comments and feedback!\n</p>") (pubDate nil "Thu, 19 Apr 2012 11:32:27 +0000"))) ("TypLAB: The new Silk blog runs on Silk" "The day we founded this company, we started blogging. We set up a Wordpress blog and started discussing a variety of technical topics.<img src=\"http://feeds.feedburner.com/~r/typlab/blog/~4/e-5fzccGKwk\" height=\"1\" width=\"1\" />" "http://feedproxy.google.com/~r/typlab/blog/~3/e-5fzccGKwk/The%20new%20Silk%20blog%20runs%20on%20Silk" (20367 14688) obsolete 6 nil nil ((title nil "TypLAB: The new Silk blog runs on Silk") (guid ((isPermaLink . "false")) "http://about.silkapp.com/page/The%20new%20Silk%20blog%20runs%20on%20Silk") (link nil "http://feedproxy.google.com/~r/typlab/blog/~3/e-5fzccGKwk/The%20new%20Silk%20blog%20runs%20on%20Silk") (description nil "The day we founded this company, we started blogging. We set up a Wordpress blog and started discussing a variety of technical topics.<img src=\"http://feeds.feedburner.com/~r/typlab/blog/~4/e-5fzccGKwk\" height=\"1\" width=\"1\" />") (pubDate nil "Wed, 18 Apr 2012 22:00:00 +0000"))) ("Jeremy O'Donoghue: wxHaskell News" "<p>A great deal has happened in wxHaskell land over the past few weeks, so I thought a summary was worthwhile</p>\n<h3>wxHaskell 0.90 Released</h3>\n<p>A significant <a href=\"http://permalink.gmane.org/gmane.comp.lang.haskell.wxhaskell.general/1178\" title=\"update to wxHaskell was released\">update to wxHaskell was released</a> on April 14th. This brings in all of the work done by Dave Tapley, Eric and many others to provide support for wxWidgets 2.9.</p>\n<p>Supporting wxWidgets 2.9 is important for quite a number of reasons – not least because at some point it will become wxWidgets 3.0 and will be the new stable version. However in the short term the main benefit is support for 64bit OS platforms – notably MacOS X Snow Leopard and Lion.</p>\n<p>The slightly odd version numbering convention was chosen to allow wxHaskell 0.13 to evolve without being excessively constrained over version numbering. In any case, it would be nice to get to version 1.0 at some time soon – perhaps when wxWidgets 3.0 is released.</p>\n<p>Most of the future wxHaskell development effort will go on the new branch.</p>\n<h3>wxHaskell 0.13 Branch Created</h3>\n<p>On many systems, particularly almost all Linux distributions, wxWidgets 2.8.x remains the standard ‘package’ for wxWidgets, so we continue to support this for those who would prefer to use the packages provided by their distro. It also allows Windows users without C++ development environments to use the wxPack binary installers for wxWidgets.</p>\n<h3>Experimental GitHub Repository</h3>\n<p>I have created an <a href=\"https://github.com/jodonoghue/wxHaskell\" title=\"experimental GitHub repository\">experimental GitHub repository</a>. It is right up to date at the time of writing and contains two active branches: master is the wxWidgets 2.9 repo and WXWIDGETS_2_8 is (unsurprisingly) the wxWidgets 2.8 branch.</p>\n<p>I’m especially interested in feedback on whether moving definitively to GitHub would be a good thing – the main criteria for judgement being whether it makes it easier to receive contributions from others.</p>\n<br />Filed under: <a href=\"http://wewantarock.wordpress.com/category/haskell/\">Haskell</a>, <a href=\"http://wewantarock.wordpress.com/category/haskell/wxhaskell/\">wxHaskell</a>  <a href=\"http://feeds.wordpress.com/1.0/gocomments/wewantarock.wordpress.com/169/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/wewantarock.wordpress.com/169/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godelicious/wewantarock.wordpress.com/169/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/delicious/wewantarock.wordpress.com/169/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gofacebook/wewantarock.wordpress.com/169/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/facebook/wewantarock.wordpress.com/169/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gotwitter/wewantarock.wordpress.com/169/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/twitter/wewantarock.wordpress.com/169/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gostumble/wewantarock.wordpress.com/169/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/stumble/wewantarock.wordpress.com/169/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godigg/wewantarock.wordpress.com/169/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/digg/wewantarock.wordpress.com/169/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/goreddit/wewantarock.wordpress.com/169/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/reddit/wewantarock.wordpress.com/169/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=wewantarock.wordpress.com&amp;blog=11303994&amp;post=169&amp;subd=wewantarock&amp;ref=&amp;feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" "http://wewantarock.wordpress.com/2012/04/18/wxhaskell-news/" (20366 53701) obsolete 7 nil nil ((title nil "Jeremy O'Donoghue: wxHaskell News") (guid ((isPermaLink . "false")) "http://wewantarock.wordpress.com/?p=169") (link nil "http://wewantarock.wordpress.com/2012/04/18/wxhaskell-news/") (description nil "<p>A great deal has happened in wxHaskell land over the past few weeks, so I thought a summary was worthwhile</p>\n<h3>wxHaskell 0.90 Released</h3>\n<p>A significant <a href=\"http://permalink.gmane.org/gmane.comp.lang.haskell.wxhaskell.general/1178\" title=\"update to wxHaskell was released\">update to wxHaskell was released</a> on April 14th. This brings in all of the work done by Dave Tapley, Eric and many others to provide support for wxWidgets 2.9.</p>\n<p>Supporting wxWidgets 2.9 is important for quite a number of reasons – not least because at some point it will become wxWidgets 3.0 and will be the new stable version. However in the short term the main benefit is support for 64bit OS platforms – notably MacOS X Snow Leopard and Lion.</p>\n<p>The slightly odd version numbering convention was chosen to allow wxHaskell 0.13 to evolve without being excessively constrained over version numbering. In any case, it would be nice to get to version 1.0 at some time soon – perhaps when wxWidgets 3.0 is released.</p>\n<p>Most of the future wxHaskell development effort will go on the new branch.</p>\n<h3>wxHaskell 0.13 Branch Created</h3>\n<p>On many systems, particularly almost all Linux distributions, wxWidgets 2.8.x remains the standard ‘package’ for wxWidgets, so we continue to support this for those who would prefer to use the packages provided by their distro. It also allows Windows users without C++ development environments to use the wxPack binary installers for wxWidgets.</p>\n<h3>Experimental GitHub Repository</h3>\n<p>I have created an <a href=\"https://github.com/jodonoghue/wxHaskell\" title=\"experimental GitHub repository\">experimental GitHub repository</a>. It is right up to date at the time of writing and contains two active branches: master is the wxWidgets 2.9 repo and WXWIDGETS_2_8 is (unsurprisingly) the wxWidgets 2.8 branch.</p>\n<p>I’m especially interested in feedback on whether moving definitively to GitHub would be a good thing – the main criteria for judgement being whether it makes it easier to receive contributions from others.</p>\n<br />Filed under: <a href=\"http://wewantarock.wordpress.com/category/haskell/\">Haskell</a>, <a href=\"http://wewantarock.wordpress.com/category/haskell/wxhaskell/\">wxHaskell</a>  <a href=\"http://feeds.wordpress.com/1.0/gocomments/wewantarock.wordpress.com/169/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/wewantarock.wordpress.com/169/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godelicious/wewantarock.wordpress.com/169/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/delicious/wewantarock.wordpress.com/169/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gofacebook/wewantarock.wordpress.com/169/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/facebook/wewantarock.wordpress.com/169/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gotwitter/wewantarock.wordpress.com/169/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/twitter/wewantarock.wordpress.com/169/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gostumble/wewantarock.wordpress.com/169/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/stumble/wewantarock.wordpress.com/169/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godigg/wewantarock.wordpress.com/169/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/digg/wewantarock.wordpress.com/169/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/goreddit/wewantarock.wordpress.com/169/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/reddit/wewantarock.wordpress.com/169/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=wewantarock.wordpress.com&amp;blog=11303994&amp;post=169&amp;subd=wewantarock&amp;ref=&amp;feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />") (pubDate nil "Wed, 18 Apr 2012 14:37:57 +0000"))) ("Johan Tibell: The ekg package can now export string labels" "<p>I'm happy to announce a new minor release of the <a href=\"http://hackage.haskell.org/package/ekg\">ekg package</a>. The ekg package lets you monitor running executables using your web browser, or any monitoring tool that can speak HTTP. New in this release is support for exporting labels.</p>\n<p>A label is an arbitrary text string, set dynamically by the running executable. Labels are more flexible than counters and gauges (which can only represent numerical values.) Typical uses of labels include exporting the command line arguments the executable was started with, the host it's running on, etc. Since labels are arbitrary strings you can use labels to export any type of internal state that can be represented as a string. Here's a simple example:</p>\n<pre><code>{-# LANGUAGE OverloadedStrings #-}\nmodule Main where\nimport Control.Concurrent\nimport Control.Exception\nimport qualified Data.Text as T\nimport System.Environment\nimport qualified System.Remote.Label as Label\nimport System.Remote.Monitoring\nmean :: Fractional a =&gt; [a] -&gt; a\nmean xs = sum xs / fromIntegral (length xs)\nmain :: IO ()\nmain = do\nhandle &lt;- forkServer \"localhost\" 8000\nlabel &lt;- getLabel \"args\" handle\nargs &lt;- getArgs\nLabel.set label $ T.intercalate \" \" $ map T.pack args\n-- Busy work:\nlet loop n = do\nevaluate $ mean [1..n]\nthreadDelay 2000\nloop n\nloop 1000000\n</code></pre>\n<p>This functionality was contributed by Iustin Pop.</p><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/927289640963145319-3162609933435244865?l=blog.johantibell.com\" alt=\"\" height=\"1\" width=\"1\" /></div>" "http://blog.johantibell.com/2012/04/im-happy-to-announce-new-minor-release.html" (20366 18516) obsolete 8 nil nil ((title nil "Johan Tibell: The ekg package can now export string labels") (guid ((isPermaLink . "false")) "tag:blogger.com,1999:blog-927289640963145319.post-3162609933435244865") (link nil "http://blog.johantibell.com/2012/04/im-happy-to-announce-new-minor-release.html") (description nil "<p>I'm happy to announce a new minor release of the <a href=\"http://hackage.haskell.org/package/ekg\">ekg package</a>. The ekg package lets you monitor running executables using your web browser, or any monitoring tool that can speak HTTP. New in this release is support for exporting labels.</p>\n<p>A label is an arbitrary text string, set dynamically by the running executable. Labels are more flexible than counters and gauges (which can only represent numerical values.) Typical uses of labels include exporting the command line arguments the executable was started with, the host it's running on, etc. Since labels are arbitrary strings you can use labels to export any type of internal state that can be represented as a string. Here's a simple example:</p>\n<pre><code>{-# LANGUAGE OverloadedStrings #-}\nmodule Main where\n\nimport Control.Concurrent\nimport Control.Exception\nimport qualified Data.Text as T\nimport System.Environment\nimport qualified System.Remote.Label as Label\nimport System.Remote.Monitoring\n\nmean :: Fractional a =&gt; [a] -&gt; a\nmean xs = sum xs / fromIntegral (length xs)\n\nmain :: IO ()\nmain = do\n    handle &lt;- forkServer \"localhost\" 8000\n    label &lt;- getLabel \"args\" handle\n    args &lt;- getArgs\n    Label.set label $ T.intercalate \" \" $ map T.pack args\n    -- Busy work:\n    let loop n = do\n            evaluate $ mean [1..n]\n            threadDelay 2000\n            loop n\n    loop 1000000\n</code></pre>\n<p>This functionality was contributed by Iustin Pop.</p><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/927289640963145319-3162609933435244865?l=blog.johantibell.com\" alt=\"\" height=\"1\" width=\"1\" /></div>") (pubDate nil "Wed, 18 Apr 2012 04:51:32 +0000") (author nil "noreply@blogger.com (Johan Tibell)"))) ("Johan Tibell: cabal bench" "<p>With the release of cabal-install 0.14, you can use Cabal to build and run your benchmarks. No more Makefiles that try to replicate things Cabal already does. Just like <code>cabal test</code> allows us to automatically find and run tests using e.g. a buildbot, this feature should let us track performance of libraries over time and catch performance regressions earlier. There's some future work needed to make this convenient, but it's already possible today if you're willing to parse the output of your favorite benchmarking library (e.g. <a href=\"http://hackage.haskell.org/package/criterion\">Criterion</a>.)</p>\n<p>Writing benchmark sections in your Cabal file is very similar to writing test suite sections. Here's an <a href=\"http://darcs.haskell.org/bytestring/bytestring.cabal\">example taken from the bytestring package</a>:</p>\n<pre><code>benchmark bench-builder-all\ntype:             exitcode-stdio-1.0\nhs-source-dirs:   . bench\nmain-is:          BenchAll.hs\nbuild-depends:    base, deepseq, ghc-prim,\ncriterion\nc-sources:        cbits/fpstring.c\ncbits/itoa.c\ninclude-dirs:     include\nghc-options:      -O2\n-fmax-simplifier-iterations=10\n-fdicts-cheap\n-fspec-constr-count=6\n</code></pre>\n<p>To run just do:</p>\n<pre><code>cabal configure --enable-benchmarks &amp;&amp; cabal build &amp;&amp; cabal bench\n</code></pre><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/927289640963145319-6972553652566293331?l=blog.johantibell.com\" alt=\"\" height=\"1\" width=\"1\" /></div>" "http://blog.johantibell.com/2012/04/cabal-bench.html" (20366 16582) obsolete 9 nil nil ((title nil "Johan Tibell: cabal bench") (guid ((isPermaLink . "false")) "tag:blogger.com,1999:blog-927289640963145319.post-6972553652566293331") (link nil "http://blog.johantibell.com/2012/04/cabal-bench.html") (description nil "<p>With the release of cabal-install 0.14, you can use Cabal to build and run your benchmarks. No more Makefiles that try to replicate things Cabal already does. Just like <code>cabal test</code> allows us to automatically find and run tests using e.g. a buildbot, this feature should let us track performance of libraries over time and catch performance regressions earlier. There's some future work needed to make this convenient, but it's already possible today if you're willing to parse the output of your favorite benchmarking library (e.g. <a href=\"http://hackage.haskell.org/package/criterion\">Criterion</a>.)</p>\n<p>Writing benchmark sections in your Cabal file is very similar to writing test suite sections. Here's an <a href=\"http://darcs.haskell.org/bytestring/bytestring.cabal\">example taken from the bytestring package</a>:</p>\n<pre><code>benchmark bench-builder-all\n  type:             exitcode-stdio-1.0\n  hs-source-dirs:   . bench\n  main-is:          BenchAll.hs\n  build-depends:    base, deepseq, ghc-prim,\n                    criterion\n  c-sources:        cbits/fpstring.c\n                    cbits/itoa.c\n  include-dirs:     include\n  ghc-options:      -O2\n                    -fmax-simplifier-iterations=10\n                    -fdicts-cheap\n                    -fspec-constr-count=6\n</code></pre>\n<p>To run just do:</p>\n<pre><code>cabal configure --enable-benchmarks &amp;&amp; cabal build &amp;&amp; cabal bench\n</code></pre><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/927289640963145319-6972553652566293331?l=blog.johantibell.com\" alt=\"\" height=\"1\" width=\"1\" /></div>") (pubDate nil "Wed, 18 Apr 2012 04:19:18 +0000") (author nil "noreply@blogger.com (Johan Tibell)"))) ("mightybyte: LTMT Part 2: Monads" "<p>In part 1 of this tutorial we talked about types and kinds. Knowledge of kinds will help to orient yourself in today's discussion of monads. </p>\n<p>What is a monad? When you type \"monad\" into <a href=\"http://hayoo.info\">Hayoo</a> the first result takes you to the documentation for the type class Monad. If you don't already have a basic familiarity with type classes, you can think of a type class as roughly equivalent to a Java interface. A type class defines a set of functions involving a certain data type. When a data type defines all the functions required by the type class, we say that it is an instance of that type class. When a type Foo is an instance of the Monad type class, you'll commonly hear people say \"Foo is a monad\". Here is a version of the Monad type class.</p>\n<pre class=\"sourceCode literate haskell\">class Monad m where\nreturn :: a -&gt; m a\n(=&lt;&lt;) :: (a -&gt; m b) -&gt; m a -&gt; m b</pre><p>(Note: If you're the untrusting type and looked up the real definition to verify that mine is accurate, you'll find that my version is slightly different. Don't worry about that right now. I did it intentionally, and there is a method to my madness.)</p><p>This basically says that in order for a data type to be an instance of the Monad type class, it has to define the two functions <code>return</code> and <code>(=&lt;&lt;)</code> (pronounced \"bind\") that have the above type signatures. What do these type signatures tell us? Let's look at <code>return</code> first. We see that it returns a value of type <code>m a</code>. This tells us that <code>m</code> has the kind signature <code>m :: * -&gt; *</code>. So whenever we hear someone say \"Foo is a monad\" we immediately know that <code>Foo :: * -&gt; *</code>.</p><p>In part 1, you probably got tired of me emphasizing that a type is a context. When we look at return and bind, this starts to make more sense. The type <code>m a</code> is just the type <code>a</code> in the context <code>m</code>. The type signature <code>return :: a -&gt; m a</code> tells us that the return function takes a plain value <code>a</code> and puts that value into the context <code>m</code>. So when we say something is a monad, we immediately know that we have a function called return that lets us put arbitrary other values into that context.</p>\n<p>Now, what about bind? It looks much more complicated and scary, but it's really pretty simple. To see this, let's get rid of all the <code>m</code>'s in the type signature. Here's the before and after.</p>\n<pre class=\"sourceCode literate haskell\"><code class=\"sourceCode haskell\"><span class=\"ot\">before ::</span> (a <span class=\"ot\">-&gt;</span> m b) <span class=\"ot\">-&gt;</span> m a <span class=\"ot\">-&gt;</span> m b\n<span class=\"ot\">after  ::</span> (a <span class=\"ot\">-&gt;</span> b) <span class=\"ot\">-&gt;</span> a <span class=\"ot\">-&gt;</span> b</code></pre>\n<p>The type signature for <code>after</code> might look familiar. It's exactly the same as the type signature for the <code>($)</code> function! If you're not familiar with it, Haskell's <code>$</code> function is just syntax sugar for function application. <code>(f $ a)</code> is exactly the same as <code>(f a)</code>. It applies the function <code>f</code> to its argument <code>a</code>. It is useful because it has very low precedence is right associative, so it is a nice syntax sugar that allows us to eliminate parenthesis in certain situations. When you realize that <code>(=&lt;&lt;)</code> is roughly analogous to the concept of function application (modulo the addition of a context <code>m</code>), it suddenly makes a lot more sense.</p>\n<p>So now what happens when we look at bind's type signature with the <code>m</code>'s back in? <code>(f =&lt;&lt; k)</code> applies the function <code>f</code> to the value <code>k</code>. However, the crucial point is that k is a value wrapped in the context <code>m</code>, but <code>f</code>'s parameter is an unwrapped value <code>a</code>. From this we see that the bind function's main purpose is to pull a value out of the context <code>m</code> and apply it to <code>f</code>, which does some computation, and returns the result back in the context m again.</p>\n<p>The monad type class does not provide any mechanism for unconditionally pulling a value out of the context. The only way to get access to the unwrapped value is with the bind function, but bind does this in a controlled way and requires the function to wrap things up again before the result is returned. This behavior, enabled by Haskell's strong static type system, provides complete control over side effects and mutability.</p>\n<p>Some monads do provide a way to get a value out of the context, but the choice of whether to do so is completely up to the author of said monad. It is not something inherent in the concept of a monad.</p>\n<p>Monads wouldn't be very fun to use if all you had was return, bind, and derived functions. To make them more usable, Haskell has a special syntax called \"do notation\". The basic idea behind do notation is that there's a bind between every line, and you can do <code>a &lt;- func</code> to unwrap the return value of func and make it available to later lines with the identifier 'a'.</p>\n<p>You can find a more detailed treatment of do notation elsewhere. I hear that <a href=\"http://learnyouahaskell.com/a-fistful-of-monads\">Learn You a Haskell</a> and <a href=\"http://book.realworldhaskell.org/read/monads.html\">Real World Haskell</a> are good.</p>\n<p>In summary, a monad is a certain type of context that provides two things: a way to put things into the context, and function application within the context. There is no way to get things out. To get things out, you have to use bind to take yourself into the context. Once you have these two operations, there are lots of other more complicated operations built on the basic primitives that are provided by the API. Much of this is provided in <a href=\"http://www.haskell.org/ghc/docs/7.0-latest/html/libraries/base-4.3.1.0/Control-Monad.html\">Control.Monad</a>. You probably won't learn all this stuff in a day. Just dive in and use these concepts in real code. Eventually you'll find that the patterns are sinking in and becoming clearer.</p><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/8768401356830813531-3906362517288553492?l=softwaresimply.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>\n<p><a href=\"http://feedads.g.doubleclick.net/~a/GohtbciZV3Hmpy3bLy7-p3ezKTQ/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/GohtbciZV3Hmpy3bLy7-p3ezKTQ/0/di\" border=\"0\" ismap=\"true\" /></a><br />\n<a href=\"http://feedads.g.doubleclick.net/~a/GohtbciZV3Hmpy3bLy7-p3ezKTQ/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/GohtbciZV3Hmpy3bLy7-p3ezKTQ/1/di\" border=\"0\" ismap=\"true\" /></a></p><img src=\"http://feeds.feedburner.com/~r/SoftwareSimply/~4/PXk3YvYnv-o\" height=\"1\" width=\"1\" />" "http://feedproxy.google.com/~r/SoftwareSimply/~3/PXk3YvYnv-o/ltmt-part-2-monads.html" (20366 9742) obsolete 10 nil nil ((title nil "mightybyte: LTMT Part 2: Monads") (guid ((isPermaLink . "false")) "tag:blogger.com,1999:blog-8768401356830813531.post-3906362517288553492") (link nil "http://feedproxy.google.com/~r/SoftwareSimply/~3/PXk3YvYnv-o/ltmt-part-2-monads.html") (description nil "<p>In part 1 of this tutorial we talked about types and kinds. Knowledge of kinds will help to orient yourself in today's discussion of monads. </p>\n<p>What is a monad? When you type \"monad\" into <a href=\"http://hayoo.info\">Hayoo</a> the first result takes you to the documentation for the type class Monad. If you don't already have a basic familiarity with type classes, you can think of a type class as roughly equivalent to a Java interface. A type class defines a set of functions involving a certain data type. When a data type defines all the functions required by the type class, we say that it is an instance of that type class. When a type Foo is an instance of the Monad type class, you'll commonly hear people say \"Foo is a monad\". Here is a version of the Monad type class.</p>\n<pre class=\"sourceCode literate haskell\">class Monad m where\n    return :: a -&gt; m a\n    (=&lt;&lt;) :: (a -&gt; m b) -&gt; m a -&gt; m b</pre><p>(Note: If you're the untrusting type and looked up the real definition to verify that mine is accurate, you'll find that my version is slightly different. Don't worry about that right now. I did it intentionally, and there is a method to my madness.)</p><p>This basically says that in order for a data type to be an instance of the Monad type class, it has to define the two functions <code>return</code> and <code>(=&lt;&lt;)</code> (pronounced \"bind\") that have the above type signatures. What do these type signatures tell us? Let's look at <code>return</code> first. We see that it returns a value of type <code>m a</code>. This tells us that <code>m</code> has the kind signature <code>m :: * -&gt; *</code>. So whenever we hear someone say \"Foo is a monad\" we immediately know that <code>Foo :: * -&gt; *</code>.</p><p>In part 1, you probably got tired of me emphasizing that a type is a context. When we look at return and bind, this starts to make more sense. The type <code>m a</code> is just the type <code>a</code> in the context <code>m</code>. The type signature <code>return :: a -&gt; m a</code> tells us that the return function takes a plain value <code>a</code> and puts that value into the context <code>m</code>. So when we say something is a monad, we immediately know that we have a function called return that lets us put arbitrary other values into that context.</p>\n<p>Now, what about bind? It looks much more complicated and scary, but it's really pretty simple. To see this, let's get rid of all the <code>m</code>'s in the type signature. Here's the before and after.</p>\n<pre class=\"sourceCode literate haskell\"><code class=\"sourceCode haskell\"><span class=\"ot\">before ::</span> (a <span class=\"ot\">-&gt;</span> m b) <span class=\"ot\">-&gt;</span> m a <span class=\"ot\">-&gt;</span> m b\n<span class=\"ot\">after  ::</span> (a <span class=\"ot\">-&gt;</span> b) <span class=\"ot\">-&gt;</span> a <span class=\"ot\">-&gt;</span> b</code></pre>\n<p>The type signature for <code>after</code> might look familiar. It's exactly the same as the type signature for the <code>($)</code> function! If you're not familiar with it, Haskell's <code>$</code> function is just syntax sugar for function application. <code>(f $ a)</code> is exactly the same as <code>(f a)</code>. It applies the function <code>f</code> to its argument <code>a</code>. It is useful because it has very low precedence is right associative, so it is a nice syntax sugar that allows us to eliminate parenthesis in certain situations. When you realize that <code>(=&lt;&lt;)</code> is roughly analogous to the concept of function application (modulo the addition of a context <code>m</code>), it suddenly makes a lot more sense.</p>\n<p>So now what happens when we look at bind's type signature with the <code>m</code>'s back in? <code>(f =&lt;&lt; k)</code> applies the function <code>f</code> to the value <code>k</code>. However, the crucial point is that k is a value wrapped in the context <code>m</code>, but <code>f</code>'s parameter is an unwrapped value <code>a</code>. From this we see that the bind function's main purpose is to pull a value out of the context <code>m</code> and apply it to <code>f</code>, which does some computation, and returns the result back in the context m again.</p>\n<p>The monad type class does not provide any mechanism for unconditionally pulling a value out of the context. The only way to get access to the unwrapped value is with the bind function, but bind does this in a controlled way and requires the function to wrap things up again before the result is returned. This behavior, enabled by Haskell's strong static type system, provides complete control over side effects and mutability.</p>\n<p>Some monads do provide a way to get a value out of the context, but the choice of whether to do so is completely up to the author of said monad. It is not something inherent in the concept of a monad.</p>\n<p>Monads wouldn't be very fun to use if all you had was return, bind, and derived functions. To make them more usable, Haskell has a special syntax called \"do notation\". The basic idea behind do notation is that there's a bind between every line, and you can do <code>a &lt;- func</code> to unwrap the return value of func and make it available to later lines with the identifier 'a'.</p>\n<p>You can find a more detailed treatment of do notation elsewhere. I hear that <a href=\"http://learnyouahaskell.com/a-fistful-of-monads\">Learn You a Haskell</a> and <a href=\"http://book.realworldhaskell.org/read/monads.html\">Real World Haskell</a> are good.</p>\n<p>In summary, a monad is a certain type of context that provides two things: a way to put things into the context, and function application within the context. There is no way to get things out. To get things out, you have to use bind to take yourself into the context. Once you have these two operations, there are lots of other more complicated operations built on the basic primitives that are provided by the API. Much of this is provided in <a href=\"http://www.haskell.org/ghc/docs/7.0-latest/html/libraries/base-4.3.1.0/Control-Monad.html\">Control.Monad</a>. You probably won't learn all this stuff in a day. Just dive in and use these concepts in real code. Eventually you'll find that the patterns are sinking in and becoming clearer.</p><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/8768401356830813531-3906362517288553492?l=softwaresimply.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>\n<p><a href=\"http://feedads.g.doubleclick.net/~a/GohtbciZV3Hmpy3bLy7-p3ezKTQ/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/GohtbciZV3Hmpy3bLy7-p3ezKTQ/0/di\" border=\"0\" ismap=\"true\" /></a><br />\n<a href=\"http://feedads.g.doubleclick.net/~a/GohtbciZV3Hmpy3bLy7-p3ezKTQ/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/GohtbciZV3Hmpy3bLy7-p3ezKTQ/1/di\" border=\"0\" ismap=\"true\" /></a></p><img src=\"http://feeds.feedburner.com/~r/SoftwareSimply/~4/PXk3YvYnv-o\" height=\"1\" width=\"1\" />") (pubDate nil "Wed, 18 Apr 2012 02:25:18 +0000") (author nil "noreply@blogger.com (mightybyte)"))) ("mightybyte: The Less Travelled Monad Tutorial: Understanding Kinds" "<p>This is part 1 of a monad tutorial (but as we will see, it's more than your average monad tutorial). If you already have a strong grasp of types, kinds, monads, and monad transformers, and type signatures like <code>newtype RST r s m a = RST { runRST :: r -&gt; s -&gt; m (a, s) }</code> don't make your eyes glaze over, then reading this won't change your life. If you don't, then maybe it will.</p>\n<p>More seriously, when I was learning Haskell I got the impression that some topics were \"more advanced\" and should wait until later. Now, a few years in, I feel that understanding some of these topics earlier would have significantly sped up the learning process for me. If there are other people out there whose brains work somewhat like mine, then maybe they will be able to benefit from this tutorial. I can't say that everything I say here will be new, but I haven't seen these concepts organized in this way before.</p>\n<p>This tutorial is not for absolute beginners. It assumes a basic knowledge of Haskell including the basics of data types, type signatures, and type classes. If you've been programming Haskell for a little bit, but are getting stuck on monads or monad transformers, then you might find some help here.</p>\n<pre class=\"sourceCode literate haskell\"><code class=\"sourceCode haskell\"><span class=\"kw\">data</span> <span class=\"dt\">Distance</span> <span class=\"fu\">=</span> <span class=\"dt\">Dist</span> <span class=\"dt\">Double</span>\n<span class=\"kw\">data</span> <span class=\"dt\">Mass</span> <span class=\"fu\">=</span> <span class=\"dt\">Mass</span> <span class=\"dt\">Double</span></code></pre>\n<p>This code defines data types called Distance and Mass. The name on the left side of the equals sign is called a <strong>type constructor</strong> (or sometimes shortened to just <strong>type</strong>). The Haskell compiler automatically creates functions from the names just to the right of the equals sign. These functions are called <strong>data constructors</strong> because they construct the types Distance and Mass. Since they are functions, they are also first-class values, which means they have types as seen in the following ghci session.</p>\n<pre><code>$ ghci ltmt.hs\nGHCi, version 7.0.3: http://www.haskell.org/ghc/  :? for helpghci&gt; :t Dist\nDist :: Double -&gt; Distance\nghci&gt; :t Mass\nMass :: Double -&gt; Mass\nghci&gt; :t Distance\n&lt;interactive&gt;:1:1: Not in scope: data constructor `Distance'</code></pre>\n<p>We see here that Dist and Mass are functions that return the types Distance and Mass respectively. Frequently you'll encounter code where the type and the constructor have the same name (as we have here with Mass). Distance, however, illustrates that these are really two separate entities. Distance is the type and Dist is the constructor. Types don't have types, so the \":t\" command fails for Distance.</p>\n<p>Now, we need to pause for a moment and think about the meaning of these things. What is the Distance type? Well, when we look at the constructor, we can see that a value of type Distance contains a single Double. The constructor function doesn't actually do anything to the Double value in the process of constructing the Distance value. All it does is create a new context for thinking about a Double, specifically the context of a Double that we intend to represent a distance quantity. (Well, that's not completely true, but for the purposes of this tutorial we'll ignore those details.) Let me repeat that. <strong>A type is just a context.</strong> This probably seems so obvious that you're starting to wonder about me. But I'm saying it because I think that keeping it in mind will help when talking about monads later.</p>\n<p>Now let's look at another data declaration.</p>\n<pre class=\"sourceCode literate haskell\"><code class=\"sourceCode haskell\"><span class=\"kw\">data</span> <span class=\"dt\">Pair</span> a <span class=\"fu\">=</span> <span class=\"dt\">MkPair</span> a a</code></pre>\n<p>This one is more interesting. The type constructor Pair takes an argument. The argument is some other type a and that is used in some part of the data constructor. When we look to the right side, we see that the data constructor is called MkPair and it constructs a value of type \"Pair a\" from two values of type \"a\".</p>\n<pre><code>MkPair :: a -&gt; a -&gt; Pair a</code></pre>\n<p>The same thing we said for the above types Distance and Mass applies here. The type constructor <code>Pair</code> represents a context. It's a context representing a pair of values. The type <code>Pair Int</code> represents a pair of Ints. The type <code>Pair String</code> represents a pair of strings. And on and on for whatever concrete type we use in the place of <code>a</code>.</p>\n<p>Again, this is all very straightforward. But there is a significant distinction between the two type constructors Pair and Distance. Pair requires a type parameter, while Distance does not. This brings us to the topic of kinds. (Most people postpone this topic until later, but it's not hard to understand and I think it helps to clarify things later.) You know those analogy questions they use on standardized tests? Here's a completed one for you:</p>\n<pre><code>values : types    ::   types : kinds</code></pre>\n<p>Just as we categorize <strong>values</strong> by <strong>type</strong>, we categorize <strong>type constructors</strong> by <strong>kind</strong>. GHCi lets us look up a type constructor's kind with the \":k\" command.</p>\n<pre><code>ghci&gt; :k Distance\nDistance :: *\nghci&gt; :k Mass\nMass :: *\nghci&gt; :k Dist\n&lt;interactive&gt;:1:1: Not in scope: type constructor or class `Dist'\nghci&gt; :k Pair\nPair :: * -&gt; *\nghci&gt; :k Pair Mass\nPair Mass :: *</code></pre>\n<p>In English we would say \"Distance has kind *\", and \"Pair has kind * -&gt; *\". Kind signatures look similar to type signatures because they are. When we use Mass as Pair's first type argument, the result has kind *. The Haskell report defines kind signatures with the following two rules.</p>\n<ul>\n<li>The symbol * represents the kind of all nullary type constructors (constructors that don't take any parameters).</li>\n<li>If k1 and k2 are kinds, then k1-&gt;k2 is the kind of types that take one parameter that is a type of kind k1 and return a type of kind k2.</li>\n</ul>\n<p>As an exercise, see if you can work out the kind signatures for the following type constructors. You can check your work with GHCi.</p>\n<pre class=\"sourceCode literate haskell\"><code class=\"sourceCode haskell\"><span class=\"kw\">data</span> <span class=\"dt\">Tuple</span> a b <span class=\"fu\">=</span> <span class=\"dt\">Tuple</span> a b\n<span class=\"kw\">data</span> <span class=\"dt\">HardA</span> a <span class=\"fu\">=</span> <span class=\"dt\">HardA</span> (a <span class=\"dt\">Int</span>)\n<span class=\"kw\">data</span> <span class=\"dt\">HardB</span> a b c <span class=\"fu\">=</span> <span class=\"dt\">HardB</span> (a b) (c a <span class=\"dt\">Int</span>)</code></pre>\n<p>Before reading further, I suggest attempting to figure out the kind signatures for HardA and HardB because they involve a key pattern that will come up later.</p>\n<hr />\n<p>Welcome back. The first example is just a simple extension of what we've already seen. The type constructor Tuple has two arguments, so it's kind signature is <code>Tuple :: * -&gt; * -&gt; *</code>. Also if you try :t you'll see that the data constructor's type signature is <code>Tuple :: a -&gt; b -&gt; Tuple a b</code>.</p>\n<p>In the case of the last two types, it may be a little less obvious. But they build on each other in fairly small, manageable steps. For HardA, in the part to the left of the equals sign we see that there is one type parameter 'a'. From this, we can deduce that HardA's kind signature is something of the form <code>? -&gt; *</code>, but we don't know exactly what to put at the question mark. On the right side, all the individual arguments to the data constructor must have kind *. If <code>(a Int) :: *</code>, then the type 'a' must be a type constructor that takes one parameter. That is, it has kind <code>* -&gt; *</code>, which is what we must substitute for the question mark. Therefore, we get the final kind signature <code>HardA :: (* -&gt; *) -&gt; *</code>.</p>\n<p>HardB is a very contrived and much more complex case that exercises all the above simple principles. From <code>HardB a b c</code> we see that HardB has three type parameters, so it's kind signature has the form <code>HardB :: a -&gt; b -&gt; c -&gt; *</code>. On the right side the <code>(a b)</code> tells us that <code>b :: *</code> and <code>a :: * -&gt; *</code>. The second part <code>(c a Int)</code> means that c is a type constructor with two parameters where its first parameter is a, which has the type signature we described above. So this gives us <code>c :: (* -&gt; *) -&gt; * -&gt; *</code>. Now, substituting all these in, we get <code>HardB :: (* -&gt; *) -&gt; * -&gt; ((* -&gt; *) -&gt; * -&gt; *) -&gt; *</code>.</p>\n<p>The point of all this is to show that when you see juxtaposition of type constructors (something of the form <code>(a b)</code> in a type signature), it is telling you that the context a is a non-nullary type constructor and b is its first parameter.</p>\n<p>Continue on to <a href=\"http://softwaresimply.blogspot.com/2012/04/ltmt-part-2-monads.html\">Part 2 of the Less Travelled Monad Tutorial</a></p><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/8768401356830813531-5191607664469709891?l=softwaresimply.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>\n<p><a href=\"http://feedads.g.doubleclick.net/~a/okU9u7iFlwCuxlSmJnqGPw-k8Qo/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/okU9u7iFlwCuxlSmJnqGPw-k8Qo/0/di\" border=\"0\" ismap=\"true\" /></a><br />\n<a href=\"http://feedads.g.doubleclick.net/~a/okU9u7iFlwCuxlSmJnqGPw-k8Qo/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/okU9u7iFlwCuxlSmJnqGPw-k8Qo/1/di\" border=\"0\" ismap=\"true\" /></a></p><img src=\"http://feeds.feedburner.com/~r/SoftwareSimply/~4/Ut3h8Hz4vbE\" height=\"1\" width=\"1\" />" "http://feedproxy.google.com/~r/SoftwareSimply/~3/Ut3h8Hz4vbE/less-travelled-monad-tutorial-part-1.html" (20365 62347) obsolete 11 nil nil ((title nil "mightybyte: The Less Travelled Monad Tutorial: Understanding Kinds") (guid ((isPermaLink . "false")) "tag:blogger.com,1999:blog-8768401356830813531.post-5191607664469709891") (link nil "http://feedproxy.google.com/~r/SoftwareSimply/~3/Ut3h8Hz4vbE/less-travelled-monad-tutorial-part-1.html") (description nil "<p>This is part 1 of a monad tutorial (but as we will see, it's more than your average monad tutorial). If you already have a strong grasp of types, kinds, monads, and monad transformers, and type signatures like <code>newtype RST r s m a = RST { runRST :: r -&gt; s -&gt; m (a, s) }</code> don't make your eyes glaze over, then reading this won't change your life. If you don't, then maybe it will.</p>\n<p>More seriously, when I was learning Haskell I got the impression that some topics were \"more advanced\" and should wait until later. Now, a few years in, I feel that understanding some of these topics earlier would have significantly sped up the learning process for me. If there are other people out there whose brains work somewhat like mine, then maybe they will be able to benefit from this tutorial. I can't say that everything I say here will be new, but I haven't seen these concepts organized in this way before.</p>\n<p>This tutorial is not for absolute beginners. It assumes a basic knowledge of Haskell including the basics of data types, type signatures, and type classes. If you've been programming Haskell for a little bit, but are getting stuck on monads or monad transformers, then you might find some help here.</p>\n<pre class=\"sourceCode literate haskell\"><code class=\"sourceCode haskell\"><span class=\"kw\">data</span> <span class=\"dt\">Distance</span> <span class=\"fu\">=</span> <span class=\"dt\">Dist</span> <span class=\"dt\">Double</span>\n<span class=\"kw\">data</span> <span class=\"dt\">Mass</span> <span class=\"fu\">=</span> <span class=\"dt\">Mass</span> <span class=\"dt\">Double</span></code></pre>\n<p>This code defines data types called Distance and Mass. The name on the left side of the equals sign is called a <strong>type constructor</strong> (or sometimes shortened to just <strong>type</strong>). The Haskell compiler automatically creates functions from the names just to the right of the equals sign. These functions are called <strong>data constructors</strong> because they construct the types Distance and Mass. Since they are functions, they are also first-class values, which means they have types as seen in the following ghci session.</p>\n<pre><code>$ ghci ltmt.hs\nGHCi, version 7.0.3: http://www.haskell.org/ghc/  :? for helpghci&gt; :t Dist\nDist :: Double -&gt; Distance\nghci&gt; :t Mass\nMass :: Double -&gt; Mass\nghci&gt; :t Distance\n&lt;interactive&gt;:1:1: Not in scope: data constructor `Distance'</code></pre>\n<p>We see here that Dist and Mass are functions that return the types Distance and Mass respectively. Frequently you'll encounter code where the type and the constructor have the same name (as we have here with Mass). Distance, however, illustrates that these are really two separate entities. Distance is the type and Dist is the constructor. Types don't have types, so the \":t\" command fails for Distance.</p>\n<p>Now, we need to pause for a moment and think about the meaning of these things. What is the Distance type? Well, when we look at the constructor, we can see that a value of type Distance contains a single Double. The constructor function doesn't actually do anything to the Double value in the process of constructing the Distance value. All it does is create a new context for thinking about a Double, specifically the context of a Double that we intend to represent a distance quantity. (Well, that's not completely true, but for the purposes of this tutorial we'll ignore those details.) Let me repeat that. <strong>A type is just a context.</strong> This probably seems so obvious that you're starting to wonder about me. But I'm saying it because I think that keeping it in mind will help when talking about monads later.</p>\n<p>Now let's look at another data declaration.</p>\n<pre class=\"sourceCode literate haskell\"><code class=\"sourceCode haskell\"><span class=\"kw\">data</span> <span class=\"dt\">Pair</span> a <span class=\"fu\">=</span> <span class=\"dt\">MkPair</span> a a</code></pre>\n<p>This one is more interesting. The type constructor Pair takes an argument. The argument is some other type a and that is used in some part of the data constructor. When we look to the right side, we see that the data constructor is called MkPair and it constructs a value of type \"Pair a\" from two values of type \"a\".</p>\n<pre><code>MkPair :: a -&gt; a -&gt; Pair a</code></pre>\n<p>The same thing we said for the above types Distance and Mass applies here. The type constructor <code>Pair</code> represents a context. It's a context representing a pair of values. The type <code>Pair Int</code> represents a pair of Ints. The type <code>Pair String</code> represents a pair of strings. And on and on for whatever concrete type we use in the place of <code>a</code>.</p>\n<p>Again, this is all very straightforward. But there is a significant distinction between the two type constructors Pair and Distance. Pair requires a type parameter, while Distance does not. This brings us to the topic of kinds. (Most people postpone this topic until later, but it's not hard to understand and I think it helps to clarify things later.) You know those analogy questions they use on standardized tests? Here's a completed one for you:</p>\n<pre><code>values : types    ::   types : kinds</code></pre>\n<p>Just as we categorize <strong>values</strong> by <strong>type</strong>, we categorize <strong>type constructors</strong> by <strong>kind</strong>. GHCi lets us look up a type constructor's kind with the \":k\" command.</p>\n<pre><code>ghci&gt; :k Distance\nDistance :: *\nghci&gt; :k Mass\nMass :: *\nghci&gt; :k Dist\n&lt;interactive&gt;:1:1: Not in scope: type constructor or class `Dist'\nghci&gt; :k Pair\nPair :: * -&gt; *\nghci&gt; :k Pair Mass\nPair Mass :: *</code></pre>\n<p>In English we would say \"Distance has kind *\", and \"Pair has kind * -&gt; *\". Kind signatures look similar to type signatures because they are. When we use Mass as Pair's first type argument, the result has kind *. The Haskell report defines kind signatures with the following two rules.</p>\n<ul>\n<li>The symbol * represents the kind of all nullary type constructors (constructors that don't take any parameters).</li>\n<li>If k1 and k2 are kinds, then k1-&gt;k2 is the kind of types that take one parameter that is a type of kind k1 and return a type of kind k2.</li>\n</ul>\n<p>As an exercise, see if you can work out the kind signatures for the following type constructors. You can check your work with GHCi.</p>\n<pre class=\"sourceCode literate haskell\"><code class=\"sourceCode haskell\"><span class=\"kw\">data</span> <span class=\"dt\">Tuple</span> a b <span class=\"fu\">=</span> <span class=\"dt\">Tuple</span> a b\n<span class=\"kw\">data</span> <span class=\"dt\">HardA</span> a <span class=\"fu\">=</span> <span class=\"dt\">HardA</span> (a <span class=\"dt\">Int</span>)\n<span class=\"kw\">data</span> <span class=\"dt\">HardB</span> a b c <span class=\"fu\">=</span> <span class=\"dt\">HardB</span> (a b) (c a <span class=\"dt\">Int</span>)</code></pre>\n<p>Before reading further, I suggest attempting to figure out the kind signatures for HardA and HardB because they involve a key pattern that will come up later.</p>\n<hr />\n<p>Welcome back. The first example is just a simple extension of what we've already seen. The type constructor Tuple has two arguments, so it's kind signature is <code>Tuple :: * -&gt; * -&gt; *</code>. Also if you try :t you'll see that the data constructor's type signature is <code>Tuple :: a -&gt; b -&gt; Tuple a b</code>.</p>\n<p>In the case of the last two types, it may be a little less obvious. But they build on each other in fairly small, manageable steps. For HardA, in the part to the left of the equals sign we see that there is one type parameter 'a'. From this, we can deduce that HardA's kind signature is something of the form <code>? -&gt; *</code>, but we don't know exactly what to put at the question mark. On the right side, all the individual arguments to the data constructor must have kind *. If <code>(a Int) :: *</code>, then the type 'a' must be a type constructor that takes one parameter. That is, it has kind <code>* -&gt; *</code>, which is what we must substitute for the question mark. Therefore, we get the final kind signature <code>HardA :: (* -&gt; *) -&gt; *</code>.</p>\n<p>HardB is a very contrived and much more complex case that exercises all the above simple principles. From <code>HardB a b c</code> we see that HardB has three type parameters, so it's kind signature has the form <code>HardB :: a -&gt; b -&gt; c -&gt; *</code>. On the right side the <code>(a b)</code> tells us that <code>b :: *</code> and <code>a :: * -&gt; *</code>. The second part <code>(c a Int)</code> means that c is a type constructor with two parameters where its first parameter is a, which has the type signature we described above. So this gives us <code>c :: (* -&gt; *) -&gt; * -&gt; *</code>. Now, substituting all these in, we get <code>HardB :: (* -&gt; *) -&gt; * -&gt; ((* -&gt; *) -&gt; * -&gt; *) -&gt; *</code>.</p>\n<p>The point of all this is to show that when you see juxtaposition of type constructors (something of the form <code>(a b)</code> in a type signature), it is telling you that the context a is a non-nullary type constructor and b is its first parameter.</p>\n<p>Continue on to <a href=\"http://softwaresimply.blogspot.com/2012/04/ltmt-part-2-monads.html\">Part 2 of the Less Travelled Monad Tutorial</a></p><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/8768401356830813531-5191607664469709891?l=softwaresimply.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>\n<p><a href=\"http://feedads.g.doubleclick.net/~a/okU9u7iFlwCuxlSmJnqGPw-k8Qo/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/okU9u7iFlwCuxlSmJnqGPw-k8Qo/0/di\" border=\"0\" ismap=\"true\" /></a><br />\n<a href=\"http://feedads.g.doubleclick.net/~a/okU9u7iFlwCuxlSmJnqGPw-k8Qo/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/okU9u7iFlwCuxlSmJnqGPw-k8Qo/1/di\" border=\"0\" ismap=\"true\" /></a></p><img src=\"http://feeds.feedburner.com/~r/SoftwareSimply/~4/Ut3h8Hz4vbE\" height=\"1\" width=\"1\" />") (pubDate nil "Tue, 17 Apr 2012 22:49:47 +0000") (author nil "noreply@blogger.com (mightybyte)"))) ("Edward Z. Yang: Use the source, don’t read it" "<div class=\"document\">\n<div class=\"outer-image\"><div class=\"inner-image\"><img src=\"http://blog.ezyang.com/img/use-the-source.png\" alt=\"/img/use-the-source.png\" /></div></div>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/ezyang/~4/XlX16jnGdfw\" height=\"1\" width=\"1\" />" "http://feedproxy.google.com/~r/ezyang/~3/XlX16jnGdfw/" (20365 40869) obsolete 12 nil nil ((title nil "Edward Z. Yang: Use the source, don’t read it") (guid ((isPermaLink . "false")) "http://blog.ezyang.com/?p=6740") (link nil "http://feedproxy.google.com/~r/ezyang/~3/XlX16jnGdfw/") (description nil "<div class=\"document\">\n\n\n\n<div class=\"outer-image\"><div class=\"inner-image\"><img src=\"http://blog.ezyang.com/img/use-the-source.png\" alt=\"/img/use-the-source.png\" /></div></div>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/ezyang/~4/XlX16jnGdfw\" height=\"1\" width=\"1\" />") (pubDate nil "Tue, 17 Apr 2012 16:51:49 +0000"))) ("Yesod Web Framework: Many ways to skin a conduit" "<p>There's more than one way to skin a cat, and certainly more than one way to\nwrite code. The various options can sometimes be confusing. And in the case of\nthe <code>conduit</code> library, there are also some routes that you <i>shouldn't</i> take.\nYou'll see what I mean through the examples.</p><p>For the most part, using existing <code>Source</code>s, <code>Sink</code>s, and <code>Conduit</code>s is\nstraight-forward. The problem comes from writing them in the first place. Let's\ntake a simple example: we want a <code>Source</code> that will enumerate the <code>Int</code>s 1 to\n1000. For testing purposes, we'll connect it to a <code>Sink</code> that sums up all of\nits input. I came up with six different ways to write the <code>Source</code>, though two\nof those are using functions I haven't yet released.</p><pre><code>import Criterion.Main\nimport Data.Conduit\nimport qualified Data.Conduit.List as CL\nimport qualified Data.List\nimport Data.Functor.Identity (runIdentity)\nsourceList, unfold, enumft, yielder, raw, state\n:: Monad m\n=&gt; Int -- ^ stop\n-&gt; Source m Int\nsourceList stop = CL.sourceList [1..stop]\nunfold stop =\nCL.unfold f 1\nwhere\nf i\n| i &gt; stop = Nothing\n| otherwise = Just (i, i + 1)\nenumft stop = CL.enumFromTo 1 stop\nyielder stop =\ngo 1\nwhere\ngo i\n| i &gt; stop = return ()\n| otherwise = do\nyield i\ngo $ i + 1\nraw stop =\ngo 1\nwhere\ngo i\n| i &gt; stop = Done Nothing ()\n| otherwise = HaveOutput (go $ i + 1) (return ()) i\nstate stop =\nsourceState 1 pull\nwhere\npull i\n| i &gt; stop = return StateClosed\n| otherwise = return $ StateOpen (i + 1) i\nmain :: IO ()\nmain = do\nmapM_ test sources\ndefaultMain $ map bench' sources\nwhere\nsink :: Monad m =&gt; Sink Int m Int\nsink = CL.fold (+) 0\nbench' (name, source) = bench name $ whnf (\\i -&gt; runIdentity $ source i $$ sink) 1000\nsources =\n[ (\"sourceList\", sourceList)\n, (\"unfold\", unfold)\n, (\"enumFromTo\", enumft)\n, (\"yield\", yielder)\n, (\"raw\", raw)\n, (\"sourceState\", state)\n]\ntest (name, source) = do\nlet res = runIdentity $ source 1000 $$ sink\nputStrLn $ name ++ \": \" ++ show res</code></pre><p><code>sourceList</code> is probably the approach most of us- myself included- would\nactually use in real life. It let's us take advantage of all of the\nlist-processing functions and special syntax that Haskell already provides.\n<code>unfold</code> and <code>enumFromTo</code> are both new functions for 0.4.2 (in fact, I wrote\nthem for the purpose of this comparison). They correspond very closely to their\n<code>Data.List</code> and <code>Prelude</code> counterparts.</p><p><code>yield</code> is a new option we have starting with <code>conduit</code> 0.4. Due to the unified\ndatatypes, <code>Source</code> has inherited a <code>Monad</code> instance. This allows us to fairly\neasily compose together different <code>Source</code>s, and the <code>yield</code> function provides\nthe simplest of all <code>Source</code>s. In previous versions of <code>conduit</code>, we could have\nused <code>Source</code>'s <code>Monoid</code> instance instead of <code>do</code>-notation.</p><p><code>raw</code> goes directly against the datatypes. I find it interesting that the raw\nversion isn't really much more complicated than <code>yield</code> or <code>sourceState</code>,\nthough you do have to understand some of the extra fields on the constructors.\nFinally, we use <code>sourceState</code>. This is one of the oldest approaches, since this\nfunction has been available since the first release of <code>conduit</code>. I think that\nthis function would compile and run perfectly on conduit 0.0.</p><p>The Criterion benchmarks are very informative. Thanks to Bryan's cool new\nreport, let's look at the graph:</p><img src=\"http://www.yesodweb.com/assets/skinning-conduits/source.png\" /><p><code>unfold</code>, <code>enumFromTo</code>, and <code>raw</code> all perform equally well. <code>sourceList</code> comes\nin behind them: the need to allocate the extra list is the culprit. Behind that\nis <code>yield</code>. To see why, look at the difference between <code>yielder</code> and <code>raw</code>.\nThey're structure almost identically. For the <code>i &gt; stop</code> case, we have `return\n()<code> versus </code>Done Nothing ()`. But in reality, <b>those are the same thing</b>!\n<code>return</code> is defined as <code>Done Nothing</code>.</p><p>The performance gap comes from the <code>otherwise</code> branch. If we fully expand the\n<code>do</code>-notation, we end up with:</p><pre><code>yield i &gt;&gt;= (go $ i + 1)\n==&gt; HaveOutput (Done Nothing ()) (return ()) i &gt;&gt; (go $ i + 1)\n==&gt; HaveOutput (Done Nothing () &gt;&gt; (go $ i + 1)) (return ()) i\n==&gt; HaveOutput (go $ i + 1) (return ()) i</code></pre><p>Which is precisely what <code>raw</code> says. However, without adding aggressive inlining\nto <code>conduit</code>, most of this transformation will occur at runtime, not compile\ntime. Still, the performance gap is relatively minor, and in most real-world\napplications should be dwarfed by the actual computations being performed, so I\nthink the <code>yield</code> approach definitely has merit.</p><p>What might be shocking is the abysmal performance of <code>sourceState</code>. It's a full\n8 times slower than <code>raw</code>! There are two major contributing factors here:</p><ul><li>Each step goes through a monadic bind. This is necessitated by the API of <code>sourceState</code>.</li><li>We have to unwrap the <code>SourceStateResult</code> type.</li></ul><p><code>sourceState</code> was great when it first came out. When <code>conduit</code>'s internals were\nugly and based on mutable variables, it provided a clean, simple approach to\ncreating <code>Source</code>s. However, <code>conduit</code> has moved on: the internals are pure and\neasy to work with and we have alternatives like <code>yield</code> for high-level stuff.\nAnd performance wise, the types now distinguish between pure and impure\nactions. <code>sourceState</code> forces usage of an extra <code>PipeM</code> constructor at each\nstep of output generation, which kills GHC's ability to optimize.</p><p>So our main takeaway should be: don't use <code>sourceState</code>. It's there for API\ncompatibility with older versions, but is no longer the best approach to the\nproblem. Similarly, we can improve upon <code>sourceIO</code>, but we have to be a bit\ncareful here, since we have to ensure that all of our finalizers are called\ncorrectly. Let's take a look at a simple <code>Char</code>-based file source, comparing a\n<code>sourceIO</code> implementation to the raw constructors.</p><pre><code>import Data.Conduit\nimport qualified Data.Conduit.List as CL\nimport Control.Monad.Trans.Resource\nimport System.IO\nimport Control.Monad.IO.Class (liftIO)\nimport Criterion.Main\nsourceFileOld :: MonadResource m =&gt; FilePath -&gt; Source m Char\nsourceFileOld fp = sourceIO\n(openFile fp ReadMode)\nhClose\n(\\h -&gt; liftIO $ do\neof &lt;- hIsEOF h\nif eof\nthen return IOClosed\nelse fmap IOOpen $ hGetChar h)\nsourceFileNew :: MonadResource m =&gt; FilePath -&gt; Source m Char\nsourceFileNew fp = PipeM\n(allocate (openFile fp ReadMode) hClose &gt;&gt;= go)\n(return ())\nwhere\ngo (key, h) =\npull\nwhere\nself = PipeM pull close\npull = do\neof &lt;- liftIO $ hIsEOF h\nif eof\nthen do\nrelease key\nreturn $ Done Nothing ()\nelse do\nc &lt;- liftIO $ hGetChar h\nreturn $ HaveOutput self close c\nclose = release key\nmain :: IO ()\nmain =\ndefaultMain [bench \"old\" $ go sourceFileOld, bench \"new\" $ go sourceFileNew]\nwhere\ngo src = whnfIO $ runResourceT $ src \"source-io.hs\" $$ CL.sinkNull</code></pre><p>The results are much closer here:</p><img src=\"http://www.yesodweb.com/assets/skinning-conduits/source-io.png\" /><p>We're no longer getting the benefit of avoiding monadic binds, since by its\nvery nature this function has to call <code>IO</code> actions constantly. In fact, I\nbelieve that the performance gap here doesn't warrant avoiding <code>sourceIO</code> in\nnormal user code, though it's likely a good idea to look at optimizing the\n<code>Data.Conduit.Binary</code> functions. Perhaps even better is if we can get some\ncombinators that make it easier to express this kind of control flow.</p><p>The story is much the same with <code>Sink</code>s and <code>Conduit</code>s, so I won't bore you\nwith too many details. Let's jump into the code first, and then explain what we\nwant to notice.</p><pre><code>import Criterion.Main\nimport Data.Conduit\nimport qualified Data.Conduit.List as CL\nimport qualified Data.List\nimport Data.Functor.Identity\nmain :: IO ()\nmain = defaultMain\n[ bench \"mapOutput\" $ flip whnf 2 $ \\i -&gt; runIdentity $ mapOutput (* i) source $$ sink\n, bench \"map left\" $ flip whnf 2 $ \\i -&gt; runIdentity $ source $= CL.map (* i) $$ sink\n, bench \"map right\" $ flip whnf 2 $ \\i -&gt; runIdentity $ source $$ CL.map (* i) =$ sink\n, bench \"await-yield left\" $ flip whnf 2 $ \\i -&gt; runIdentity $ source $= awaitYield i $$ sink\n, bench \"await-yield right\" $ flip whnf 2 $ \\i -&gt; runIdentity $ source $$ awaitYield i =$ sink\n]\nwhere\nsource :: Monad m =&gt; Source m Int\nsource = CL.sourceList [1..1000]\nsink :: Monad m =&gt; Sink Int m Int\nsink = CL.fold (+) 0\nawaitYield :: Monad m =&gt; Int -&gt; Conduit Int m Int\nawaitYield i =\nself\nwhere\nself = do\nmx &lt;- await\ncase mx of\nNothing -&gt; return ()\nJust x -&gt; do\nyield $ x * i\nself</code></pre><p>There are five different ways presented to multiple each number in a stream by\n2. <code>CL.map</code> is likely the most obvious choice, since it's a natural analogue to\nthe list-based <code>map</code> function. But we have two different ways to use it: we can\neither left-fuse the source to the conduit, and then connect the new source to\nthe sink, or right-fuse the conduit to the sink, and connect the source to the\nnew sink.</p><p>We also have an <code>awaitYield</code> function, which uses the <code>await</code> and <code>yield</code>\nfunctions and leverages the <code>Monad</code> instance of <code>Conduit</code>. Like <code>map</code>, we have\nboth a left and a right version.</p><p>We also have a <code>mapOutput</code> function. In that case, we're not actually using a\n<code>Conduit</code> at all. Instead, we're modifying the output values being produced by\nthe source directly, without needing to pipe through an extra component. Let's\nsee our benchmark results:</p><img src=\"http://www.yesodweb.com/assets/skinning-conduits/conduit.png\" /><p>There are three things worth noticing:</p><ol><li>Like previously, the high-level approach (using <code>await</code> and <code>yield</code>) was slower than using the more highly optimized function from <code>Data.Conduit.List</code>.</li><li>There no clear winner between left and right fusing.</li><li><code>mapOutput</code> is significantly faster than using a <code>Conduit</code>. The reason is that we're able to eliminate an entire extra <code>Pipe</code> in the pipeline.</li></ol><p><code>mapOutput</code> will not be an option in the general case. You're restricted in a number of ways:</p><ul><li>It can only be applied to a <code>Source</code>, not a <code>Sink</code>.</li><li>You have to have transformations which produce one output for one input.</li><li>You can perform any monadic actions.</li></ul><p>However, if your use case matches, <code>mapOutput</code> can be a very convenient optimization.</p>" "http://www.yesodweb.com/blog/2012/04/skinning-conduits" (20365 37820) obsolete 13 nil nil ((title nil "Yesod Web Framework: Many ways to skin a conduit") (guid ((isPermaLink . "true")) "http://www.yesodweb.com/blog/2012/04/skinning-conduits") (link nil "http://www.yesodweb.com/blog/2012/04/skinning-conduits") (description nil "<p>There's more than one way to skin a cat, and certainly more than one way to\nwrite code. The various options can sometimes be confusing. And in the case of\nthe <code>conduit</code> library, there are also some routes that you <i>shouldn't</i> take.\nYou'll see what I mean through the examples.</p><p>For the most part, using existing <code>Source</code>s, <code>Sink</code>s, and <code>Conduit</code>s is\nstraight-forward. The problem comes from writing them in the first place. Let's\ntake a simple example: we want a <code>Source</code> that will enumerate the <code>Int</code>s 1 to\n1000. For testing purposes, we'll connect it to a <code>Sink</code> that sums up all of\nits input. I came up with six different ways to write the <code>Source</code>, though two\nof those are using functions I haven't yet released.</p><pre><code>import Criterion.Main\nimport Data.Conduit\nimport qualified Data.Conduit.List as CL\nimport qualified Data.List\nimport Data.Functor.Identity (runIdentity)\n\nsourceList, unfold, enumft, yielder, raw, state\n    :: Monad m\n    =&gt; Int -- ^ stop\n    -&gt; Source m Int\n\nsourceList stop = CL.sourceList [1..stop]\n\nunfold stop =\n    CL.unfold f 1\n  where\n    f i\n        | i &gt; stop = Nothing\n        | otherwise = Just (i, i + 1)\n\nenumft stop = CL.enumFromTo 1 stop\n\nyielder stop =\n    go 1\n  where\n    go i\n        | i &gt; stop = return ()\n        | otherwise = do\n            yield i\n            go $ i + 1\n\nraw stop =\n    go 1\n  where\n    go i\n        | i &gt; stop = Done Nothing ()\n        | otherwise = HaveOutput (go $ i + 1) (return ()) i\n\nstate stop =\n    sourceState 1 pull\n  where\n    pull i\n        | i &gt; stop = return StateClosed\n        | otherwise = return $ StateOpen (i + 1) i\n\nmain :: IO ()\nmain = do\n    mapM_ test sources\n    defaultMain $ map bench' sources\n  where\n    sink :: Monad m =&gt; Sink Int m Int\n    sink = CL.fold (+) 0\n\n    bench' (name, source) = bench name $ whnf (\\i -&gt; runIdentity $ source i $$ sink) 1000\n\n    sources =\n        [ (\"sourceList\", sourceList)\n        , (\"unfold\", unfold)\n        , (\"enumFromTo\", enumft)\n        , (\"yield\", yielder)\n        , (\"raw\", raw)\n        , (\"sourceState\", state)\n        ]\n\n    test (name, source) = do\n        let res = runIdentity $ source 1000 $$ sink\n        putStrLn $ name ++ \": \" ++ show res</code></pre><p><code>sourceList</code> is probably the approach most of us- myself included- would\nactually use in real life. It let's us take advantage of all of the\nlist-processing functions and special syntax that Haskell already provides.\n<code>unfold</code> and <code>enumFromTo</code> are both new functions for 0.4.2 (in fact, I wrote\nthem for the purpose of this comparison). They correspond very closely to their\n<code>Data.List</code> and <code>Prelude</code> counterparts.</p><p><code>yield</code> is a new option we have starting with <code>conduit</code> 0.4. Due to the unified\ndatatypes, <code>Source</code> has inherited a <code>Monad</code> instance. This allows us to fairly\neasily compose together different <code>Source</code>s, and the <code>yield</code> function provides\nthe simplest of all <code>Source</code>s. In previous versions of <code>conduit</code>, we could have\nused <code>Source</code>'s <code>Monoid</code> instance instead of <code>do</code>-notation.</p><p><code>raw</code> goes directly against the datatypes. I find it interesting that the raw\nversion isn't really much more complicated than <code>yield</code> or <code>sourceState</code>,\nthough you do have to understand some of the extra fields on the constructors.\nFinally, we use <code>sourceState</code>. This is one of the oldest approaches, since this\nfunction has been available since the first release of <code>conduit</code>. I think that\nthis function would compile and run perfectly on conduit 0.0.</p><p>The Criterion benchmarks are very informative. Thanks to Bryan's cool new\nreport, let's look at the graph:</p><img src=\"http://www.yesodweb.com/assets/skinning-conduits/source.png\" /><p><code>unfold</code>, <code>enumFromTo</code>, and <code>raw</code> all perform equally well. <code>sourceList</code> comes\nin behind them: the need to allocate the extra list is the culprit. Behind that\nis <code>yield</code>. To see why, look at the difference between <code>yielder</code> and <code>raw</code>.\nThey're structure almost identically. For the <code>i &gt; stop</code> case, we have `return\n()<code> versus </code>Done Nothing ()`. But in reality, <b>those are the same thing</b>!\n<code>return</code> is defined as <code>Done Nothing</code>.</p><p>The performance gap comes from the <code>otherwise</code> branch. If we fully expand the\n<code>do</code>-notation, we end up with:</p><pre><code>yield i &gt;&gt;= (go $ i + 1)\n==&gt; HaveOutput (Done Nothing ()) (return ()) i &gt;&gt; (go $ i + 1)\n==&gt; HaveOutput (Done Nothing () &gt;&gt; (go $ i + 1)) (return ()) i\n==&gt; HaveOutput (go $ i + 1) (return ()) i</code></pre><p>Which is precisely what <code>raw</code> says. However, without adding aggressive inlining\nto <code>conduit</code>, most of this transformation will occur at runtime, not compile\ntime. Still, the performance gap is relatively minor, and in most real-world\napplications should be dwarfed by the actual computations being performed, so I\nthink the <code>yield</code> approach definitely has merit.</p><p>What might be shocking is the abysmal performance of <code>sourceState</code>. It's a full\n8 times slower than <code>raw</code>! There are two major contributing factors here:</p><ul><li>Each step goes through a monadic bind. This is necessitated by the API of <code>sourceState</code>.</li><li>We have to unwrap the <code>SourceStateResult</code> type.</li></ul><p><code>sourceState</code> was great when it first came out. When <code>conduit</code>'s internals were\nugly and based on mutable variables, it provided a clean, simple approach to\ncreating <code>Source</code>s. However, <code>conduit</code> has moved on: the internals are pure and\neasy to work with and we have alternatives like <code>yield</code> for high-level stuff.\nAnd performance wise, the types now distinguish between pure and impure\nactions. <code>sourceState</code> forces usage of an extra <code>PipeM</code> constructor at each\nstep of output generation, which kills GHC's ability to optimize.</p><p>So our main takeaway should be: don't use <code>sourceState</code>. It's there for API\ncompatibility with older versions, but is no longer the best approach to the\nproblem. Similarly, we can improve upon <code>sourceIO</code>, but we have to be a bit\ncareful here, since we have to ensure that all of our finalizers are called\ncorrectly. Let's take a look at a simple <code>Char</code>-based file source, comparing a\n<code>sourceIO</code> implementation to the raw constructors.</p><pre><code>import Data.Conduit\nimport qualified Data.Conduit.List as CL\nimport Control.Monad.Trans.Resource\nimport System.IO\nimport Control.Monad.IO.Class (liftIO)\nimport Criterion.Main\n\nsourceFileOld :: MonadResource m =&gt; FilePath -&gt; Source m Char\nsourceFileOld fp = sourceIO\n    (openFile fp ReadMode)\n    hClose\n    (\\h -&gt; liftIO $ do\n        eof &lt;- hIsEOF h\n        if eof\n            then return IOClosed\n            else fmap IOOpen $ hGetChar h)\n\nsourceFileNew :: MonadResource m =&gt; FilePath -&gt; Source m Char\nsourceFileNew fp = PipeM\n    (allocate (openFile fp ReadMode) hClose &gt;&gt;= go)\n    (return ())\n  where\n    go (key, h) =\n        pull\n      where\n        self = PipeM pull close\n        pull = do\n            eof &lt;- liftIO $ hIsEOF h\n            if eof\n                then do\n                    release key\n                    return $ Done Nothing ()\n                else do\n                    c &lt;- liftIO $ hGetChar h\n                    return $ HaveOutput self close c\n        close = release key\n\nmain :: IO ()\nmain =\n    defaultMain [bench \"old\" $ go sourceFileOld, bench \"new\" $ go sourceFileNew]\n  where\n    go src = whnfIO $ runResourceT $ src \"source-io.hs\" $$ CL.sinkNull</code></pre><p>The results are much closer here:</p><img src=\"http://www.yesodweb.com/assets/skinning-conduits/source-io.png\" /><p>We're no longer getting the benefit of avoiding monadic binds, since by its\nvery nature this function has to call <code>IO</code> actions constantly. In fact, I\nbelieve that the performance gap here doesn't warrant avoiding <code>sourceIO</code> in\nnormal user code, though it's likely a good idea to look at optimizing the\n<code>Data.Conduit.Binary</code> functions. Perhaps even better is if we can get some\ncombinators that make it easier to express this kind of control flow.</p><p>The story is much the same with <code>Sink</code>s and <code>Conduit</code>s, so I won't bore you\nwith too many details. Let's jump into the code first, and then explain what we\nwant to notice.</p><pre><code>import Criterion.Main\nimport Data.Conduit\nimport qualified Data.Conduit.List as CL\nimport qualified Data.List\nimport Data.Functor.Identity\n\nmain :: IO ()\nmain = defaultMain\n    [ bench \"mapOutput\" $ flip whnf 2 $ \\i -&gt; runIdentity $ mapOutput (* i) source $$ sink\n    , bench \"map left\" $ flip whnf 2 $ \\i -&gt; runIdentity $ source $= CL.map (* i) $$ sink\n    , bench \"map right\" $ flip whnf 2 $ \\i -&gt; runIdentity $ source $$ CL.map (* i) =$ sink\n    , bench \"await-yield left\" $ flip whnf 2 $ \\i -&gt; runIdentity $ source $= awaitYield i $$ sink\n    , bench \"await-yield right\" $ flip whnf 2 $ \\i -&gt; runIdentity $ source $$ awaitYield i =$ sink\n    ]\n  where\n    source :: Monad m =&gt; Source m Int\n    source = CL.sourceList [1..1000]\n\n    sink :: Monad m =&gt; Sink Int m Int\n    sink = CL.fold (+) 0\n\n    awaitYield :: Monad m =&gt; Int -&gt; Conduit Int m Int\n    awaitYield i =\n        self\n      where\n        self = do\n            mx &lt;- await\n            case mx of\n                Nothing -&gt; return ()\n                Just x -&gt; do\n                    yield $ x * i\n                    self</code></pre><p>There are five different ways presented to multiple each number in a stream by\n2. <code>CL.map</code> is likely the most obvious choice, since it's a natural analogue to\nthe list-based <code>map</code> function. But we have two different ways to use it: we can\neither left-fuse the source to the conduit, and then connect the new source to\nthe sink, or right-fuse the conduit to the sink, and connect the source to the\nnew sink.</p><p>We also have an <code>awaitYield</code> function, which uses the <code>await</code> and <code>yield</code>\nfunctions and leverages the <code>Monad</code> instance of <code>Conduit</code>. Like <code>map</code>, we have\nboth a left and a right version.</p><p>We also have a <code>mapOutput</code> function. In that case, we're not actually using a\n<code>Conduit</code> at all. Instead, we're modifying the output values being produced by\nthe source directly, without needing to pipe through an extra component. Let's\nsee our benchmark results:</p><img src=\"http://www.yesodweb.com/assets/skinning-conduits/conduit.png\" /><p>There are three things worth noticing:</p><ol><li>Like previously, the high-level approach (using <code>await</code> and <code>yield</code>) was slower than using the more highly optimized function from <code>Data.Conduit.List</code>.</li><li>There no clear winner between left and right fusing.</li><li><code>mapOutput</code> is significantly faster than using a <code>Conduit</code>. The reason is that we're able to eliminate an entire extra <code>Pipe</code> in the pipeline.</li></ol><p><code>mapOutput</code> will not be an option in the general case. You're restricted in a number of ways:</p><ul><li>It can only be applied to a <code>Source</code>, not a <code>Sink</code>.</li><li>You have to have transformations which produce one output for one input.</li><li>You can perform any monadic actions.</li></ul><p>However, if your use case matches, <code>mapOutput</code> can be a very convenient optimization.</p>") (pubDate nil "Tue, 17 Apr 2012 16:01:00 +0000"))) ("Tom Moertel: Test like you're betting for your life" "<p>In software, as in life, every problem you solve is actually part of a\nlarger problem, an optimization problem in which you are trying to\nsqueeze as much as you can from a single scarce resource: <em>yourself.</em>\nEvery hour you spend solving one problem is an hour you no longer have\nto solve other problems.  At the end of your life, when you receive\nthe final tally of how you spent your scant allotment of hours, you\nprobably don’t want to discover that you wasted most of them on\nproblems that didn’t matter.</p>\n<p>Which brings us to David Heinemeier Hansson’s recent post\non <a href=\"http://37signals.com/svn/posts/3159-testing-like-the-tsa\">Testing like the\n<span class=\"caps\">TSA</span></a>, in\nwhich he advises against wasting your time writing tests that are\nunlikely to find problems.  He’s right.</p>\n<p>Whether you realize it or not, every time you write a test, you are\nplacing a bet.  You are betting that the test’s expected payoff will\noutweigh the test’s expected opportunity cost.  Instead of writing\nthat test, would you be better off doing something else? For every\ntest you write, you are betting that the answer is no.</p>\n<p>But being right about this answer – reliably right – is tricky.  It\nrequires that you have a good understanding of which bets are likely\nto pay off and which are not, which are cheap to place and which are\nexpensive. In other words, it requires that your internal probability\ndistributions be well calibrated for the kind of code you write and\nthe environment in which you code.</p>\n<p>New programmers, unfortunately, are poorly calibrated.  They have\nlittle experience to draw upon and end up imitating other people’s\nprobability distributions.  These they pick up, for better or worse,\nfrom folklore – best practices, development methods, expert opinion,\nthe guy down the hall. As a result, new programmers concentrate their\nnascent probability distributions around the things they learn first\nand, consequently, over-bet on those things.</p>\n<p>But even the best programmers over-bet on the things they know.\nThat’s because they under-bet in their blind spots, and we all have\nblind spots.</p>\n<p>In particular, <em>we never bet on the things we don’t know.</em> If all you\nknow about getting your code right is <a href=\"http://en.wikipedia.org/wiki/Test-driven_development\"><span class=\"caps\">TDD</span></a>, you’ll never bet on types\nor proofs or constructive correctness because you don’t know how to\nplace those bets.  But those bets are often dirt cheap and pay in\nspades.  If you’re not betting on them at least some of the time,\nwhatever you <em>are</em> betting on probably costs more and pays less.  You\ncould be doing better.</p>\n<p>But to do better, you have to know what other bets are out there. You\nhave to know what it costs to place them and how likely they are to\npay off.  To gain this knowledge, you’ll have to go beyond what is\ncomfortable; you’ll have to explore those dark, distant parts of the\ncasino and place some trial bets.</p>\n<p>If you’ve never written a unit test, write some.  If you always write\nyour tests after your main logic, write them before.  If you always\nwrite them before, write them after.  If you’ve never done\nQuickCheck-like property checking, do it.  If you don’t know how to\nprove things about your code, write some proofs.  If you don’t know\nhow to represent important properties as types so that your computer\nwill prove them for you, now’s the time to learn.  If you don’t know\nhow to design APIs so that certain classes of problems become\nimpossible, start practicing.</p>\n<p>The more bets you know how to place, the better you’ll place your\nbets.  And the better your bets, the more problems you’ll solve,\nproblems that actually matter, before you run of out of time.</p>\n<p>Remember: Your supply of hours is finite. If you care about making those hours matter, learn how to bet wisely. Both in software, and in life.</p><div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/TomMoertelsBlog?a=zv78bI7ugRU:_JdFtxJ8e38:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/TomMoertelsBlog?d=yIl2AUoC8zA\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/TomMoertelsBlog?a=zv78bI7ugRU:_JdFtxJ8e38:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/TomMoertelsBlog?i=zv78bI7ugRU:_JdFtxJ8e38:F7zBnMyn0Lo\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/TomMoertelsBlog?a=zv78bI7ugRU:_JdFtxJ8e38:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/TomMoertelsBlog?d=qj6IDK7rITs\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/TomMoertelsBlog?a=zv78bI7ugRU:_JdFtxJ8e38:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/TomMoertelsBlog?i=zv78bI7ugRU:_JdFtxJ8e38:gIN9vFwOqvQ\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/TomMoertelsBlog?a=zv78bI7ugRU:_JdFtxJ8e38:-BTjWOF_DHI\"><img src=\"http://feeds.feedburner.com/~ff/TomMoertelsBlog?i=zv78bI7ugRU:_JdFtxJ8e38:-BTjWOF_DHI\" border=\"0\" /></a>\n</div><img src=\"http://feeds.feedburner.com/~r/TomMoertelsBlog/~4/zv78bI7ugRU\" height=\"1\" width=\"1\" />" "http://feedproxy.google.com/~r/TomMoertelsBlog/~3/zv78bI7ugRU/test-like-youre-betting-for-your-life" (20363 42450) obsolete 14 nil nil ((title nil "Tom Moertel: Test like you're betting for your life") (guid ((isPermaLink . "false")) "urn:uuid:479bf90f-b6d6-4ca2-97f6-a6486bdf5146") (link nil "http://feedproxy.google.com/~r/TomMoertelsBlog/~3/zv78bI7ugRU/test-like-youre-betting-for-your-life") (description nil "<p>In software, as in life, every problem you solve is actually part of a\nlarger problem, an optimization problem in which you are trying to\nsqueeze as much as you can from a single scarce resource: <em>yourself.</em>\nEvery hour you spend solving one problem is an hour you no longer have\nto solve other problems.  At the end of your life, when you receive\nthe final tally of how you spent your scant allotment of hours, you\nprobably don’t want to discover that you wasted most of them on\nproblems that didn’t matter.</p>\n\n\n	<p>Which brings us to David Heinemeier Hansson’s recent post\non <a href=\"http://37signals.com/svn/posts/3159-testing-like-the-tsa\">Testing like the\n<span class=\"caps\">TSA</span></a>, in\nwhich he advises against wasting your time writing tests that are\nunlikely to find problems.  He’s right.</p>\n\n\n	<p>Whether you realize it or not, every time you write a test, you are\nplacing a bet.  You are betting that the test’s expected payoff will\noutweigh the test’s expected opportunity cost.  Instead of writing\nthat test, would you be better off doing something else? For every\ntest you write, you are betting that the answer is no.</p>\n\n\n	<p>But being right about this answer – reliably right – is tricky.  It\nrequires that you have a good understanding of which bets are likely\nto pay off and which are not, which are cheap to place and which are\nexpensive. In other words, it requires that your internal probability\ndistributions be well calibrated for the kind of code you write and\nthe environment in which you code.</p>\n\n\n	<p>New programmers, unfortunately, are poorly calibrated.  They have\nlittle experience to draw upon and end up imitating other people’s\nprobability distributions.  These they pick up, for better or worse,\nfrom folklore – best practices, development methods, expert opinion,\nthe guy down the hall. As a result, new programmers concentrate their\nnascent probability distributions around the things they learn first\nand, consequently, over-bet on those things.</p>\n\n\n	<p>But even the best programmers over-bet on the things they know.\nThat’s because they under-bet in their blind spots, and we all have\nblind spots.</p>\n\n\n	<p>In particular, <em>we never bet on the things we don’t know.</em> If all you\nknow about getting your code right is <a href=\"http://en.wikipedia.org/wiki/Test-driven_development\"><span class=\"caps\">TDD</span></a>, you’ll never bet on types\nor proofs or constructive correctness because you don’t know how to\nplace those bets.  But those bets are often dirt cheap and pay in\nspades.  If you’re not betting on them at least some of the time,\nwhatever you <em>are</em> betting on probably costs more and pays less.  You\ncould be doing better.</p>\n\n\n	<p>But to do better, you have to know what other bets are out there. You\nhave to know what it costs to place them and how likely they are to\npay off.  To gain this knowledge, you’ll have to go beyond what is\ncomfortable; you’ll have to explore those dark, distant parts of the\ncasino and place some trial bets.</p>\n\n\n	<p>If you’ve never written a unit test, write some.  If you always write\nyour tests after your main logic, write them before.  If you always\nwrite them before, write them after.  If you’ve never done\nQuickCheck-like property checking, do it.  If you don’t know how to\nprove things about your code, write some proofs.  If you don’t know\nhow to represent important properties as types so that your computer\nwill prove them for you, now’s the time to learn.  If you don’t know\nhow to design APIs so that certain classes of problems become\nimpossible, start practicing.</p>\n\n\n	<p>The more bets you know how to place, the better you’ll place your\nbets.  And the better your bets, the more problems you’ll solve,\nproblems that actually matter, before you run of out of time.</p>\n\n\n	<p>Remember: Your supply of hours is finite. If you care about making those hours matter, learn how to bet wisely. Both in software, and in life.</p><div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/TomMoertelsBlog?a=zv78bI7ugRU:_JdFtxJ8e38:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/TomMoertelsBlog?d=yIl2AUoC8zA\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/TomMoertelsBlog?a=zv78bI7ugRU:_JdFtxJ8e38:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/TomMoertelsBlog?i=zv78bI7ugRU:_JdFtxJ8e38:F7zBnMyn0Lo\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/TomMoertelsBlog?a=zv78bI7ugRU:_JdFtxJ8e38:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/TomMoertelsBlog?d=qj6IDK7rITs\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/TomMoertelsBlog?a=zv78bI7ugRU:_JdFtxJ8e38:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/TomMoertelsBlog?i=zv78bI7ugRU:_JdFtxJ8e38:gIN9vFwOqvQ\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/TomMoertelsBlog?a=zv78bI7ugRU:_JdFtxJ8e38:-BTjWOF_DHI\"><img src=\"http://feeds.feedburner.com/~ff/TomMoertelsBlog?i=zv78bI7ugRU:_JdFtxJ8e38:-BTjWOF_DHI\" border=\"0\" /></a>\n</div><img src=\"http://feeds.feedburner.com/~r/TomMoertelsBlog/~4/zv78bI7ugRU\" height=\"1\" width=\"1\" />") (pubDate nil "Mon, 16 Apr 2012 04:53:38 +0000"))) ("Alessandro Vermeulen: Software and Building Architecture Compared" "<p>People tend to only understand what they can see. For most people it is\ndifficult to grasp more abstract matters without somehow visualizing them.\nSoftware is an example of such an abstract matter. Let us visit the process of\ndeveloping software through a comparison with developing a building.</p>\n<p>Everyone knows that in order to build something you will have to think about it\nfirst. Just putting some sticks together as you did when you were playing\noutside does not work very well for a skyscraper. For any construction you will\nneed an architecture to design it first. After your architect has designed the\nproject is has to go through some checks as to whether you will have enough\nsunlight in the house, enough ventilation and perhaps most importantly that the\nstructure will not come down on itself! Ideally you only start building when\nboth the architect, the contractor and yourself are satisfied that the building\nmeets all requirements. Our knowledge on the construction of buildings has been\ngrowing since we first exited our caves and thus we generally can found our\ndecisions during each step of the process on this knowledge.</p>\n<p>Most people have not had the experience of just building some software that\neventually crashes because they did not think it through, it is not something\nyou do as a kid when playing outside. This makes things a bit more complicated\nto imagine, but the development of software is quite analogous to the\ndevelopment of some construction.</p>\n<p>Coming up with a program is even more complicated than building a construction.\nIt comes with all the issues mentioned above when creating a building. It first\nhas to be designed, then it has to be passed along to someone leading the\ndevelopers to check for practicality and ideally usability. After that it can be\npassed to the developers for the writing proper. The issue at hand being,\nhowever, is that in the world of software wishes from the client and the\nenvironment change continuously during the project. This causes an oscillation\nbetween the stages mentioned above creating long delays before the final product\nis finished. To make matters worse, the final product will not be the perfect\nfit to the requirements due to the delays.</p>\n<p>Why does this happen, you wonder? There are several reasons. For starters the\nart of programming is still very young, learning from our mistakes. Even the\nRomans had some mishaps when building their famous aqueducts. This entails that\nwe still lack the experience to found our design decisions on. Another reason is\nthat demands and wishes change rapidly in our new hyper-dynamic society. When\nyou set off on constructing a building you have a very good idea of why you want\nto do that, what it will take and what your usage of the building will be.\nSoftware projects are generally given less consideration.</p>\n<p>A very contributing factor to the complexity of creating a software product is\nthe fact that most cases the software has to integrate ‘perfectly’ in the\nphysical process of the client, where most do not fully grasp their own process,\nand that it has to communicate with other software products. These other\nproducts might not be designed with the new scenario in mind and thus either\nneed adjustment or another way around it has to be found.</p>\n<p>So, this is why coming up with a software product is just as difficult as\nconstructing a building, and is in most cases even harder. The next time someone\nasks why it takes so long to write (good) software you just ask how long it took\nto design his custom made house. :)</p>" "http://alessandrovermeulen.me/2012/04/14/software-and-building-architecture-compared/" (20361 26604) obsolete 15 nil nil ((title nil "Alessandro Vermeulen: Software and Building Architecture Compared") (guid ((isPermaLink . "false")) "http://alessandrovermeulen.me/2012/04/14/software-and-building-architecture-compared") (link nil "http://alessandrovermeulen.me/2012/04/14/software-and-building-architecture-compared/") (description nil "<p>People tend to only understand what they can see. For most people it is\ndifficult to grasp more abstract matters without somehow visualizing them.\nSoftware is an example of such an abstract matter. Let us visit the process of\ndeveloping software through a comparison with developing a building.</p>\n\n\n\n\n<p>Everyone knows that in order to build something you will have to think about it\nfirst. Just putting some sticks together as you did when you were playing\noutside does not work very well for a skyscraper. For any construction you will\nneed an architecture to design it first. After your architect has designed the\nproject is has to go through some checks as to whether you will have enough\nsunlight in the house, enough ventilation and perhaps most importantly that the\nstructure will not come down on itself! Ideally you only start building when\nboth the architect, the contractor and yourself are satisfied that the building\nmeets all requirements. Our knowledge on the construction of buildings has been\ngrowing since we first exited our caves and thus we generally can found our\ndecisions during each step of the process on this knowledge.</p>\n\n<p>Most people have not had the experience of just building some software that\neventually crashes because they did not think it through, it is not something\nyou do as a kid when playing outside. This makes things a bit more complicated\nto imagine, but the development of software is quite analogous to the\ndevelopment of some construction.</p>\n\n<p>Coming up with a program is even more complicated than building a construction.\nIt comes with all the issues mentioned above when creating a building. It first\nhas to be designed, then it has to be passed along to someone leading the\ndevelopers to check for practicality and ideally usability. After that it can be\npassed to the developers for the writing proper. The issue at hand being,\nhowever, is that in the world of software wishes from the client and the\nenvironment change continuously during the project. This causes an oscillation\nbetween the stages mentioned above creating long delays before the final product\nis finished. To make matters worse, the final product will not be the perfect\nfit to the requirements due to the delays.</p>\n\n<p>Why does this happen, you wonder? There are several reasons. For starters the\nart of programming is still very young, learning from our mistakes. Even the\nRomans had some mishaps when building their famous aqueducts. This entails that\nwe still lack the experience to found our design decisions on. Another reason is\nthat demands and wishes change rapidly in our new hyper-dynamic society. When\nyou set off on constructing a building you have a very good idea of why you want\nto do that, what it will take and what your usage of the building will be.\nSoftware projects are generally given less consideration.</p>\n\n<p>A very contributing factor to the complexity of creating a software product is\nthe fact that most cases the software has to integrate ‘perfectly’ in the\nphysical process of the client, where most do not fully grasp their own process,\nand that it has to communicate with other software products. These other\nproducts might not be designed with the new scenario in mind and thus either\nneed adjustment or another way around it has to be found.</p>\n\n<p>So, this is why coming up with a software product is just as difficult as\nconstructing a building, and is in most cases even harder. The next time someone\nasks why it takes so long to write (good) software you just ask how long it took\nto design his custom made house. :)</p>") (pubDate nil "Sat, 14 Apr 2012 12:05:00 +0000"))) ("Ken T Takusagawa: [mvwshaxw] Reserving identifiers in a scope" "<p>The Perl sort function is special, optionally taking a comparison block within which the variables a and b are special.  E.g., <code>sort { $hash{$a} &lt;=&gt; $hash{$b} } (keys %hash)</code>.</p> <p>Create a systematic or general-purpose mechanism for this, not necessarily for Perl.  The idea is a lambda, but not having to declare the arguments to the lambda function: they are already chosen for you.  The goal is to type less (at the cost of having to memorize what the special argument names are).</p><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/6757805-5702831264867239657?l=kenta.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>" "http://kenta.blogspot.com/2012/04/mvwshaxw-reserving-identifiers-in-scope.html" (20359 22740) obsolete 16 nil nil ((title nil "Ken T Takusagawa: [mvwshaxw] Reserving identifiers in a scope") (guid ((isPermaLink . "false")) "tag:blogger.com,1999:blog-6757805.post-5702831264867239657") (link nil "http://kenta.blogspot.com/2012/04/mvwshaxw-reserving-identifiers-in-scope.html") (description nil "<p>The Perl sort function is special, optionally taking a comparison block within which the variables a and b are special.  E.g., <code>sort { $hash{$a} &lt;=&gt; $hash{$b} } (keys %hash)</code>.</p> <p>Create a systematic or general-purpose mechanism for this, not necessarily for Perl.  The idea is a lambda, but not having to declare the arguments to the lambda function: they are already chosen for you.  The goal is to type less (at the cost of having to memorize what the special argument names are).</p><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/6757805-5702831264867239657?l=kenta.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>") (pubDate nil "Thu, 12 Apr 2012 22:36:04 +0000") (author nil "noreply@blogger.com (Ken)"))) ("Darcs: darcs hacking sprint 7 report" "This year, Darcs had a sprint in two phases.  It started with a one-day pre-sprint in Cordoba, Argentina (9 March), and then moved over to Southampton, England for a 3 day hackfest at the end of the month (30 March to 1 April). <br /><div><br /></div><div>No Darcs hackers being shipped between the two sprints though, but we did have one visitor from afar.   Potential GSoC student Bhimanavajjula Sri Rama Krishna (BSRK) Aditya flew the 9 hours between India and England to join us for the sprint.  It was great to meet him in person!<br /><br /></div><h2>Presprint</h2><div><br />We think that Darcs could make a great project for people get started with some practical Haskell hacking. It's a bit of a fixer-upper, but that also means there's a lot of difference to make!</div><div><br /></div><div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://3.bp.blogspot.com/-ndjPO7adt3k/T3yjFCWBzBI/AAAAAAAAAhc/NuUvIKWfxpo/s1600/sprint-cordoba.jpg\"><img src=\"http://3.bp.blogspot.com/-ndjPO7adt3k/T3yjFCWBzBI/AAAAAAAAAhc/NuUvIKWfxpo/s320/sprint-cordoba.jpg\" height=\"268\" border=\"0\" width=\"320\" /></a></div><div><br /></div><div>Darcs veteran (and weekly news editor) Guillaume Hoffman was joined by two students, Miguel Pagano and <span style=\"font-family: inherit; white-space: pre-wrap;\">Mathías E</span>tcheverry,<span style=\"font-family: inherit; white-space: pre-wrap;\"> who within a day and with no prior knowledge of the Darcs code base were able to make the following contributions:</span></div><div><ul><li><span style=\"white-space: pre-wrap;\">bringing the <a href=\"http://bugs.darcs.net/issue1812\">darcs backup filename conventions</a> in line with CVS conventions, eg. ./foo.txt.~1~ rather than the unwieldy ./foo</span>-darcs-backup0 [Miguel]</li><li>making the darcs-test harness respect the -fcurl cabal flag [Miguel]</li><li>investigating a wishlist item to<a href=\"http://bugs.darcs.net/issue1254\"> print filenames under large hunks</a> in darcs record, alas, not as “ProbablyEasy” as we'd expected [<span style=\"white-space: pre-wrap;\">Mathías]</span></li></ul><div><span style=\"white-space: pre-wrap;\">In between getting Miguel and </span><span style=\"white-space: pre-wrap;\">Mathías, Guillaume also got a chance to make some improvements himself, namely:</span></div></div><div><ul><li><span style=\"font-family: inherit; white-space: pre-wrap;\">adding the --unified flag to record, revert, amend-record</span></li></ul></div>Thanks to Miguel and Mathías for joining us at the sprint. Hopefully we'll be able to repeat the cycle of Darcs hacking with them. And since little one-day mini sprints like the one Guillaume started are so easy to organise, there's a chance we'll be seeing more of these in the future.<br /><br /><h2>Summer of Code</h2><div><br />If he participates in this year's summer of code, Aditya will be helping us to integrate the long-promised <a href=\"http://wiki.darcs.net/GSoC/2012-PatchIndex\">patch index</a> optimisation into Darcs. The patch index was originally developed by Benedikt Schmidt. It caches a mapping from filenames to the patches that affect those files, which saves a lot of work for commands like <span style=\"font-family: 'Courier New',Courier,monospace;\">darcs changes</span><span style=\"font-family: inherit;\"> or </span><span style=\"font-family: 'Courier New',Courier,monospace;\">darcs annotate</span><span style=\"font-family: inherit;\">, commands that would otherwise have to trawl through the entire darcs history</span></div><div><br /></div><div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://4.bp.blogspot.com/-WBXwzxzZ3Bo/T3yTlqF3q9I/AAAAAAAAAhM/5uCNLbg0OvQ/s1600/gsoc-aditya.jpg\"><img src=\"http://4.bp.blogspot.com/-WBXwzxzZ3Bo/T3yTlqF3q9I/AAAAAAAAAhM/5uCNLbg0OvQ/s320/gsoc-aditya.jpg\" height=\"213\" border=\"0\" width=\"320\" /></a></div><div><br /></div><div>Over the sprint, Aditya rebased the patch index code from Benedikt onto the current Darcs mainline.  He studied the code a bit to understand what exactly was behind the index, and started working on implementing the integration with commands like darcs changes.  He also got to explore a bit of Darcs internals, notably how Darcs makes use of matchers like 'date \"before tea time\"' to filter through patches.</div><div class=\"p1\"><br /></div><div class=\"p1\">One very concrete result of the sprint, we now have prototype of a patch-index-enabled <span style=\"font-family: 'Courier New',Courier,monospace;\">darcs changes.</span>If you can't wait to try it out, you could try applying the latest version of <a href=\"http://bugs.darcs.net/patch173\">his patch</a>.<br /><br /></div><h2>Filepaths: bytes or code points?</h2><div><div><i>Argh, Unicode, Argh</i></div><div class=\"p1\"></div></div><div><br /></div><div>The main thing Ganesh worked on was fixing a problem with character set handling that has been outstanding for several months. The underlying problem was caused by recent versions of GHC changing the way it handles filenames on Linux; previously it treated them as a stream of raw bytes, but now it translates them into strings using an encoding. The eventual workaround was very short - explicitly set a global at the beginning of darcs, telling the GHC library to use no encoding at all - but it took a lot of investigation to get to that point, and the end result isn't very satisfactory for darcs as a library.<br /><br /></div><h2>Darcs 2.8 Release Candidate 1</h2><br />Florent and Ganesh also worked on getting a 2.8 release candidate ready.  We'd love any feedback you could give us on it, so if you're up for a little beta testing:<br /><div><br /></div><pre>cabal update<br />cabal install darcs-beta<br /></pre><br /><div>The character set handling problem with GHC 7.2/7.4 was the main blocker for a release, so hopefully we can get the real release out <span style=\"text-align: center;\">pretty soon now.</span><br /><div><div style=\"text-align: center;\"><br /></div><div class=\"p1\"><div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://1.bp.blogspot.com/-zGfcarUruYU/T3yqsHH8PLI/AAAAAAAAAh0/w2RITu6UNX0/s1600/sprint-heffabolle.jpg\"><img src=\"http://1.bp.blogspot.com/-zGfcarUruYU/T3yqsHH8PLI/AAAAAAAAAh0/w2RITu6UNX0/s320/sprint-heffabolle.jpg\" height=\"220\" border=\"0\" width=\"320\" /></a></div><br /></div><h2>Can you duplicate a rotcilfnoc (inverse conflictor)?</h2><div class=\"p1\"><br />We are painfully aware that our current version of patch theory is broken with respect to conflicts. Owen Stephens (from Summer of Code 2011!), who generously hosted the sprint (thanks, Owen!) spent a good chunk of Friday staring at one example of the brokenness, a <a href=\"http://bugs.darcs.net/issue2047\">failing QuickCheck test</a> which he minimised to a simple 3-way conflict: create a directory and a file, (A) remove the directory, rename the file, (B) remove the directory, (C) move the file inside the directory under a different name.</div><div class=\"p1\"><br /></div><div class=\"p1\">Ouch.</div><div class=\"p1\"><br /></div><div class=\"p1\">After much discussion with <a href=\"http://projects.haskell.org/camp/\">Camp</a> hacker Ian Lynagh, Owen discovered that this was just a fundamental bug in the conflictor-based approach. We've already been back to the drawing board for a while, but now we have yet another test case for what the next patch theory should deal with.</div><div class=\"p1\"><br /></div><div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://2.bp.blogspot.com/-kRu39uMd6dg/T3yhGdmpqhI/AAAAAAAAAhU/-iDeSZoUCJk/s1600/sprint-owstloo.jpg\"><img src=\"http://2.bp.blogspot.com/-kRu39uMd6dg/T3yhGdmpqhI/AAAAAAAAAhU/-iDeSZoUCJk/s320/sprint-owstloo.jpg\" height=\"213\" border=\"0\" width=\"320\" /></a></div><div class=\"p1\"><br /></div><h2>Next Patch Theory?</h2><div><br />We spent a bit of the weekend working on and discussing the new patch theory.  Ian worked some more on Camp (more proofs!).  Ganesh explained a bit more what he had in mind with the <i>graphictors</i> ideas he was exploring (each conflicting patch would be in a minimal context with respect to the conflict).  And Owen talked us through some thinking he found digging through the archives of the old darcs-conflicts list. We know we need to a successor to the current version of patch theory.  But where will we end are we going to end up?<br /><br /></div><h2>Clean clean clean that code</h2><div class=\"p1\"><br />The new patch theory won't be for a while.  In the meantime, there is a ton of work we can do to prepare the ground for it.  One thing we can do to help is to improve the Darcs code base to the point where shifting to a new patch theory, or a new repository format, or a new set of primitive patches is relatively smooth and easy. Darcs needs a cleanup effort.<br /><br />Owen, Ganesh and Eric made several pushes towards making the Darcs code more approachable:</div><div class=\"p1\"></div><ul><li>Owen cleaned up a darcs module Darcs.Repository.HashedRepo</li><li>Owen and Ganesh made the darcs code base warnings free (at last! again)</li><li>Eric made use of Cabal 1.8's shared library feature so that Darcs only has to be built once rather than 3 times</li><li>Eric (and a little bit of sed) replaced the confusing type witness C preprocessor macros with some more straightforward Haskell</li></ul><div>We have a very long way to go.  But we are <a href=\"http://wiki.darcs.net/Development/Cleanup\">thinking harder</a> about the concrete steps we can take to making the Darcs code more respectable.<br /><br /></div><h2>More helpful interactive mode</h2><br />Florent worked on adding some more intelligence to the Darcs patch selection code.  Hopefully this work will lead to more feedback and some nice new features like an interactive darcs diff.  Cherry picking is one of the more unique aspects of Darcs, and one of the reasons we're so interested in making patch theory right one day.  The patch theory is what allows us to cherry picking in almost all of our commands.<br /><br />But while interactive mode can be pretty helpful, it can also provoke for the kind of situation where good just makes you hungrier for better.  For example, if you try to pull some patches but interactively decide that you want to skip some patches, Darcs will also skip over the patches that depend on it.  But  figuring out why exactly patches get skipped can still be a bit mysterious.  What if instead of telling you it skipped some patches, Darcs could give name the dependencies you'd need to pull in too? Hopefully, Florent's investigations will pay off!<br /><br /><br /><div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://4.bp.blogspot.com/-xg8fEd2nkC4/T3yr521Ei8I/AAAAAAAAAh8/Wgo00YzaM2s/s1600/sprint-florent.jpg\"><img src=\"http://4.bp.blogspot.com/-xg8fEd2nkC4/T3yr521Ei8I/AAAAAAAAAh8/Wgo00YzaM2s/s320/sprint-florent.jpg\" height=\"213\" border=\"0\" width=\"320\" /></a></div><br /><h2>Rebase</h2><div class=\"p1\"><br />Owen and Eric spent some time getting to know the new darcs rebase feature that Ganesh has been working on. It's nice!  Darcs rebase is for those situations where Darcs patch theory falls over (and fall over it does).  It allows us to rescue long-term branches previously lost to intractable conflicts, or to do “deep amend-record” operations that break through dependency barriers.</div><div class=\"p1\"><br /></div><div class=\"p1\">And this being Darcs, it's done with the interactive cherry-picking interface which should be familiar to users.  There's starting to be talk of getting this code in HEAD darcs so that people can try it out and we can start working towards refining the user interface.<br /><br /></div><h2>Darcs Bridge</h2><div class=\"p1\"><br />Darcs bridge isn't ready for prime time, we're afraid.  It's good for one-shot conversions, but if you're hoping to maintain a long-term bridge and you have to deal with Git branches, we'd advise waiting. But we're getting closer. Owen and Ganesh spent some time hashing out the design for the darcs bridge and thinking more about how the respective Darcs and Git models of the universe mesh together.<br /><br /></div><div class=\"p1\"><h2>Where next?</h2><div><br />Finally, among our many discussions was a more general question of strategy. Darcs is a very long term project and it could take many years for us to get the version control system that we want.  Over the past few years, we'd placed a great emphasis on performance, addressing some day to day issues to bring Darcs to a more acceptable place; and now the efforts are starting to pay off.  We now have faster local repository operations, repository fetching (mainly by deprecating the old fashioned format and getting people to switch to hashed repositories), and a much more usable darcs annotate command (in the upcoming 2.8 release).  So Darcs is faster now— it's certainly no Git and the conflict merging issue is still there, but it's in a much better place than it was 4 years ago.  Now what?<br /><br />Now we start digging in for the long haul.  We have essentially 3 <a href=\"http://wiki.darcs.net/Development/Priorities\">development priorities</a> for the future of Darcs:<br /><br /><ul><li><i><b>Cleanup</b></i>: There is a massive amount of work to be done here, ranging from entry level tweaks like shifting to a uniform coding style and getting more disciplined about haddocks; to deeper software engineering issues, like developing a cleaner separation between repository-management and core patch theory code.  The code needs a lot of loving, and if you're ready to roll up your sleeves, we could use the help.</li><li><b><i>Hosting</i></b>: Darcs isn't enough.  We need to think about online hosting and GUIs.  One of our goals is to have a Darcs library that makes it easier to write things like Patch-Tag, or Darcsden; or whatever interesting ideas the community may come up with.  If we have to, we may even prototype some code ourselves to push the library forward.</li><li><b><i>Theory</i></b>: The one thing that we absolutely have to get right for the next patch theory is our story on conflicts. As you can see, we are thinking about quite a few different ideas. It's too early to tell which of these we'll end up running with.  More news when we have some more solid ideas.</li></ul><div><br /></div></div><h2>Thanks!</h2><br />Darcs is a long term project and with all the ups and downs we've been through over the years, we are grateful for the support the community has shown over the years.  Thanks to Guillaume and Owen for their sprint organisation efforts, to our donors for making it possible for students like Aditya to get to sprints, and the Software Freedom Conservancy for helping us with the administrative side of running an open source project.<br /><br />If you'd like to support the Darcs team in our efforts to make an easy to use, flexible, formally backed version control system into a reality one day, we would be thrilled if you could submit patches, bug reports, comments on the IRC channel or <a href=\"http://www.reddit.com/r/darcs\">darcs reddit</a>.  If you just want to send a little cash our way to push sprints along, we most certainly appreciate your <a href=\"http://darcs.net/donations.html\">donations</a>.<br /><br />Until next time!<br /><br /><table cellpadding=\"0\" align=\"center\" style=\"margin-left: auto; margin-right: auto; text-align: center;\" cellspacing=\"0\" class=\"tr-caption-container\"><tbody><tr><td style=\"text-align: center;\"><a style=\"margin-left: auto; margin-right: auto;\" href=\"http://2.bp.blogspot.com/-Ne9qA85RC30/T3youWr8QHI/AAAAAAAAAhk/wPoRi-22ppU/s1600/sprint-agp.jpg\"><img src=\"http://2.bp.blogspot.com/-Ne9qA85RC30/T3youWr8QHI/AAAAAAAAAhk/wPoRi-22ppU/s320/sprint-agp.jpg\" height=\"223\" border=\"0\" width=\"320\" /></a></td></tr><tr><td style=\"text-align: center;\" class=\"tr-caption\">No sprint is complete without an Awkward Group Photo</td></tr></tbody></table><br /></div></div></div><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/819021106854702432-2389650905652869877?l=blog.darcs.net\" alt=\"\" height=\"1\" width=\"1\" /></div>" "http://blog.darcs.net/2012/04/darcs-hacking-sprint-7-report.html" (20359 7975) obsolete 17 nil nil ((title nil "Darcs: darcs hacking sprint 7 report") (guid ((isPermaLink . "false")) "tag:blogger.com,1999:blog-819021106854702432.post-2389650905652869877") (link nil "http://blog.darcs.net/2012/04/darcs-hacking-sprint-7-report.html") (description nil "This year, Darcs had a sprint in two phases.  It started with a one-day pre-sprint in Cordoba, Argentina (9 March), and then moved over to Southampton, England for a 3 day hackfest at the end of the month (30 March to 1 April). <br /><div><br /></div><div>No Darcs hackers being shipped between the two sprints though, but we did have one visitor from afar.   Potential GSoC student Bhimanavajjula Sri Rama Krishna (BSRK) Aditya flew the 9 hours between India and England to join us for the sprint.  It was great to meet him in person!<br /><br /></div><h2>Presprint</h2><div><br />We think that Darcs could make a great project for people get started with some practical Haskell hacking. It's a bit of a fixer-upper, but that also means there's a lot of difference to make!</div><div><br /></div><div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://3.bp.blogspot.com/-ndjPO7adt3k/T3yjFCWBzBI/AAAAAAAAAhc/NuUvIKWfxpo/s1600/sprint-cordoba.jpg\"><img src=\"http://3.bp.blogspot.com/-ndjPO7adt3k/T3yjFCWBzBI/AAAAAAAAAhc/NuUvIKWfxpo/s320/sprint-cordoba.jpg\" height=\"268\" border=\"0\" width=\"320\" /></a></div><div><br /></div><div>Darcs veteran (and weekly news editor) Guillaume Hoffman was joined by two students, Miguel Pagano and <span style=\"font-family: inherit; white-space: pre-wrap;\">Mathías E</span>tcheverry,<span style=\"font-family: inherit; white-space: pre-wrap;\"> who within a day and with no prior knowledge of the Darcs code base were able to make the following contributions:</span></div><div><ul><li><span style=\"white-space: pre-wrap;\">bringing the <a href=\"http://bugs.darcs.net/issue1812\">darcs backup filename conventions</a> in line with CVS conventions, eg. ./foo.txt.~1~ rather than the unwieldy ./foo</span>-darcs-backup0 [Miguel]</li><li>making the darcs-test harness respect the -fcurl cabal flag [Miguel]</li><li>investigating a wishlist item to<a href=\"http://bugs.darcs.net/issue1254\"> print filenames under large hunks</a> in darcs record, alas, not as “ProbablyEasy” as we'd expected [<span style=\"white-space: pre-wrap;\">Mathías]</span></li></ul><div><span style=\"white-space: pre-wrap;\">In between getting Miguel and </span><span style=\"white-space: pre-wrap;\">Mathías, Guillaume also got a chance to make some improvements himself, namely:</span></div></div><div><ul><li><span style=\"font-family: inherit; white-space: pre-wrap;\">adding the --unified flag to record, revert, amend-record</span></li></ul></div>Thanks to Miguel and Mathías for joining us at the sprint. Hopefully we'll be able to repeat the cycle of Darcs hacking with them. And since little one-day mini sprints like the one Guillaume started are so easy to organise, there's a chance we'll be seeing more of these in the future.<br /><br /><h2>Summer of Code</h2><div><br />If he participates in this year's summer of code, Aditya will be helping us to integrate the long-promised <a href=\"http://wiki.darcs.net/GSoC/2012-PatchIndex\">patch index</a> optimisation into Darcs. The patch index was originally developed by Benedikt Schmidt. It caches a mapping from filenames to the patches that affect those files, which saves a lot of work for commands like <span style=\"font-family: 'Courier New',Courier,monospace;\">darcs changes</span><span style=\"font-family: inherit;\"> or </span><span style=\"font-family: 'Courier New',Courier,monospace;\">darcs annotate</span><span style=\"font-family: inherit;\">, commands that would otherwise have to trawl through the entire darcs history</span></div><div><br /></div><div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://4.bp.blogspot.com/-WBXwzxzZ3Bo/T3yTlqF3q9I/AAAAAAAAAhM/5uCNLbg0OvQ/s1600/gsoc-aditya.jpg\"><img src=\"http://4.bp.blogspot.com/-WBXwzxzZ3Bo/T3yTlqF3q9I/AAAAAAAAAhM/5uCNLbg0OvQ/s320/gsoc-aditya.jpg\" height=\"213\" border=\"0\" width=\"320\" /></a></div><div><br /></div><div>Over the sprint, Aditya rebased the patch index code from Benedikt onto the current Darcs mainline.  He studied the code a bit to understand what exactly was behind the index, and started working on implementing the integration with commands like darcs changes.  He also got to explore a bit of Darcs internals, notably how Darcs makes use of matchers like 'date \"before tea time\"' to filter through patches.</div><div class=\"p1\"><br /></div><div class=\"p1\">One very concrete result of the sprint, we now have prototype of a patch-index-enabled <span style=\"font-family: 'Courier New',Courier,monospace;\">darcs changes.</span>If you can't wait to try it out, you could try applying the latest version of <a href=\"http://bugs.darcs.net/patch173\">his patch</a>.<br /><br /></div><h2>Filepaths: bytes or code points?</h2><div><div><i>Argh, Unicode, Argh</i></div><div class=\"p1\"></div></div><div><br /></div><div>The main thing Ganesh worked on was fixing a problem with character set handling that has been outstanding for several months. The underlying problem was caused by recent versions of GHC changing the way it handles filenames on Linux; previously it treated them as a stream of raw bytes, but now it translates them into strings using an encoding. The eventual workaround was very short - explicitly set a global at the beginning of darcs, telling the GHC library to use no encoding at all - but it took a lot of investigation to get to that point, and the end result isn't very satisfactory for darcs as a library.<br /><br /></div><h2>Darcs 2.8 Release Candidate 1</h2><br />Florent and Ganesh also worked on getting a 2.8 release candidate ready.  We'd love any feedback you could give us on it, so if you're up for a little beta testing:<br /><div><br /></div><pre>cabal update<br />cabal install darcs-beta<br /></pre><br /><div>The character set handling problem with GHC 7.2/7.4 was the main blocker for a release, so hopefully we can get the real release out <span style=\"text-align: center;\">pretty soon now.</span><br /><div><div style=\"text-align: center;\"><br /></div><div class=\"p1\"><div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://1.bp.blogspot.com/-zGfcarUruYU/T3yqsHH8PLI/AAAAAAAAAh0/w2RITu6UNX0/s1600/sprint-heffabolle.jpg\"><img src=\"http://1.bp.blogspot.com/-zGfcarUruYU/T3yqsHH8PLI/AAAAAAAAAh0/w2RITu6UNX0/s320/sprint-heffabolle.jpg\" height=\"220\" border=\"0\" width=\"320\" /></a></div><br /></div><h2>Can you duplicate a rotcilfnoc (inverse conflictor)?</h2><div class=\"p1\"><br />We are painfully aware that our current version of patch theory is broken with respect to conflicts. Owen Stephens (from Summer of Code 2011!), who generously hosted the sprint (thanks, Owen!) spent a good chunk of Friday staring at one example of the brokenness, a <a href=\"http://bugs.darcs.net/issue2047\">failing QuickCheck test</a> which he minimised to a simple 3-way conflict: create a directory and a file, (A) remove the directory, rename the file, (B) remove the directory, (C) move the file inside the directory under a different name.</div><div class=\"p1\"><br /></div><div class=\"p1\">Ouch.</div><div class=\"p1\"><br /></div><div class=\"p1\">After much discussion with <a href=\"http://projects.haskell.org/camp/\">Camp</a> hacker Ian Lynagh, Owen discovered that this was just a fundamental bug in the conflictor-based approach. We've already been back to the drawing board for a while, but now we have yet another test case for what the next patch theory should deal with.</div><div class=\"p1\"><br /></div><div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://2.bp.blogspot.com/-kRu39uMd6dg/T3yhGdmpqhI/AAAAAAAAAhU/-iDeSZoUCJk/s1600/sprint-owstloo.jpg\"><img src=\"http://2.bp.blogspot.com/-kRu39uMd6dg/T3yhGdmpqhI/AAAAAAAAAhU/-iDeSZoUCJk/s320/sprint-owstloo.jpg\" height=\"213\" border=\"0\" width=\"320\" /></a></div><div class=\"p1\"><br /></div><h2>Next Patch Theory?</h2><div><br />We spent a bit of the weekend working on and discussing the new patch theory.  Ian worked some more on Camp (more proofs!).  Ganesh explained a bit more what he had in mind with the <i>graphictors</i> ideas he was exploring (each conflicting patch would be in a minimal context with respect to the conflict).  And Owen talked us through some thinking he found digging through the archives of the old darcs-conflicts list. We know we need to a successor to the current version of patch theory.  But where will we end are we going to end up?<br /><br /></div><h2>Clean clean clean that code</h2><div class=\"p1\"><br />The new patch theory won't be for a while.  In the meantime, there is a ton of work we can do to prepare the ground for it.  One thing we can do to help is to improve the Darcs code base to the point where shifting to a new patch theory, or a new repository format, or a new set of primitive patches is relatively smooth and easy. Darcs needs a cleanup effort.<br /><br />Owen, Ganesh and Eric made several pushes towards making the Darcs code more approachable:</div><div class=\"p1\"></div><ul><li>Owen cleaned up a darcs module Darcs.Repository.HashedRepo</li><li>Owen and Ganesh made the darcs code base warnings free (at last! again)</li><li>Eric made use of Cabal 1.8's shared library feature so that Darcs only has to be built once rather than 3 times</li><li>Eric (and a little bit of sed) replaced the confusing type witness C preprocessor macros with some more straightforward Haskell</li></ul><div>We have a very long way to go.  But we are <a href=\"http://wiki.darcs.net/Development/Cleanup\">thinking harder</a> about the concrete steps we can take to making the Darcs code more respectable.<br /><br /></div><h2>More helpful interactive mode</h2><br />Florent worked on adding some more intelligence to the Darcs patch selection code.  Hopefully this work will lead to more feedback and some nice new features like an interactive darcs diff.  Cherry picking is one of the more unique aspects of Darcs, and one of the reasons we're so interested in making patch theory right one day.  The patch theory is what allows us to cherry picking in almost all of our commands.<br /><br />But while interactive mode can be pretty helpful, it can also provoke for the kind of situation where good just makes you hungrier for better.  For example, if you try to pull some patches but interactively decide that you want to skip some patches, Darcs will also skip over the patches that depend on it.  But  figuring out why exactly patches get skipped can still be a bit mysterious.  What if instead of telling you it skipped some patches, Darcs could give name the dependencies you'd need to pull in too? Hopefully, Florent's investigations will pay off!<br /><br /><br /><div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://4.bp.blogspot.com/-xg8fEd2nkC4/T3yr521Ei8I/AAAAAAAAAh8/Wgo00YzaM2s/s1600/sprint-florent.jpg\"><img src=\"http://4.bp.blogspot.com/-xg8fEd2nkC4/T3yr521Ei8I/AAAAAAAAAh8/Wgo00YzaM2s/s320/sprint-florent.jpg\" height=\"213\" border=\"0\" width=\"320\" /></a></div><br /><h2>Rebase</h2><div class=\"p1\"><br />Owen and Eric spent some time getting to know the new darcs rebase feature that Ganesh has been working on. It's nice!  Darcs rebase is for those situations where Darcs patch theory falls over (and fall over it does).  It allows us to rescue long-term branches previously lost to intractable conflicts, or to do “deep amend-record” operations that break through dependency barriers.</div><div class=\"p1\"><br /></div><div class=\"p1\">And this being Darcs, it's done with the interactive cherry-picking interface which should be familiar to users.  There's starting to be talk of getting this code in HEAD darcs so that people can try it out and we can start working towards refining the user interface.<br /><br /></div><h2>Darcs Bridge</h2><div class=\"p1\"><br />Darcs bridge isn't ready for prime time, we're afraid.  It's good for one-shot conversions, but if you're hoping to maintain a long-term bridge and you have to deal with Git branches, we'd advise waiting. But we're getting closer. Owen and Ganesh spent some time hashing out the design for the darcs bridge and thinking more about how the respective Darcs and Git models of the universe mesh together.<br /><br /></div><div class=\"p1\"><h2>Where next?</h2><div><br />Finally, among our many discussions was a more general question of strategy. Darcs is a very long term project and it could take many years for us to get the version control system that we want.  Over the past few years, we'd placed a great emphasis on performance, addressing some day to day issues to bring Darcs to a more acceptable place; and now the efforts are starting to pay off.  We now have faster local repository operations, repository fetching (mainly by deprecating the old fashioned format and getting people to switch to hashed repositories), and a much more usable darcs annotate command (in the upcoming 2.8 release).  So Darcs is faster now— it's certainly no Git and the conflict merging issue is still there, but it's in a much better place than it was 4 years ago.  Now what?<br /><br />Now we start digging in for the long haul.  We have essentially 3 <a href=\"http://wiki.darcs.net/Development/Priorities\">development priorities</a> for the future of Darcs:<br /><br /><ul><li><i><b>Cleanup</b></i>: There is a massive amount of work to be done here, ranging from entry level tweaks like shifting to a uniform coding style and getting more disciplined about haddocks; to deeper software engineering issues, like developing a cleaner separation between repository-management and core patch theory code.  The code needs a lot of loving, and if you're ready to roll up your sleeves, we could use the help.</li><li><b><i>Hosting</i></b>: Darcs isn't enough.  We need to think about online hosting and GUIs.  One of our goals is to have a Darcs library that makes it easier to write things like Patch-Tag, or Darcsden; or whatever interesting ideas the community may come up with.  If we have to, we may even prototype some code ourselves to push the library forward.</li><li><b><i>Theory</i></b>: The one thing that we absolutely have to get right for the next patch theory is our story on conflicts. As you can see, we are thinking about quite a few different ideas. It's too early to tell which of these we'll end up running with.  More news when we have some more solid ideas.</li></ul><div><br /></div></div><h2>Thanks!</h2><br />Darcs is a long term project and with all the ups and downs we've been through over the years, we are grateful for the support the community has shown over the years.  Thanks to Guillaume and Owen for their sprint organisation efforts, to our donors for making it possible for students like Aditya to get to sprints, and the Software Freedom Conservancy for helping us with the administrative side of running an open source project.<br /><br />If you'd like to support the Darcs team in our efforts to make an easy to use, flexible, formally backed version control system into a reality one day, we would be thrilled if you could submit patches, bug reports, comments on the IRC channel or <a href=\"http://www.reddit.com/r/darcs\">darcs reddit</a>.  If you just want to send a little cash our way to push sprints along, we most certainly appreciate your <a href=\"http://darcs.net/donations.html\">donations</a>.<br /><br />Until next time!<br /><br /><table cellpadding=\"0\" align=\"center\" style=\"margin-left: auto; margin-right: auto; text-align: center;\" cellspacing=\"0\" class=\"tr-caption-container\"><tbody><tr><td style=\"text-align: center;\"><a style=\"margin-left: auto; margin-right: auto;\" href=\"http://2.bp.blogspot.com/-Ne9qA85RC30/T3youWr8QHI/AAAAAAAAAhk/wPoRi-22ppU/s1600/sprint-agp.jpg\"><img src=\"http://2.bp.blogspot.com/-Ne9qA85RC30/T3youWr8QHI/AAAAAAAAAhk/wPoRi-22ppU/s320/sprint-agp.jpg\" height=\"223\" border=\"0\" width=\"320\" /></a></td></tr><tr><td style=\"text-align: center;\" class=\"tr-caption\">No sprint is complete without an Awkward Group Photo</td></tr></tbody></table><br /></div></div></div><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/819021106854702432-2389650905652869877?l=blog.darcs.net\" alt=\"\" height=\"1\" width=\"1\" /></div>") (pubDate nil "Thu, 12 Apr 2012 18:29:59 +0000") (author nil "noreply@blogger.com (kowey)"))) ("Manuel M T Chakravarty: GPU computing in Haskell: version 0.10 of Data.Array.Accelerate" "<div class=\"posterous_autopost\"><p>Accelerate is an embedded language for GPU-accelerated array computations in Haskell that targets NVIDIA’s CUDA framework and also has an experimental OpenCL backend (that currently does not support the whole feature set of the language). I just released <a href=\"http://hackage.haskell.org/package/accelerate-0.10.0.0\" title=\"accelerate 0.10.0.0\">version 0.10.0.0 of Accelerate</a>. A considerable amount of example code is in the companion package <a href=\"http://hackage.haskell.org/package/accelerate-examples\">accelerate-examples</a>.</p>  <p>For more information, have a look at <a href=\"https://github.com/mchakravarty/accelerate\" title=\"Accelerate @ GitHub\">Accelerate on GitHub</a>.</p>      <p style=\"font-size: 10px;\">  <a href=\"http://posterous.com\">Posted via email</a>   from <a href=\"http://justtesting.org/gpu-computing-in-haskell-version-010-of-dataa\">Just Testing</a> | <a href=\"http://justtesting.org/gpu-computing-in-haskell-version-010-of-dataa#comment\"><span style=\"font-size: 11px;\">Comment »</span></a>  </p>  </div>" "http://tumblr.justtesting.org/post/20954772035" (20358 32761) obsolete 18 nil nil ((title nil "Manuel M T Chakravarty: GPU computing in Haskell: version 0.10 of Data.Array.Accelerate") (guid ((isPermaLink . "true")) "http://tumblr.justtesting.org/post/20954772035") (link nil "http://tumblr.justtesting.org/post/20954772035") (description nil "<div class=\"posterous_autopost\"><p>Accelerate is an embedded language for GPU-accelerated array computations in Haskell that targets NVIDIA’s CUDA framework and also has an experimental OpenCL backend (that currently does not support the whole feature set of the language). I just released <a href=\"http://hackage.haskell.org/package/accelerate-0.10.0.0\" title=\"accelerate 0.10.0.0\">version 0.10.0.0 of Accelerate</a>. A considerable amount of example code is in the companion package <a href=\"http://hackage.haskell.org/package/accelerate-examples\">accelerate-examples</a>.</p>  <p>For more information, have a look at <a href=\"https://github.com/mchakravarty/accelerate\" title=\"Accelerate @ GitHub\">Accelerate on GitHub</a>.</p>      <p style=\"font-size: 10px;\">  <a href=\"http://posterous.com\">Posted via email</a>   from <a href=\"http://justtesting.org/gpu-computing-in-haskell-version-010-of-dataa\">Just Testing</a> | <a href=\"http://justtesting.org/gpu-computing-in-haskell-version-010-of-dataa#comment\"><span style=\"font-size: 11px;\">Comment »</span></a>  </p>  </div>") (pubDate nil "Thu, 12 Apr 2012 07:10:49 +0000"))) ("Philip Wadler: Why Programmers Should Use the Haskell Language Now" "<div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://3.bp.blogspot.com/-vt-_QV02Jm4/T4Q7-G0co6I/AAAAAAAAAQQ/AOEw17pA9bg/s1600/Screenshot.png\"><img src=\"http://3.bp.blogspot.com/-vt-_QV02Jm4/T4Q7-G0co6I/AAAAAAAAAQQ/AOEw17pA9bg/s400/Screenshot.png\" height=\"299\" border=\"0\" width=\"400\" /></a></div>A <a href=\"http://www.eweek.com/c/a/Application-Development/Why-Programmers-Should-Use-the-Haskell-Language-Now-669827/\">post</a> at e-Week, based on Andy Adams-Moran's presentation at Microsoft's Lang.NEXT.  Thanks to Vladimir Gapayev for the pointer.<div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/9757377-7849196408350458026?l=wadler.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>" "http://wadler.blogspot.com/2012/04/why-programmers-should-use-haskell.html" (20356 28431) obsolete 21 nil nil ((title nil "Philip Wadler: Why Programmers Should Use the Haskell Language Now") (guid ((isPermaLink . "false")) "tag:blogger.com,1999:blog-9757377.post-7849196408350458026") (link nil "http://wadler.blogspot.com/2012/04/why-programmers-should-use-haskell.html") (description nil "<div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://3.bp.blogspot.com/-vt-_QV02Jm4/T4Q7-G0co6I/AAAAAAAAAQQ/AOEw17pA9bg/s1600/Screenshot.png\"><img src=\"http://3.bp.blogspot.com/-vt-_QV02Jm4/T4Q7-G0co6I/AAAAAAAAAQQ/AOEw17pA9bg/s400/Screenshot.png\" height=\"299\" border=\"0\" width=\"400\" /></a></div>A <a href=\"http://www.eweek.com/c/a/Application-Development/Why-Programmers-Should-Use-the-Haskell-Language-Now-669827/\">post</a> at e-Week, based on Andy Adams-Moran's presentation at Microsoft's Lang.NEXT.  Thanks to Vladimir Gapayev for the pointer.<div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/9757377-7849196408350458026?l=wadler.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>") (pubDate nil "Tue, 10 Apr 2012 17:34:07 +0000") (author nil "noreply@blogger.com (Philip Wadler)"))) ("Philip Wadler: When you've eliminated the possible ..." "<div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://4.bp.blogspot.com/-SBSOzlpk4zI/T4QRlSwQIgI/AAAAAAAAAQE/iMFzeTQYLMc/s1600/Zoom-Wide.jpg\"><img src=\"http://4.bp.blogspot.com/-SBSOzlpk4zI/T4QRlSwQIgI/AAAAAAAAAQE/iMFzeTQYLMc/s400/Zoom-Wide.jpg\" height=\"115\" border=\"0\" width=\"400\" /></a></div>A quote from Bartosz Milewski's <a href=\"http://wadler.blogspot.de/atom.xml\">blog post</a> at <a href=\"http://wadler.blogspot.de/atom.xml\">FPComplete</a>.<br /><blockquote>Here’s the key insight:<br /><br /><b>Imperative programs will always be vulnerable to data races because they contain mutable variables.</b><br /><br />So what’s the solution? As Sherlock Holmes famously said, “Once you eliminate the impossible, whatever remains, no matter how improbable, must be the truth.” Enter functional programming.<br /><br />Here’s the second key insight:<br /><br /><b>There are no data races in purely functional languages because they don’t have mutable variables.</b></blockquote>Thanks to Jeremy Gibbons and Andres Loeh for the pointer.<div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/9757377-7835968326858818760?l=wadler.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>" "http://wadler.blogspot.com/2012/04/when-youve-eliminated-possible.html" (20356 4858) obsolete 22 nil nil ((title nil "Philip Wadler: When you've eliminated the possible ...") (guid ((isPermaLink . "false")) "tag:blogger.com,1999:blog-9757377.post-7835968326858818760") (link nil "http://wadler.blogspot.com/2012/04/when-youve-eliminated-possible.html") (description nil "<div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://4.bp.blogspot.com/-SBSOzlpk4zI/T4QRlSwQIgI/AAAAAAAAAQE/iMFzeTQYLMc/s1600/Zoom-Wide.jpg\"><img src=\"http://4.bp.blogspot.com/-SBSOzlpk4zI/T4QRlSwQIgI/AAAAAAAAAQE/iMFzeTQYLMc/s400/Zoom-Wide.jpg\" height=\"115\" border=\"0\" width=\"400\" /></a></div>A quote from Bartosz Milewski's <a href=\"http://wadler.blogspot.de/atom.xml\">blog post</a> at <a href=\"http://wadler.blogspot.de/atom.xml\">FPComplete</a>.<br /><blockquote>Here’s the key insight:<br /><br /><b>Imperative programs will always be vulnerable to data races because they contain mutable variables.</b><br /><br />So what’s the solution? As Sherlock Holmes famously said, “Once you eliminate the impossible, whatever remains, no matter how improbable, must be the truth.” Enter functional programming.<br /><br />Here’s the second key insight:<br /><br /><b>There are no data races in purely functional languages because they don’t have mutable variables.</b></blockquote>Thanks to Jeremy Gibbons and Andres Loeh for the pointer.<div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/9757377-7835968326858818760?l=wadler.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>") (pubDate nil "Tue, 10 Apr 2012 11:01:14 +0000") (author nil "noreply@blogger.com (Philip Wadler)"))) ("Magnus Therning: Manual setup of Qt+Eclipse on Windows" "<p>Before the weekend I started looking at using <a href=\"http://qt-project.org/\">Qt</a> on Windows.  More specifically I wanted to know whether this combination could be an option for a sub-project at work.  We need to develop a program for the Windows desktop, and due to the overall context it would make sense to write it in C++ (that’s what we use for another part of the project).  We already use both Eclipse and Visual Studio in the project, but I strongly prefer Eclipse, so I was hoping to be able to use it.  However, it seems that the Qt developers strongly favour their own tool <a href=\"http://qt-project.org/wiki/Category:Tools::QtCreator\">Qt Creator</a>, though there are (outdated?) integrators for both Eclipse and Visual Studio.  I’d rather avoid introducing a third IDE into a project—two is already one too many in my opinion.  Anyway, I think I managed to find an acceptable configuration of Eclipse <em>without</em> using that old <a href=\"http://qt.nokia.com/products/eclipse-integration/\">Qt integration plugin</a> together with the MSVC (I was using the gratis version of MSVC for this).</p>\n<h3>Qt setup</h3>\n<p>I decided to install Qt into <code>C:\\QtSDK</code>, and then I made the following permanent changes to the environment:</p>\n<div class=\"wp_syntax\"><div class=\"code\"><pre style=\"font-family: monospace;\" class=\"dos\"><span style=\"color: #33cc33;\">&gt;</span> <span style=\"color: #b1b100; font-weight: bold;\">set</span> QTDIR=C:\\QtSDK\\Desktop\\Qt\\4.8.0\\msvc2010\n<span style=\"color: #33cc33;\">&gt;</span> <span style=\"color: #b1b100; font-weight: bold;\">set</span> QMAKESPEC=<span style=\"color: #33cc33;\">%</span><span style=\"color: #448888;\">QTDIR</span><span style=\"color: #33cc33;\">%</span>\\mkspecs\\win32-msvc2010\n<span style=\"color: #33cc33;\">&gt;</span> <span style=\"color: #b1b100; font-weight: bold;\">set</span> PATH=<span style=\"color: #33cc33;\">%</span><span style=\"color: #448888;\">PATH</span><span style=\"color: #33cc33;\">%</span>;<span style=\"color: #33cc33;\">%</span><span style=\"color: #448888;\">QTDIR</span><span style=\"color: #33cc33;\">%</span>\\bin;C:\\QtSDK\\QtCreator\\bin</pre></div></div>\n<h3>Starting Eclipse so that it finds the compiler</h3>\n<p>It’s slightly disappointing that Eclipse happily lets one create MSVC project that isn’t buildable because it doesn’t know where the compiler is located.  One easy way to remedy that seems to create a BAT file to create the proper environment for Eclipse:</p>\n<div class=\"wp_syntax\"><div class=\"code\"><pre style=\"font-family: monospace;\" class=\"winbatch\"><span style=\"color: #66cc66;\">@</span>echo <span style=\"color: #0080FF; font-weight: bold;\">off</span>\nsetlocal\n<span style=\"color: #800080;\">call</span> <span style=\"color: #ff0000;\">\"C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\vcvarsall.bat\"</span>\nstart C<span style=\"color: #FF1010; font-weight: bold;\">:\\Eclipse\\Indigo\\eclipse.exe</span>\nendlocal</pre></div></div>\n<h3>Creating the project</h3>\n<p>Creating a “makefile” project in Eclipse is fairly straight forward; one needs a <em>C/C++ project</em>, of the <em>makefile</em> type, and make it empty too so that there isn’t any cruft in the way.  Then add a single source file, e.g. <code>main.cxx</code>:</p>\n<div class=\"wp_syntax\"><div class=\"code\"><pre style=\"font-family: monospace;\" class=\"cpp\"><span style=\"color: #339900;\">#include &lt;iostream&gt;</span>\n<span style=\"color: #339900;\">#include &lt;Qt/QtGui&gt;</span>\n \n<span style=\"color: #0000ff;\">int</span> main<span style=\"color: #008000;\">(</span><span style=\"color: #0000ff;\">int</span> argc, <span style=\"color: #0000ff;\">char</span> <span style=\"color: #000040;\">**</span>argv<span style=\"color: #008000;\">)</span>\n<span style=\"color: #008000;\">{</span>\nstd<span style=\"color: #008080;\">::</span><span style=\"color: #0000dd;\">cout</span> <span style=\"color: #000080;\">&lt;&lt;</span> __FUNCTION__ <span style=\"color: #000080;\">&lt;&lt;</span> std<span style=\"color: #008080;\">::</span><span style=\"color: #007788;\">endl</span><span style=\"color: #008080;\">;</span>\nQApplication app<span style=\"color: #008000;\">(</span>argc, argv<span style=\"color: #008000;\">)</span><span style=\"color: #008080;\">;</span>\n<span style=\"color: #0000ff;\">return</span><span style=\"color: #008000;\">(</span>app.<span style=\"color: #007788;\">exec</span><span style=\"color: #008000;\">(</span><span style=\"color: #008000;\">)</span><span style=\"color: #008000;\">)</span><span style=\"color: #008080;\">;</span>\n<span style=\"color: #008000;\">}</span></pre></div></div>\n<p>And then a project file, e.g. <code>Test.pro</code>:</p>\n<div class=\"wp_syntax\"><div class=\"code\"><pre style=\"font-family: monospace;\" class=\"make\">TEMPLATE <span style=\"color: #004400;\">=</span> app\nTARGET <span style=\"color: #004400;\">=</span>\nDEPENDPATH <span style=\"color: #004400;\">+=</span> <span style=\"color: #004400;\">.</span>\nINCLUDEPATH <span style=\"color: #004400;\">+=</span> <span style=\"color: #004400;\">.</span>\n \nCONFIG <span style=\"color: #004400;\">+=</span> qt\n \nHEADERS <span style=\"color: #004400;\">+=</span>\nSOURCES <span style=\"color: #004400;\">+=</span> main<span style=\"color: #004400;\">.</span>cxx</pre></div></div>\n<p>After this use <code>qmake</code> to create the required makefile.  I decided to use a subdirectory (<code>_build</code>) in the project, which <code>qmake</code> seems to have full support for:</p>\n<div class=\"wp_syntax\"><div class=\"code\"><pre style=\"font-family: monospace;\" class=\"dos\"><span style=\"color: #33cc33;\">&gt;</span> qmake ..\\Test.pro</pre></div></div>\n<h3>Setting up building from Eclipse</h3>\n<p>In the project properties modify the <em>C/C++ Build</em> settings for the <em>Debug</em> target.  Instead of the default build command (which is <code>make</code>) one can use <code>nmake</code>, or even better <code>jom</code>:</p>\n<ul>\n<li>Build command: <code>C:/QtSDK/QTCreator/bin/jom -f Makefile.Debug</code></li>\n<li>Build directory: <code>${workspace_loc:/Test}/_build</code></li>\n</ul>\n<p>Then one can create a <em>Release</em> target, which differs only in that it builds using <code>Makefile.Release</code>.</p>\n<h3>Running <code>qmake</code> from inside Eclipse</h3>\n<p>It’s very convenient to be able to run <code>qmake</code> and re-generate the makefiles from inside Eclipse.  One can set that up by adding an external tool:</p>\n<ul>\n<li>Location: <code>C:\\QtSDK\\Desktop\\Qt\\4.8.0\\msvc2010\\bin\\qmake.exe</code></li>\n<li>Working directory: <code>${workspace_loc:/Test}/_build</code></li>\n<li>Arguments: <code>../Test.pro</code></li>\n</ul>\n<h3>In closing</h3>\n<p>I plan to also have a look at the <a href=\"http://qt.nokia.com/products/developer-tools\">Qt Visual Studio Add-in</a>, though I suspect we might be using the latest version of VS, which might cause trouble.</p>\n<p>Suggestions for further integration with Eclipse would be most welcome, e.g. for forms and translations.</p>\n<p><a href=\"http://www.addtoany.com/share_save#url=http%3A%2F%2Ftherning.org%2Fmagnus%2Farchives%2F1023&amp;title=Manual%20setup%20of%20Qt%2BEclipse%20on%20Windows\" id=\"wpa2a_2\" class=\"a2a_dd a2a_target addtoany_share_save\">Share/Bookmark</a></p>" "http://therning.org/magnus/archives/1023" (20355 17769) obsolete 23 nil nil ((title nil "Magnus Therning: Manual setup of Qt+Eclipse on Windows") (guid ((isPermaLink . "false")) "http://therning.org/magnus/?p=1023") (link nil "http://therning.org/magnus/archives/1023") (description nil "<p>Before the weekend I started looking at using <a href=\"http://qt-project.org/\">Qt</a> on Windows.  More specifically I wanted to know whether this combination could be an option for a sub-project at work.  We need to develop a program for the Windows desktop, and due to the overall context it would make sense to write it in C++ (that’s what we use for another part of the project).  We already use both Eclipse and Visual Studio in the project, but I strongly prefer Eclipse, so I was hoping to be able to use it.  However, it seems that the Qt developers strongly favour their own tool <a href=\"http://qt-project.org/wiki/Category:Tools::QtCreator\">Qt Creator</a>, though there are (outdated?) integrators for both Eclipse and Visual Studio.  I’d rather avoid introducing a third IDE into a project—two is already one too many in my opinion.  Anyway, I think I managed to find an acceptable configuration of Eclipse <em>without</em> using that old <a href=\"http://qt.nokia.com/products/eclipse-integration/\">Qt integration plugin</a> together with the MSVC (I was using the gratis version of MSVC for this).</p>\n\n<h3>Qt setup</h3>\n\n<p>I decided to install Qt into <code>C:\\QtSDK</code>, and then I made the following permanent changes to the environment:</p>\n\n\n<div class=\"wp_syntax\"><div class=\"code\"><pre style=\"font-family: monospace;\" class=\"dos\"><span style=\"color: #33cc33;\">&gt;</span> <span style=\"color: #b1b100; font-weight: bold;\">set</span> QTDIR=C:\\QtSDK\\Desktop\\Qt\\4.8.0\\msvc2010\n<span style=\"color: #33cc33;\">&gt;</span> <span style=\"color: #b1b100; font-weight: bold;\">set</span> QMAKESPEC=<span style=\"color: #33cc33;\">%</span><span style=\"color: #448888;\">QTDIR</span><span style=\"color: #33cc33;\">%</span>\\mkspecs\\win32-msvc2010\n<span style=\"color: #33cc33;\">&gt;</span> <span style=\"color: #b1b100; font-weight: bold;\">set</span> PATH=<span style=\"color: #33cc33;\">%</span><span style=\"color: #448888;\">PATH</span><span style=\"color: #33cc33;\">%</span>;<span style=\"color: #33cc33;\">%</span><span style=\"color: #448888;\">QTDIR</span><span style=\"color: #33cc33;\">%</span>\\bin;C:\\QtSDK\\QtCreator\\bin</pre></div></div>\n\n\n<h3>Starting Eclipse so that it finds the compiler</h3>\n\n<p>It’s slightly disappointing that Eclipse happily lets one create MSVC project that isn’t buildable because it doesn’t know where the compiler is located.  One easy way to remedy that seems to create a BAT file to create the proper environment for Eclipse:</p>\n\n\n<div class=\"wp_syntax\"><div class=\"code\"><pre style=\"font-family: monospace;\" class=\"winbatch\"><span style=\"color: #66cc66;\">@</span>echo <span style=\"color: #0080FF; font-weight: bold;\">off</span>\nsetlocal\n<span style=\"color: #800080;\">call</span> <span style=\"color: #ff0000;\">\"C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\vcvarsall.bat\"</span>\nstart C<span style=\"color: #FF1010; font-weight: bold;\">:\\Eclipse\\Indigo\\eclipse.exe</span>\nendlocal</pre></div></div>\n\n\n<h3>Creating the project</h3>\n\n<p>Creating a “makefile” project in Eclipse is fairly straight forward; one needs a <em>C/C++ project</em>, of the <em>makefile</em> type, and make it empty too so that there isn’t any cruft in the way.  Then add a single source file, e.g. <code>main.cxx</code>:</p>\n\n\n<div class=\"wp_syntax\"><div class=\"code\"><pre style=\"font-family: monospace;\" class=\"cpp\"><span style=\"color: #339900;\">#include &lt;iostream&gt;</span>\n<span style=\"color: #339900;\">#include &lt;Qt/QtGui&gt;</span>\n \n<span style=\"color: #0000ff;\">int</span> main<span style=\"color: #008000;\">(</span><span style=\"color: #0000ff;\">int</span> argc, <span style=\"color: #0000ff;\">char</span> <span style=\"color: #000040;\">**</span>argv<span style=\"color: #008000;\">)</span>\n<span style=\"color: #008000;\">{</span>\n    std<span style=\"color: #008080;\">::</span><span style=\"color: #0000dd;\">cout</span> <span style=\"color: #000080;\">&lt;&lt;</span> __FUNCTION__ <span style=\"color: #000080;\">&lt;&lt;</span> std<span style=\"color: #008080;\">::</span><span style=\"color: #007788;\">endl</span><span style=\"color: #008080;\">;</span>\n    QApplication app<span style=\"color: #008000;\">(</span>argc, argv<span style=\"color: #008000;\">)</span><span style=\"color: #008080;\">;</span>\n    <span style=\"color: #0000ff;\">return</span><span style=\"color: #008000;\">(</span>app.<span style=\"color: #007788;\">exec</span><span style=\"color: #008000;\">(</span><span style=\"color: #008000;\">)</span><span style=\"color: #008000;\">)</span><span style=\"color: #008080;\">;</span>\n<span style=\"color: #008000;\">}</span></pre></div></div>\n\n\n<p>And then a project file, e.g. <code>Test.pro</code>:</p>\n\n\n<div class=\"wp_syntax\"><div class=\"code\"><pre style=\"font-family: monospace;\" class=\"make\">TEMPLATE <span style=\"color: #004400;\">=</span> app\nTARGET <span style=\"color: #004400;\">=</span> \nDEPENDPATH <span style=\"color: #004400;\">+=</span> <span style=\"color: #004400;\">.</span>\nINCLUDEPATH <span style=\"color: #004400;\">+=</span> <span style=\"color: #004400;\">.</span>\n \nCONFIG <span style=\"color: #004400;\">+=</span> qt\n \nHEADERS <span style=\"color: #004400;\">+=</span>\nSOURCES <span style=\"color: #004400;\">+=</span> main<span style=\"color: #004400;\">.</span>cxx</pre></div></div>\n\n\n<p>After this use <code>qmake</code> to create the required makefile.  I decided to use a subdirectory (<code>_build</code>) in the project, which <code>qmake</code> seems to have full support for:</p>\n\n\n<div class=\"wp_syntax\"><div class=\"code\"><pre style=\"font-family: monospace;\" class=\"dos\"><span style=\"color: #33cc33;\">&gt;</span> qmake ..\\Test.pro</pre></div></div>\n\n\n<h3>Setting up building from Eclipse</h3>\n\n<p>In the project properties modify the <em>C/C++ Build</em> settings for the <em>Debug</em> target.  Instead of the default build command (which is <code>make</code>) one can use <code>nmake</code>, or even better <code>jom</code>:</p>\n\n<ul>\n<li>Build command: <code>C:/QtSDK/QTCreator/bin/jom -f Makefile.Debug</code></li>\n<li>Build directory: <code>${workspace_loc:/Test}/_build</code></li>\n</ul>\n\n<p>Then one can create a <em>Release</em> target, which differs only in that it builds using <code>Makefile.Release</code>.</p>\n\n<h3>Running <code>qmake</code> from inside Eclipse</h3>\n\n<p>It’s very convenient to be able to run <code>qmake</code> and re-generate the makefiles from inside Eclipse.  One can set that up by adding an external tool:</p>\n\n<ul>\n<li>Location: <code>C:\\QtSDK\\Desktop\\Qt\\4.8.0\\msvc2010\\bin\\qmake.exe</code></li>\n<li>Working directory: <code>${workspace_loc:/Test}/_build</code></li>\n<li>Arguments: <code>../Test.pro</code></li>\n</ul>\n\n<h3>In closing</h3>\n\n<p>I plan to also have a look at the <a href=\"http://qt.nokia.com/products/developer-tools\">Qt Visual Studio Add-in</a>, though I suspect we might be using the latest version of VS, which might cause trouble.</p>\n\n<p>Suggestions for further integration with Eclipse would be most welcome, e.g. for forms and translations.</p>\n<p><a href=\"http://www.addtoany.com/share_save#url=http%3A%2F%2Ftherning.org%2Fmagnus%2Farchives%2F1023&amp;title=Manual%20setup%20of%20Qt%2BEclipse%20on%20Windows\" id=\"wpa2a_2\" class=\"a2a_dd a2a_target addtoany_share_save\">Share/Bookmark</a></p>") (pubDate nil "Mon, 09 Apr 2012 20:24:09 +0000"))) ("Bryan O'Sullivan: (re)announcing statprof, a statistical profiler for Python" "<p>Back in 2005, Andy Wingo <a href=\"http://wingolog.org/archives/2005/10/28/profiling\">wrote a neat little statistical profiler</a> named <code>statprof</code> that promptly disappeared into obscurity. It has since languished almost unknown, with a handful of people writing semi-private forks that themselves seem to be dead.</p>\n<p>Statistical profiling (also known as sampling profiling) is simple and sweet: the profiler periodically wakes up and samples the stack, then when all is done, it prints a simple report of which lines showed up most often in the profile.</p>\n<p>Why would this matter, though? Python already has two built-in profilers: lsprof and the long-deprecated hotshot. The trouble with lsprof is that it only tracks function calls. If you have a few hot loops <i>within</i> a function, lsprof is nearly worthless for figuring out which ones are actually important.</p>\n<p>A few days ago, I found myself in exactly the situation in which lsprof fails: it was telling me that <a href=\"http://selenic.com/repo/hg/file/b9bd95e61b49/mercurial/scmutil.py#l520\">I had a hot function</a>, but the function was unfamiliar to me, and long enough that it wasn’t immediately obvious where the problem was.</p>\n<p>After a bit of begging on Twitter and Google+, someone pointed me at statprof. But there was a problem: although it was doing statistical sampling (yay!), it was only tracking the first line of a function when sampling (wtf!?). So I fixed that, spiffed up the documentation, and now it’s both usable and not misleading. Here’s an example of its output, locating the offending line in that hot function more accurately:</p>\n<pre>  %   cumulative      self\ntime    seconds   seconds  name\n68.75      0.14      0.14  scmutil.py:546:revrange\n6.25      0.01      0.01  cmdutil.py:1006:walkchangerevs\n6.25      0.01      0.01  revlog.py:241:__init__\n[...blah blah blah...]\n0.00      0.01      0.00  util.py:237:__get__\n---\nSample count: 16\nTotal time: 0.200000 seconds\n</pre>\n<p>I have uploaded statprof to the <a href=\"http://pypi.python.org/pypi/statprof/\">Python package index</a>, so it’s almost trivial to install: “<code>easy_install statprof</code>” and you’re up and running.</p>\n<p>Since <a href=\"https://github.com/bos/statprof.py\">the code is up on github</a>, please feel welcome to contribute bug reports and improvements. Enjoy!</p>" "http://www.serpentine.com/blog/2012/04/09/reannouncing-statprof-a-statistical-profiler-for-python/" (20355 12232) obsolete 24 nil nil ((title nil "Bryan O'Sullivan: (re)announcing statprof, a statistical profiler for Python") (guid ((isPermaLink . "false")) "http://www.serpentine.com/blog/?p=906") (link nil "http://www.serpentine.com/blog/2012/04/09/reannouncing-statprof-a-statistical-profiler-for-python/") (description nil "<p>Back in 2005, Andy Wingo <a href=\"http://wingolog.org/archives/2005/10/28/profiling\">wrote a neat little statistical profiler</a> named <code>statprof</code> that promptly disappeared into obscurity. It has since languished almost unknown, with a handful of people writing semi-private forks that themselves seem to be dead.</p>\n\n<p>Statistical profiling (also known as sampling profiling) is simple and sweet: the profiler periodically wakes up and samples the stack, then when all is done, it prints a simple report of which lines showed up most often in the profile.</p>\n\n<p>Why would this matter, though? Python already has two built-in profilers: lsprof and the long-deprecated hotshot. The trouble with lsprof is that it only tracks function calls. If you have a few hot loops <i>within</i> a function, lsprof is nearly worthless for figuring out which ones are actually important.</p>\n\n<p>A few days ago, I found myself in exactly the situation in which lsprof fails: it was telling me that <a href=\"http://selenic.com/repo/hg/file/b9bd95e61b49/mercurial/scmutil.py#l520\">I had a hot function</a>, but the function was unfamiliar to me, and long enough that it wasn’t immediately obvious where the problem was.</p>\n\n<p>After a bit of begging on Twitter and Google+, someone pointed me at statprof. But there was a problem: although it was doing statistical sampling (yay!), it was only tracking the first line of a function when sampling (wtf!?). So I fixed that, spiffed up the documentation, and now it’s both usable and not misleading. Here’s an example of its output, locating the offending line in that hot function more accurately:</p>\n\n<pre>  %   cumulative      self          \n time    seconds   seconds  name    \n 68.75      0.14      0.14  scmutil.py:546:revrange\n  6.25      0.01      0.01  cmdutil.py:1006:walkchangerevs\n  6.25      0.01      0.01  revlog.py:241:__init__\n  [...blah blah blah...]\n  0.00      0.01      0.00  util.py:237:__get__\n---\nSample count: 16\nTotal time: 0.200000 seconds\n</pre>\n\n<p>I have uploaded statprof to the <a href=\"http://pypi.python.org/pypi/statprof/\">Python package index</a>, so it’s almost trivial to install: “<code>easy_install statprof</code>” and you’re up and running.</p>\n\n<p>Since <a href=\"https://github.com/bos/statprof.py\">the code is up on github</a>, please feel welcome to contribute bug reports and improvements. Enjoy!</p>") (pubDate nil "Mon, 09 Apr 2012 18:51:52 +0000"))) ("Luke Palmer: Heart" "<p>It is part of growing up, I keep telling myself — doing what I know — for some definition of know — is right, despite the advice of my family and almost everyone (but my best friend who is my only beacon in this whole mess).  I have a good family — supportive, have my best interest in mind, certainly not the image of the disapproving father so pervasive — and partially I haven’t been completely honest with them, because it’s scary.  Nonetheless, I feel a lot of pressure from their attempting-to-be-neutral positions, and I know what I want — what I need to do, but when the time comes to say it I can’t, condemning myself to this purgatory.</p>\n<p>I’m not going to finish college.  I am very close, only a few credits away, but it is not going to happen at the end of this semester, and everyone is like “but it’s <i>just one more</i> and it’s important for the future” — not so different from my reasoning for returning to college in the first place — I have been at this decision point before, and did convince myself with the assistance of my family that it was the right thing to do.  Maybe it was once, and although I did not achieve the goals I set for it, it isn’t right anymore. </p>\n<p>Here’s the really hard part, and I have to speak this with less certainty than the other, because different parts of my mind and body are fighting over it.  I don’t think I’m going to finish <i>this</i> semester.  Try as I might (whatever that means) I <i>cannot</i> commit myself to something that I don’t truly believe is serving me, and right now that is school.  I don’t have that kind of control over myself. My grades are really slipping; each moment here feels like trying to run in a dream, suspended in the air.  I know, what’s another month?  It really doesn’t matter either way.  It would matter if I wanted to go to grad school, but years of getting to know myself and being friends with grad students, I don’t think it is the place for me.  I am too disorganized, my intellectual exploration is founded in too much curiosity and not enough desire to contribute.  Suddenly a pursuit will become uninteresting and another will take me by surprise, but you can’t just switch like that in school.</p>\n<p>But you can just switch like that in life.  Why would I arbitrarily obligate myself to someone else when I am exploring what <i>I</i> love?  Out there in the cruel, forgiving, free world, I can pursue whatever I like whenever and <i>however</i> I like to.  Yes, I need to make money, but that’s not such a huge deal.  I don’t really get why people make their way of earning money the centerpiece of their lives.  Insert canonical white-picket-fence rant.</p>\n<p>I don’t have a good phrase to describe who I want to be or what I’m going for.  I think of such phrases as potentially guiding, locally, but ultimately limiting.  To define myself with words is to forget every moment the words do not account for — when would someone include the Pepsi they had for breakfast in their self-definition? — but that bottle of salt and sugar is part of me, negative or however you want to judge it.  Of course, not having such a phrase makes it difficult to assess the value of a difficult easy decision like this, and without a mechanism for assessing value I have no choice but to be human and follow my hearts — there’s nothing else that I can say with my vocabulary that doesn’t sound like a waste of my life.</p>\n<p>I have long valued every moment of my time.  A year of my life spent unhappy in order to support the remainder of my life never seemed worthwhile to me — I know that sounds irrational — but that seems to be the way I relate to time.  A month spent in school, a month not making my living by sharing my musical heart, a month depressed and careless, a month of missed opportunity.</p>\n<p>And yet, it is only a month.  But why would I stay?  I can’t articulate any convincing reason.  It will make it less work should I ever decide to come back and finish — but that is actually false.  One class is just as many as four, if not more.</p>\n<p>I have had my struggles, but at important times I have always listened to the guidance of my family, I think I have always made what they saw as the best choice.  This time, I think, their poor choice is the right one — if only symbolically, if only to remind myself whose life I am living.</p>\n<p><a href=\"http://flattr.com/thing/620601/Heart\" target=\"_blank\"><img src=\"http://api.flattr.com/button/flattr-badge-large.png\" alt=\"Flattr this\" border=\"0\" title=\"Flattr this\" /></a></p>\n<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/lukepalmer.wordpress.com/2000/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/lukepalmer.wordpress.com/2000/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godelicious/lukepalmer.wordpress.com/2000/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/delicious/lukepalmer.wordpress.com/2000/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gofacebook/lukepalmer.wordpress.com/2000/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/facebook/lukepalmer.wordpress.com/2000/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gotwitter/lukepalmer.wordpress.com/2000/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/twitter/lukepalmer.wordpress.com/2000/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gostumble/lukepalmer.wordpress.com/2000/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/stumble/lukepalmer.wordpress.com/2000/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godigg/lukepalmer.wordpress.com/2000/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/digg/lukepalmer.wordpress.com/2000/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/goreddit/lukepalmer.wordpress.com/2000/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/reddit/lukepalmer.wordpress.com/2000/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=lukepalmer.wordpress.com&amp;blog=5292379&amp;post=2000&amp;subd=lukepalmer&amp;ref=&amp;feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" "http://lukepalmer.wordpress.com/2012/04/09/heart/" (20355 6537) obsolete 25 nil nil ((title nil "Luke Palmer: Heart") (guid ((isPermaLink . "false")) "http://lukepalmer.wordpress.com/?p=2000") (link nil "http://lukepalmer.wordpress.com/2012/04/09/heart/") (description nil "<p>It is part of growing up, I keep telling myself — doing what I know — for some definition of know — is right, despite the advice of my family and almost everyone (but my best friend who is my only beacon in this whole mess).  I have a good family — supportive, have my best interest in mind, certainly not the image of the disapproving father so pervasive — and partially I haven’t been completely honest with them, because it’s scary.  Nonetheless, I feel a lot of pressure from their attempting-to-be-neutral positions, and I know what I want — what I need to do, but when the time comes to say it I can’t, condemning myself to this purgatory.</p>\n<p>I’m not going to finish college.  I am very close, only a few credits away, but it is not going to happen at the end of this semester, and everyone is like “but it’s <i>just one more</i> and it’s important for the future” — not so different from my reasoning for returning to college in the first place — I have been at this decision point before, and did convince myself with the assistance of my family that it was the right thing to do.  Maybe it was once, and although I did not achieve the goals I set for it, it isn’t right anymore. </p>\n<p>Here’s the really hard part, and I have to speak this with less certainty than the other, because different parts of my mind and body are fighting over it.  I don’t think I’m going to finish <i>this</i> semester.  Try as I might (whatever that means) I <i>cannot</i> commit myself to something that I don’t truly believe is serving me, and right now that is school.  I don’t have that kind of control over myself. My grades are really slipping; each moment here feels like trying to run in a dream, suspended in the air.  I know, what’s another month?  It really doesn’t matter either way.  It would matter if I wanted to go to grad school, but years of getting to know myself and being friends with grad students, I don’t think it is the place for me.  I am too disorganized, my intellectual exploration is founded in too much curiosity and not enough desire to contribute.  Suddenly a pursuit will become uninteresting and another will take me by surprise, but you can’t just switch like that in school.</p>\n<p>But you can just switch like that in life.  Why would I arbitrarily obligate myself to someone else when I am exploring what <i>I</i> love?  Out there in the cruel, forgiving, free world, I can pursue whatever I like whenever and <i>however</i> I like to.  Yes, I need to make money, but that’s not such a huge deal.  I don’t really get why people make their way of earning money the centerpiece of their lives.  Insert canonical white-picket-fence rant.</p>\n<p>I don’t have a good phrase to describe who I want to be or what I’m going for.  I think of such phrases as potentially guiding, locally, but ultimately limiting.  To define myself with words is to forget every moment the words do not account for — when would someone include the Pepsi they had for breakfast in their self-definition? — but that bottle of salt and sugar is part of me, negative or however you want to judge it.  Of course, not having such a phrase makes it difficult to assess the value of a difficult easy decision like this, and without a mechanism for assessing value I have no choice but to be human and follow my hearts — there’s nothing else that I can say with my vocabulary that doesn’t sound like a waste of my life.</p>\n<p>I have long valued every moment of my time.  A year of my life spent unhappy in order to support the remainder of my life never seemed worthwhile to me — I know that sounds irrational — but that seems to be the way I relate to time.  A month spent in school, a month not making my living by sharing my musical heart, a month depressed and careless, a month of missed opportunity.</p>\n<p>And yet, it is only a month.  But why would I stay?  I can’t articulate any convincing reason.  It will make it less work should I ever decide to come back and finish — but that is actually false.  One class is just as many as four, if not more.</p>\n<p>I have had my struggles, but at important times I have always listened to the guidance of my family, I think I have always made what they saw as the best choice.  This time, I think, their poor choice is the right one — if only symbolically, if only to remind myself whose life I am living.</p>\n<p><a href=\"http://flattr.com/thing/620601/Heart\" target=\"_blank\"><img src=\"http://api.flattr.com/button/flattr-badge-large.png\" alt=\"Flattr this\" border=\"0\" title=\"Flattr this\" /></a></p>\n<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/lukepalmer.wordpress.com/2000/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/lukepalmer.wordpress.com/2000/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godelicious/lukepalmer.wordpress.com/2000/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/delicious/lukepalmer.wordpress.com/2000/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gofacebook/lukepalmer.wordpress.com/2000/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/facebook/lukepalmer.wordpress.com/2000/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gotwitter/lukepalmer.wordpress.com/2000/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/twitter/lukepalmer.wordpress.com/2000/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gostumble/lukepalmer.wordpress.com/2000/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/stumble/lukepalmer.wordpress.com/2000/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godigg/lukepalmer.wordpress.com/2000/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/digg/lukepalmer.wordpress.com/2000/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/goreddit/lukepalmer.wordpress.com/2000/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/reddit/lukepalmer.wordpress.com/2000/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=lukepalmer.wordpress.com&amp;blog=5292379&amp;post=2000&amp;subd=lukepalmer&amp;ref=&amp;feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />") (pubDate nil "Mon, 09 Apr 2012 17:16:57 +0000"))) ("Edwin Brady: New draft: Implementation of a General Purpose Programming Language with Dependent Types" "<p>I’ve written a draft paper describing the implementation of Idris,<br />\n<a href=\"http://www.cs.st-andrews.ac.uk/~eb/drafts/impldtp.pdf\">Implementation of a General Purpose Programming Language with Dependent Types</a>, abstract as follows:</p>\n<blockquote><p>Many components of a dependently typed programming language are by now well understood, for example the underlying type theory, type checking, unification and evaluation. How to combine these components into a realistic and usable high level language is, however, folklore, discovered anew by succesive language implementations. In this paper, I describe the implementation of a new dependently typed functional programming language, Idris. Idris is intended to be a general purpose programming language and as such provides high level concepts such as implicit syntax, type classes and do notation. I describe the high level language and the underlying type theory, and present a method for elaborating concrete high level syntax with implicit arguments and type classes into a fully explicit type theory. Furthermore, I show how this method, based on a domain specific language embedded in Haskell, facilitates the implementation of new high level language constructs.</p>\n</blockquote>\n<p>There’s still some polishing to do, but comments on the content, form, and so on, would be most welcome. Enjoy!</p>\n<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/edwinb.wordpress.com/172/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/edwinb.wordpress.com/172/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godelicious/edwinb.wordpress.com/172/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/delicious/edwinb.wordpress.com/172/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gofacebook/edwinb.wordpress.com/172/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/facebook/edwinb.wordpress.com/172/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gotwitter/edwinb.wordpress.com/172/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/twitter/edwinb.wordpress.com/172/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gostumble/edwinb.wordpress.com/172/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/stumble/edwinb.wordpress.com/172/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godigg/edwinb.wordpress.com/172/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/digg/edwinb.wordpress.com/172/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/goreddit/edwinb.wordpress.com/172/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/reddit/edwinb.wordpress.com/172/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=edwinb.wordpress.com&amp;blog=666773&amp;post=172&amp;subd=edwinb&amp;ref=&amp;feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" "http://edwinb.wordpress.com/2012/04/08/new-draft-implementation-of-a-general-purpose-programming-language-with-dependent-types/" (20354 50156) obsolete 26 nil nil ((title nil "Edwin Brady: New draft: Implementation of a General Purpose Programming Language with Dependent Types") (guid ((isPermaLink . "false")) "http://edwinb.wordpress.com/?p=172") (link nil "http://edwinb.wordpress.com/2012/04/08/new-draft-implementation-of-a-general-purpose-programming-language-with-dependent-types/") (description nil "<p>I’ve written a draft paper describing the implementation of Idris,<br />\n<a href=\"http://www.cs.st-andrews.ac.uk/~eb/drafts/impldtp.pdf\">Implementation of a General Purpose Programming Language with Dependent Types</a>, abstract as follows:</p>\n<blockquote><p>Many components of a dependently typed programming language are by now well understood, for example the underlying type theory, type checking, unification and evaluation. How to combine these components into a realistic and usable high level language is, however, folklore, discovered anew by succesive language implementations. In this paper, I describe the implementation of a new dependently typed functional programming language, Idris. Idris is intended to be a general purpose programming language and as such provides high level concepts such as implicit syntax, type classes and do notation. I describe the high level language and the underlying type theory, and present a method for elaborating concrete high level syntax with implicit arguments and type classes into a fully explicit type theory. Furthermore, I show how this method, based on a domain specific language embedded in Haskell, facilitates the implementation of new high level language constructs.</p>\n</blockquote>\n<p>There’s still some polishing to do, but comments on the content, form, and so on, would be most welcome. Enjoy!</p>\n<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/edwinb.wordpress.com/172/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/edwinb.wordpress.com/172/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godelicious/edwinb.wordpress.com/172/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/delicious/edwinb.wordpress.com/172/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gofacebook/edwinb.wordpress.com/172/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/facebook/edwinb.wordpress.com/172/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gotwitter/edwinb.wordpress.com/172/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/twitter/edwinb.wordpress.com/172/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gostumble/edwinb.wordpress.com/172/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/stumble/edwinb.wordpress.com/172/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godigg/edwinb.wordpress.com/172/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/digg/edwinb.wordpress.com/172/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/goreddit/edwinb.wordpress.com/172/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/reddit/edwinb.wordpress.com/172/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=edwinb.wordpress.com&amp;blog=666773&amp;post=172&amp;subd=edwinb&amp;ref=&amp;feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />") (pubDate nil "Mon, 09 Apr 2012 11:11:40 +0000"))) ("Christopher Done: How I spent Easter weekend" "<p>I have recently bought a bike, so I would’ve gone out for another trip around the local mountains, but it’s been pretty iffy weather, I don’t feel like going out riding in the rain.</p><p>So instead I spent time at home hacking. In fact the whole three days (friday evening to monday evening) I’ve spent programming and pretty much zero relaxation. Usually I have some down-time to my workflow but this weekend I’ve been hacking non-stop. My fingers are about ready to give out on me as I write this blog.</p><p>The first thing I wrote was <a href=\"https://github.com/chrisdone/bdo\">bdo</a>, an Emacs mode, and some JavaScript, to allow me to update the CSS file of my web site on the fly from Emacs in the browser. This gives it a Firebug-like feel, except that the changes to the CSS is saved. This is very nice. I started writing that because I wanted to overhaul the theme of a web site at work. That took the better part of Saturday to whip up.</p><p>Then, armed with this new tool, I set my sights on overhauling the design of said web site. The problem is that a new design was created for it, which is used for the entry page, but once logged in the old design remains. My job was to bring the new design into the logged in area. Fortunately my UI library and general way of working has been strict enough that modifying the theme quite a bit was a piece of cake. With bdo it was 10 times faster and a more pleasant experience.</p><p>In between that I took a brief break to chat a bit on IRC, and watch the first episode of an anime that was recommended to me called Code Geass - Lelouch of the Rebellion. I’ve yet to decide whether I like the show based on the pilot. I also watched some more Twin Peaks. And listened to some Ethics of Liberty on audiobook.</p><p>After that I decided with the new theme rolled out I would work on the UX part, which involved creating about five new pages for different users and different tasks. This, I think, simplified and made the overall process more robust. So I spent most of the weekend, my vacation, hacking on a work project. I’m not sure exactly why I spent all my weekend working on something for free, but I think it has something to do with pride, and wanting to make the software slicker and more awesome.</p><p>After that I eventually got round to what I’ve wanted to do for a while, which is to setup a wiki for myself, to jot ideas down that I have. Seeing as gitit fails to understand its own config file, I am left with a subdomain instead of a sub path, so the address is <a href=\"http://wiki.chrisdone.com/\">http://wiki.chrisdone.com/</a>. All the pages are <a href=\"http://wiki.chrisdone.com/_index\">here.</a> Pretty much ideas and observations I’ve made in the past or thought about, that I’d like to jot down for future reference to people in conversation, and just for the mental health aspect of writing things down in a coherent, linked manner.</p><p>After that I took a pic of myself with my iPod, touched it up with GIMP, and stuck it on <a href=\"http://chrisdone.com/\">my homepage</a>. So I’m there, upside down, looking down at my content. Fun.</p><p>So that’s what I got up to this weekend. Now I’m going to kick back with a bowl of cereal and watch <a href=\"http://channel9.msdn.com/Events/Lang-NEXT/Lang-NEXT-2012/A-Means-to-Many-Ends-10-Years-of-Haskell-at-Galois\">this talk about Haskell by Galois</a>.</p>" "http://chrisdone.com/posts/2012-04-09-spent-easter-programming.html" (20354 9856) obsolete 27 nil nil ((title nil "Christopher Done: How I spent Easter weekend") (guid ((isPermaLink . "true")) "http://chrisdone.com/posts/2012-04-09-spent-easter-programming.html") (link nil "http://chrisdone.com/posts/2012-04-09-spent-easter-programming.html") (description nil "<p>I have recently bought a bike, so I would’ve gone out for another trip around the local mountains, but it’s been pretty iffy weather, I don’t feel like going out riding in the rain.</p><p>So instead I spent time at home hacking. In fact the whole three days (friday evening to monday evening) I’ve spent programming and pretty much zero relaxation. Usually I have some down-time to my workflow but this weekend I’ve been hacking non-stop. My fingers are about ready to give out on me as I write this blog.</p><p>The first thing I wrote was <a href=\"https://github.com/chrisdone/bdo\">bdo</a>, an Emacs mode, and some JavaScript, to allow me to update the CSS file of my web site on the fly from Emacs in the browser. This gives it a Firebug-like feel, except that the changes to the CSS is saved. This is very nice. I started writing that because I wanted to overhaul the theme of a web site at work. That took the better part of Saturday to whip up.</p><p>Then, armed with this new tool, I set my sights on overhauling the design of said web site. The problem is that a new design was created for it, which is used for the entry page, but once logged in the old design remains. My job was to bring the new design into the logged in area. Fortunately my UI library and general way of working has been strict enough that modifying the theme quite a bit was a piece of cake. With bdo it was 10 times faster and a more pleasant experience.</p><p>In between that I took a brief break to chat a bit on IRC, and watch the first episode of an anime that was recommended to me called Code Geass - Lelouch of the Rebellion. I’ve yet to decide whether I like the show based on the pilot. I also watched some more Twin Peaks. And listened to some Ethics of Liberty on audiobook.</p><p>After that I decided with the new theme rolled out I would work on the UX part, which involved creating about five new pages for different users and different tasks. This, I think, simplified and made the overall process more robust. So I spent most of the weekend, my vacation, hacking on a work project. I’m not sure exactly why I spent all my weekend working on something for free, but I think it has something to do with pride, and wanting to make the software slicker and more awesome.</p><p>After that I eventually got round to what I’ve wanted to do for a while, which is to setup a wiki for myself, to jot ideas down that I have. Seeing as gitit fails to understand its own config file, I am left with a subdomain instead of a sub path, so the address is <a href=\"http://wiki.chrisdone.com/\">http://wiki.chrisdone.com/</a>. All the pages are <a href=\"http://wiki.chrisdone.com/_index\">here.</a> Pretty much ideas and observations I’ve made in the past or thought about, that I’d like to jot down for future reference to people in conversation, and just for the mental health aspect of writing things down in a coherent, linked manner.</p><p>After that I took a pic of myself with my iPod, touched it up with GIMP, and stuck it on <a href=\"http://chrisdone.com/\">my homepage</a>. So I’m there, upside down, looking down at my content. Fun.</p><p>So that’s what I got up to this weekend. Now I’m going to kick back with a bowl of cereal and watch <a href=\"http://channel9.msdn.com/Events/Lang-NEXT/Lang-NEXT-2012/A-Means-to-Many-Ends-10-Years-of-Haskell-at-Galois\">this talk about Haskell by Galois</a>.</p>") (pubDate nil "Mon, 09 Apr 2012 00:00:00 +0000"))) ("Bryan O'Sullivan: github is making me feel stupid(er)" "<p>I’m approaching my fourth anniversary of using github. I should hardly have to state that it’s a wonderful service, and especially so for being kept freely available to the open source community. At the same time, I’ve noticed over the past year or so that in many ways I feel less efficient using it now than I used to, even though the github team continues to roll out new features that make me shout “hooray!”</p>\n<p>I doubt that these difficulties are unique to me, or even related to the fact that I’ve got a new baby (so I have the cognitive sharpness of a cotton ball). So here’s what I’m seeing; I hope that these observations are helpful to the github folks in understanding how their service is used.</p>\n<p>Firstly, a spot of cognitive organizing: I really like the newish “issues across all of my projects” dashboard, but when I’m thinking about “stuff that’s mine”, I tend to navigate to <tt>github.com/bos</tt>, and that dashboard isn’t there. Instead, I kick myself and navigate to plain old <tt>github.com</tt>.  You could reasonably respond “okay, fine, just remember that, and you’re done”. And yet somehow this knowledge refuses to stick in my head.</p>\n<p>What I find more confusing is the visual clutter at the top of a project page. There are now <i>seven</i> short-but-wide horizontal rows of stuff (both information and links) at the top of a project’s main page. Here’s an annotated screenshot that I hope illustrates what I’m talking about.</p>\n<a href=\"http://www.serpentine.com/wordpress/wp-content/uploads/2012/04/github.png\"><img src=\"http://www.serpentine.com/wordpress/wp-content/uploads/2012/04/github.png\" title=\"github\" height=\"246\" width=\"600\" alt=\"\" class=\"aligncenter size-full wp-image-902\" /></a>\n<p>I frequently find myself looking for the <a href=\"https://github.com/bos/text/commits/master\">commits page</a>, which is in the middle of row number 6. At least for me, there seems to be no escaping the need to scan across every row in turn until I reach row 6, where I find the word “commits”. That is, I <i>usually</i> find it; I can easily miss it among all the similar entries if I’m not paying close attention. I find it difficult to visually distinguish the rows at a glance, so there’s no skipping past clusters of stuff that aren’t relevant.</p>\n<p>These aren’t killer problems by any stretch, but I do all too often find myself staring at github web pages for 30 seconds at a time, wondering “am I looking at the right page? Did I miss the row of stuff I’m looking for?” I imagine there might be a way to organize these things better, though I’m no visual designer, and I’m afraid I don’t have any crisp suggestions for what might work.</p>" "http://www.serpentine.com/blog/2012/04/08/github-is-making-me-feel-stupider/" (20353 51250) obsolete 28 nil nil ((title nil "Bryan O'Sullivan: github is making me feel stupid(er)") (guid ((isPermaLink . "false")) "http://www.serpentine.com/blog/?p=898") (link nil "http://www.serpentine.com/blog/2012/04/08/github-is-making-me-feel-stupider/") (description nil "<p>I’m approaching my fourth anniversary of using github. I should hardly have to state that it’s a wonderful service, and especially so for being kept freely available to the open source community. At the same time, I’ve noticed over the past year or so that in many ways I feel less efficient using it now than I used to, even though the github team continues to roll out new features that make me shout “hooray!”</p>\n\n<p>I doubt that these difficulties are unique to me, or even related to the fact that I’ve got a new baby (so I have the cognitive sharpness of a cotton ball). So here’s what I’m seeing; I hope that these observations are helpful to the github folks in understanding how their service is used.</p>\n\n<p>Firstly, a spot of cognitive organizing: I really like the newish “issues across all of my projects” dashboard, but when I’m thinking about “stuff that’s mine”, I tend to navigate to <tt>github.com/bos</tt>, and that dashboard isn’t there. Instead, I kick myself and navigate to plain old <tt>github.com</tt>.  You could reasonably respond “okay, fine, just remember that, and you’re done”. And yet somehow this knowledge refuses to stick in my head.</p>\n\n<p>What I find more confusing is the visual clutter at the top of a project page. There are now <i>seven</i> short-but-wide horizontal rows of stuff (both information and links) at the top of a project’s main page. Here’s an annotated screenshot that I hope illustrates what I’m talking about.</p>\n\n<a href=\"http://www.serpentine.com/wordpress/wp-content/uploads/2012/04/github.png\"><img src=\"http://www.serpentine.com/wordpress/wp-content/uploads/2012/04/github.png\" title=\"github\" height=\"246\" width=\"600\" alt=\"\" class=\"aligncenter size-full wp-image-902\" /></a>\n\n<p>I frequently find myself looking for the <a href=\"https://github.com/bos/text/commits/master\">commits page</a>, which is in the middle of row number 6. At least for me, there seems to be no escaping the need to scan across every row in turn until I reach row 6, where I find the word “commits”. That is, I <i>usually</i> find it; I can easily miss it among all the similar entries if I’m not paying close attention. I find it difficult to visually distinguish the rows at a glance, so there’s no skipping past clusters of stuff that aren’t relevant.</p>\n\n<p>These aren’t killer problems by any stretch, but I do all too often find myself staring at github web pages for 30 seconds at a time, wondering “am I looking at the right page? Did I miss the row of stuff I’m looking for?” I imagine there might be a way to organize these things better, though I’m no visual designer, and I’m afraid I don’t have any crisp suggestions for what might work.</p>") (pubDate nil "Sun, 08 Apr 2012 17:17:38 +0000"))) ("Roman Cheplyaka: Reasoning about space usage in Haskell" "<p>This article describes why it’s hard to reason about space usage of Haskell programs.</p>\n<h2 id=\"operational-semantics\">Operational semantics</h2>\n<p>The standard (“The Haskell Report”) does not specify an operational semantics for Haskell. Thus, in order to talk about space usage of Haskell programs, we need to fix a particular semantics. A good choice is the STG semantics as defined in the <a href=\"http://community.haskell.org/~simonmar/papers/evalapplyjfp06.pdf\">fast curry paper</a>. First, it is formally defined; second, it has significant practical value, since it is used in GHC, the de-facto standard Haskell compiler.</p>\n<p>Note, however, that the STG operational semantics is defined for STG programs, not Haskell programs (STG defines its own small functional language). It’s not always obvious what STG program corresponds to a given Haskell program because of numerous optimizations performed by the compiler, but GHC allows to see the resulting STG code using the <code>-ddump-stg</code> flag.</p>\n<h2 id=\"operational-properties-are-context-dependent\">Operational properties are context-dependent</h2>\n<p>In eager languages, usually we can easily express time and space complexity, e.g. using O-notation.</p>\n<p>In Haskell, operational properties are largely context-dependent, and there’s no existing framework to express them.</p>\n<h3 id=\"laziness\">Laziness</h3>\n<p>One source of context dependency is a direct consequence of lazy evaluation: the function result may be evaluated to different extents by different callers.</p>\n<p>For example, it may seem that <code>[1..n]</code> requires O(n) memory, but when called from <code>take m [1..n]</code>, it takes only O(min(m,n)) memory.</p>\n<h3 id=\"garbage-collection\">Garbage collection</h3>\n<p>Another source of context dependency is interaction between laziness and automatic memory management.</p>\n<p>For example, the following two functions look equivalent in terms of space usage (although the second one is somewhat less time-efficient):</p>\n<pre class=\"sourceCode\"><code class=\"sourceCode haskell\">f1 list <span class=\"fu\">=</span> foldl' (\\(<span class=\"fu\">!</span>a,<span class=\"fu\">!</span>b) x <span class=\"ot\">-&gt;</span> (a <span class=\"fu\">+</span> x, b <span class=\"fu\">*</span> x)) (<span class=\"dv\">0</span>, <span class=\"dv\">1</span>) list<br /><br />f2 list <span class=\"fu\">=</span> (foldl' (\\a x <span class=\"ot\">-&gt;</span> a <span class=\"fu\">+</span> x) <span class=\"dv\">0</span> list, foldl' (\\b x <span class=\"ot\">-&gt;</span> b <span class=\"fu\">*</span> x) <span class=\"dv\">1</span> list)</code></pre>\n<p>It would seem that these functions run in constant space. Of course, by “constant space” we really mean “constant additional space” — we do not count the space occupied by the list itself, because the function doesn’t create the list. Well, in a lazy language it does!</p>\n<p>The difference becomes clear if we consider <code>f1 [1..n]</code> and <code>f2 [1..n]</code>: the former indeed runs in constant space, while the latter requires linear space.</p>\n<p>The reason is that <code>f1</code> can process the list incrementally. It demands the next value from the list, updates its accumulators and throws the value away.</p>\n<p>In <code>f2</code>, the first fold evaluates the list, but it has to be kept in memory to be used for the second fold. As a result, by the time the first fold is evaluated, the whole list is evaluated and none of it is garbage collected.</p>\n<h3 id=\"thunks\">Thunks</h3>\n<p>It’s not enough to track how much space our data occupies. Another kind of heap inhabitants is thunks. When more thunks are created than necessary, we have a <a href=\"http://blog.ezyang.com/2011/05/anatomy-of-a-thunk-leak/\">thunk leak</a>.</p>\n<p>By the way, how many thunks may be necessary? Are there examples where having more than O(1) thunks at some point of program execution is the best solution to the problem? I don’t know yet.</p>\n<p>In any case, we need to be able to reason about the number of thunks that are created by a function.</p>\n<p>To complicate things further, creation of thunks depends on how the function result is evaluated. For example, a function returns a (lazy) tuple. We force the first element of that tuple. During the evaluation, everything that is needed to evaluate that first element is evaluated immediately, but values needed only for the second element are stored in thunks.</p>\n<p>If we evaluated the second element, the picture would be dual, and the number of thunks probably would be different.</p>\n<h2 id=\"conclusions\">Conclusions</h2>\n<p>Currently, if we want to reason about space usage of Haskell programs, we need:</p>\n<ul>\n<li>study the source code of each function. A function documentation typically includes its type, denotational semantics and perhaps some O-figures, but that’s not enough, as we’ve seen;</li>\n<li>for each function, understand how its result is evaluated by all callers.</li>\n</ul>\n<p>Clearly, this breaks abstraction and modularity.</p>\n<p>In practice, GHC’s strictness analyser is very smart, so most of the time we don’t notice any problems. Still, it’s very important to have a framework in which we could analyse and document functions’ operational behaviour in a modular and composable way.</p><img src=\"http://feeds.feedburner.com/~r/RomanCheplyaka/~4/7PtW760Vxgw\" height=\"1\" width=\"1\" />" "http://feedproxy.google.com/~r/RomanCheplyaka/~3/7PtW760Vxgw/2012-04-08-space-usage-reasoning.html" (20352 54528) obsolete 29 nil nil ((title nil "Roman Cheplyaka: Reasoning about space usage in Haskell") (guid ((isPermaLink . "false")) "http://ro-che.info/articles//2012-04-08-space-usage-reasoning.html") (link nil "http://feedproxy.google.com/~r/RomanCheplyaka/~3/7PtW760Vxgw/2012-04-08-space-usage-reasoning.html") (description nil "<p>This article describes why it’s hard to reason about space usage of Haskell programs.</p>\n<h2 id=\"operational-semantics\">Operational semantics</h2>\n<p>The standard (“The Haskell Report”) does not specify an operational semantics for Haskell. Thus, in order to talk about space usage of Haskell programs, we need to fix a particular semantics. A good choice is the STG semantics as defined in the <a href=\"http://community.haskell.org/~simonmar/papers/evalapplyjfp06.pdf\">fast curry paper</a>. First, it is formally defined; second, it has significant practical value, since it is used in GHC, the de-facto standard Haskell compiler.</p>\n<p>Note, however, that the STG operational semantics is defined for STG programs, not Haskell programs (STG defines its own small functional language). It’s not always obvious what STG program corresponds to a given Haskell program because of numerous optimizations performed by the compiler, but GHC allows to see the resulting STG code using the <code>-ddump-stg</code> flag.</p>\n<h2 id=\"operational-properties-are-context-dependent\">Operational properties are context-dependent</h2>\n<p>In eager languages, usually we can easily express time and space complexity, e.g. using O-notation.</p>\n<p>In Haskell, operational properties are largely context-dependent, and there’s no existing framework to express them.</p>\n<h3 id=\"laziness\">Laziness</h3>\n<p>One source of context dependency is a direct consequence of lazy evaluation: the function result may be evaluated to different extents by different callers.</p>\n<p>For example, it may seem that <code>[1..n]</code> requires O(n) memory, but when called from <code>take m [1..n]</code>, it takes only O(min(m,n)) memory.</p>\n<h3 id=\"garbage-collection\">Garbage collection</h3>\n<p>Another source of context dependency is interaction between laziness and automatic memory management.</p>\n<p>For example, the following two functions look equivalent in terms of space usage (although the second one is somewhat less time-efficient):</p>\n<pre class=\"sourceCode\"><code class=\"sourceCode haskell\">f1 list <span class=\"fu\">=</span> foldl' (\\(<span class=\"fu\">!</span>a,<span class=\"fu\">!</span>b) x <span class=\"ot\">-&gt;</span> (a <span class=\"fu\">+</span> x, b <span class=\"fu\">*</span> x)) (<span class=\"dv\">0</span>, <span class=\"dv\">1</span>) list<br /><br />f2 list <span class=\"fu\">=</span> (foldl' (\\a x <span class=\"ot\">-&gt;</span> a <span class=\"fu\">+</span> x) <span class=\"dv\">0</span> list, foldl' (\\b x <span class=\"ot\">-&gt;</span> b <span class=\"fu\">*</span> x) <span class=\"dv\">1</span> list)</code></pre>\n<p>It would seem that these functions run in constant space. Of course, by “constant space” we really mean “constant additional space” — we do not count the space occupied by the list itself, because the function doesn’t create the list. Well, in a lazy language it does!</p>\n<p>The difference becomes clear if we consider <code>f1 [1..n]</code> and <code>f2 [1..n]</code>: the former indeed runs in constant space, while the latter requires linear space.</p>\n<p>The reason is that <code>f1</code> can process the list incrementally. It demands the next value from the list, updates its accumulators and throws the value away.</p>\n<p>In <code>f2</code>, the first fold evaluates the list, but it has to be kept in memory to be used for the second fold. As a result, by the time the first fold is evaluated, the whole list is evaluated and none of it is garbage collected.</p>\n<h3 id=\"thunks\">Thunks</h3>\n<p>It’s not enough to track how much space our data occupies. Another kind of heap inhabitants is thunks. When more thunks are created than necessary, we have a <a href=\"http://blog.ezyang.com/2011/05/anatomy-of-a-thunk-leak/\">thunk leak</a>.</p>\n<p>By the way, how many thunks may be necessary? Are there examples where having more than O(1) thunks at some point of program execution is the best solution to the problem? I don’t know yet.</p>\n<p>In any case, we need to be able to reason about the number of thunks that are created by a function.</p>\n<p>To complicate things further, creation of thunks depends on how the function result is evaluated. For example, a function returns a (lazy) tuple. We force the first element of that tuple. During the evaluation, everything that is needed to evaluate that first element is evaluated immediately, but values needed only for the second element are stored in thunks.</p>\n<p>If we evaluated the second element, the picture would be dual, and the number of thunks probably would be different.</p>\n<h2 id=\"conclusions\">Conclusions</h2>\n<p>Currently, if we want to reason about space usage of Haskell programs, we need:</p>\n<ul>\n<li>study the source code of each function. A function documentation typically includes its type, denotational semantics and perhaps some O-figures, but that’s not enough, as we’ve seen;</li>\n<li>for each function, understand how its result is evaluated by all callers.</li>\n</ul>\n<p>Clearly, this breaks abstraction and modularity.</p>\n<p>In practice, GHC’s strictness analyser is very smart, so most of the time we don’t notice any problems. Still, it’s very important to have a framework in which we could analyse and document functions’ operational behaviour in a modular and composable way.</p><img src=\"http://feeds.feedburner.com/~r/RomanCheplyaka/~4/7PtW760Vxgw\" height=\"1\" width=\"1\" />") (pubDate nil "Sun, 08 Apr 2012 00:00:00 +0000"))) ("Dan Piponi (sigfpe): Generalised entropy" "<b>Introduction</b><br />The <a href=\"http://en.wikipedia.org/wiki/Entropy\">entropy</a> of a probability distribution can be seen as a measure of its uncertainty or a measure of the diversity of samples taken from it. Over the years I've talked lots about how <a href=\"http://blog.sigfpe.com/2007/03/monads-vector-spaces-and-quantum.html\">probability theory</a> gives rise to a monad. This suggests the possibility that maybe the notion of entropy can be generalised to monads other than probability. So here goes...<br /><br /><pre>&gt; {-# LANGUAGE MultiParamTypeClasses, FlexibleInstances, GeneralizedNewtypeDeriving #-}<br />&gt; {-# LANGUAGE FunctionalDependencies, TypeSynonymInstances #-}<br /><br />&gt; import Control.Monad<br />&gt; import Control.Monad.Writer hiding (lift)<br /><br /><br /></pre><b>Shannon entropy</b><br />I've talked in the past about how there is some trickiness with defining the probability monad in Haskell because a good implementation requires use of the <tt>Eq</tt> typeclass, and hence restricted monads. Restricted monads are possible through a bunch of methods, but this time I don't want them.<br /><br />It's common to represent probability distributions on finite sets as lists of pairs where each pair <tt>(p, x)</tt> means <tt>x</tt> has a probability <tt>p</tt>. But I'm going to allow lists without the restriction that each <tt>x</tt> appears once and make my code work with these generalised distributions. When I compute the entropy, say, it will only be the usual entropy in the case that each <tt>x</tt> in the list is unique.<br /><br />So here's our type and some instances for it:<br /><br /><pre>&gt; data P a = P [(a, Float)] deriving Show<br /><br />&gt; instance Functor P where<br />&gt;      fmap f (P xs) = P [(f a, p) | (a, p) &lt;- xs]<br /><br />&gt; instance Monad P where<br />&gt;      return x = P [(x, 1)]<br />&gt;      P xss &gt;&gt;= f = P [(y, p*q) | (pxs, p) &lt;- xss, let P ys = f pxs, (y, q) &lt;- ys]<br /><br /></pre>We can easily compute the expected value of a distribution, and its entropy, like this:<br /><br /><pre>&gt; expectation0 (P xs) = sum [x*p | (x, p) &lt;- xs]<br />&gt; entropy0 (P xs) = -sum [if p==0 then 0 else p*log p/log 2.0 | (_, p) &lt;- xs]<br /><br /></pre>An important property of entropy is known as the grouping property which can be illustrated through an example tree like this:<br /><br /><div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://4.bp.blogspot.com/-67NuhgTvHY4/T4BeuNAHpsI/AAAAAAAABBA/D4tg6ATA9CQ/s1600/tree.png\"><img src=\"http://4.bp.blogspot.com/-67NuhgTvHY4/T4BeuNAHpsI/AAAAAAAABBA/D4tg6ATA9CQ/s320/tree.png\" height=\"200\" border=\"0\" width=\"480\" /></a></div><br />The entropy for the probability distribution of the final leaves is the sum of two components: (1) the entropy of the branch at the root of the tree and (2) the expected entropy of the subtrees. Here's some corresponding code. First simple bernoulli trials:<br /><br /><pre>&gt; bernoulli p a b = P [(a, p), (b, 1-p)]<br /><br /></pre>Now the branch at the root of the tree:<br /><br /><pre>&gt; root = bernoulli 0.3 False True<br /><br /></pre>We can compute the entropy for the distrbution on the leaves:<br /><br /><pre>&gt; test1 = entropy0 $ do<br />&gt;   x &lt;- root<br />&gt;   if x<br />&gt;     then bernoulli 0.2 3 4<br />&gt;     else bernoulli 0.4 5 6<br /><br /></pre>Or the sum of the root entropy and the expected subtree entropy:<br /><br /><pre>&gt; test2 = entropy0 root + (expectation0 $ do<br />&gt;   x &lt;- root<br />&gt;   if x<br />&gt;     then return $ entropy0 (bernoulli 0.2 3 4)<br />&gt;     else return $ entropy0 (bernoulli 0.4 5 6))<br /><br /></pre>You can confirm for yourself that <tt>test1 == test2</tt>.<br /><br />We can rewrite that a little. We're drawing <tt>True</tt> or <tt>False</tt> from <tt>root</tt> only to decide which distribution to use at the next stage. But we may as will pick the distribution itself at random. So define:<br /><br /><pre>&gt; dist = bernoulli 0.3 (bernoulli 0.4 5 6) (bernoulli 0.2 3 4)<br /><br /></pre>And now we expect the equality of <tt>test3</tt> and <tt>test4</tt>:<br /><br /><pre>&gt; test3 = entropy0 $ do<br />&gt;   x &lt;- dist<br />&gt;   x<br /><br />&gt; test4 = entropy0 dist + (expectation0 $ do<br />&gt;   x &lt;- dist<br />&gt;   return $ entropy0 x)<br /><br /></pre>There's a more elegant way of writing this. Define:<br /><br /><pre>&gt; left0 dist = entropy0 (join dist)<br />&gt; right0 dist = entropy0 dist+expectation0 (fmap entropy0 dist)<br /><br /></pre>Now we expect <tt>left0 dist</tt> and <tt>right0 dist</tt> to always be equal. We've almost generalised to something that makes sense in the context of monads other than probability.<br /><br /><b>The algebra of a monad</b><br />Here are a couple of important properties of <tt>expectation0</tt>:<br /><br />1. <tt>expectation0 (return d) = d</tt><br />2. <tt>expectation0 (join d) = expectation0 (fmap expectation d)</tt><br /><br />In English: the expectation of certainty is just the certain value, and the expectation of an expectation is just the expectation. But these rules are precisely the conditions that define an <img src=\"https://chart.googleapis.com/chart?cht=tx&amp;chl=M\" style=\"vertical-align: middle;\" />-<a href=\"http://en.wikipedia.org/wiki/Monad_%28category_theory%29#Algebras_for_a_monad\">algebra</a>, where <img src=\"https://chart.googleapis.com/chart?cht=tx&amp;chl=M\" style=\"vertical-align: middle;\" /> is a monad.<br /><br />So let's define a type class:<br /><br /><pre>&gt; class Algebra m a | m -&gt; a where<br />&gt;      expectation :: m a -&gt; a<br /><br /></pre>We'll assume that when <tt>m</tt> is a monad, any instance satisfies the two laws above. Here's the instance for probability:<br /><br /><pre>&gt; instance Algebra P Float where<br />&gt;      expectation (P xs) = sum [x*p | (x, p) &lt;- xs]<br /><br /></pre>In keeping with the notion that entropy measure diversity let's also define:<br /><br /><pre>&gt; class Diverse m r | m -&gt; r where<br />&gt;      entropy :: m x -&gt; r<br /><br /></pre>with the instance:<br /><br /><pre>&gt; instance Diverse P Float where<br />&gt;      entropy (P xs) = -sum [if p==0 then 0 else p*log p/log 2.0 | (_, p) &lt;- xs]<br /><br /></pre>It's not clear what laws we need but for now we'll assume a generalised entropy satisfies <tt>left dist == right dist </tt>:<br /><br /><pre>&gt; left dist = entropy (join dist)<br />&gt; right dist = entropy dist+expectation (fmap entropy dist)<br /><br /></pre>We'll call that the generalised grouping law.<br /><br /><b>Binary trees</b><br />It's not hard to find other structures that satisfy these laws if we cheat and use alternative structures to represent probabilities. For example We can make <tt>Tree</tt> an instance by assuming <tt>Fork</tt> represents a 50/50 chance of going one way or another:<br /><br /><pre>&gt; data Tree a = Leaf a | Fork (Tree a) (Tree a) deriving Show<br /><br />&gt; instance Functor Tree where<br />&gt;      fmap f (Leaf a) = Leaf (f a)<br />&gt;      fmap f (Fork l r) = Fork (fmap f l) (fmap f r)<br /><br />&gt; instance Monad Tree where<br />&gt;      return x = Leaf x<br />&gt;      Leaf a &gt;&gt;= f = f a<br />&gt;      Fork l r &gt;&gt;= f = Fork (l &gt;&gt;= f) (r &gt;&gt;= f)<br /><br />&gt; instance Algebra Tree Float where<br />&gt;      expectation (Leaf a) = a<br />&gt;      expectation (Fork l r) = 0.5*expectation l+0.5*expectation r<br /><br />&gt; instance Diverse Tree Float where<br />&gt;      entropy (Leaf a) = 0<br />&gt;      entropy (Fork l r) = 1+0.5*entropy l+0.5*entropy r<br /><br /></pre><b>Lists</b><br />We could make non-empty lists into an instance by assuming a uniform distribution on the list. But another way to measure the diversity is simply to count the elements. We subtract one so that <tt>[x]</tt> corresponds to diversity zero. This subtraction gives us a non-trivial instance:<br /><br /><pre>&gt; newtype L a = L [a] deriving (Show, Monad, Functor)<br /><br />&gt; instance Algebra L Int where<br />&gt;      expectation (L xs) = sum xs<br /><br />&gt; instance Diverse L Int where<br />&gt;      entropy (L xs) = length xs-1<br /><br /></pre><b>Tsallis entropy</b><br />There are measures of diversity for probability distributions that are distinct from Shannon entropy. An example is <a href=\"http://blog.sigfpe.com/Tsallis_entropy\">Tsallis entropy</a>. At this point I'd like a family of types parametrised by reals but Haskell doesn't support dependent types. So I'll just fix a real number <tt>q</tt> and we can define:<br /><br /><pre>&gt; q = 2.5<br /><br />&gt; data T a = T [(a, Float)] deriving Show<br /><br />&gt; instance Functor T where<br />&gt;      fmap f (T xs) = T [(f a, p) | (a, p) &lt;- xs]<br /><br />&gt; instance Monad T where<br />&gt;      return x = T [(x, 1)]<br />&gt;      T xss &gt;&gt;= f = T [(y, p*q) | (pxs, p) &lt;- xss, let T ys = f pxs, (y, q) &lt;- ys]<br /><br />&gt; instance Algebra T Float where<br />&gt;      expectation (T xs) = sum [x*p**q | (x, p) &lt;- xs]<br /><br />&gt; instance Diverse T Float where<br />&gt;      entropy (T xs) = (1-sum [p**q | (_, p) &lt;- xs])/(q-1)<br /><br /></pre>And again we find our generalised grouping rule for entropy holds.<br /><br /><b>Operads</b><br />This is all derived from Tom Leinster's <a href=\"http://golem.ph.utexas.edu/category/2011/05/an_operadic_introduction_to_en.html\">post</a> last year at the <a href=\"http://golem.ph.utexas.edu/category/\">n-category cafe</a>. As I talked about <a href=\"http://blog.sigfpe.com/2008/10/operads-and-their-monads.html\">here</a> there's a close relationship between monads and operads. Operads area a bit like container monads where the containers don't contain anything, but just have holes where contents could be placed. This makes operads a better place to work because you don't have the awkward issue I started with: having to disallow lists of value/probability pairs where the same value can appear more than once. Nonetheless, in (unrestricted) Haskell monads you don't have <tt>Eq</tt> available so you can't actually have definitions of <tt>return</tt> or <tt>&gt;&gt;=</tt> that can notice the equality of two elements. If such definitions were possible, the grouping law would no longer work as stated above.<br /><br /><b>Crossed homomorphisms</b><br />The generalised grouping law even makes sense for very different monads. For the Reader monad the law gives the definition of a <a href=\"http://en.wikipedia.org/wiki/Group_cohomology#H1\">crossed homomorphism</a>. It's pretty weird seeing a notion from group cohomology emerge like this and I recommend skipping to the final section unless you care about this sort of thing. But if you do, this is related to research I did a long time ago. This is to test that the <a href=\"http://en.wikipedia.org/wiki/Schwarzian_derivative\">Schwarzian derivative</a> really does give rise to a crossed homomorphism.<br /><br />Firstly let me set up some automatic differentiation code:<br /><br /><pre>&gt; data D a = D { re::a, im::a } deriving (Show, Ord, Eq)<br /><br />&gt; instance Num a =&gt; Num (D a) where<br />&gt;      fromInteger n = D (fromInteger n) 0<br />&gt;      D a a'+D b b' = D (a+b) (a'+b')<br />&gt;      D a a'*D b b' = D (a*b) (a*b'+a'*b)<br />&gt;      D a a'-D b b' = D (a-b) (a'-b')<br /><br />&gt; instance Fractional a =&gt; Fractional (D a) where<br />&gt;      fromRational n = D (fromRational n) 0<br />&gt;      D a a'/D b b' = let q = 1/b in D (a*q) ((-a*b'+a'*b)*q*q)<br /><br />&gt; lift x = D x 0<br /><br />&gt; d f x = im (f (D x 1))<br /><br />&gt; raised f = re . f . lift<br />&gt; raised2 = raised . raised<br />&gt; raised3 = raised2 . raised<br /><br /></pre>The <tt>Cn</tt> are the <tt>n</tt>-times (automatically) differentiable functions. Unfortunately the <tt>Endo</tt> defined in <tt>Data.Monoid</tt> acts the wrong way round from what I want so I need a <tt>Dual</tt>:<br /><br /><pre>&gt; type C1 = Dual (Endo (D Double))<br />&gt; type C3 = Dual (Endo (D (D (D Double))))<br />&gt; type C4 = Dual (Endo (D (D (D (D Double)))))<br /><br />&gt; instance Eq (Endo (D Double))<br />&gt; instance Ord (Endo (D Double))<br /><br /></pre>A silly <tt>Show</tt> instance that simply evaluates a function at a number I chose randomly: 1.234.<br /><br /><pre>&gt; instance Show (Endo (D Double)) where<br />&gt;         show (Endo f) = show (f 1.234)<br /><br />&gt; instance Num C1 where<br />&gt;      fromInteger n = Dual (Endo (\\x -&gt; fromInteger n))<br />&gt;      Dual (Endo  f)+Dual (Endo  g) = Dual (Endo  (\\x -&gt; f x + g x))<br />&gt;      Dual (Endo  f)-Dual (Endo  g) = Dual (Endo  (\\x -&gt; f x - g x))<br />&gt;      Dual (Endo  f)*Dual (Endo  g) = Dual (Endo  (\\x -&gt; f x * g x))<br /><br />&gt; instance Fractional C1 where<br />&gt;      fromRational n = Dual (Endo (\\x -&gt; fromRational n))<br />&gt;      Dual (Endo f)/Dual (Endo g) = Dual (Endo (\\x -&gt; f x / g x))<br /><br />&gt; newtype Q a = Q (Writer C4 a) deriving (Monad, Functor)<br /><br /></pre>We can give <tt>Q a</tt> a geometrical interpretation. The underlying type is a pair <tt>(a, C4)</tt>. If we think of elements of <tt>C4</tt> as charts <a href=\"http://en.wikipedia.org/wiki/Manifold#Charts\">charts</a> on a piece of Riemann surface then for any <img src=\"https://chart.googleapis.com/chart?cht=tx&amp;chl=n\" style=\"vertical-align: middle;\" />, an element <img src=\"https://chart.googleapis.com/chart?cht=tx&amp;chl=%28%5cpsi%2c+z%29\" style=\"vertical-align: middle;\" /> of <tt>(a, C4)</tt> represents a local piece of a section of the <img src=\"https://chart.googleapis.com/chart?cht=tx&amp;chl=n\" style=\"vertical-align: middle;\" />th tensor power of the canonical bundle. Ie. we can think of it as representing <img src=\"https://chart.googleapis.com/chart?cht=tx&amp;chl=%5cpsi+dz%5en\" style=\"vertical-align: middle;\" />. I'll concentrate on the case <img src=\"https://chart.googleapis.com/chart?cht=tx&amp;chl=n%3d2\" style=\"vertical-align: middle;\" /> which gives quadratic differentials. We can think of an element of <tt>((a, C4), C4)</tt> as forms where we're composing two charts. We can collapse down to an ordinary chart by using the chain rule. Here's the code:<br /><br /><pre>&gt; instance Algebra Q C1 where<br />&gt;      expectation (Q ma) = let (Dual (Endo a), Dual (Endo f)) = runWriter ma<br />&gt;                           in Dual (Endo (\\x -&gt; a (raised3 f x)*(raised2 (d f) x)^2))<br /><br /></pre>Now we can define the Schwarzian derivative:<br /><br /><pre>&gt; schwarzian f x = let f0 = raised3 f x<br />&gt;                      f1 = raised2 (d f) x<br />&gt;                      f2 = raised (d $ d f) x<br />&gt;                      f3 = (d $ d $ d f) x<br />&gt;                  in f3/f1-1.5*(f2/f1)^2<br /><br /></pre>And somwehat bizarrely, we now have a generalised entropy:<br /><br /><pre>&gt; instance Diverse Q C1 where<br />&gt;      entropy (Q ma) = let (_, Dual (Endo f)) = runWriter ma<br />&gt;                       in Dual (Endo (\\x -&gt; schwarzian f x))<br /><br /></pre>This is the construction that gives rise to the <a href=\"http://en.wikipedia.org/wiki/Virasoro_algebra\">Virasoro algebra</a> which plays such an important role in String Theory.<br /><br /><b>Some tests</b><br />And here's a bunch of tests. I'd have used <tt>QuickCheck</tt> but it won't install for me today...<br /><br /><pre>&gt; test :: (Algebra m t, Diverse m t, Num t, Functor m, Monad m) =&gt; m (m x) -&gt; IO ()<br />&gt; test x = do<br />&gt;      print (left x, right x)<br /><br />&gt; main = do<br />&gt;      test $ L [L [1, 2, 3], L [2, 3, 4], L [1], L [5], L [2, 7::Int]]<br />&gt;      test $ P [(P [(0, 0.5), (1, 0.5)], 0.5), (P [(2, 0.5), (3::Int, 0.5)], 0.5::Float)]<br />&gt;      test $ T [(T [(0, 0.5), (1, 0.5)], 0.5), (T [(2, 0.5), (3::Int, 0.5)], 0.5::Float)]<br />&gt;      test $ Leaf (Leaf 1 `Fork` Leaf 2) `Fork` Leaf (Leaf 3 `Fork` (Leaf 4 `Fork` Leaf 5))<br />&gt;      test $ (Q (writer<br />&gt;               (Q (writer (Dual (Endo (\\x -&gt; x)),<br />&gt;                           Dual (Endo (\\x -&gt; x^2+1)))),<br />&gt;                           Dual (Endo (\\x -&gt; (2+x)/(3+x*x))))) :: Q (Q C3))<br /></pre><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/11295132-6310052947532840608?l=blog.sigfpe.com\" alt=\"\" height=\"1\" width=\"1\" /></div>" "http://blog.sigfpe.com/2012/04/generalised-entropy.html" (20352 52250) obsolete 30 nil nil ((title nil "Dan Piponi (sigfpe): Generalised entropy") (guid ((isPermaLink . "false")) "tag:blogger.com,1999:blog-11295132.post-6310052947532840608") (link nil "http://blog.sigfpe.com/2012/04/generalised-entropy.html") (description nil "<b>Introduction</b><br />The <a href=\"http://en.wikipedia.org/wiki/Entropy\">entropy</a> of a probability distribution can be seen as a measure of its uncertainty or a measure of the diversity of samples taken from it. Over the years I've talked lots about how <a href=\"http://blog.sigfpe.com/2007/03/monads-vector-spaces-and-quantum.html\">probability theory</a> gives rise to a monad. This suggests the possibility that maybe the notion of entropy can be generalised to monads other than probability. So here goes...<br /><br /><pre>&gt; {-# LANGUAGE MultiParamTypeClasses, FlexibleInstances, GeneralizedNewtypeDeriving #-}<br />&gt; {-# LANGUAGE FunctionalDependencies, TypeSynonymInstances #-}<br /><br />&gt; import Control.Monad<br />&gt; import Control.Monad.Writer hiding (lift)<br /><br /><br /></pre><b>Shannon entropy</b><br />I've talked in the past about how there is some trickiness with defining the probability monad in Haskell because a good implementation requires use of the <tt>Eq</tt> typeclass, and hence restricted monads. Restricted monads are possible through a bunch of methods, but this time I don't want them.<br /><br />It's common to represent probability distributions on finite sets as lists of pairs where each pair <tt>(p, x)</tt> means <tt>x</tt> has a probability <tt>p</tt>. But I'm going to allow lists without the restriction that each <tt>x</tt> appears once and make my code work with these generalised distributions. When I compute the entropy, say, it will only be the usual entropy in the case that each <tt>x</tt> in the list is unique.<br /><br />So here's our type and some instances for it:<br /><br /><pre>&gt; data P a = P [(a, Float)] deriving Show<br /><br />&gt; instance Functor P where<br />&gt;      fmap f (P xs) = P [(f a, p) | (a, p) &lt;- xs]<br /><br />&gt; instance Monad P where<br />&gt;      return x = P [(x, 1)]<br />&gt;      P xss &gt;&gt;= f = P [(y, p*q) | (pxs, p) &lt;- xss, let P ys = f pxs, (y, q) &lt;- ys]<br /><br /></pre>We can easily compute the expected value of a distribution, and its entropy, like this:<br /><br /><pre>&gt; expectation0 (P xs) = sum [x*p | (x, p) &lt;- xs]<br />&gt; entropy0 (P xs) = -sum [if p==0 then 0 else p*log p/log 2.0 | (_, p) &lt;- xs]<br /><br /></pre>An important property of entropy is known as the grouping property which can be illustrated through an example tree like this:<br /><br /><div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://4.bp.blogspot.com/-67NuhgTvHY4/T4BeuNAHpsI/AAAAAAAABBA/D4tg6ATA9CQ/s1600/tree.png\"><img src=\"http://4.bp.blogspot.com/-67NuhgTvHY4/T4BeuNAHpsI/AAAAAAAABBA/D4tg6ATA9CQ/s320/tree.png\" height=\"200\" border=\"0\" width=\"480\" /></a></div><br />The entropy for the probability distribution of the final leaves is the sum of two components: (1) the entropy of the branch at the root of the tree and (2) the expected entropy of the subtrees. Here's some corresponding code. First simple bernoulli trials:<br /><br /><pre>&gt; bernoulli p a b = P [(a, p), (b, 1-p)]<br /><br /></pre>Now the branch at the root of the tree:<br /><br /><pre>&gt; root = bernoulli 0.3 False True<br /><br /></pre>We can compute the entropy for the distrbution on the leaves:<br /><br /><pre>&gt; test1 = entropy0 $ do<br />&gt;   x &lt;- root<br />&gt;   if x<br />&gt;     then bernoulli 0.2 3 4<br />&gt;     else bernoulli 0.4 5 6<br /><br /></pre>Or the sum of the root entropy and the expected subtree entropy:<br /><br /><pre>&gt; test2 = entropy0 root + (expectation0 $ do<br />&gt;   x &lt;- root<br />&gt;   if x<br />&gt;     then return $ entropy0 (bernoulli 0.2 3 4)<br />&gt;     else return $ entropy0 (bernoulli 0.4 5 6))<br /><br /></pre>You can confirm for yourself that <tt>test1 == test2</tt>.<br /><br />We can rewrite that a little. We're drawing <tt>True</tt> or <tt>False</tt> from <tt>root</tt> only to decide which distribution to use at the next stage. But we may as will pick the distribution itself at random. So define:<br /><br /><pre>&gt; dist = bernoulli 0.3 (bernoulli 0.4 5 6) (bernoulli 0.2 3 4)<br /><br /></pre>And now we expect the equality of <tt>test3</tt> and <tt>test4</tt>:<br /><br /><pre>&gt; test3 = entropy0 $ do<br />&gt;   x &lt;- dist<br />&gt;   x<br /><br />&gt; test4 = entropy0 dist + (expectation0 $ do<br />&gt;   x &lt;- dist<br />&gt;   return $ entropy0 x)<br /><br /></pre>There's a more elegant way of writing this. Define:<br /><br /><pre>&gt; left0 dist = entropy0 (join dist)<br />&gt; right0 dist = entropy0 dist+expectation0 (fmap entropy0 dist)<br /><br /></pre>Now we expect <tt>left0 dist</tt> and <tt>right0 dist</tt> to always be equal. We've almost generalised to something that makes sense in the context of monads other than probability.<br /><br /><b>The algebra of a monad</b><br />Here are a couple of important properties of <tt>expectation0</tt>:<br /><br />1. <tt>expectation0 (return d) = d</tt><br />2. <tt>expectation0 (join d) = expectation0 (fmap expectation d)</tt><br /><br />In English: the expectation of certainty is just the certain value, and the expectation of an expectation is just the expectation. But these rules are precisely the conditions that define an <img src=\"https://chart.googleapis.com/chart?cht=tx&amp;chl=M\" style=\"vertical-align: middle;\" />-<a href=\"http://en.wikipedia.org/wiki/Monad_%28category_theory%29#Algebras_for_a_monad\">algebra</a>, where <img src=\"https://chart.googleapis.com/chart?cht=tx&amp;chl=M\" style=\"vertical-align: middle;\" /> is a monad.<br /><br />So let's define a type class:<br /><br /><pre>&gt; class Algebra m a | m -&gt; a where<br />&gt;      expectation :: m a -&gt; a<br /><br /></pre>We'll assume that when <tt>m</tt> is a monad, any instance satisfies the two laws above. Here's the instance for probability:<br /><br /><pre>&gt; instance Algebra P Float where<br />&gt;      expectation (P xs) = sum [x*p | (x, p) &lt;- xs]<br /><br /></pre>In keeping with the notion that entropy measure diversity let's also define:<br /><br /><pre>&gt; class Diverse m r | m -&gt; r where<br />&gt;      entropy :: m x -&gt; r<br /><br /></pre>with the instance:<br /><br /><pre>&gt; instance Diverse P Float where<br />&gt;      entropy (P xs) = -sum [if p==0 then 0 else p*log p/log 2.0 | (_, p) &lt;- xs]<br /><br /></pre>It's not clear what laws we need but for now we'll assume a generalised entropy satisfies <tt>left dist == right dist </tt>:<br /><br /><pre>&gt; left dist = entropy (join dist)<br />&gt; right dist = entropy dist+expectation (fmap entropy dist)<br /><br /></pre>We'll call that the generalised grouping law.<br /><br /><b>Binary trees</b><br />It's not hard to find other structures that satisfy these laws if we cheat and use alternative structures to represent probabilities. For example We can make <tt>Tree</tt> an instance by assuming <tt>Fork</tt> represents a 50/50 chance of going one way or another:<br /><br /><pre>&gt; data Tree a = Leaf a | Fork (Tree a) (Tree a) deriving Show<br /><br />&gt; instance Functor Tree where<br />&gt;      fmap f (Leaf a) = Leaf (f a)<br />&gt;      fmap f (Fork l r) = Fork (fmap f l) (fmap f r)<br /><br />&gt; instance Monad Tree where<br />&gt;      return x = Leaf x<br />&gt;      Leaf a &gt;&gt;= f = f a<br />&gt;      Fork l r &gt;&gt;= f = Fork (l &gt;&gt;= f) (r &gt;&gt;= f)<br /><br />&gt; instance Algebra Tree Float where<br />&gt;      expectation (Leaf a) = a<br />&gt;      expectation (Fork l r) = 0.5*expectation l+0.5*expectation r<br /><br />&gt; instance Diverse Tree Float where<br />&gt;      entropy (Leaf a) = 0<br />&gt;      entropy (Fork l r) = 1+0.5*entropy l+0.5*entropy r<br /><br /></pre><b>Lists</b><br />We could make non-empty lists into an instance by assuming a uniform distribution on the list. But another way to measure the diversity is simply to count the elements. We subtract one so that <tt>[x]</tt> corresponds to diversity zero. This subtraction gives us a non-trivial instance:<br /><br /><pre>&gt; newtype L a = L [a] deriving (Show, Monad, Functor)<br /><br />&gt; instance Algebra L Int where<br />&gt;      expectation (L xs) = sum xs<br /><br />&gt; instance Diverse L Int where<br />&gt;      entropy (L xs) = length xs-1<br /><br /></pre><b>Tsallis entropy</b><br />There are measures of diversity for probability distributions that are distinct from Shannon entropy. An example is <a href=\"http://blog.sigfpe.com/Tsallis_entropy\">Tsallis entropy</a>. At this point I'd like a family of types parametrised by reals but Haskell doesn't support dependent types. So I'll just fix a real number <tt>q</tt> and we can define:<br /><br /><pre>&gt; q = 2.5<br /><br />&gt; data T a = T [(a, Float)] deriving Show<br /><br />&gt; instance Functor T where<br />&gt;      fmap f (T xs) = T [(f a, p) | (a, p) &lt;- xs]<br /><br />&gt; instance Monad T where<br />&gt;      return x = T [(x, 1)]<br />&gt;      T xss &gt;&gt;= f = T [(y, p*q) | (pxs, p) &lt;- xss, let T ys = f pxs, (y, q) &lt;- ys]<br /><br />&gt; instance Algebra T Float where<br />&gt;      expectation (T xs) = sum [x*p**q | (x, p) &lt;- xs]<br /><br />&gt; instance Diverse T Float where<br />&gt;      entropy (T xs) = (1-sum [p**q | (_, p) &lt;- xs])/(q-1)<br /><br /></pre>And again we find our generalised grouping rule for entropy holds.<br /><br /><b>Operads</b><br />This is all derived from Tom Leinster's <a href=\"http://golem.ph.utexas.edu/category/2011/05/an_operadic_introduction_to_en.html\">post</a> last year at the <a href=\"http://golem.ph.utexas.edu/category/\">n-category cafe</a>. As I talked about <a href=\"http://blog.sigfpe.com/2008/10/operads-and-their-monads.html\">here</a> there's a close relationship between monads and operads. Operads area a bit like container monads where the containers don't contain anything, but just have holes where contents could be placed. This makes operads a better place to work because you don't have the awkward issue I started with: having to disallow lists of value/probability pairs where the same value can appear more than once. Nonetheless, in (unrestricted) Haskell monads you don't have <tt>Eq</tt> available so you can't actually have definitions of <tt>return</tt> or <tt>&gt;&gt;=</tt> that can notice the equality of two elements. If such definitions were possible, the grouping law would no longer work as stated above.<br /><br /><b>Crossed homomorphisms</b><br />The generalised grouping law even makes sense for very different monads. For the Reader monad the law gives the definition of a <a href=\"http://en.wikipedia.org/wiki/Group_cohomology#H1\">crossed homomorphism</a>. It's pretty weird seeing a notion from group cohomology emerge like this and I recommend skipping to the final section unless you care about this sort of thing. But if you do, this is related to research I did a long time ago. This is to test that the <a href=\"http://en.wikipedia.org/wiki/Schwarzian_derivative\">Schwarzian derivative</a> really does give rise to a crossed homomorphism.<br /><br />Firstly let me set up some automatic differentiation code:<br /><br /><pre>&gt; data D a = D { re::a, im::a } deriving (Show, Ord, Eq)<br /><br />&gt; instance Num a =&gt; Num (D a) where<br />&gt;      fromInteger n = D (fromInteger n) 0<br />&gt;      D a a'+D b b' = D (a+b) (a'+b')<br />&gt;      D a a'*D b b' = D (a*b) (a*b'+a'*b)<br />&gt;      D a a'-D b b' = D (a-b) (a'-b')<br /><br />&gt; instance Fractional a =&gt; Fractional (D a) where<br />&gt;      fromRational n = D (fromRational n) 0<br />&gt;      D a a'/D b b' = let q = 1/b in D (a*q) ((-a*b'+a'*b)*q*q)<br /><br />&gt; lift x = D x 0<br /><br />&gt; d f x = im (f (D x 1))<br /><br />&gt; raised f = re . f . lift<br />&gt; raised2 = raised . raised<br />&gt; raised3 = raised2 . raised<br /><br /></pre>The <tt>Cn</tt> are the <tt>n</tt>-times (automatically) differentiable functions. Unfortunately the <tt>Endo</tt> defined in <tt>Data.Monoid</tt> acts the wrong way round from what I want so I need a <tt>Dual</tt>:<br /><br /><pre>&gt; type C1 = Dual (Endo (D Double))<br />&gt; type C3 = Dual (Endo (D (D (D Double))))<br />&gt; type C4 = Dual (Endo (D (D (D (D Double)))))<br /><br />&gt; instance Eq (Endo (D Double))<br />&gt; instance Ord (Endo (D Double))<br /><br /></pre>A silly <tt>Show</tt> instance that simply evaluates a function at a number I chose randomly: 1.234.<br /><br /><pre>&gt; instance Show (Endo (D Double)) where<br />&gt;         show (Endo f) = show (f 1.234)<br /><br />&gt; instance Num C1 where<br />&gt;      fromInteger n = Dual (Endo (\\x -&gt; fromInteger n))<br />&gt;      Dual (Endo  f)+Dual (Endo  g) = Dual (Endo  (\\x -&gt; f x + g x))<br />&gt;      Dual (Endo  f)-Dual (Endo  g) = Dual (Endo  (\\x -&gt; f x - g x))<br />&gt;      Dual (Endo  f)*Dual (Endo  g) = Dual (Endo  (\\x -&gt; f x * g x))<br /><br />&gt; instance Fractional C1 where<br />&gt;      fromRational n = Dual (Endo (\\x -&gt; fromRational n))<br />&gt;      Dual (Endo f)/Dual (Endo g) = Dual (Endo (\\x -&gt; f x / g x))<br /><br />&gt; newtype Q a = Q (Writer C4 a) deriving (Monad, Functor)<br /><br /></pre>We can give <tt>Q a</tt> a geometrical interpretation. The underlying type is a pair <tt>(a, C4)</tt>. If we think of elements of <tt>C4</tt> as charts <a href=\"http://en.wikipedia.org/wiki/Manifold#Charts\">charts</a> on a piece of Riemann surface then for any <img src=\"https://chart.googleapis.com/chart?cht=tx&amp;chl=n\" style=\"vertical-align: middle;\" />, an element <img src=\"https://chart.googleapis.com/chart?cht=tx&amp;chl=%28%5cpsi%2c+z%29\" style=\"vertical-align: middle;\" /> of <tt>(a, C4)</tt> represents a local piece of a section of the <img src=\"https://chart.googleapis.com/chart?cht=tx&amp;chl=n\" style=\"vertical-align: middle;\" />th tensor power of the canonical bundle. Ie. we can think of it as representing <img src=\"https://chart.googleapis.com/chart?cht=tx&amp;chl=%5cpsi+dz%5en\" style=\"vertical-align: middle;\" />. I'll concentrate on the case <img src=\"https://chart.googleapis.com/chart?cht=tx&amp;chl=n%3d2\" style=\"vertical-align: middle;\" /> which gives quadratic differentials. We can think of an element of <tt>((a, C4), C4)</tt> as forms where we're composing two charts. We can collapse down to an ordinary chart by using the chain rule. Here's the code:<br /><br /><pre>&gt; instance Algebra Q C1 where<br />&gt;      expectation (Q ma) = let (Dual (Endo a), Dual (Endo f)) = runWriter ma<br />&gt;                           in Dual (Endo (\\x -&gt; a (raised3 f x)*(raised2 (d f) x)^2))<br /><br /></pre>Now we can define the Schwarzian derivative:<br /><br /><pre>&gt; schwarzian f x = let f0 = raised3 f x<br />&gt;                      f1 = raised2 (d f) x<br />&gt;                      f2 = raised (d $ d f) x<br />&gt;                      f3 = (d $ d $ d f) x<br />&gt;                  in f3/f1-1.5*(f2/f1)^2<br /><br /></pre>And somwehat bizarrely, we now have a generalised entropy:<br /><br /><pre>&gt; instance Diverse Q C1 where<br />&gt;      entropy (Q ma) = let (_, Dual (Endo f)) = runWriter ma<br />&gt;                       in Dual (Endo (\\x -&gt; schwarzian f x))<br /><br /></pre>This is the construction that gives rise to the <a href=\"http://en.wikipedia.org/wiki/Virasoro_algebra\">Virasoro algebra</a> which plays such an important role in String Theory.<br /><br /><b>Some tests</b><br />And here's a bunch of tests. I'd have used <tt>QuickCheck</tt> but it won't install for me today...<br /><br /><pre>&gt; test :: (Algebra m t, Diverse m t, Num t, Functor m, Monad m) =&gt; m (m x) -&gt; IO ()<br />&gt; test x = do<br />&gt;      print (left x, right x)<br /><br />&gt; main = do<br />&gt;      test $ L [L [1, 2, 3], L [2, 3, 4], L [1], L [5], L [2, 7::Int]]<br />&gt;      test $ P [(P [(0, 0.5), (1, 0.5)], 0.5), (P [(2, 0.5), (3::Int, 0.5)], 0.5::Float)]<br />&gt;      test $ T [(T [(0, 0.5), (1, 0.5)], 0.5), (T [(2, 0.5), (3::Int, 0.5)], 0.5::Float)]<br />&gt;      test $ Leaf (Leaf 1 `Fork` Leaf 2) `Fork` Leaf (Leaf 3 `Fork` (Leaf 4 `Fork` Leaf 5))<br />&gt;      test $ (Q (writer<br />&gt;               (Q (writer (Dual (Endo (\\x -&gt; x)),<br />&gt;                           Dual (Endo (\\x -&gt; x^2+1)))),<br />&gt;                           Dual (Endo (\\x -&gt; (2+x)/(3+x*x))))) :: Q (Q C3))<br /></pre><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/11295132-6310052947532840608?l=blog.sigfpe.com\" alt=\"\" height=\"1\" width=\"1\" /></div>") (pubDate nil "Sat, 07 Apr 2012 23:22:02 +0000") (author nil "noreply@blogger.com (sigfpe)"))) ("Luke Palmer: List of Awesome Things" "<p>from the <a href=\"http://channel9.msdn.com/Events/Lang-NEXT/Lang-NEXT-2012\">Lang.NEXT</a> conference this week.  I heard most of this stuff not from the talks, but from the awesome people who were attending the conference.  </p>\n<ul>\n<li><a href=\"http://alloy.mit.edu/alloy/index.html\">Alloy</a> – A language for relational models. You enter a specification of your problem in a first-order relational language (quite powerful) and then it tries to find counterexamples within some small space.  If no counterexamples are found, you can have a fairly high degree of confidence in your model (as they say, “most assertions are wrong; most flaws have small counterexamples”).</li>\n<li><a href=\"http://people.csail.mit.edu/asolar/papers/asplos06-final.pdf\">Combinatorial Sketching</a>.  “Here’s what I want my algorithm to do, and I know that it probably involves a for loop and addition and multiplication.  Figure it out for me, kthxbye.” (Thanks to <a href=\"http://www.cs.berkeley.edu/~palvaro/\">Peter Alvaro</a> for the last two links; check out his research on Bloom, too: a very nice way to simplify and analyze distributed systems)</li>\n<li><a href=\"http://cyc.com\">Cyc</a>, a queryable database of “common sense”.</li>\n<li><a href=\"http://user.uni-frankfurt.de/~griesbec/LABANE.HTML\">Labanotation</a> – a standardized system for recording human motion.  Traditionally used to write down choreography.</li>\n<li><a href=\"http://mitpress.mit.edu/sicm/\">Structure and Interpretation of Classical Mechanics</a>, in which Sussman (creator of Scheme) writes about classical mechanics in a functional style. I have read the first chapter, and I have to say, functional calculus notation makes a lot more sense to me than the traditional notation. Go figure.</li>\n<li><a href=\"http://en.wikipedia.org/wiki/Algorithmic_information_theory\">Algorithmic information theory</a></li>\n<li><a href=\"http://people.csail.mit.edu/asolar/papers/pldi276-chaudhuri.pdf\">Smooth interpretation</a> — a way of smoothing out digital programs so that their parameter spaces can be searched by gradient descent.</li>\n<li><a href=\"https://www.lytro.com/\">Lytro</a>, the coolest piece of hardware I have seen in years: it’s a camera which records the <i>directions</i> of incoming rays, so that you can focus the picture after the fact.  <a href=\"https://www.lytro.com/living-pictures/1696\">For example</a>.</li>\n</ul>\n<p><a href=\"http://flattr.com/thing/616913/List-of-Awesome-Things\" target=\"_blank\"><img src=\"http://api.flattr.com/button/flattr-badge-large.png\" alt=\"Flattr this\" border=\"0\" title=\"Flattr this\" /></a></p>\n<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/lukepalmer.wordpress.com/1996/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/lukepalmer.wordpress.com/1996/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godelicious/lukepalmer.wordpress.com/1996/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/delicious/lukepalmer.wordpress.com/1996/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gofacebook/lukepalmer.wordpress.com/1996/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/facebook/lukepalmer.wordpress.com/1996/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gotwitter/lukepalmer.wordpress.com/1996/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/twitter/lukepalmer.wordpress.com/1996/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gostumble/lukepalmer.wordpress.com/1996/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/stumble/lukepalmer.wordpress.com/1996/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godigg/lukepalmer.wordpress.com/1996/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/digg/lukepalmer.wordpress.com/1996/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/goreddit/lukepalmer.wordpress.com/1996/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/reddit/lukepalmer.wordpress.com/1996/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=lukepalmer.wordpress.com&amp;blog=5292379&amp;post=1996&amp;subd=lukepalmer&amp;ref=&amp;feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" "http://lukepalmer.wordpress.com/2012/04/06/list-of-awesome-things/" (20351 32158) obsolete 31 nil nil ((title nil "Luke Palmer: List of Awesome Things") (guid ((isPermaLink . "false")) "http://lukepalmer.wordpress.com/?p=1996") (link nil "http://lukepalmer.wordpress.com/2012/04/06/list-of-awesome-things/") (description nil "<p>from the <a href=\"http://channel9.msdn.com/Events/Lang-NEXT/Lang-NEXT-2012\">Lang.NEXT</a> conference this week.  I heard most of this stuff not from the talks, but from the awesome people who were attending the conference.  </p>\n<ul>\n<li><a href=\"http://alloy.mit.edu/alloy/index.html\">Alloy</a> – A language for relational models. You enter a specification of your problem in a first-order relational language (quite powerful) and then it tries to find counterexamples within some small space.  If no counterexamples are found, you can have a fairly high degree of confidence in your model (as they say, “most assertions are wrong; most flaws have small counterexamples”).</li>\n<li><a href=\"http://people.csail.mit.edu/asolar/papers/asplos06-final.pdf\">Combinatorial Sketching</a>.  “Here’s what I want my algorithm to do, and I know that it probably involves a for loop and addition and multiplication.  Figure it out for me, kthxbye.” (Thanks to <a href=\"http://www.cs.berkeley.edu/~palvaro/\">Peter Alvaro</a> for the last two links; check out his research on Bloom, too: a very nice way to simplify and analyze distributed systems)</li>\n<li><a href=\"http://cyc.com\">Cyc</a>, a queryable database of “common sense”.</li>\n<li><a href=\"http://user.uni-frankfurt.de/~griesbec/LABANE.HTML\">Labanotation</a> – a standardized system for recording human motion.  Traditionally used to write down choreography.</li>\n<li><a href=\"http://mitpress.mit.edu/sicm/\">Structure and Interpretation of Classical Mechanics</a>, in which Sussman (creator of Scheme) writes about classical mechanics in a functional style. I have read the first chapter, and I have to say, functional calculus notation makes a lot more sense to me than the traditional notation. Go figure.</li>\n<li><a href=\"http://en.wikipedia.org/wiki/Algorithmic_information_theory\">Algorithmic information theory</a></li>\n<li><a href=\"http://people.csail.mit.edu/asolar/papers/pldi276-chaudhuri.pdf\">Smooth interpretation</a> — a way of smoothing out digital programs so that their parameter spaces can be searched by gradient descent.</li>\n<li><a href=\"https://www.lytro.com/\">Lytro</a>, the coolest piece of hardware I have seen in years: it’s a camera which records the <i>directions</i> of incoming rays, so that you can focus the picture after the fact.  <a href=\"https://www.lytro.com/living-pictures/1696\">For example</a>.</li>\n</ul>\n<p><a href=\"http://flattr.com/thing/616913/List-of-Awesome-Things\" target=\"_blank\"><img src=\"http://api.flattr.com/button/flattr-badge-large.png\" alt=\"Flattr this\" border=\"0\" title=\"Flattr this\" /></a></p>\n<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/lukepalmer.wordpress.com/1996/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/lukepalmer.wordpress.com/1996/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godelicious/lukepalmer.wordpress.com/1996/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/delicious/lukepalmer.wordpress.com/1996/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gofacebook/lukepalmer.wordpress.com/1996/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/facebook/lukepalmer.wordpress.com/1996/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gotwitter/lukepalmer.wordpress.com/1996/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/twitter/lukepalmer.wordpress.com/1996/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gostumble/lukepalmer.wordpress.com/1996/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/stumble/lukepalmer.wordpress.com/1996/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godigg/lukepalmer.wordpress.com/1996/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/digg/lukepalmer.wordpress.com/1996/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/goreddit/lukepalmer.wordpress.com/1996/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/reddit/lukepalmer.wordpress.com/1996/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=lukepalmer.wordpress.com&amp;blog=5292379&amp;post=1996&amp;subd=lukepalmer&amp;ref=&amp;feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />") (pubDate nil "Fri, 06 Apr 2012 23:34:54 +0000"))) ("Isaac Dupree" "<p>In August, I presented about Haddock internals to the Boston Haskell User’s Group, at MIT.  I drew on a white-board for the visuals.  Here’s what I drew (except neatened and digitized, not dry-erase-marker ink).</p>\n<p><a href=\"http://haddock2009.files.wordpress.com/2010/11/haddock-presentation.png\"><img src=\"http://haddock2009.files.wordpress.com/2010/11/haddock-presentation.png?w=450&amp;h=410\" title=\"Haddock-presentation\" height=\"410\" width=\"450\" alt=\"Haddock / GHC / Code\" class=\"alignnone size-full wp-image-51\" /></a></p>\n<p>Here’s <a href=\"http://www.idupree.com/haddock-presentation-2010/Haddock-presentation-inkscape.svg\">the source Inkscape SVG</a> (WordPress.com doesn’t allow using SVG images currently).</p>\n<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/haddock2009.wordpress.com/49/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/haddock2009.wordpress.com/49/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godelicious/haddock2009.wordpress.com/49/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/delicious/haddock2009.wordpress.com/49/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gofacebook/haddock2009.wordpress.com/49/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/facebook/haddock2009.wordpress.com/49/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gotwitter/haddock2009.wordpress.com/49/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/twitter/haddock2009.wordpress.com/49/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gostumble/haddock2009.wordpress.com/49/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/stumble/haddock2009.wordpress.com/49/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godigg/haddock2009.wordpress.com/49/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/digg/haddock2009.wordpress.com/49/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/goreddit/haddock2009.wordpress.com/49/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/reddit/haddock2009.wordpress.com/49/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=haddock2009.wordpress.com&amp;blog=7500788&amp;post=49&amp;subd=haddock2009&amp;ref=&amp;feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" "http://haddock2009.wordpress.com/2010/11/11/49/" (20349 49805) obsolete 32 nil nil ((title nil "Isaac Dupree") (guid ((isPermaLink . "false")) "http://haddock2009.wordpress.com/?p=49") (link nil "http://haddock2009.wordpress.com/2010/11/11/49/") (description nil "<p>In August, I presented about Haddock internals to the Boston Haskell User’s Group, at MIT.  I drew on a white-board for the visuals.  Here’s what I drew (except neatened and digitized, not dry-erase-marker ink).</p>\n<p><a href=\"http://haddock2009.files.wordpress.com/2010/11/haddock-presentation.png\"><img src=\"http://haddock2009.files.wordpress.com/2010/11/haddock-presentation.png?w=450&amp;h=410\" title=\"Haddock-presentation\" height=\"410\" width=\"450\" alt=\"Haddock / GHC / Code\" class=\"alignnone size-full wp-image-51\" /></a></p>\n<p>Here’s <a href=\"http://www.idupree.com/haddock-presentation-2010/Haddock-presentation-inkscape.svg\">the source Inkscape SVG</a> (WordPress.com doesn’t allow using SVG images currently).</p>\n<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/haddock2009.wordpress.com/49/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/haddock2009.wordpress.com/49/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godelicious/haddock2009.wordpress.com/49/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/delicious/haddock2009.wordpress.com/49/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gofacebook/haddock2009.wordpress.com/49/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/facebook/haddock2009.wordpress.com/49/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gotwitter/haddock2009.wordpress.com/49/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/twitter/haddock2009.wordpress.com/49/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gostumble/haddock2009.wordpress.com/49/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/stumble/haddock2009.wordpress.com/49/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godigg/haddock2009.wordpress.com/49/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/digg/haddock2009.wordpress.com/49/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/goreddit/haddock2009.wordpress.com/49/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/reddit/haddock2009.wordpress.com/49/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=haddock2009.wordpress.com&amp;blog=7500788&amp;post=49&amp;subd=haddock2009&amp;ref=&amp;feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />") (pubDate nil "Thu, 05 Apr 2012 16:04:29 +0000"))) ("Isaac Dupree: Cross-package documentation going well!" "<div lang=\"x-western\" style=\"font-family: 0; font-size: 12px;\">A good deal of success!  Here is the current status of my loose edges… Plus I’m sure there are some inevitable syntax niceties (choosing when to display in GADT syntax for example), but using this approach, they can’t be perfect, only pretty-good.  (The approach is similar to going through Template Haskell except we found out that TH/Convert had some problems, such as producing RdrNames rather than Names, so I wrote the equivalent function to go directly from TyThing to HsDecl Name).  So:(tyThingToHsSyn :: TyThing -&gt; LHsDecl Name) is done (except probably for a few corner cases) — it compiles and works! (under 6.11.something and 6.10.3; I just failed to install ghc-paths for 6.8.2[*]) Paste of my working module here:<br />\n<a href=\"http://hpaste.org/6717\">http://hpaste.org/6717</a><p></p>\n<p>[*]cabal install –with-compiler=ghc-6.8.2 ghc-paths<br />\n/tmp/ghc-paths-0.1.0.522545/ghc-paths-0.1.0.5/Setup.hs:7:7:<br />\nCould not find module `Distribution.Simple.PackageIndex’:</p>\n<p>Important remaining corner cases include:<br />\n- It seems that TyCon needs to export a new function (tyConParent :: TyCon -&gt; TyConParent), because there’s no way to get that info presently!<br />\n- (isFunTyCon tc || isPrimTyCon tc) : how the heck am I supposed to represent these in a TyClDecl? <img src=\"http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif\" alt=\":-)\" class=\"wp-smiley\" /><br />\n- When the HsDecls tree contains something of type HsDoc, do I just leave it empty? Will Haddock-code need to / already does fill that in? I guess I’ll find that out once I test my code on more things…? or what?<br />\n- it looks like I neglected to implement class ATs yet.</p>\n<p>Also, (parseName “Prelude.-&gt;”) crashed GHC with “isDataOcc: check me -&gt;”, so I wasn’t able to test it yet <img src=\"http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif\" alt=\":-)\" class=\"wp-smiley\" />  … or is it one of those syntaxes that’s so fixed that you’re not even allowed to export or import it, perhaps?</p>\n<p>***</p>\n<p>Also I succeeded at integrating it into Haddock.  Well, almost.  For module List, I have the English documentation being displayed where it should be, and I have the signature displayed: all the signatures are “() -&gt; ()”, <img src=\"http://s2.wp.com/wp-includes/images/smilies/icon_razz.gif\" alt=\":-P\" class=\"wp-smiley\" />  .  I still need to finish threading the Ghc monad through Haddock.Interface.Create so that I can call lookupName at the right times.<br />\n- foible: I needed to convert InstalledInterface’s (HsDoc DocName) to ExportDecl’s (HsDoc Name), so I had to essentially write fmap for HsDoc, because it’s lamely not an instance of class Functor.  Where should that fmap-code be put? (can it be derived yet?)<br />\n- In Haddock.Interface.Create:<br />\n-* Under what circumstances is (Map.lookup (nameModule t) instIfaceMap) == Nothing?  Is it if we haddock a package for which its dependencies are compiled, but not, themselves, haddocked?<br />\n-* I didn’t figure out where to get ExportDecl’s expItemInstances from (but I didn’t really look around for it yet)</p>\n<p>okay that’s enough for the day! I need some sleep! And some feedback would be good.  Besides that, I do have a plan: Integrate the two pieces I just did; Test on lots more examples than just haskell98-List; fix the things that I obviously neglected; Make the code a bit more presentable.  Any big pieces I’m leaving out that we have to do before starting to integrate my code?  (well, hoping that there aren’t any more big unexpected things that break along the way, anyway)</p>\n<p>-Isaac</p>\n</div>\n<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/haddock2009.wordpress.com/23/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/haddock2009.wordpress.com/23/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godelicious/haddock2009.wordpress.com/23/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/delicious/haddock2009.wordpress.com/23/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gofacebook/haddock2009.wordpress.com/23/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/facebook/haddock2009.wordpress.com/23/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gotwitter/haddock2009.wordpress.com/23/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/twitter/haddock2009.wordpress.com/23/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gostumble/haddock2009.wordpress.com/23/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/stumble/haddock2009.wordpress.com/23/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godigg/haddock2009.wordpress.com/23/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/digg/haddock2009.wordpress.com/23/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/goreddit/haddock2009.wordpress.com/23/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/reddit/haddock2009.wordpress.com/23/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=haddock2009.wordpress.com&amp;blog=7500788&amp;post=23&amp;subd=haddock2009&amp;ref=&amp;feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" "http://haddock2009.wordpress.com/2009/07/09/cross-package-documentation-going-well/" (20349 48812) obsolete 33 nil nil ((title nil "Isaac Dupree: Cross-package documentation going well!") (guid ((isPermaLink . "false")) "http://haddock2009.wordpress.com/?p=23") (link nil "http://haddock2009.wordpress.com/2009/07/09/cross-package-documentation-going-well/") (description nil "<div lang=\"x-western\" style=\"font-family: 0; font-size: 12px;\">A good deal of success!  Here is the current status of my loose edges… Plus I’m sure there are some inevitable syntax niceties (choosing when to display in GADT syntax for example), but using this approach, they can’t be perfect, only pretty-good.  (The approach is similar to going through Template Haskell except we found out that TH/Convert had some problems, such as producing RdrNames rather than Names, so I wrote the equivalent function to go directly from TyThing to HsDecl Name).  So:(tyThingToHsSyn :: TyThing -&gt; LHsDecl Name) is done (except probably for a few corner cases) — it compiles and works! (under 6.11.something and 6.10.3; I just failed to install ghc-paths for 6.8.2[*]) Paste of my working module here:<br />\n<a href=\"http://hpaste.org/6717\">http://hpaste.org/6717</a><p></p>\n<p>[*]cabal install –with-compiler=ghc-6.8.2 ghc-paths<br />\n/tmp/ghc-paths-0.1.0.522545/ghc-paths-0.1.0.5/Setup.hs:7:7:<br />\nCould not find module `Distribution.Simple.PackageIndex’:</p>\n<p>Important remaining corner cases include:<br />\n- It seems that TyCon needs to export a new function (tyConParent :: TyCon -&gt; TyConParent), because there’s no way to get that info presently!<br />\n- (isFunTyCon tc || isPrimTyCon tc) : how the heck am I supposed to represent these in a TyClDecl? <img src=\"http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif\" alt=\":-)\" class=\"wp-smiley\" /><br />\n- When the HsDecls tree contains something of type HsDoc, do I just leave it empty? Will Haddock-code need to / already does fill that in? I guess I’ll find that out once I test my code on more things…? or what?<br />\n- it looks like I neglected to implement class ATs yet.</p>\n<p>Also, (parseName “Prelude.-&gt;”) crashed GHC with “isDataOcc: check me -&gt;”, so I wasn’t able to test it yet <img src=\"http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif\" alt=\":-)\" class=\"wp-smiley\" />  … or is it one of those syntaxes that’s so fixed that you’re not even allowed to export or import it, perhaps?</p>\n<p>***</p>\n<p>Also I succeeded at integrating it into Haddock.  Well, almost.  For module List, I have the English documentation being displayed where it should be, and I have the signature displayed: all the signatures are “() -&gt; ()”, <img src=\"http://s2.wp.com/wp-includes/images/smilies/icon_razz.gif\" alt=\":-P\" class=\"wp-smiley\" />  .  I still need to finish threading the Ghc monad through Haddock.Interface.Create so that I can call lookupName at the right times.<br />\n- foible: I needed to convert InstalledInterface’s (HsDoc DocName) to ExportDecl’s (HsDoc Name), so I had to essentially write fmap for HsDoc, because it’s lamely not an instance of class Functor.  Where should that fmap-code be put? (can it be derived yet?)<br />\n- In Haddock.Interface.Create:<br />\n-* Under what circumstances is (Map.lookup (nameModule t) instIfaceMap) == Nothing?  Is it if we haddock a package for which its dependencies are compiled, but not, themselves, haddocked?<br />\n-* I didn’t figure out where to get ExportDecl’s expItemInstances from (but I didn’t really look around for it yet)</p>\n<p>okay that’s enough for the day! I need some sleep! And some feedback would be good.  Besides that, I do have a plan: Integrate the two pieces I just did; Test on lots more examples than just haskell98-List; fix the things that I obviously neglected; Make the code a bit more presentable.  Any big pieces I’m leaving out that we have to do before starting to integrate my code?  (well, hoping that there aren’t any more big unexpected things that break along the way, anyway)</p>\n<p>-Isaac</p>\n</div>\n<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/haddock2009.wordpress.com/23/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/haddock2009.wordpress.com/23/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godelicious/haddock2009.wordpress.com/23/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/delicious/haddock2009.wordpress.com/23/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gofacebook/haddock2009.wordpress.com/23/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/facebook/haddock2009.wordpress.com/23/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gotwitter/haddock2009.wordpress.com/23/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/twitter/haddock2009.wordpress.com/23/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gostumble/haddock2009.wordpress.com/23/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/stumble/haddock2009.wordpress.com/23/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godigg/haddock2009.wordpress.com/23/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/digg/haddock2009.wordpress.com/23/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/goreddit/haddock2009.wordpress.com/23/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/reddit/haddock2009.wordpress.com/23/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=haddock2009.wordpress.com&amp;blog=7500788&amp;post=23&amp;subd=haddock2009&amp;ref=&amp;feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />") (pubDate nil "Thu, 05 Apr 2012 15:47:56 +0000"))) ("Keegan McAllister: A minimal encoder for uncompressed PNGs" "<p>I've often wondered how hard it is to output a <a href=\"http://en.wikipedia.org/wiki/Portable_Network_Graphics\">PNG</a> file directly, without using a library or a standard tool like <a href=\"http://netpbm.sourceforge.net/\"><code>pnmtopng</code></a>. (I'm not sure when you'd actually want to do this; maybe for a tiny embedded system with a web interface.)</p><p>I found that constructing a simple, uncompressed PNG does not require a whole lot of code, but there are some odd details I got wrong on the first try. Here's a crash course in writing a minimal PNG encoder. We'll use only a small subset of <a href=\"http://www.w3.org/TR/PNG/\">the PNG specification</a>, but I'll link to the full spec so you can read more.</p><p>The example code is not too fast; it's written in Python and has tons of string copying everywhere. My goal was to express the idea clearly, and let you worry about coding it up in C for your embedded system or whatever. If you're careful, you can avoid ever copying the image data.</p><p>We will assume the raw image data is a Python byte string (non-Unicode), consisting of one byte each for red, green, and blue, for each pixel in English reading order. For reference, here is how we'd \"encode\" this data in the much simpler <a href=\"http://manpages.ubuntu.com/manpages/oneiric/man5/ppm.5.html\">PPM</a> format.</p><pre class=\"sourceCode\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> to_ppm(width, height, data):<br />    <span class=\"kw\">return</span> <span class=\"st\">'P6</span><span class=\"ch\">\\n</span><span class=\"ot\">%d</span><span class=\"st\"> </span><span class=\"ot\">%d</span><span class=\"ch\">\\n</span><span class=\"st\">255</span><span class=\"ch\">\\n</span><span class=\"ot\">%s</span><span class=\"st\">'</span> % (width, height, data)</code></pre><p>I lied when I said we'd use no libraries at all. I will import Python's standard <a href=\"http://docs.python.org/library/struct.html\"><code>struct</code></a> module. I figured an exercise in converting integers to 4-byte <a href=\"http://en.wikipedia.org/wiki/Endianness\">big endian</a> format would be excessively boring. Here's how we do it with <code>struct</code>.</p><pre class=\"sourceCode\"><code class=\"sourceCode python\"><span class=\"ch\">import</span> struct<br /><br /><span class=\"kw\">def</span> be32(n):<br />    <span class=\"kw\">return</span> struct.pack(<span class=\"st\">'&gt;I'</span>, n)</code></pre><p>A PNG file contains a sequence of <a href=\"http://www.w3.org/TR/PNG/#5Chunk-layout\">data chunks</a>, each with an associated length, type, and <a href=\"http://www.w3.org/TR/PNG/#5CRC-algorithm\">CRC checksum</a>. The type is a 4-byte quantity which can be <a href=\"http://www.w3.org/TR/PNG/#5Chunk-naming-conventions\">interpreted</a> as four ASCII letters. We'll implement <code>crc</code> later.</p><pre class=\"sourceCode\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> png_chunk(ty, data):<br />    <span class=\"kw\">return</span> be32(<span class=\"dt\">len</span>(data)) + ty + data + be32(crc(ty + data))</code></pre><p>The <a href=\"http://www.w3.org/TR/PNG/#11IHDR\"><code>IHDR</code> chunk</a>, always the first chunk in a file, contains basic header information such as width and height. We will hardcode a color depth of 8 bits, <a href=\"http://www.w3.org/TR/PNG/#6Colour-values\">color type</a> 2 (RGB truecolor), and standard 0 values for the other fields.</p><pre class=\"sourceCode\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> png_header(width, height):<br />    <span class=\"kw\">return</span> png_chunk(<span class=\"st\">'IHDR'</span>,<br />        struct.pack(<span class=\"st\">'&gt;IIBBBBB'</span>, width, height, <span class=\"dv\">8</span>, <span class=\"dv\">2</span>, <span class=\"dv\">0</span>, <span class=\"dv\">0</span>, <span class=\"dv\">0</span>))</code></pre><p>The actual image data is stored in <a href=\"http://www.ietf.org/rfc/rfc1951.txt\">DEFLATE</a> format, the same compression used by <a href=\"http://en.wikipedia.org/wiki/Gzip\">gzip</a> and friends. Fortunately for our minimalist project, DEFLATE allows uncompressed blocks. Each one has a 5-byte header: the byte <code>0</code> (or <code>1</code> for the last block), followed by a 16-bit data length, and then the same length value with all of the bits flipped. Note that these are <em>little-endian</em> numbers, unlike the rest of PNG. Never assume a format is internally consistent!</p><pre class=\"sourceCode\"><code class=\"sourceCode python\">MAX_DEFLATE = <span class=\"bn\">0xffff</span><br /><span class=\"kw\">def</span> deflate_block(data, last=<span class=\"ot\">False</span>):<br />    n = <span class=\"dt\">len</span>(data)<br />    <span class=\"kw\">assert</span> n &lt;= MAX_DEFLATE<br />    <span class=\"kw\">return</span> struct.pack(<span class=\"st\">'&lt;BHH'</span>, <span class=\"dt\">bool</span>(last), n, <span class=\"bn\">0xffff</span> ^ n) + data</code></pre><p>Since a DEFLATE block can only hold 64 kB, we'll need to split our image data into multiple blocks. We will actually want a more general function to <a href=\"http://code.activestate.com/recipes/496784-split-string-into-n-size-pieces/\">split a sequence</a> into chunks of size <code>n</code> (allowing the last chunk to be smaller than <code>n</code>).</p><pre class=\"sourceCode\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> pieces(seq, n):<br />    <span class=\"kw\">return</span> [seq[i:i+n] <span class=\"kw\">for</span> i in <span class=\"dt\">xrange</span>(<span class=\"dv\">0</span>, <span class=\"dt\">len</span>(seq), n)]</code></pre><p>PNG wants the DEFLATE blocks to be encapsulated as a <a href=\"http://www.ietf.org/rfc/rfc1950.txt\">zlib data stream</a>. For our purposes, this means we prefix a header of <code>78 01</code> hex, and suffix an <a href=\"http://en.wikipedia.org/wiki/Adler-32\">Adler-32 checksum</a> of the \"decompressed\" data. That's right, a self-contained PNG encoder needs to implement <em>two different</em> checksum algorithms.</p><pre class=\"sourceCode\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> zlib_stream(data):<br />    segments = pieces(data, MAX_DEFLATE)<br /><br />    blocks = <span class=\"st\">''</span>.join(deflate_block(p) <span class=\"kw\">for</span> p in segments[:-<span class=\"dv\">1</span>])<br />    blocks += deflate_block(segments[-<span class=\"dv\">1</span>], last=<span class=\"ot\">True</span>)<br /><br />    <span class=\"kw\">return</span> <span class=\"st\">'</span><span class=\"ch\">\\x78\\x01</span><span class=\"st\">'</span> + blocks + be32(adler32(data))</code></pre><p>We're almost done, but there's one more wrinkle. PNG has a pre-compression <a href=\"http://www.w3.org/TR/PNG/#9Filters\">filter</a> step, which transforms a scanline of data at a time. A filter doesn't change the size of the image data, but is supposed to expose redundancies, leading to better compression. We aren't compressing anyway, so we choose the no-op filter. This means we prefix a zero byte to each scanline.</p><p>At last we can build the PNG file. It consists of the <a href=\"http://www.w3.org/TR/PNG/#5PNG-file-signature\">magic PNG signature</a>, a header chunk, our zlib stream inside an <a href=\"http://www.w3.org/TR/PNG/#11IDAT\"><code>IDAT</code> chunk</a>, and an empty <a href=\"http://www.w3.org/TR/PNG/#11IEND\"><code>IEND</code> chunk</a> to mark the end of the file.</p><pre class=\"sourceCode\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> to_png(width, height, data):<br />    lines = <span class=\"st\">''</span>.join(<span class=\"st\">'\\0'</span>+p <span class=\"kw\">for</span> p in pieces(data, <span class=\"dv\">3</span>*width))<br /><br />    <span class=\"kw\">return</span> (<span class=\"st\">'</span><span class=\"ch\">\\x89</span><span class=\"st\">PNG</span><span class=\"ch\">\\r\\n\\x1a\\n</span><span class=\"st\">'</span><br />        + png_header(width, height)<br />        + png_chunk(<span class=\"st\">'IDAT'</span>, zlib_stream(lines))<br />        + png_chunk(<span class=\"st\">'IEND'</span>, <span class=\"st\">''</span>))</code></pre><p>Actually, a PNG file may contain any number of <code>IDAT</code> chunks. The zlib stream is given by the concatenation of their contents. It might be convenient to emit one <code>IDAT</code> chunk per DEFLATE block. But the <code>IDAT</code> boundaries really <a href=\"http://www.w3.org/TR/PNG/#10CompressionFSL\">can</a> occur anywhere, even halfway through the zlib checksum. This flexibility is convenient for encoders, and a hassle for decoders. For example, one of <a href=\"http://en.wikipedia.org/wiki/Portable_Network_Graphics#Web_browser_support_for_PNG\">many historical PNG bugs</a> in Internet Explorer is triggered by <a href=\"http://support.microsoft.com/kb/897242\">empty <code>IDAT</code> chunks</a>.</p><p>Here are those checksum algorithms we need. My CRC function follows the approach of <a href=\"http://en.wikipedia.org/wiki/Computation_of_CRC#Bit_ordering_.28Endianness.29\">code fragment 5</a> from Wikipedia. For better performance you would want to precompute a lookup table, as <a href=\"http://www.w3.org/TR/PNG/#D-CRCAppendix\">suggested</a> by the PNG spec.</p><pre class=\"sourceCode\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> crc(data):<br />    c = <span class=\"bn\">0xffffffff</span><br />    <span class=\"kw\">for</span> x in data:<br />        c ^= <span class=\"dt\">ord</span>(x)<br />        <span class=\"kw\">for</span> k in <span class=\"dt\">xrange</span>(<span class=\"dv\">8</span>):<br />            v = <span class=\"bn\">0xedb88320</span> <span class=\"kw\">if</span> c &amp; <span class=\"dv\">1</span> <span class=\"kw\">else</span> <span class=\"dv\">0</span><br />            c = v ^ (c &gt;&gt; <span class=\"dv\">1</span>)<br />    <span class=\"kw\">return</span> c ^ <span class=\"bn\">0xffffffff</span><br /><br /><span class=\"kw\">def</span> adler32(data):<br />    s1, s2 = <span class=\"dv\">1</span>, <span class=\"dv\">0</span><br />    <span class=\"kw\">for</span> x in data:<br />        s1 = (s1 + <span class=\"dt\">ord</span>(x)) % <span class=\"dv\">65521</span><br />        s2 = (s2 + s1) % <span class=\"dv\">65521</span><br />    <span class=\"kw\">return</span> (s2 &lt;&lt; <span class=\"dv\">16</span>) + s1</code></pre><p>Now we can test this code. We'll generate a grid of red-green-yellow gradients, and write it in both PPM and PNG formats.</p><pre class=\"sourceCode\"><code class=\"sourceCode python\">w, h = <span class=\"dv\">500</span>, <span class=\"dv\">300</span><br />img = <span class=\"st\">''</span><br /><span class=\"kw\">for</span> y in <span class=\"dt\">xrange</span>(h):<br />    <span class=\"kw\">for</span> x in <span class=\"dt\">xrange</span>(w):<br />        img += <span class=\"dt\">chr</span>(x % <span class=\"dv\">256</span>) + <span class=\"dt\">chr</span>(y % <span class=\"dv\">256</span>) + <span class=\"st\">'\\0'</span><br /><br /><span class=\"dt\">open</span>(<span class=\"st\">'out.ppm'</span>, <span class=\"st\">'wb'</span>).write(to_ppm(w, h, img))<br /><span class=\"dt\">open</span>(<span class=\"st\">'out.png'</span>, <span class=\"st\">'wb'</span>).write(to_png(w, h, img))</code></pre><p>Then we can verify that the two files contain identical image data.</p><pre><code>$ pngtopnm out.png | sha1sum - out.ppm<br />e19c1229221c608b2a45a4488f9959403b8630a0  -<br />e19c1229221c608b2a45a4488f9959403b8630a0  out.ppm<br /></code></pre><p>That's it! As usual, the code is on <a href=\"https://github.com/kmcallister/blog-misc/tree/master/minpng/minpng.py\">GitHub</a>. You can also read what others have written on similar subjects <a href=\"http://drj11.wordpress.com/2007/11/20/a-use-for-uncompressed-pngs/\">here</a>, <a href=\"https://github.com/jrmuizel/minpng\">here</a>, <a href=\"http://gareth-rees.livejournal.com/9988.html\">here</a>, or <a href=\"http://www.chrfr.de/software/midp_png.html\">here</a>.</p><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/1563623855220143059-1775682818073510143?l=mainisusuallyafunction.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>" "http://mainisusuallyafunction.blogspot.com/2012/04/minimal-encoder-for-uncompressed-pngs.html" (20349 22177) obsolete 34 nil nil ((title nil "Keegan McAllister: A minimal encoder for uncompressed PNGs") (guid ((isPermaLink . "false")) "tag:blogger.com,1999:blog-1563623855220143059.post-1775682818073510143") (link nil "http://mainisusuallyafunction.blogspot.com/2012/04/minimal-encoder-for-uncompressed-pngs.html") (description nil "<p>I've often wondered how hard it is to output a <a href=\"http://en.wikipedia.org/wiki/Portable_Network_Graphics\">PNG</a> file directly, without using a library or a standard tool like <a href=\"http://netpbm.sourceforge.net/\"><code>pnmtopng</code></a>. (I'm not sure when you'd actually want to do this; maybe for a tiny embedded system with a web interface.)</p><p>I found that constructing a simple, uncompressed PNG does not require a whole lot of code, but there are some odd details I got wrong on the first try. Here's a crash course in writing a minimal PNG encoder. We'll use only a small subset of <a href=\"http://www.w3.org/TR/PNG/\">the PNG specification</a>, but I'll link to the full spec so you can read more.</p><p>The example code is not too fast; it's written in Python and has tons of string copying everywhere. My goal was to express the idea clearly, and let you worry about coding it up in C for your embedded system or whatever. If you're careful, you can avoid ever copying the image data.</p><p>We will assume the raw image data is a Python byte string (non-Unicode), consisting of one byte each for red, green, and blue, for each pixel in English reading order. For reference, here is how we'd \"encode\" this data in the much simpler <a href=\"http://manpages.ubuntu.com/manpages/oneiric/man5/ppm.5.html\">PPM</a> format.</p><pre class=\"sourceCode\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> to_ppm(width, height, data):<br />    <span class=\"kw\">return</span> <span class=\"st\">'P6</span><span class=\"ch\">\\n</span><span class=\"ot\">%d</span><span class=\"st\"> </span><span class=\"ot\">%d</span><span class=\"ch\">\\n</span><span class=\"st\">255</span><span class=\"ch\">\\n</span><span class=\"ot\">%s</span><span class=\"st\">'</span> % (width, height, data)</code></pre><p>I lied when I said we'd use no libraries at all. I will import Python's standard <a href=\"http://docs.python.org/library/struct.html\"><code>struct</code></a> module. I figured an exercise in converting integers to 4-byte <a href=\"http://en.wikipedia.org/wiki/Endianness\">big endian</a> format would be excessively boring. Here's how we do it with <code>struct</code>.</p><pre class=\"sourceCode\"><code class=\"sourceCode python\"><span class=\"ch\">import</span> struct<br /><br /><span class=\"kw\">def</span> be32(n):<br />    <span class=\"kw\">return</span> struct.pack(<span class=\"st\">'&gt;I'</span>, n)</code></pre><p>A PNG file contains a sequence of <a href=\"http://www.w3.org/TR/PNG/#5Chunk-layout\">data chunks</a>, each with an associated length, type, and <a href=\"http://www.w3.org/TR/PNG/#5CRC-algorithm\">CRC checksum</a>. The type is a 4-byte quantity which can be <a href=\"http://www.w3.org/TR/PNG/#5Chunk-naming-conventions\">interpreted</a> as four ASCII letters. We'll implement <code>crc</code> later.</p><pre class=\"sourceCode\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> png_chunk(ty, data):<br />    <span class=\"kw\">return</span> be32(<span class=\"dt\">len</span>(data)) + ty + data + be32(crc(ty + data))</code></pre><p>The <a href=\"http://www.w3.org/TR/PNG/#11IHDR\"><code>IHDR</code> chunk</a>, always the first chunk in a file, contains basic header information such as width and height. We will hardcode a color depth of 8 bits, <a href=\"http://www.w3.org/TR/PNG/#6Colour-values\">color type</a> 2 (RGB truecolor), and standard 0 values for the other fields.</p><pre class=\"sourceCode\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> png_header(width, height):<br />    <span class=\"kw\">return</span> png_chunk(<span class=\"st\">'IHDR'</span>,<br />        struct.pack(<span class=\"st\">'&gt;IIBBBBB'</span>, width, height, <span class=\"dv\">8</span>, <span class=\"dv\">2</span>, <span class=\"dv\">0</span>, <span class=\"dv\">0</span>, <span class=\"dv\">0</span>))</code></pre><p>The actual image data is stored in <a href=\"http://www.ietf.org/rfc/rfc1951.txt\">DEFLATE</a> format, the same compression used by <a href=\"http://en.wikipedia.org/wiki/Gzip\">gzip</a> and friends. Fortunately for our minimalist project, DEFLATE allows uncompressed blocks. Each one has a 5-byte header: the byte <code>0</code> (or <code>1</code> for the last block), followed by a 16-bit data length, and then the same length value with all of the bits flipped. Note that these are <em>little-endian</em> numbers, unlike the rest of PNG. Never assume a format is internally consistent!</p><pre class=\"sourceCode\"><code class=\"sourceCode python\">MAX_DEFLATE = <span class=\"bn\">0xffff</span><br /><span class=\"kw\">def</span> deflate_block(data, last=<span class=\"ot\">False</span>):<br />    n = <span class=\"dt\">len</span>(data)<br />    <span class=\"kw\">assert</span> n &lt;= MAX_DEFLATE<br />    <span class=\"kw\">return</span> struct.pack(<span class=\"st\">'&lt;BHH'</span>, <span class=\"dt\">bool</span>(last), n, <span class=\"bn\">0xffff</span> ^ n) + data</code></pre><p>Since a DEFLATE block can only hold 64 kB, we'll need to split our image data into multiple blocks. We will actually want a more general function to <a href=\"http://code.activestate.com/recipes/496784-split-string-into-n-size-pieces/\">split a sequence</a> into chunks of size <code>n</code> (allowing the last chunk to be smaller than <code>n</code>).</p><pre class=\"sourceCode\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> pieces(seq, n):<br />    <span class=\"kw\">return</span> [seq[i:i+n] <span class=\"kw\">for</span> i in <span class=\"dt\">xrange</span>(<span class=\"dv\">0</span>, <span class=\"dt\">len</span>(seq), n)]</code></pre><p>PNG wants the DEFLATE blocks to be encapsulated as a <a href=\"http://www.ietf.org/rfc/rfc1950.txt\">zlib data stream</a>. For our purposes, this means we prefix a header of <code>78 01</code> hex, and suffix an <a href=\"http://en.wikipedia.org/wiki/Adler-32\">Adler-32 checksum</a> of the \"decompressed\" data. That's right, a self-contained PNG encoder needs to implement <em>two different</em> checksum algorithms.</p><pre class=\"sourceCode\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> zlib_stream(data):<br />    segments = pieces(data, MAX_DEFLATE)<br /><br />    blocks = <span class=\"st\">''</span>.join(deflate_block(p) <span class=\"kw\">for</span> p in segments[:-<span class=\"dv\">1</span>])<br />    blocks += deflate_block(segments[-<span class=\"dv\">1</span>], last=<span class=\"ot\">True</span>)<br /><br />    <span class=\"kw\">return</span> <span class=\"st\">'</span><span class=\"ch\">\\x78\\x01</span><span class=\"st\">'</span> + blocks + be32(adler32(data))</code></pre><p>We're almost done, but there's one more wrinkle. PNG has a pre-compression <a href=\"http://www.w3.org/TR/PNG/#9Filters\">filter</a> step, which transforms a scanline of data at a time. A filter doesn't change the size of the image data, but is supposed to expose redundancies, leading to better compression. We aren't compressing anyway, so we choose the no-op filter. This means we prefix a zero byte to each scanline.</p><p>At last we can build the PNG file. It consists of the <a href=\"http://www.w3.org/TR/PNG/#5PNG-file-signature\">magic PNG signature</a>, a header chunk, our zlib stream inside an <a href=\"http://www.w3.org/TR/PNG/#11IDAT\"><code>IDAT</code> chunk</a>, and an empty <a href=\"http://www.w3.org/TR/PNG/#11IEND\"><code>IEND</code> chunk</a> to mark the end of the file.</p><pre class=\"sourceCode\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> to_png(width, height, data):<br />    lines = <span class=\"st\">''</span>.join(<span class=\"st\">'\\0'</span>+p <span class=\"kw\">for</span> p in pieces(data, <span class=\"dv\">3</span>*width))<br /><br />    <span class=\"kw\">return</span> (<span class=\"st\">'</span><span class=\"ch\">\\x89</span><span class=\"st\">PNG</span><span class=\"ch\">\\r\\n\\x1a\\n</span><span class=\"st\">'</span><br />        + png_header(width, height)<br />        + png_chunk(<span class=\"st\">'IDAT'</span>, zlib_stream(lines))<br />        + png_chunk(<span class=\"st\">'IEND'</span>, <span class=\"st\">''</span>))</code></pre><p>Actually, a PNG file may contain any number of <code>IDAT</code> chunks. The zlib stream is given by the concatenation of their contents. It might be convenient to emit one <code>IDAT</code> chunk per DEFLATE block. But the <code>IDAT</code> boundaries really <a href=\"http://www.w3.org/TR/PNG/#10CompressionFSL\">can</a> occur anywhere, even halfway through the zlib checksum. This flexibility is convenient for encoders, and a hassle for decoders. For example, one of <a href=\"http://en.wikipedia.org/wiki/Portable_Network_Graphics#Web_browser_support_for_PNG\">many historical PNG bugs</a> in Internet Explorer is triggered by <a href=\"http://support.microsoft.com/kb/897242\">empty <code>IDAT</code> chunks</a>.</p><p>Here are those checksum algorithms we need. My CRC function follows the approach of <a href=\"http://en.wikipedia.org/wiki/Computation_of_CRC#Bit_ordering_.28Endianness.29\">code fragment 5</a> from Wikipedia. For better performance you would want to precompute a lookup table, as <a href=\"http://www.w3.org/TR/PNG/#D-CRCAppendix\">suggested</a> by the PNG spec.</p><pre class=\"sourceCode\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> crc(data):<br />    c = <span class=\"bn\">0xffffffff</span><br />    <span class=\"kw\">for</span> x in data:<br />        c ^= <span class=\"dt\">ord</span>(x)<br />        <span class=\"kw\">for</span> k in <span class=\"dt\">xrange</span>(<span class=\"dv\">8</span>):<br />            v = <span class=\"bn\">0xedb88320</span> <span class=\"kw\">if</span> c &amp; <span class=\"dv\">1</span> <span class=\"kw\">else</span> <span class=\"dv\">0</span><br />            c = v ^ (c &gt;&gt; <span class=\"dv\">1</span>)<br />    <span class=\"kw\">return</span> c ^ <span class=\"bn\">0xffffffff</span><br /><br /><span class=\"kw\">def</span> adler32(data):<br />    s1, s2 = <span class=\"dv\">1</span>, <span class=\"dv\">0</span><br />    <span class=\"kw\">for</span> x in data:<br />        s1 = (s1 + <span class=\"dt\">ord</span>(x)) % <span class=\"dv\">65521</span><br />        s2 = (s2 + s1) % <span class=\"dv\">65521</span><br />    <span class=\"kw\">return</span> (s2 &lt;&lt; <span class=\"dv\">16</span>) + s1</code></pre><p>Now we can test this code. We'll generate a grid of red-green-yellow gradients, and write it in both PPM and PNG formats.</p><pre class=\"sourceCode\"><code class=\"sourceCode python\">w, h = <span class=\"dv\">500</span>, <span class=\"dv\">300</span><br />img = <span class=\"st\">''</span><br /><span class=\"kw\">for</span> y in <span class=\"dt\">xrange</span>(h):<br />    <span class=\"kw\">for</span> x in <span class=\"dt\">xrange</span>(w):<br />        img += <span class=\"dt\">chr</span>(x % <span class=\"dv\">256</span>) + <span class=\"dt\">chr</span>(y % <span class=\"dv\">256</span>) + <span class=\"st\">'\\0'</span><br /><br /><span class=\"dt\">open</span>(<span class=\"st\">'out.ppm'</span>, <span class=\"st\">'wb'</span>).write(to_ppm(w, h, img))<br /><span class=\"dt\">open</span>(<span class=\"st\">'out.png'</span>, <span class=\"st\">'wb'</span>).write(to_png(w, h, img))</code></pre><p>Then we can verify that the two files contain identical image data.</p><pre><code>$ pngtopnm out.png | sha1sum - out.ppm<br />e19c1229221c608b2a45a4488f9959403b8630a0  -<br />e19c1229221c608b2a45a4488f9959403b8630a0  out.ppm<br /></code></pre><p>That's it! As usual, the code is on <a href=\"https://github.com/kmcallister/blog-misc/tree/master/minpng/minpng.py\">GitHub</a>. You can also read what others have written on similar subjects <a href=\"http://drj11.wordpress.com/2007/11/20/a-use-for-uncompressed-pngs/\">here</a>, <a href=\"https://github.com/jrmuizel/minpng\">here</a>, <a href=\"http://gareth-rees.livejournal.com/9988.html\">here</a>, or <a href=\"http://www.chrfr.de/software/midp_png.html\">here</a>.</p><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/1563623855220143059-1775682818073510143?l=mainisusuallyafunction.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>") (pubDate nil "Thu, 05 Apr 2012 08:24:01 +0000") (author nil "noreply@blogger.com (keegan)"))) ("Brandon Simmons: Announcing yet another lens library" "<p>I just uploaded the first version of a lens library I've been working on, called\n<a href=\"http://hackage.haskell.org/package/yall\">yall</a>. You can get it with a</p>\n<pre><code>cabal install yall\n</code></pre>\n<p>or check it out <a href=\"https://github.com/jberryman/yall\">on github</a>. There will be a\nTemplate Haskell library for automatically deriving lenses at some point in the\nfuture.</p>\n<p>I was motivated primarily by the desire for a lens that is acceptable for\n<a href=\"http://hackage.haskell.org/package/pez\">pez</a> (existing libs  such as the\nexcellent <a href=\"http://hackage.haskell.org/package/fclabels\">fclabels</a>\nor <a href=\"http://hackage.haskell.org/package/data-lens\">data-lens</a>\ndidn't fit the bill for assorted reasons), and\nto explore some abstractions and generalizations re lenses more deeply.</p>\n<p>The result is fairly rough at this point, but I'm interested in feedback.</p>\n<h2>Distinguishing features</h2>\n<p>This is a bit of copy/paste from the docs I just wrote.</p>\n<ul>\n<li><p>Lenses are parameterized over two Monads (by convention m and w), and look\nlike <code>a -&gt; m (b -&gt; w a, b)</code>. this lets us define lenses for sum types, that\nperform validation, that do IO (e.g. persist data to disk), etc., etc.</p></li>\n<li><p>a module Data.Yall.Iso that complements Lens powerfully</p></li>\n<li><p>a rich set of category-level class instances (for now from\n<a href=\"http://hackage.haskell.org/package/categories\">categories</a>) for\nLens and Iso. These along with the pre-defined primitive lenses and\ncombinators give an interface comparable to Arrow</p></li>\n</ul>\n<h2>Examples</h2>\n<p>And here is a little showcase of functionality. First, an illustration of\npartial lenses, appropriate for multi-constructor types.</p>\n<p>``` haskell\n-- First, lenses for a sum type. This is something like what we'll generate\n-- with template haskell.\ndata Test a = C1 { <em>testString :: String, </em>testA :: a }</p>\n<pre><code>        | C2 { _testString :: String, _testRec :: Test a }\n</code></pre>\n<p>-- pure lens, polymorphic in Monad for composability:\ntestString :: (Monad w, Monad m)=&gt; Lens w m (Test a) String\ntestString = Lens $ \\t-&gt; return (\\s-&gt; return t{ <em>testString = s }, </em>testString t)</p>\n<p>-- lenses that can fail. For now, use Maybe. In the TH library, I'll probably\n-- generate lenses polymorphic in <a href=\"http://hackage.haskell.org/package/failure\">http://hackage.haskell.org/package/failure</a>\ntestA :: LensM Maybe (Test a) a\ntestA = Lens f where</p>\n<pre><code>f (C1 s a) = return (return . C1 s, a)\nf _ = Nothing\n</code></pre>\n<p>testRec :: LensM Maybe (Test a) (Test a)\ntestRec = Lens f where</p>\n<pre><code>f (C2 s i) = return (return . C2 s, i)\nf _        = Nothing\n</code></pre>\n<p>-- conposing a pure and partial lens:\ndemo0 :: Maybe String\ndemo0 = getM (testString . testRec . testRec) (C2 \"top\" (C1 \"lens will fail\" True))\n```</p>\n<p>Now an example of a more creative use of monadic getter, allowing us to define\na lens on the \"Nth\" element in a list, returning our results in the <code>[]</code> monad\nenvironment.</p>\n<p>``` haskell\n-- Here we have a lens with a getter in the list monad, defining a mutable view\n-- on the Nth element of the list:\nnth :: LensM [] [a] a\nnth = Lens $ foldr nthGS []</p>\n<pre><code>where nthGS n l = (return . (: map snd l), n) : map (prepend n) l\nprepend = first . fmap . liftM . (:)\n</code></pre>\n<p>-- This composes nicely. Set the Nth element of our list to 0:\ndemo1 :: [ [(Char,Int)] ]\ndemo1 = setM (sndL . nth) 0 [('a',1),('b',2),('c',3)]\n```</p>\n<p>Finally here's a bit of a silly example illustrating a lens with Monadic setter\n(<code>w</code>) that does IO, in this case persisting a serialized version of the data\nwe're operating on to a text file.</p>\n<p>``` haskell\n-- persist modifications to a type to a given file. An effect-ful identity lens.\npersistL :: (Monad m) =&gt; FilePath -&gt; Lens IO m String String\npersistL nm = Lens $ \\s-&gt; return (\\s'-&gt; writeFile nm s' &gt;&gt; return s', s)</p>\n<p>-- we'll use this one:\ntmpFile = \"/tmp/yall-test\"\nprintFileContents = putStrLn . (\"file contents: \" ++) =&lt;&lt; readFile tmpFile</p>\n<p>-- build a lens with some pre-defined Iso's that offers a [Int] view on a\n-- string that looks like, e.g. \"1 2 3 4 5\":\nunserializedL :: (Monad w, Monad m) =&gt; Lens w m String [Int]\nunserializedL = isoL $ ifmap (inverseI showI) . wordsI</p>\n<p>-- now add \"persistence\" effects to the above lens so everytime we do a \"set\"\n-- we update the file \"yall-test\" to redlect the new type.\nunserializedLP :: (Monad m) =&gt; Lens IO m String [Int]\nunserializedLP = unserializedL . persistL tmpFile</p>\n<p>demo2 :: IO ()\ndemo2 = do</p>\n<pre><code>-- apply the lens setter to `mempty` for some Monoid ([Char] in this case)\nstr &lt;- setEmptyW unserializedLP [1..5]\n-- LOGGING: the string we got above (by setting [Int]) was written to a file:\nprint str\nprintFileContents\nstr' &lt;- modifyW unserializedLP (map (*2) . (6 :) . reverse) str\n-- LOGGING: now the file was modified to reflect the changed value:\nprint str'\nprintFileContents\n</code></pre>\n<p>```</p>\n<h2>Future</h2>\n<p>I still need to create TH deriving functionality for the package, and will\nannounce when that happens. Been busy lately so I'm not sure when I'll get to\nit, but let me know your questions/comments/concerns and I'll try to address\nthem promptly.</p>" "http://brandon.si/code/yall/" (20348 64072) obsolete 35 nil nil ((title nil "Brandon Simmons: Announcing yet another lens library") (guid ((isPermaLink . "false")) "http://brandon.si/code/yall") (link nil "http://brandon.si/code/yall/") (description nil "<p>I just uploaded the first version of a lens library I've been working on, called\n<a href=\"http://hackage.haskell.org/package/yall\">yall</a>. You can get it with a</p>\n\n<pre><code>cabal install yall\n</code></pre>\n\n<p>or check it out <a href=\"https://github.com/jberryman/yall\">on github</a>. There will be a\nTemplate Haskell library for automatically deriving lenses at some point in the\nfuture.</p>\n\n<p>I was motivated primarily by the desire for a lens that is acceptable for\n<a href=\"http://hackage.haskell.org/package/pez\">pez</a> (existing libs  such as the\nexcellent <a href=\"http://hackage.haskell.org/package/fclabels\">fclabels</a>\nor <a href=\"http://hackage.haskell.org/package/data-lens\">data-lens</a>\ndidn't fit the bill for assorted reasons), and\nto explore some abstractions and generalizations re lenses more deeply.</p>\n\n<p>The result is fairly rough at this point, but I'm interested in feedback.</p>\n\n<h2>Distinguishing features</h2>\n\n<p>This is a bit of copy/paste from the docs I just wrote.</p>\n\n<ul>\n<li><p>Lenses are parameterized over two Monads (by convention m and w), and look\nlike <code>a -&gt; m (b -&gt; w a, b)</code>. this lets us define lenses for sum types, that\nperform validation, that do IO (e.g. persist data to disk), etc., etc.</p></li>\n<li><p>a module Data.Yall.Iso that complements Lens powerfully</p></li>\n<li><p>a rich set of category-level class instances (for now from\n<a href=\"http://hackage.haskell.org/package/categories\">categories</a>) for\nLens and Iso. These along with the pre-defined primitive lenses and\ncombinators give an interface comparable to Arrow</p></li>\n</ul>\n\n\n<h2>Examples</h2>\n\n<p>And here is a little showcase of functionality. First, an illustration of\npartial lenses, appropriate for multi-constructor types.</p>\n\n<p>``` haskell\n-- First, lenses for a sum type. This is something like what we'll generate\n-- with template haskell.\ndata Test a = C1 { <em>testString :: String, </em>testA :: a }</p>\n\n<pre><code>        | C2 { _testString :: String, _testRec :: Test a }\n</code></pre>\n\n<p>-- pure lens, polymorphic in Monad for composability:\ntestString :: (Monad w, Monad m)=&gt; Lens w m (Test a) String\ntestString = Lens $ \\t-&gt; return (\\s-&gt; return t{ <em>testString = s }, </em>testString t)</p>\n\n<p>-- lenses that can fail. For now, use Maybe. In the TH library, I'll probably\n-- generate lenses polymorphic in <a href=\"http://hackage.haskell.org/package/failure\">http://hackage.haskell.org/package/failure</a>\ntestA :: LensM Maybe (Test a) a\ntestA = Lens f where</p>\n\n<pre><code>f (C1 s a) = return (return . C1 s, a)\nf _ = Nothing\n</code></pre>\n\n<p>testRec :: LensM Maybe (Test a) (Test a)\ntestRec = Lens f where</p>\n\n<pre><code>f (C2 s i) = return (return . C2 s, i)\nf _        = Nothing\n</code></pre>\n\n<p>-- conposing a pure and partial lens:\ndemo0 :: Maybe String\ndemo0 = getM (testString . testRec . testRec) (C2 \"top\" (C1 \"lens will fail\" True))\n```</p>\n\n<p>Now an example of a more creative use of monadic getter, allowing us to define\na lens on the \"Nth\" element in a list, returning our results in the <code>[]</code> monad\nenvironment.</p>\n\n<p>``` haskell\n-- Here we have a lens with a getter in the list monad, defining a mutable view\n-- on the Nth element of the list:\nnth :: LensM [] [a] a\nnth = Lens $ foldr nthGS []</p>\n\n<pre><code>where nthGS n l = (return . (: map snd l), n) : map (prepend n) l\n      prepend = first . fmap . liftM . (:)\n</code></pre>\n\n<p>-- This composes nicely. Set the Nth element of our list to 0:\ndemo1 :: [ [(Char,Int)] ]\ndemo1 = setM (sndL . nth) 0 [('a',1),('b',2),('c',3)]\n```</p>\n\n<p>Finally here's a bit of a silly example illustrating a lens with Monadic setter\n(<code>w</code>) that does IO, in this case persisting a serialized version of the data\nwe're operating on to a text file.</p>\n\n<p>``` haskell\n-- persist modifications to a type to a given file. An effect-ful identity lens.\npersistL :: (Monad m) =&gt; FilePath -&gt; Lens IO m String String\npersistL nm = Lens $ \\s-&gt; return (\\s'-&gt; writeFile nm s' &gt;&gt; return s', s)</p>\n\n<p>-- we'll use this one:\ntmpFile = \"/tmp/yall-test\"\nprintFileContents = putStrLn . (\"file contents: \" ++) =&lt;&lt; readFile tmpFile</p>\n\n<p>-- build a lens with some pre-defined Iso's that offers a [Int] view on a\n-- string that looks like, e.g. \"1 2 3 4 5\":\nunserializedL :: (Monad w, Monad m) =&gt; Lens w m String [Int]\nunserializedL = isoL $ ifmap (inverseI showI) . wordsI</p>\n\n<p>-- now add \"persistence\" effects to the above lens so everytime we do a \"set\"\n-- we update the file \"yall-test\" to redlect the new type.\nunserializedLP :: (Monad m) =&gt; Lens IO m String [Int]\nunserializedLP = unserializedL . persistL tmpFile</p>\n\n<p>demo2 :: IO ()\ndemo2 = do</p>\n\n<pre><code>-- apply the lens setter to `mempty` for some Monoid ([Char] in this case)\nstr &lt;- setEmptyW unserializedLP [1..5]\n\n-- LOGGING: the string we got above (by setting [Int]) was written to a file:\nprint str\nprintFileContents\n\nstr' &lt;- modifyW unserializedLP (map (*2) . (6 :) . reverse) str\n\n-- LOGGING: now the file was modified to reflect the changed value:\nprint str'\nprintFileContents\n</code></pre>\n\n<p>```</p>\n\n<h2>Future</h2>\n\n<p>I still need to create TH deriving functionality for the package, and will\nannounce when that happens. Been busy lately so I'm not sure when I'll get to\nit, but let me know your questions/comments/concerns and I'll try to address\nthem promptly.</p>") (pubDate nil "Thu, 05 Apr 2012 01:50:00 +0000"))) ("Twan van Laarhoven: What to do with the results of upstream pipes" "<p>In the pipes library, the type of the composition operator is\n</p><pre class=\"haskell\">(<span class=\"varop\">&gt;+&gt;</span>) <span class=\"keyglyph\">::</span> <span class=\"conid\">Pipe</span> <span class=\"varid\">m</span> <span class=\"varid\">a</span> <span class=\"varid\">b</span> <span class=\"varid\">r</span> <span class=\"keyglyph\">-&gt;</span> <span class=\"conid\">Pipe</span> <span class=\"varid\">m</span> <span class=\"varid\">b</span> <span class=\"varid\">c</span> <span class=\"varid\">r</span> <span class=\"keyglyph\">-&gt;</span> <span class=\"conid\">Pipe</span> <span class=\"varid\">m</span> <span class=\"varid\">a</span> <span class=\"varid\">c</span> <span class=\"varid\">r</span>\n</pre><p>If you look closely, then you will notice that all three pipes have result type <tt><span class=\"varid\">r</span></tt>.\nHow does this work? Simple: whichever pipe stops first provides the final result.\n</p><p>In my opinion this is wrong. The upstream pipe produces values, and the downstream pipe does something with them. The downstream pipe is the one that leads the computation, by pulling results from the upstream pipe.\nIt is therefore always the downstream pipe that should provide the result. So, in the <a href=\"http://twanvl.nl/blog/haskell/conduits-vs-pipes\">pipification of conduit</a>, the proposed type for composition is instead\n</p><pre class=\"haskell\">(<span class=\"varop\">&gt;+&gt;</span>) <span class=\"keyglyph\">::</span> <span class=\"conid\">Pipe</span> <span class=\"varid\">m</span> <span class=\"varid\">a</span> <span class=\"varid\">b</span> () <span class=\"keyglyph\">-&gt;</span> <span class=\"conid\">Pipe</span> <span class=\"varid\">m</span> <span class=\"varid\">b</span> <span class=\"varid\">c</span> <span class=\"varid\">r</span> <span class=\"keyglyph\">-&gt;</span> <span class=\"conid\">Pipe</span> <span class=\"varid\">m</span> <span class=\"varid\">a</span> <span class=\"varid\">c</span> <span class=\"varid\">r</span>\n</pre><p>This makes it clear that the result of the first pipe is not used, the result of the composition always has to come from downstream.\nBut now the result of the first pipe would be discarded completely.\n</p><p>Another, more general, solution is to communicate the result of the first pipe to the second one.\nThat would give the <tt><span class=\"varid\">await</span></tt> function in the downstream pipe the type\n</p><pre class=\"haskell\"><span class=\"varid\">await</span> <span class=\"keyglyph\">::</span> <span class=\"conid\">Pipe</span> <span class=\"varid\">m</span> <span class=\"varid\">a</span> <span class=\"varid\">b</span> (<span class=\"conid\">Either</span> <span class=\"varid\">r<sub>1</sub></span> <span class=\"varid\">a</span>)\n</pre><p>where <tt><span class=\"varid\">r<sub>1</sub></span></tt> is the result of the upstream pipe.\nOf course that <tt><span class=\"varid\">r<sub>1</sub></span></tt> type needs to come from somewhere. So <tt><span class=\"conid\">Pipe</span></tt> would need another type argument\n</p><pre class=\"haskell\"><span class=\"keyword\">data</span> <span class=\"conid\">Pipe</span> <span class=\"varid\">m</span> <span class=\"varid\">stream<sub>in</sub></span> <span class=\"varid\">stream<sub>out</sub></span> <span class=\"varid\">final<sub>in</sub></span> <span class=\"varid\">final<sub>out</sub></span>\n</pre><p>giving await the type\n</p><pre class=\"haskell\"><span class=\"varid\">await</span> <span class=\"keyglyph\">::</span> <span class=\"conid\">Pipe</span> <span class=\"varid\">m</span> <span class=\"varid\">a</span> <span class=\"varid\">b</span> <span class=\"varid\">x</span> (<span class=\"conid\">Either</span> <span class=\"varid\">x</span> <span class=\"varid\">a</span>)\n</pre><p>Composition becomes\n</p><pre class=\"haskell\">(<span class=\"varop\">&gt;+&gt;</span>) <span class=\"keyglyph\">::</span> <span class=\"conid\">Pipe</span> <span class=\"varid\">m</span> <span class=\"varid\">a</span> <span class=\"varid\">b</span> <span class=\"varid\">x</span> <span class=\"varid\">y</span> <span class=\"keyglyph\">-&gt;</span> <span class=\"conid\">Pipe</span> <span class=\"varid\">m</span> <span class=\"varid\">b</span> <span class=\"varid\">c</span> <span class=\"varid\">y</span> <span class=\"varid\">z</span> <span class=\"keyglyph\">-&gt;</span> <span class=\"conid\">Pipe</span> <span class=\"varid\">m</span> <span class=\"varid\">a</span> <span class=\"varid\">c</span> <span class=\"varid\">x</span> <span class=\"varid\">z</span>\n</pre><p>I think this makes <tt><span class=\"conid\">Pipe</span></tt> into a category over <em>pairs</em> of Haskell types. I was tempted to call this a bicategory, in analogy with <a href=\"http://hackage.haskell.org/packages/archive/bifunctors/0.1.2/doc/html/Data-Bifunctor.html\">bifunctor</a>, but that term apparently means <a href=\"http://ncatlab.org/nlab/show/bicategory\">something else</a>.\n</p><p>Note that this article is just about a quick idea I had.\nI am not saying that this is the best way to do things.\nIn fact, I am not even sure if propagating result values in this way actually helps solve any real world problems.\n</p>" "http://twanvl.nl/blog/haskell/results-of-upstream-pipes" (20348 41572) obsolete 36 nil nil ((title nil "Twan van Laarhoven: What to do with the results of upstream pipes") (guid ((isPermaLink . "true")) "http://twanvl.nl/blog/haskell/results-of-upstream-pipes") (link nil "http://twanvl.nl/blog/haskell/results-of-upstream-pipes") (description nil "<p>In the pipes library, the type of the composition operator is\n</p><pre class=\"haskell\">(<span class=\"varop\">&gt;+&gt;</span>) <span class=\"keyglyph\">::</span> <span class=\"conid\">Pipe</span> <span class=\"varid\">m</span> <span class=\"varid\">a</span> <span class=\"varid\">b</span> <span class=\"varid\">r</span> <span class=\"keyglyph\">-&gt;</span> <span class=\"conid\">Pipe</span> <span class=\"varid\">m</span> <span class=\"varid\">b</span> <span class=\"varid\">c</span> <span class=\"varid\">r</span> <span class=\"keyglyph\">-&gt;</span> <span class=\"conid\">Pipe</span> <span class=\"varid\">m</span> <span class=\"varid\">a</span> <span class=\"varid\">c</span> <span class=\"varid\">r</span>\n</pre><p>If you look closely, then you will notice that all three pipes have result type <tt><span class=\"varid\">r</span></tt>.\nHow does this work? Simple: whichever pipe stops first provides the final result.\n</p><p>In my opinion this is wrong. The upstream pipe produces values, and the downstream pipe does something with them. The downstream pipe is the one that leads the computation, by pulling results from the upstream pipe.\nIt is therefore always the downstream pipe that should provide the result. So, in the <a href=\"http://twanvl.nl/blog/haskell/conduits-vs-pipes\">pipification of conduit</a>, the proposed type for composition is instead\n</p><pre class=\"haskell\">(<span class=\"varop\">&gt;+&gt;</span>) <span class=\"keyglyph\">::</span> <span class=\"conid\">Pipe</span> <span class=\"varid\">m</span> <span class=\"varid\">a</span> <span class=\"varid\">b</span> () <span class=\"keyglyph\">-&gt;</span> <span class=\"conid\">Pipe</span> <span class=\"varid\">m</span> <span class=\"varid\">b</span> <span class=\"varid\">c</span> <span class=\"varid\">r</span> <span class=\"keyglyph\">-&gt;</span> <span class=\"conid\">Pipe</span> <span class=\"varid\">m</span> <span class=\"varid\">a</span> <span class=\"varid\">c</span> <span class=\"varid\">r</span>\n</pre><p>This makes it clear that the result of the first pipe is not used, the result of the composition always has to come from downstream.\nBut now the result of the first pipe would be discarded completely.\n</p><p>Another, more general, solution is to communicate the result of the first pipe to the second one.\nThat would give the <tt><span class=\"varid\">await</span></tt> function in the downstream pipe the type\n</p><pre class=\"haskell\"><span class=\"varid\">await</span> <span class=\"keyglyph\">::</span> <span class=\"conid\">Pipe</span> <span class=\"varid\">m</span> <span class=\"varid\">a</span> <span class=\"varid\">b</span> (<span class=\"conid\">Either</span> <span class=\"varid\">r<sub>1</sub></span> <span class=\"varid\">a</span>)\n</pre><p>where <tt><span class=\"varid\">r<sub>1</sub></span></tt> is the result of the upstream pipe.\nOf course that <tt><span class=\"varid\">r<sub>1</sub></span></tt> type needs to come from somewhere. So <tt><span class=\"conid\">Pipe</span></tt> would need another type argument\n</p><pre class=\"haskell\"><span class=\"keyword\">data</span> <span class=\"conid\">Pipe</span> <span class=\"varid\">m</span> <span class=\"varid\">stream<sub>in</sub></span> <span class=\"varid\">stream<sub>out</sub></span> <span class=\"varid\">final<sub>in</sub></span> <span class=\"varid\">final<sub>out</sub></span>\n</pre><p>giving await the type\n</p><pre class=\"haskell\"><span class=\"varid\">await</span> <span class=\"keyglyph\">::</span> <span class=\"conid\">Pipe</span> <span class=\"varid\">m</span> <span class=\"varid\">a</span> <span class=\"varid\">b</span> <span class=\"varid\">x</span> (<span class=\"conid\">Either</span> <span class=\"varid\">x</span> <span class=\"varid\">a</span>)\n</pre><p>Composition becomes\n</p><pre class=\"haskell\">(<span class=\"varop\">&gt;+&gt;</span>) <span class=\"keyglyph\">::</span> <span class=\"conid\">Pipe</span> <span class=\"varid\">m</span> <span class=\"varid\">a</span> <span class=\"varid\">b</span> <span class=\"varid\">x</span> <span class=\"varid\">y</span> <span class=\"keyglyph\">-&gt;</span> <span class=\"conid\">Pipe</span> <span class=\"varid\">m</span> <span class=\"varid\">b</span> <span class=\"varid\">c</span> <span class=\"varid\">y</span> <span class=\"varid\">z</span> <span class=\"keyglyph\">-&gt;</span> <span class=\"conid\">Pipe</span> <span class=\"varid\">m</span> <span class=\"varid\">a</span> <span class=\"varid\">c</span> <span class=\"varid\">x</span> <span class=\"varid\">z</span>\n</pre><p>I think this makes <tt><span class=\"conid\">Pipe</span></tt> into a category over <em>pairs</em> of Haskell types. I was tempted to call this a bicategory, in analogy with <a href=\"http://hackage.haskell.org/packages/archive/bifunctors/0.1.2/doc/html/Data-Bifunctor.html\">bifunctor</a>, but that term apparently means <a href=\"http://ncatlab.org/nlab/show/bicategory\">something else</a>.\n</p><p>Note that this article is just about a quick idea I had.\nI am not saying that this is the best way to do things.\nIn fact, I am not even sure if propagating result values in this way actually helps solve any real world problems.\n</p>") (pubDate nil "Wed, 04 Apr 2012 19:35:00 +0000"))) ("Darcs: darcs weekly news #94" "<h3 id=\"news-and-discussions\">News and discussions</h3><ol style=\"\"><li>The Southampton sprint is over! We'll put together a blog report soon.</li><li>Florent and Ganesh prepared a release candidate of Darcs 2.8, try it!<ul><li><a href=\"http://lists.osuosl.org/pipermail/darcs-users/2012-April/026445.html\"><code class=\"url\">http://lists.osuosl.org/pipermail/darcs-users/2012-April/026445.html</code></a></li><li><a href=\"http://lists.osuosl.org/pipermail/darcs-users/2012-April/026448.html\"><code class=\"url\">http://lists.osuosl.org/pipermail/darcs-users/2012-April/026448.html</code></a></li></ul></li><li>What would be the next big feature of Darcs 2.10? Ganesh proposed rebase, and Michael already provided feedback about this feature:<ul><li><a href=\"http://lists.osuosl.org/pipermail/darcs-users/2012-April/026443.html\"><code class=\"url\">http://lists.osuosl.org/pipermail/darcs-users/2012-April/026443.html</code></a></li><li><a href=\"http://lists.osuosl.org/pipermail/darcs-users/2012-April/026455.html\"><code class=\"url\">http://lists.osuosl.org/pipermail/darcs-users/2012-April/026455.html</code></a></li></ul></li><li>Eric asked what would be a nice mission statement for Darcs. A few propositions have been made so far:<ul><li><a href=\"http://lists.osuosl.org/pipermail/darcs-users/2012-March/026433.html\"><code class=\"url\">http://lists.osuosl.org/pipermail/darcs-users/2012-March/026433.html</code></a></li></ul></li></ol><h3 id=\"issues-resolved-in-the-last-week-3\">Issues resolved in the last week (3)</h3><dl><dt>issue2125 Owen Stephens</dt><dd><ul><li>only warn about forcing replaces, when a force is required.</li><li><a href=\"http://bugs.darcs.net/issue2125\"><code class=\"url\">http://bugs.darcs.net/issue2125</code></a></li></ul></dd><dt>issue2136 Owen Stephens</dt><dd><ul><li>Correctly track renames of multiple files in Changes --xml.</li><li><a href=\"http://bugs.darcs.net/issue2136\"><code class=\"url\">http://bugs.darcs.net/issue2136</code></a></li></ul></dd><dt>issue2162 Owen Stephens</dt><dd><ul><li>Fix compilation failure with GHC 6.12</li><li><a href=\"http://bugs.darcs.net/issue2162\"><code class=\"url\">http://bugs.darcs.net/issue2162</code></a></li></ul></dd></dl><h3 id=\"patches-applied-in-the-last-week-199\">Patches applied in the last week (199)</h3>See <a href=\"http://wiki.darcs.net/DarcsWeeklyNews/2012-04-04\">darcs wiki entry</a> for details.<div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/819021106854702432-5543292426911317171?l=blog.darcs.net\" alt=\"\" height=\"1\" width=\"1\" /></div>" "http://blog.darcs.net/2012/04/darcs-weekly-news-94.html" (20348 34458) obsolete 37 nil nil ((title nil "Darcs: darcs weekly news #94") (guid ((isPermaLink . "false")) "tag:blogger.com,1999:blog-819021106854702432.post-5543292426911317171") (link nil "http://blog.darcs.net/2012/04/darcs-weekly-news-94.html") (description nil "<h3 id=\"news-and-discussions\">News and discussions</h3><ol style=\"\"><li>The Southampton sprint is over! We'll put together a blog report soon.</li><li>Florent and Ganesh prepared a release candidate of Darcs 2.8, try it!<ul><li><a href=\"http://lists.osuosl.org/pipermail/darcs-users/2012-April/026445.html\"><code class=\"url\">http://lists.osuosl.org/pipermail/darcs-users/2012-April/026445.html</code></a></li><li><a href=\"http://lists.osuosl.org/pipermail/darcs-users/2012-April/026448.html\"><code class=\"url\">http://lists.osuosl.org/pipermail/darcs-users/2012-April/026448.html</code></a></li></ul></li><li>What would be the next big feature of Darcs 2.10? Ganesh proposed rebase, and Michael already provided feedback about this feature:<ul><li><a href=\"http://lists.osuosl.org/pipermail/darcs-users/2012-April/026443.html\"><code class=\"url\">http://lists.osuosl.org/pipermail/darcs-users/2012-April/026443.html</code></a></li><li><a href=\"http://lists.osuosl.org/pipermail/darcs-users/2012-April/026455.html\"><code class=\"url\">http://lists.osuosl.org/pipermail/darcs-users/2012-April/026455.html</code></a></li></ul></li><li>Eric asked what would be a nice mission statement for Darcs. A few propositions have been made so far:<ul><li><a href=\"http://lists.osuosl.org/pipermail/darcs-users/2012-March/026433.html\"><code class=\"url\">http://lists.osuosl.org/pipermail/darcs-users/2012-March/026433.html</code></a></li></ul></li></ol><h3 id=\"issues-resolved-in-the-last-week-3\">Issues resolved in the last week (3)</h3><dl><dt>issue2125 Owen Stephens</dt><dd><ul><li>only warn about forcing replaces, when a force is required.</li><li><a href=\"http://bugs.darcs.net/issue2125\"><code class=\"url\">http://bugs.darcs.net/issue2125</code></a></li></ul></dd><dt>issue2136 Owen Stephens</dt><dd><ul><li>Correctly track renames of multiple files in Changes --xml.</li><li><a href=\"http://bugs.darcs.net/issue2136\"><code class=\"url\">http://bugs.darcs.net/issue2136</code></a></li></ul></dd><dt>issue2162 Owen Stephens</dt><dd><ul><li>Fix compilation failure with GHC 6.12</li><li><a href=\"http://bugs.darcs.net/issue2162\"><code class=\"url\">http://bugs.darcs.net/issue2162</code></a></li></ul></dd></dl><h3 id=\"patches-applied-in-the-last-week-199\">Patches applied in the last week (199)</h3>See <a href=\"http://wiki.darcs.net/DarcsWeeklyNews/2012-04-04\">darcs wiki entry</a> for details.<div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/819021106854702432-5543292426911317171?l=blog.darcs.net\" alt=\"\" height=\"1\" width=\"1\" /></div>") (pubDate nil "Wed, 04 Apr 2012 17:36:26 +0000") (author nil "noreply@blogger.com (guillaume)"))) ("Ketil Malde: The type system, safety, sequence alignments, and you" "<p>Haskell programmers will often make claims that type systems make our programs safer, and especially that careful use of the type system can improve safety further. The first claim tend to be met with counter-claims that the safety isn’t all that important, after all, if you inadvertently try to add a string to a number, tests will quickly catch this. However, static types go a bit beyond this, but it can be hard to communicate how to leverage the type system to somebody who doesn’t already have some hands-on experience with the issues involved.</p>\n<p>So I’ll try to illustrate with an example I ran across.</p>\n<p>In bioinformatics, sequence alignment (or edit distance) is part of our staple diet. For instance, an unknown protein can be aligned to known proteins to determine its function and structure. Sets of proteins from different species can be aligned against each other to determine phylogenetic lineage. And so on. So let’s look at alignments.</p>\n<p>Definitions: an <em>alignment</em> of a pair of sequences is a mapping (<code>f</code>, say) from positions in one sequence to positions in the other. In addition, we require two invariants, first that the mapping is <em>one-to-one</em>:</p>\n<pre><code>f x == f y &lt;=&gt; x == y</code></pre>\n<p>This makes the alignment invertible, so there exists a mapping <code>f'</code> back from the second sequence to the first one. Makes sense, no? Second, the alignment is <em>monotonic</em>, satisfying:<sup><a href=\"http://blog.malde.org/rss.xml#fn1\" id=\"fnref1\" class=\"footnoteRef\">1</a></sup></p>\n<pre><code>f x &gt; f y &lt;=&gt; x &gt; y</code></pre>\n<p>In other words, the positions make up <em>subsequences</em> of equal lengths. So you can skip bits in either sequence, but you’re not allowed to flip things around.</p>\n<p>In order to model this in Haskell, we can define a position to simply be an <code>Int</code>, and use a list of pairs of positions. So we can define a type alias for this:</p>\n<pre><code>type Alignment = [(Int,Int)]</code></pre>\n<p>Although this is very specific, it does feel a bit unsatisfactory from a typing perspective: the type doesn’t enforce either of the two invariants. E.g. it allows definitions like:</p>\n<pre><code>wrong1 = [(1,1),(2,1)]  -- maps both a[1] and a[2] to b[1]\nwrong2 = [(1,2),(2,1)]  -- maps the wrong way around</code></pre>\n<p>It’s hard to come up with a good data structure that enforces the invariants (suggestions welcome!), but at least, it’s very <em>concrete</em>, and the compiler willl now protect you from accidentally substitute an alignments with a <code>String</code>, or any other type. Right?</p>\n<p>Again, if you’re a dynamic typing enthusiast, you might argue that this enforcement is not such a big deal, you’re not very likely to pass strings by accident here anyway – and I agree. In fact, I think it is much worse that all the <code>Int</code>s are interchangeable; it is all too easy to, say, compare positions from different sequences, or performing arithmetic on them (what do you get when you multiply two positions?).</p>\n<p>For example, we can align a sequence against another <em>via</em> a third sequence. Basically, given sequences <code>A</code>, <code>B</code>, and <code>C</code>, we have alignments <code>A</code> to <code>B</code> and <code>B</code> to <code>C</code>, and would like to derive the alignment of <code>A</code> to <code>C</code>. Now this isn’t too complicated:</p>\n<pre><code>trans_align :: Alignment -&gt; Alignment -&gt; Alignment  -- type signature\ntrans_align ((p1,p2):ps) ((q1,q2):qs)\n| p2 == q1 = (p1,q2) : trans_align ps qs        -- return match and continue\n| p2 &lt; q1 = trans_align ps ((q1,q2):qs)         -- skip first 'p'\n| q1 &lt; p2 = trans_align ((p1,p2):ps) qs         -- skip first 'q'\ntrans_align _ _ = []                                -- one input is empty</code></pre>\n<p>The first line declares the type of the function; it takes two alignments and returns a third. Then, the input alignments are <em>pattern matched</em> to extract the first pair of each alignment, and their position in sequence <code>B</code> are compared. If they are the same, we have found a position in <code>A</code> that maps to a position in <code>C</code>, if not, we skip the one which is smallest, and in any case we continue. The final line is for when the pattern match fails, i.e. one of the alignments is empty. In that case, no more mappings can be constructed, and we return the empty list.</p>\n<p>But what if we make our <code>Alignment</code> type <em>less</em> specific:</p>\n<pre><code>type Alignment a b = [(a,b)]</code></pre>\n<p>Here, <code>a</code> and <code>b</code> are type variables, they represent any type. So e.g.</p>\n<pre><code>[(\"foo\",42),(\"bar\",1337)]</code></pre>\n<p>is a valid alignment of type <code>Alignment String Int</code>, for instance. In other words, we no longer require indices to different sequences to have the same type. We can of course give <code>trans_align</code> the type:</p>\n<pre><code>trans_align :: Alignemnt Int Int -&gt; Alignemnt Int Int -&gt; Alignemnt Int Int\n-- index into:            A   B                B   C                A   C</code></pre>\n<p>But we’re not acutally using any <code>Int</code> operations here, and clearly, if the returned alignment is from <code>A</code> to <code>C</code>, we can enforce this by instead giving <code>trans_align</code> a type of:</p>\n<pre><code>trans_align :: Alignment x y -&gt; Alignment y z -&gt; Alignment x z</code></pre>\n<p>(In reality, we also need an <code>Ord</code> constraint on <code>y</code>, without this, we couldn’t compare positions in <code>B</code> in our implementation.<sup><a href=\"http://blog.malde.org/rss.xml#fn2\" id=\"fnref2\" class=\"footnoteRef\">2</a></sup>)</p>\n<p>See what have we done? In the end we’ll probably just use <code>Int</code> for all the type variables (<code>x</code>, <code>y</code>, and <code>z)</code>, but the implementation of <code>trans_align</code> doesn’t <em>know</em> this. Thus the type ensures that indices in the different sequences are kept separately, and things like comparing indices from different sequences, or returning indices from the wrong sequence are no longer not just bad ideas, they’re illegal, and enforced by the compiler. How cool is that? This function is even prohibited from comparing indices in <code>A</code> or <code>C</code>, all it can do with them is return them. And: unlike passing strings off as ints, mixing up indexes is a mistake that is easy to make.</p>\n<p>In retrospect, this is perhaps obvious: The more general a type is - that is, the less you know aobut its specifics - the less you are allowed to do with it. A general type <em>constrains</em> its implementation. And the less you can do with it, the fewer <em>wrong</em> things are possible. <em>Perfection is achieved not when there is nothing left to add, but when there is nothing left to take away.</em> And perfect use of the type system is when all the wrong programs are eliminated, and only correct implementations are legal.</p>\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn1\"><p>For some alignments, typically protein to protein, the alignment usually has to be monotonically increasing, for other cases, it can be either way.<a href=\"http://blog.malde.org/rss.xml#fnref1\">↩</a></p></li>\n<li id=\"fn2\"><p>In fact, if we wrote <code>trans_align</code> without specifying the type, this is, modulo the <code>Alignment</code> alias, is the type Haskell will assign to it:</p>\n<pre><code>*Main&gt; :t trans_align\ntrans_align :: Ord a =&gt; [(t, a)] -&gt; [(a, t1)] -&gt; [(t, t1)]</code></pre>\n<p>So we can either design types up front, or we can let the compiler work out the most general type - where “general type” is another way of saying the least constraint that must be satisfied. Isn’t it neat?<a href=\"http://blog.malde.org/rss.xml#fnref2\">↩</a></p></li>\n</ol>\n</div>" "http://blog.malde.org/posts/polymorphic-types-are-safer.html" (20347 19962) obsolete 38 nil nil ((title nil "Ketil Malde: The type system, safety, sequence alignments, and you") (guid ((isPermaLink . "true")) "http://blog.malde.org/posts/polymorphic-types-are-safer.html") (link nil "http://blog.malde.org/posts/polymorphic-types-are-safer.html") (description nil "<p>Haskell programmers will often make claims that type systems make our programs safer, and especially that careful use of the type system can improve safety further. The first claim tend to be met with counter-claims that the safety isn’t all that important, after all, if you inadvertently try to add a string to a number, tests will quickly catch this. However, static types go a bit beyond this, but it can be hard to communicate how to leverage the type system to somebody who doesn’t already have some hands-on experience with the issues involved.</p>\n<p>So I’ll try to illustrate with an example I ran across.</p>\n<p>In bioinformatics, sequence alignment (or edit distance) is part of our staple diet. For instance, an unknown protein can be aligned to known proteins to determine its function and structure. Sets of proteins from different species can be aligned against each other to determine phylogenetic lineage. And so on. So let’s look at alignments.</p>\n<p>Definitions: an <em>alignment</em> of a pair of sequences is a mapping (<code>f</code>, say) from positions in one sequence to positions in the other. In addition, we require two invariants, first that the mapping is <em>one-to-one</em>:</p>\n<pre><code>f x == f y &lt;=&gt; x == y</code></pre>\n<p>This makes the alignment invertible, so there exists a mapping <code>f'</code> back from the second sequence to the first one. Makes sense, no? Second, the alignment is <em>monotonic</em>, satisfying:<sup><a href=\"http://blog.malde.org/rss.xml#fn1\" id=\"fnref1\" class=\"footnoteRef\">1</a></sup></p>\n<pre><code>f x &gt; f y &lt;=&gt; x &gt; y</code></pre>\n<p>In other words, the positions make up <em>subsequences</em> of equal lengths. So you can skip bits in either sequence, but you’re not allowed to flip things around.</p>\n<p>In order to model this in Haskell, we can define a position to simply be an <code>Int</code>, and use a list of pairs of positions. So we can define a type alias for this:</p>\n<pre><code>type Alignment = [(Int,Int)]</code></pre>\n<p>Although this is very specific, it does feel a bit unsatisfactory from a typing perspective: the type doesn’t enforce either of the two invariants. E.g. it allows definitions like:</p>\n<pre><code>wrong1 = [(1,1),(2,1)]  -- maps both a[1] and a[2] to b[1]\nwrong2 = [(1,2),(2,1)]  -- maps the wrong way around</code></pre>\n<p>It’s hard to come up with a good data structure that enforces the invariants (suggestions welcome!), but at least, it’s very <em>concrete</em>, and the compiler willl now protect you from accidentally substitute an alignments with a <code>String</code>, or any other type. Right?</p>\n<p>Again, if you’re a dynamic typing enthusiast, you might argue that this enforcement is not such a big deal, you’re not very likely to pass strings by accident here anyway – and I agree. In fact, I think it is much worse that all the <code>Int</code>s are interchangeable; it is all too easy to, say, compare positions from different sequences, or performing arithmetic on them (what do you get when you multiply two positions?).</p>\n<p>For example, we can align a sequence against another <em>via</em> a third sequence. Basically, given sequences <code>A</code>, <code>B</code>, and <code>C</code>, we have alignments <code>A</code> to <code>B</code> and <code>B</code> to <code>C</code>, and would like to derive the alignment of <code>A</code> to <code>C</code>. Now this isn’t too complicated:</p>\n<pre><code>trans_align :: Alignment -&gt; Alignment -&gt; Alignment  -- type signature\ntrans_align ((p1,p2):ps) ((q1,q2):qs)\n	| p2 == q1 = (p1,q2) : trans_align ps qs        -- return match and continue\n	| p2 &lt; q1 = trans_align ps ((q1,q2):qs)         -- skip first 'p'\n	| q1 &lt; p2 = trans_align ((p1,p2):ps) qs         -- skip first 'q'\ntrans_align _ _ = []                                -- one input is empty</code></pre>\n<p>The first line declares the type of the function; it takes two alignments and returns a third. Then, the input alignments are <em>pattern matched</em> to extract the first pair of each alignment, and their position in sequence <code>B</code> are compared. If they are the same, we have found a position in <code>A</code> that maps to a position in <code>C</code>, if not, we skip the one which is smallest, and in any case we continue. The final line is for when the pattern match fails, i.e. one of the alignments is empty. In that case, no more mappings can be constructed, and we return the empty list.</p>\n<p>But what if we make our <code>Alignment</code> type <em>less</em> specific:</p>\n<pre><code>type Alignment a b = [(a,b)]</code></pre>\n<p>Here, <code>a</code> and <code>b</code> are type variables, they represent any type. So e.g.</p>\n<pre><code>[(\"foo\",42),(\"bar\",1337)]</code></pre>\n<p>is a valid alignment of type <code>Alignment String Int</code>, for instance. In other words, we no longer require indices to different sequences to have the same type. We can of course give <code>trans_align</code> the type:</p>\n<pre><code>trans_align :: Alignemnt Int Int -&gt; Alignemnt Int Int -&gt; Alignemnt Int Int\n-- index into:            A   B                B   C                A   C</code></pre>\n<p>But we’re not acutally using any <code>Int</code> operations here, and clearly, if the returned alignment is from <code>A</code> to <code>C</code>, we can enforce this by instead giving <code>trans_align</code> a type of:</p>\n<pre><code>trans_align :: Alignment x y -&gt; Alignment y z -&gt; Alignment x z</code></pre>\n<p>(In reality, we also need an <code>Ord</code> constraint on <code>y</code>, without this, we couldn’t compare positions in <code>B</code> in our implementation.<sup><a href=\"http://blog.malde.org/rss.xml#fn2\" id=\"fnref2\" class=\"footnoteRef\">2</a></sup>)</p>\n<p>See what have we done? In the end we’ll probably just use <code>Int</code> for all the type variables (<code>x</code>, <code>y</code>, and <code>z)</code>, but the implementation of <code>trans_align</code> doesn’t <em>know</em> this. Thus the type ensures that indices in the different sequences are kept separately, and things like comparing indices from different sequences, or returning indices from the wrong sequence are no longer not just bad ideas, they’re illegal, and enforced by the compiler. How cool is that? This function is even prohibited from comparing indices in <code>A</code> or <code>C</code>, all it can do with them is return them. And: unlike passing strings off as ints, mixing up indexes is a mistake that is easy to make.</p>\n<p>In retrospect, this is perhaps obvious: The more general a type is - that is, the less you know aobut its specifics - the less you are allowed to do with it. A general type <em>constrains</em> its implementation. And the less you can do with it, the fewer <em>wrong</em> things are possible. <em>Perfection is achieved not when there is nothing left to add, but when there is nothing left to take away.</em> And perfect use of the type system is when all the wrong programs are eliminated, and only correct implementations are legal.</p>\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn1\"><p>For some alignments, typically protein to protein, the alignment usually has to be monotonically increasing, for other cases, it can be either way.<a href=\"http://blog.malde.org/rss.xml#fnref1\">↩</a></p></li>\n<li id=\"fn2\"><p>In fact, if we wrote <code>trans_align</code> without specifying the type, this is, modulo the <code>Alignment</code> alias, is the type Haskell will assign to it:</p>\n<pre><code>*Main&gt; :t trans_align\ntrans_align :: Ord a =&gt; [(t, a)] -&gt; [(a, t1)] -&gt; [(t, t1)]</code></pre>\n<p>So we can either design types up front, or we can let the compiler work out the most general type - where “general type” is another way of saying the least constraint that must be satisfied. Isn’t it neat?<a href=\"http://blog.malde.org/rss.xml#fnref2\">↩</a></p></li>\n</ol>\n</div>") (pubDate nil "Tue, 03 Apr 2012 19:22:34 +0000"))) ("Brandon Simmons: the Monoid instance for Ordering" "<p>I was just looking at the <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Monoid.html\">Monoid</a>\ndocs, when I found an instance that surprised me: <code>Ordering</code>.</p>\n<p>Here is how it's defined:</p>\n<p>```\n-- lexicographical ordering\ninstance Monoid Ordering where</p>\n<pre><code>    mempty         = EQ\nLT `mappend` _ = LT\nEQ `mappend` y = y\nGT `mappend` _ = GT\n</code></pre>\n<p>```</p>\n<p>Without the comment I don't know if I would have gotten it right away, but\ncheck this out:</p>\n<pre><code>Prelude&gt; :m + Data.Monoid\nPrelude Data.Monoid&gt; zipWith compare \"asff\" \"asdf\"\n[EQ,EQ,GT,EQ]\nPrelude Data.Monoid&gt; let compare' s = mconcat . zipWith compare s\nPrelude Data.Monoid&gt; compare' \"asff\" \"asdf\"\nGT\n</code></pre>\n<p>A string comparison function can be defined using the comparisons of\ncorresponding letters (, numbers, etc.) as Monoids.</p>\n<p>It's easy to see how <code>mappend</code> defined above works, when you think of it\napplied as a left fold on <code>[EQ,EQ,GT,EQ]</code>. But here is the really cool result:\nit follows from the definition of a Monoid...</p>\n<pre><code>mappend x (mappend y z) = mappend (mappend x y) z\n</code></pre>\n<p>that the reduction can take place <em>in any order</em>:</p>\n<pre><code>Prelude Data.Monoid&gt; EQ `mappend` EQ `mappend` GT `mappend` EQ\nGT\nPrelude Data.Monoid&gt; EQ `mappend` (EQ `mappend` GT) `mappend` EQ\nGT\nPrelude Data.Monoid&gt; EQ `mappend` ((EQ `mappend` GT) `mappend` EQ)\nGT\nPrelude Data.Monoid&gt; (EQ `mappend` (EQ `mappend` GT)) `mappend` EQ\nGT\nPrelude Data.Monoid&gt; ((EQ `mappend` EQ) `mappend` GT) `mappend` EQ\n</code></pre>\n<p>That surprised me!</p>\n<p>The wikipedia page for <a href=\"http://en.wikipedia.org/wiki/Lexicographical_order\">Lexicographical order</a>\nhas some awesome information, and nice illustrations that give a good intuition\nabout this stuff.</p>" "http://brandon.si/code/the-monoid-instance-for-ordering/" (20346 23004) obsolete 39 nil nil ((title nil "Brandon Simmons: the Monoid instance for Ordering") (guid ((isPermaLink . "false")) "http://brandon.si/code/the-monoid-instance-for-ordering") (link nil "http://brandon.si/code/the-monoid-instance-for-ordering/") (description nil "<p>I was just looking at the <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Monoid.html\">Monoid</a>\ndocs, when I found an instance that surprised me: <code>Ordering</code>.</p>\n\n<p>Here is how it's defined:</p>\n\n<p>```\n-- lexicographical ordering\ninstance Monoid Ordering where</p>\n\n<pre><code>    mempty         = EQ\n    LT `mappend` _ = LT\n    EQ `mappend` y = y\n    GT `mappend` _ = GT\n</code></pre>\n\n<p>```</p>\n\n<p>Without the comment I don't know if I would have gotten it right away, but\ncheck this out:</p>\n\n<pre><code>Prelude&gt; :m + Data.Monoid \nPrelude Data.Monoid&gt; zipWith compare \"asff\" \"asdf\"\n[EQ,EQ,GT,EQ]\nPrelude Data.Monoid&gt; let compare' s = mconcat . zipWith compare s\nPrelude Data.Monoid&gt; compare' \"asff\" \"asdf\"\nGT\n</code></pre>\n\n<p>A string comparison function can be defined using the comparisons of\ncorresponding letters (, numbers, etc.) as Monoids.</p>\n\n<p>It's easy to see how <code>mappend</code> defined above works, when you think of it\napplied as a left fold on <code>[EQ,EQ,GT,EQ]</code>. But here is the really cool result:\nit follows from the definition of a Monoid...</p>\n\n<pre><code>mappend x (mappend y z) = mappend (mappend x y) z\n</code></pre>\n\n<p>that the reduction can take place <em>in any order</em>:</p>\n\n<pre><code>Prelude Data.Monoid&gt; EQ `mappend` EQ `mappend` GT `mappend` EQ\nGT\nPrelude Data.Monoid&gt; EQ `mappend` (EQ `mappend` GT) `mappend` EQ\nGT\nPrelude Data.Monoid&gt; EQ `mappend` ((EQ `mappend` GT) `mappend` EQ)\nGT\nPrelude Data.Monoid&gt; (EQ `mappend` (EQ `mappend` GT)) `mappend` EQ\nGT\nPrelude Data.Monoid&gt; ((EQ `mappend` EQ) `mappend` GT) `mappend` EQ\n</code></pre>\n\n<p>That surprised me!</p>\n\n<p>The wikipedia page for <a href=\"http://en.wikipedia.org/wiki/Lexicographical_order\">Lexicographical order</a>\nhas some awesome information, and nice illustrations that give a good intuition\nabout this stuff.</p>") (pubDate nil "Tue, 03 Apr 2012 02:01:00 +0000"))) ("Edward Kmett: Wadler’s Law Revisited" "<p>In light of the burgeoning length of the ongoing record discussion <a href=\"http://www.haskell.org/pipermail/glasgow-haskell-users/2011-October/021101.html\">sparked off by Simon Peyton-Jones in October</a>, I would like to propose that we recognize an extension to Wadler's law (supplied in bold), which I'll refer to as the \"Weak Record Conjecture\" below.</p>\n<blockquote><p>\nIn any language design, the total time spent discussing a feature in this list is proportional to two raised to the power of its position.</p>\n<ul>\n<li>0. Semantics</li>\n<li>1. Syntax</li>\n<li>2. Lexical syntax</li>\n<li>3. Lexical syntax of comments</li>\n<li><strong>4. Semantics of records</strong></li>\n</ul>\n</blockquote>\n<p><span id=\"more-571\"></span></p>\n<p>I base the Weak Record Conjecture on the stable of proposed record semantics, which now includes (among others) <a href=\"http://hackage.haskell.org/trac/ghc/wiki/Records/OverloadedRecordFields\">Simple Overloaded Record Fields (SORF)</a>, <a href=\"http://www.youtube.com/watch?v=pEig1D4sJdI&lt;/a&gt;,  &lt;/a&gt;&lt;a href=\"></a>,  <a href=\"http://hackage.haskell.org/trac/ghc/wiki/Records/NameSpacing\">Agda-derived Records (ADR)</a>, <a href=\"http://hackage.haskell.org/trac/ghc/wiki/Records/NameSpacing\">Frege-derived Records (FDR)</a>, <a href=\"http://hackage.haskell.org/trac/ghc/wiki/Records/TypePunningDeclaredOverloadedRecordFields\">Type-Punning Declared Overloaded Record Fields (TPDORF)</a>, <a href=\"http://hackage.haskell.org/trac/ghc/wiki/Records/SyntaxDirectedNameResolution\">Syntax Directed Name Resolution</a>, <a href=\"http://hackage.haskell.org/trac/ghc/wiki/Records/TypeIndexedRecords\">Type Indexed Records</a> and the less seriously proposed <a href=\"http://www.haskell.org/pipermail/glasgow-haskell-users/2012-April/022219.html\">Homotopy Extensional Record Proposal (HERP)</a> and <a href=\"http://www.haskell.org/pipermail/glasgow-haskell-users/2012-April/022219.html\">Dependent Extensional Record Proposal (DERP)</a>.</p>\n<p>There is an additional option implied but not stated in all of this, which is the option to \"Leave Well Enough Alone\" (LWEA?), since you can always <a href=\"http://stackoverflow.com/questions/5767129/lenses-fclabels-data-accessor-which-library-for-structure-access-and-mutatio/5769285#5769285\">Man Up and Learn Lenses (MUALL)</a>. Given that every record proposal I've seen thus far breaks polymorphic field updates to some degree, and lenses are going to be compatible with whatever mess folks settle on, even preserving the status quo, this is the path I've chosen to take.</p>\n<p>Now, based on the fact that discussions of <a href=\"http://www.haskell.org/pipermail/glasgow-haskell-users/2012-January/021531.html\">syntax have already started</a>, and the intuition supplied by the ordering already present in Wadler's insightful law, I would also like to conjecture that perhaps an even stronger version of Wadler's law might be able to be stated, the \"Strong Record Conjecture\".</p>\n<blockquote><p>\nIn any language design, the total time spent discussing a feature in this list is proportional to two raised to the power of its position.</p>\n<ul>\n<li>0. Semantics</li>\n<li>1. Syntax</li>\n<li>2. Lexical syntax</li>\n<li>3. Lexical syntax of comments</li>\n<li><strong>4. Semantics of records</strong></li>\n<li>\n<div style=\"color: red;\">5. Syntax of records</div>\n</li>\n<li>\n<div style=\"color: red;\">6. Lexical syntax of records</div>\n</li>\n</ul>\n</blockquote>\n<p>Under the Strong Record Conjecture, even in the unlikely event that universal accord could be reached on record semantics today — 164 days into this discussion — we'd still be due for at least another 3 years (328 + 656 days) of backlogged complaining over the syntax before anything gets done.</p>\n<p>The evidence thus far is pretty strong that at least the Weak Record Conjecture holds — if anything the exponent is too small and may require further calibration, but we don't have much data yet on the Strong Record Conjecture. Consequently, and in the name of science, I plan to check in again on the record debate in 3 years. Hopefully by then we will have resolved the remaining semantic issues, and will have a better feel for the necessary time commitment required to resolve items 5 and 6.</p>" "http://comonad.com/reader/2012/wadlers-law-revisited/" (20346 18838) obsolete 40 nil nil ((title nil "Edward Kmett: Wadler’s Law Revisited") (guid ((isPermaLink . "false")) "http://comonad.com/reader/?p=571") (link nil "http://comonad.com/reader/2012/wadlers-law-revisited/") (description nil "<p>In light of the burgeoning length of the ongoing record discussion <a href=\"http://www.haskell.org/pipermail/glasgow-haskell-users/2011-October/021101.html\">sparked off by Simon Peyton-Jones in October</a>, I would like to propose that we recognize an extension to Wadler's law (supplied in bold), which I'll refer to as the \"Weak Record Conjecture\" below.</p>\n<blockquote><p>\nIn any language design, the total time spent discussing a feature in this list is proportional to two raised to the power of its position.</p>\n<ul>\n<li>0. Semantics</li>\n<li>1. Syntax</li>\n<li>2. Lexical syntax</li>\n<li>3. Lexical syntax of comments</li>\n<li><strong>4. Semantics of records</strong></li>\n</ul>\n</blockquote>\n<p><span id=\"more-571\"></span></p>\n<p>I base the Weak Record Conjecture on the stable of proposed record semantics, which now includes (among others) <a href=\"http://hackage.haskell.org/trac/ghc/wiki/Records/OverloadedRecordFields\">Simple Overloaded Record Fields (SORF)</a>, <a href=\"http://www.youtube.com/watch?v=pEig1D4sJdI&lt;/a&gt;,  &lt;/a&gt;&lt;a href=\"></a>,  <a href=\"http://hackage.haskell.org/trac/ghc/wiki/Records/NameSpacing\">Agda-derived Records (ADR)</a>, <a href=\"http://hackage.haskell.org/trac/ghc/wiki/Records/NameSpacing\">Frege-derived Records (FDR)</a>, <a href=\"http://hackage.haskell.org/trac/ghc/wiki/Records/TypePunningDeclaredOverloadedRecordFields\">Type-Punning Declared Overloaded Record Fields (TPDORF)</a>, <a href=\"http://hackage.haskell.org/trac/ghc/wiki/Records/SyntaxDirectedNameResolution\">Syntax Directed Name Resolution</a>, <a href=\"http://hackage.haskell.org/trac/ghc/wiki/Records/TypeIndexedRecords\">Type Indexed Records</a> and the less seriously proposed <a href=\"http://www.haskell.org/pipermail/glasgow-haskell-users/2012-April/022219.html\">Homotopy Extensional Record Proposal (HERP)</a> and <a href=\"http://www.haskell.org/pipermail/glasgow-haskell-users/2012-April/022219.html\">Dependent Extensional Record Proposal (DERP)</a>.</p>\n<p>There is an additional option implied but not stated in all of this, which is the option to \"Leave Well Enough Alone\" (LWEA?), since you can always <a href=\"http://stackoverflow.com/questions/5767129/lenses-fclabels-data-accessor-which-library-for-structure-access-and-mutatio/5769285#5769285\">Man Up and Learn Lenses (MUALL)</a>. Given that every record proposal I've seen thus far breaks polymorphic field updates to some degree, and lenses are going to be compatible with whatever mess folks settle on, even preserving the status quo, this is the path I've chosen to take.</p>\n<p>Now, based on the fact that discussions of <a href=\"http://www.haskell.org/pipermail/glasgow-haskell-users/2012-January/021531.html\">syntax have already started</a>, and the intuition supplied by the ordering already present in Wadler's insightful law, I would also like to conjecture that perhaps an even stronger version of Wadler's law might be able to be stated, the \"Strong Record Conjecture\".</p>\n<blockquote><p>\nIn any language design, the total time spent discussing a feature in this list is proportional to two raised to the power of its position.</p>\n<ul>\n<li>0. Semantics</li>\n<li>1. Syntax</li>\n<li>2. Lexical syntax</li>\n<li>3. Lexical syntax of comments</li>\n<li><strong>4. Semantics of records</strong></li>\n<li>\n<div style=\"color: red;\">5. Syntax of records</div>\n</li>\n<li>\n<div style=\"color: red;\">6. Lexical syntax of records</div>\n</li>\n</ul>\n</blockquote>\n<p>Under the Strong Record Conjecture, even in the unlikely event that universal accord could be reached on record semantics today — 164 days into this discussion — we'd still be due for at least another 3 years (328 + 656 days) of backlogged complaining over the syntax before anything gets done.</p>\n<p>The evidence thus far is pretty strong that at least the Weak Record Conjecture holds — if anything the exponent is too small and may require further calibration, but we don't have much data yet on the Strong Record Conjecture. Consequently, and in the name of science, I plan to check in again on the record debate in 3 years. Hopefully by then we will have resolved the remaining semantic issues, and will have a better feel for the necessary time commitment required to resolve items 5 and 6.</p>") (pubDate nil "Tue, 03 Apr 2012 00:51:34 +0000"))) ("Kevin Reid (kpreid): Practical optimization: where to start" "<p>Run your program on a platform slow enough that you\n</p><ol><li style=\"\">care, and\n</li><li style=\"\">can feel where the problems are.\n</li></ol>\n<p>(Something — I assume a Chrome update — caused Cubes to run more slowly. Over fifteen seconds of startup time is just <em>not fun</em> for debugging, so I went looking for problems. Unfortunately, it wasn't anything straightforwardly bad, but the heaviest thing in the profile was the color-picking while constructing the default blockset, so I <a href=\"https://github.com/kpreid/cubes/commit/2e158f7049f70de6457549c7764ecfd22fe704a9\" rel=\"nofollow\">optimized that</a> and got the startup down to about six seconds. Still slower than it really ought to be.)</p>" "http://kpreid.livejournal.com/44986.html" (20346 16733) obsolete 41 nil nil ((title nil "Kevin Reid (kpreid): Practical optimization: where to start") (guid ((isPermaLink . "true")) "http://kpreid.livejournal.com/44986.html") (link nil "http://kpreid.livejournal.com/44986.html") (description nil "<p>Run your program on a platform slow enough that you\n</p><ol><li style=\"\">care, and\n</li><li style=\"\">can feel where the problems are.\n</li></ol>\n\n<p>(Something — I assume a Chrome update — caused Cubes to run more slowly. Over fifteen seconds of startup time is just <em>not fun</em> for debugging, so I went looking for problems. Unfortunately, it wasn't anything straightforwardly bad, but the heaviest thing in the profile was the color-picking while constructing the default blockset, so I <a href=\"https://github.com/kpreid/cubes/commit/2e158f7049f70de6457549c7764ecfd22fe704a9\" rel=\"nofollow\">optimized that</a> and got the startup down to about six seconds. Still slower than it really ought to be.)</p>") (pubDate nil "Tue, 03 Apr 2012 00:16:29 +0000") (author nil "kpreid@switchb.org (Kevin Reid (kpreid))"))) ("TypLAB: Erik's talk at Functional Programming eXchange 2012" "On the 16th of March, Skills Matter organized the Third Functional Programming eXchange, an annual Functional Programming conference. A day of talks, open-space discussions and brainstorming on Functional Programming. Third speaker on the agenda was our own Erik Hesselink.<img src=\"http://feeds.feedburner.com/~r/typlab/blog/~4/nrtGuiMUHqE\" height=\"1\" width=\"1\" />" "http://feedproxy.google.com/~r/typlab/blog/~3/nrtGuiMUHqE/Erik's%20talk%20at%20Functional%20Programming%20eXchange%202012" (20345 27280) obsolete 42 nil nil ((title nil "TypLAB: Erik's talk at Functional Programming eXchange 2012") (guid ((isPermaLink . "false")) "http://about.silkapp.com/page/Erik's%20talk%20at%20Functional%20Programming%20eXchange%202012") (link nil "http://feedproxy.google.com/~r/typlab/blog/~3/nrtGuiMUHqE/Erik's%20talk%20at%20Functional%20Programming%20eXchange%202012") (description nil "On the 16th of March, Skills Matter organized the Third Functional Programming eXchange, an annual Functional Programming conference. A day of talks, open-space discussions and brainstorming on Functional Programming. Third speaker on the agenda was our own Erik Hesselink.<img src=\"http://feeds.feedburner.com/~r/typlab/blog/~4/nrtGuiMUHqE\" height=\"1\" width=\"1\" />") (pubDate nil "Mon, 02 Apr 2012 09:00:00 +0000"))) ("Jason Dagit: tmux + ssh-agent" "Lately I've been using tmux on remote servers. This allows me to maintain task-specific sessions on remote servers, regardless of what computer I work from or if my internet connection get severed.<br /><br />The biggest wrinkle in my setup has been ssh-agent forwarding. When I reconnect the remote side no longer knows where to find <tt>SSH_AUTH_SOCK</tt>. I found a solution.<br /><br /><span style=\"font-size: large;\">Step 1.</span> On the remote host, create <tt>$HOME/.ssh/rc</tt>, make it executable, and add the following contents:<br />&lt;script src=\"https://gist.github.com/2253834.js?file=rc\"&gt;&lt;/script&gt;<br />Don't forget: <tt>chmod 755 $HOME/.ssh/rc</tt><br /><br /><span style=\"font-size: large;\">Step 2. </span>Add these two lines to your <tt>.tmux.conf</tt>:<br />&lt;script src=\"https://gist.github.com/2253845.js?file=.tmux.conf\"&gt;&lt;/script&gt;<br /><br />A few things kept me from getting this working straight away. You have to disable the default behavior of updating <tt>SSH_SOCK_AUTH</tt> (that's what the first line does), then you have to set <tt>SSH_SOCK_AUTH</tt> to point at the symlink created by the script in step 1. You have to use an absolute path to the symlink because tmux won't expand \"<tt>$HOME</tt>\"or \"<tt>~</tt>\".<div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/2162461901212281926-4208063740252862419?l=blog.codersbase.com\" alt=\"\" height=\"1\" width=\"1\" /></div>" "http://blog.codersbase.com/2012/03/tmux-ssh-agent.html" (20341 65409) obsolete 43 nil nil ((title nil "Jason Dagit: tmux + ssh-agent") (guid ((isPermaLink . "false")) "tag:blogger.com,1999:blog-2162461901212281926.post-4208063740252862419") (link nil "http://blog.codersbase.com/2012/03/tmux-ssh-agent.html") (description nil "Lately I've been using tmux on remote servers. This allows me to maintain task-specific sessions on remote servers, regardless of what computer I work from or if my internet connection get severed.<br /><br />The biggest wrinkle in my setup has been ssh-agent forwarding. When I reconnect the remote side no longer knows where to find <tt>SSH_AUTH_SOCK</tt>. I found a solution.<br /><br /><span style=\"font-size: large;\">Step 1.</span> On the remote host, create <tt>$HOME/.ssh/rc</tt>, make it executable, and add the following contents:<br />&lt;script src=\"https://gist.github.com/2253834.js?file=rc\"&gt;&lt;/script&gt;<br />Don't forget: <tt>chmod 755 $HOME/.ssh/rc</tt><br /><br /><span style=\"font-size: large;\">Step 2. </span>Add these two lines to your <tt>.tmux.conf</tt>:<br />&lt;script src=\"https://gist.github.com/2253845.js?file=.tmux.conf\"&gt;&lt;/script&gt;<br /><br />A few things kept me from getting this working straight away. You have to disable the default behavior of updating <tt>SSH_SOCK_AUTH</tt> (that's what the first line does), then you have to set <tt>SSH_SOCK_AUTH</tt> to point at the symlink created by the script in step 1. You have to use an absolute path to the symlink because tmux won't expand \"<tt>$HOME</tt>\"or \"<tt>~</tt>\".<div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/2162461901212281926-4208063740252862419?l=blog.codersbase.com\" alt=\"\" height=\"1\" width=\"1\" /></div>") (pubDate nil "Fri, 30 Mar 2012 18:46:25 +0000") (author nil "noreply@blogger.com (dagitj)"))) ("JP Moresmau: EclipseFP 2.2.4 released" "I can't believe I've managed to keep the rhythm again, but a month after 2.2.3, here's 2.2.4! It's another minor release featuring:<br />- task tags: TODO, FIXME, etc in source code translate to task tags. This is configurable.<br />- GTK wizard: creates a new executable with the default sample GTK code and GTK dependency.<br />- Documentation generation goes through cabal haddock: less hassle, more power.<br />- You can now configure extra cabal parameters for your projects. For example, you can add more include and library directories that are specific to your install without modifying the cabal file.<br />- Hopefully better content assist: using the power of scion-browser to be able to provide more and better auto complete proposals.<br />- Better handling of related projects (for declaration resolution, breakpoint resolution, etc).<br /><br />There are also a few bug fixes in there of course. Thanks to everybody for their feedback! Buildwrapper and scion-browser have had minor releases too.<br /><br />I haven't yet started the big addition that would be a workspace wide embedded database to be able to do Haskell-sensitive searches and replace, but I've though about it, so I have a good idea on how I'm going to attack that. Hopefully for a 2.3.0!<br /><br /><span style=\"font-family: inherit;\">The full release notes can be found <a href=\"https://sourceforge.net/projects/eclipsefp/files/EclipseFP%202%20branch/2.2.4/\">here</a>. As usual, to install, just point your Eclipse update UI to <span style=\"background-color: white; line-height: 19px; text-align: left;\">http://eclipsefp.sf.net/updates. </span></span><br /><span style=\"font-family: inherit;\"><span style=\"background-color: white; line-height: 19px; text-align: left;\"><br /></span></span><br /><span style=\"font-family: inherit;\"><span style=\"background-color: white; line-height: 19px; text-align: left;\">New to eclipseFP? Check out the <a href=\"http://eclipsefp.github.com/\">web site</a>, and there's documentation inside Eclipse too...</span></span><br /><span style=\"font-family: inherit;\"><span style=\"background-color: white; line-height: 19px; text-align: left;\"><br /></span></span><br /><span style=\"font-family: inherit;\"><span style=\"background-color: white; line-height: 19px; text-align: left;\">Happy Haskell Hacking with EclipseFP!</span></span><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/37404288-6659201241957138144?l=jpmoresmau.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>" "http://jpmoresmau.blogspot.com/2012/03/eclipsefp-224-released.html" (20341 50586) obsolete 44 nil nil ((title nil "JP Moresmau: EclipseFP 2.2.4 released") (guid ((isPermaLink . "false")) "tag:blogger.com,1999:blog-37404288.post-6659201241957138144") (link nil "http://jpmoresmau.blogspot.com/2012/03/eclipsefp-224-released.html") (description nil "I can't believe I've managed to keep the rhythm again, but a month after 2.2.3, here's 2.2.4! It's another minor release featuring:<br />- task tags: TODO, FIXME, etc in source code translate to task tags. This is configurable.<br />- GTK wizard: creates a new executable with the default sample GTK code and GTK dependency.<br />- Documentation generation goes through cabal haddock: less hassle, more power.<br />- You can now configure extra cabal parameters for your projects. For example, you can add more include and library directories that are specific to your install without modifying the cabal file.<br />- Hopefully better content assist: using the power of scion-browser to be able to provide more and better auto complete proposals.<br />- Better handling of related projects (for declaration resolution, breakpoint resolution, etc).<br /><br />There are also a few bug fixes in there of course. Thanks to everybody for their feedback! Buildwrapper and scion-browser have had minor releases too.<br /><br />I haven't yet started the big addition that would be a workspace wide embedded database to be able to do Haskell-sensitive searches and replace, but I've though about it, so I have a good idea on how I'm going to attack that. Hopefully for a 2.3.0!<br /><br /><span style=\"font-family: inherit;\">The full release notes can be found <a href=\"https://sourceforge.net/projects/eclipsefp/files/EclipseFP%202%20branch/2.2.4/\">here</a>. As usual, to install, just point your Eclipse update UI to <span style=\"background-color: white; line-height: 19px; text-align: left;\">http://eclipsefp.sf.net/updates. </span></span><br /><span style=\"font-family: inherit;\"><span style=\"background-color: white; line-height: 19px; text-align: left;\"><br /></span></span><br /><span style=\"font-family: inherit;\"><span style=\"background-color: white; line-height: 19px; text-align: left;\">New to eclipseFP? Check out the <a href=\"http://eclipsefp.github.com/\">web site</a>, and there's documentation inside Eclipse too...</span></span><br /><span style=\"font-family: inherit;\"><span style=\"background-color: white; line-height: 19px; text-align: left;\"><br /></span></span><br /><span style=\"font-family: inherit;\"><span style=\"background-color: white; line-height: 19px; text-align: left;\">Happy Haskell Hacking with EclipseFP!</span></span><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/37404288-6659201241957138144?l=jpmoresmau.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>") (pubDate nil "Fri, 30 Mar 2012 14:39:22 +0000") (author nil "noreply@blogger.com (JP Moresmau)"))) ("Ketil Malde: My blog software" "<p>Twan van Laarhoven recently <a href=\"http://twanvl.nl/blog/2012-03-28-blog-software\">wrote</a> about his home-grown blogging software, implemented in PHP. He stands tall, making no excuses, and I must admit the site looks nice. As posted <a href=\"http://blog.malde.org/posts/wordpress-to-hakyll.html\">previously</a>, I have chosen to use <a href=\"http://jaspervdj.be/hakyll/\">Hakyll</a> to implement this site, and I thought I’d share some recent experiences.</p>\n<p>Hakyll is a templating system, so it consists of a set of HTML templates and a Haskell program that expands them and builds a set of static pages constiuting the site. There are an assortment of auxiliary files, like images and css that are just copied. Post content is written in <em>markdown</em><sup><a href=\"http://blog.malde.org/rss.xml#fn1\" id=\"fnref1\" class=\"footnoteRef\">1</a></sup>, and metadata specified at the top is available to the template processing.</p>\n<p>This setup has some advantages: I can develop code or textual content on my laptop, build, and check the site by accessing a <code>file://</code> URL. I use <a href=\"http://darcs.net\">darcs</a> version control, and when I’m happy with the result, I simply <code>darcs push</code> the changes to the server, and run <code>hakyll.hs</code> to rebuild the site. Also, the site being static, there are few holes to exploit (which were my main reason for moving off Wordpress).</p>\n<p>However, although there’s a blog example included with Hakyll, it’s not entirely ready to use. There are plenty of batteries are included, but you need to fit them correctly, so to speak.</p>\n<h2 id=\"fixing-the-rss-feed\">Fixing the RSS feed</h2>\n<p>In a fit of hubris, I emailed the maintainer of Planet Haskell to ask to be included. The quick and brief reply stated that my site, and in particular, its RSS feed, was not deemed adequate. So I started to implement the list of required fixes:</p>\n<h3 id=\"dates-were-missing.\">Dates were missing.</h3>\n<p>By default, Hakyll assumes that posts are named according to date, and sets data variables from the file name. I don’t care much for that, so to get a reasonable date field in the RSS, I added a <code>published</code> field to each post’s metadata:</p>\n<pre><code>published: 2012-01-06T15:00:00Z</code></pre>\n<p>The default RSS rendering function looked like this:</p>\n<pre><code>-- Render RSS feed\nmatch  \"rss.xml\" $ route idRoute\ncreate \"rss.xml\" $\nrequireAll_ \"posts/*\" &gt;&gt;&gt; renderRss feedConfiguration</code></pre>\n<p>In order to sort on the <code>published</code> field, I added a custom sort:</p>\n<pre><code>match  \"rss.xml\" $ route idRoute\ncreate \"rss.xml\" $ requireAll_ \"posts/*\"\n&gt;&gt;&gt; arr (reverse . chronological)\n&gt;&gt;&gt; renderRss feedConfiguration\nchronological = sortBy $ comparing $ getField \"published\"</code></pre>\n<h3 id=\"the-rss-file-was-missing-post-contents.\">The RSS file was missing post contents.</h3>\n<p>It’s a bit unclear to me what the <code>description</code> field is supposed to contain in RSS; Wordpress has this <em>“more”</em> thing, and includes stuff above it, typically an introduction, but most people seem to just include the post contents.</p>\n<p>The easy way out is to include the post body, and the easy way to do that, is to just copy it into a variable. Here’s the diff:</p>\n<pre><code>      match \"posts/*\" $ do\nroute   $ setExtension \".html\"\ncompile $ pageCompiler\n+            &gt;&gt;&gt; arr (copyBodyToField \"description\")\n&gt;&gt;&gt; applyTemplateCompiler \"templates/post.html\"\n&gt;&gt;&gt; applyTemplateCompiler \"templates/default.html\"\n&gt;&gt;&gt; relativizeUrlsCompiler</code></pre>\n<p>Hopefully, my RSS feed will pop up in Planet H. real soon now, in the meantime, why, you’ll just have to subscribe directly, won’t you?</p>\n<h2 id=\"other-tweaks\">Other tweaks</h2>\n<p>Now, since the <code>description</code> field holds the whole post contents, I changed the metadata field to <code>summary</code> (since that’s what it contained). To actually make use of this, I added this variable to <code>templates/postitem.html</code>, the template responsible for rendering postitems, that is, items when posts are listed.</p>\n<pre><code> &lt;li&gt;\n&lt;a href=\"$url$\"&gt;$title$&lt;/a&gt;\n- &lt;em&gt;$date$&lt;/em&gt; - by &lt;em&gt;$author$&lt;/em&gt;\n+    &lt;p class=\"noindent\"&gt;$summary$&lt;/p&gt;\n&lt;/li&gt;</code></pre>\n<p>One important problem is that I’m sometimes sloppy, and I want site compilation to fail if there’s something wrong - if, say, I forgot to specify an important field. For this, I can use <code>trySetField</code>, which only evaluates its argument if the field isn’t already present. Having the value be <code>error</code> thus will halt compilation:</p>\n<pre><code>match  \"rss.xml\" $ route idRoute\ncreate \"rss.xml\" $ requireAll_ \"posts/*\"\n&gt;&gt;&gt; arr (reverse . chronological)\n&gt;&gt;&gt; arr (map (trySetField \"summary\" $ error \"Missing field: description\"))\n&gt;&gt;&gt; arr (map (trySetField \"published\" $ error \"Missing field: published\"))\n&gt;&gt;&gt; renderRss feedConfiguration</code></pre>\n<p>In addition, I’ve made minor edits to template and CSS, but although I use cooler software than Twan, I think it’s evident that he has greater CSS-fu, so I’ll spare you the details…</p>\n<h2 id=\"shoulders-of-giants-or-forever-voyaging-through-dark-seas\">Shoulders of giants, or forever voyaging through dark seas?</h2>\n<p>As you may have noticed, there are no forum included. My WP forum drowned in spam, so this is at least 50% intentional. I have included my email address, so if you have something interesting to say, I’ll update the post, taking it into account. Otherwise, discuss away on G+ or Reddit - that’s what they’re for.</p>\n<p>All in all, I’m pretty happy with this. There <em>is</em> a certain amount of yak-shaving involved, but on the other hand: infinite flexibility and reuse of awesome code like pandoc, as well as excellent support (hint: Jasper spends all his spare time hanging around on <code>#hakyll</code>, just <em>itching</em> for you to bring forth your complaints.)</p>\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn1\"><p>Hakyll uses <a href=\"http://johnmacfarlane.net/pandoc/\">pandoc</a>, so it supports a variety of formats automatically, but I’m only using markdown.<a href=\"http://blog.malde.org/rss.xml#fnref1\">↩</a></p></li>\n</ol>\n</div>" "http://blog.malde.org/posts/hakyll-mods.html" (20341 48224) obsolete 45 nil nil ((title nil "Ketil Malde: My blog software") (guid ((isPermaLink . "true")) "http://blog.malde.org/posts/hakyll-mods.html") (link nil "http://blog.malde.org/posts/hakyll-mods.html") (description nil "<p>Twan van Laarhoven recently <a href=\"http://twanvl.nl/blog/2012-03-28-blog-software\">wrote</a> about his home-grown blogging software, implemented in PHP. He stands tall, making no excuses, and I must admit the site looks nice. As posted <a href=\"http://blog.malde.org/posts/wordpress-to-hakyll.html\">previously</a>, I have chosen to use <a href=\"http://jaspervdj.be/hakyll/\">Hakyll</a> to implement this site, and I thought I’d share some recent experiences.</p>\n<p>Hakyll is a templating system, so it consists of a set of HTML templates and a Haskell program that expands them and builds a set of static pages constiuting the site. There are an assortment of auxiliary files, like images and css that are just copied. Post content is written in <em>markdown</em><sup><a href=\"http://blog.malde.org/rss.xml#fn1\" id=\"fnref1\" class=\"footnoteRef\">1</a></sup>, and metadata specified at the top is available to the template processing.</p>\n<p>This setup has some advantages: I can develop code or textual content on my laptop, build, and check the site by accessing a <code>file://</code> URL. I use <a href=\"http://darcs.net\">darcs</a> version control, and when I’m happy with the result, I simply <code>darcs push</code> the changes to the server, and run <code>hakyll.hs</code> to rebuild the site. Also, the site being static, there are few holes to exploit (which were my main reason for moving off Wordpress).</p>\n<p>However, although there’s a blog example included with Hakyll, it’s not entirely ready to use. There are plenty of batteries are included, but you need to fit them correctly, so to speak.</p>\n<h2 id=\"fixing-the-rss-feed\">Fixing the RSS feed</h2>\n<p>In a fit of hubris, I emailed the maintainer of Planet Haskell to ask to be included. The quick and brief reply stated that my site, and in particular, its RSS feed, was not deemed adequate. So I started to implement the list of required fixes:</p>\n<h3 id=\"dates-were-missing.\">Dates were missing.</h3>\n<p>By default, Hakyll assumes that posts are named according to date, and sets data variables from the file name. I don’t care much for that, so to get a reasonable date field in the RSS, I added a <code>published</code> field to each post’s metadata:</p>\n<pre><code>published: 2012-01-06T15:00:00Z</code></pre>\n<p>The default RSS rendering function looked like this:</p>\n<pre><code>-- Render RSS feed\nmatch  \"rss.xml\" $ route idRoute\ncreate \"rss.xml\" $\n     requireAll_ \"posts/*\" &gt;&gt;&gt; renderRss feedConfiguration</code></pre>\n<p>In order to sort on the <code>published</code> field, I added a custom sort:</p>\n<pre><code>match  \"rss.xml\" $ route idRoute\ncreate \"rss.xml\" $ requireAll_ \"posts/*\"\n   &gt;&gt;&gt; arr (reverse . chronological)\n   &gt;&gt;&gt; renderRss feedConfiguration\n\nchronological = sortBy $ comparing $ getField \"published\"</code></pre>\n<h3 id=\"the-rss-file-was-missing-post-contents.\">The RSS file was missing post contents.</h3>\n<p>It’s a bit unclear to me what the <code>description</code> field is supposed to contain in RSS; Wordpress has this <em>“more”</em> thing, and includes stuff above it, typically an introduction, but most people seem to just include the post contents.</p>\n<p>The easy way out is to include the post body, and the easy way to do that, is to just copy it into a variable. Here’s the diff:</p>\n<pre><code>      match \"posts/*\" $ do\n          route   $ setExtension \".html\"\n          compile $ pageCompiler\n +            &gt;&gt;&gt; arr (copyBodyToField \"description\")\n              &gt;&gt;&gt; applyTemplateCompiler \"templates/post.html\"\n              &gt;&gt;&gt; applyTemplateCompiler \"templates/default.html\"\n              &gt;&gt;&gt; relativizeUrlsCompiler</code></pre>\n<p>Hopefully, my RSS feed will pop up in Planet H. real soon now, in the meantime, why, you’ll just have to subscribe directly, won’t you?</p>\n<h2 id=\"other-tweaks\">Other tweaks</h2>\n<p>Now, since the <code>description</code> field holds the whole post contents, I changed the metadata field to <code>summary</code> (since that’s what it contained). To actually make use of this, I added this variable to <code>templates/postitem.html</code>, the template responsible for rendering postitems, that is, items when posts are listed.</p>\n<pre><code> &lt;li&gt;\n     &lt;a href=\"$url$\"&gt;$title$&lt;/a&gt;\n     - &lt;em&gt;$date$&lt;/em&gt; - by &lt;em&gt;$author$&lt;/em&gt;\n+    &lt;p class=\"noindent\"&gt;$summary$&lt;/p&gt;\n &lt;/li&gt;</code></pre>\n<p>One important problem is that I’m sometimes sloppy, and I want site compilation to fail if there’s something wrong - if, say, I forgot to specify an important field. For this, I can use <code>trySetField</code>, which only evaluates its argument if the field isn’t already present. Having the value be <code>error</code> thus will halt compilation:</p>\n<pre><code>match  \"rss.xml\" $ route idRoute\ncreate \"rss.xml\" $ requireAll_ \"posts/*\"\n   &gt;&gt;&gt; arr (reverse . chronological)\n   &gt;&gt;&gt; arr (map (trySetField \"summary\" $ error \"Missing field: description\"))\n   &gt;&gt;&gt; arr (map (trySetField \"published\" $ error \"Missing field: published\"))\n   &gt;&gt;&gt; renderRss feedConfiguration</code></pre>\n<p>In addition, I’ve made minor edits to template and CSS, but although I use cooler software than Twan, I think it’s evident that he has greater CSS-fu, so I’ll spare you the details…</p>\n<h2 id=\"shoulders-of-giants-or-forever-voyaging-through-dark-seas\">Shoulders of giants, or forever voyaging through dark seas?</h2>\n<p>As you may have noticed, there are no forum included. My WP forum drowned in spam, so this is at least 50% intentional. I have included my email address, so if you have something interesting to say, I’ll update the post, taking it into account. Otherwise, discuss away on G+ or Reddit - that’s what they’re for.</p>\n<p>All in all, I’m pretty happy with this. There <em>is</em> a certain amount of yak-shaving involved, but on the other hand: infinite flexibility and reuse of awesome code like pandoc, as well as excellent support (hint: Jasper spends all his spare time hanging around on <code>#hakyll</code>, just <em>itching</em> for you to bring forth your complaints.)</p>\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn1\"><p>Hakyll uses <a href=\"http://johnmacfarlane.net/pandoc/\">pandoc</a>, so it supports a variety of formats automatically, but I’m only using markdown.<a href=\"http://blog.malde.org/rss.xml#fnref1\">↩</a></p></li>\n</ol>\n</div>") (pubDate nil "Fri, 30 Mar 2012 14:00:00 +0000"))) ("Jeremy Shaw: Announcing Happstack 7" "We are pleased to announce the  release of Happstack 7!<br /><br />Happstack is a fast, modern, web application framework written in Haskell. Please check out the brand new <a href=\"http://happstack.com/\">happstack.com</a> website to read about what is new in Happstack 7, and what we are planning for Happstack 8, and what makes Happstack great!<br /><br /><br /><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/3300386911011555799-7849590999175604558?l=happstack.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>" "http://happstack.blogspot.com/2012/03/announcing-happstack-7.html" (20340 52132) obsolete 46 nil nil ((title nil "Jeremy Shaw: Announcing Happstack 7") (guid ((isPermaLink . "false")) "tag:blogger.com,1999:blog-3300386911011555799.post-7849590999175604558") (link nil "http://happstack.blogspot.com/2012/03/announcing-happstack-7.html") (description nil "We are pleased to announce the  release of Happstack 7!<br /><br />Happstack is a fast, modern, web application framework written in Haskell. Please check out the brand new <a href=\"http://happstack.com/\">happstack.com</a> website to read about what is new in Happstack 7, and what we are planning for Happstack 8, and what makes Happstack great!<br /><br /><br /><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/3300386911011555799-7849590999175604558?l=happstack.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>") (pubDate nil "Thu, 29 Mar 2012 20:52:52 +0000") (author nil "noreply@blogger.com (Jeremy Shaw)"))) ("Yesod Web Framework: Clarification: classy prelude" "<p>Firstly, I wanted to mention that the <a href=\"http://hackage.haskell.org/package/markdown\">markdown engine powering this\nblog</a> is now available on Hackage.\nI made a <a href=\"https://groups.google.com/d/topic/yesodweb/peqyF3cUABM/discussion\">small release\nannouncement</a>.\nBasically: it's experimental, and I'd love feedback on how it works for others,\nbut it should be quite usable as-is.</p><p>Anyway, onto the main event.</p><hr /><p>When I <a href=\"http://www.yesodweb.com/blog/2012/07/classy-prelude\">announced classy\nprelude</a>, there was quite a\nmixed reaction from the community. There was quite a bit of positive feedback,\nand lots of people seemed interested. And on the flip side, a number of people\nvery unequivocally declared it a horrible, horrible idea.</p><p>I'm not going to mince words: I think a couple of the detractors are making a\nnumber of <a href=\"http://www.yesodweb.com/blog/2012/07/announcing-baseless-assertion\">baseless\nassertions</a>,\nattacking strawmen, and engaging in hyperbole. Declaring war on a new package\nand swearing to never use it or any of its dependencies to bring about its\neventually demise does not really fit into a normal, healthy discussion. Making\nclaims about \"brittle typeclass extensions\" without any clarification is not\nhelpful. When discussions devolve to such a level, I don't think there's any\npoint in engaging.</p><p>Part of the fault in all of this is that I did not clarify the purpose of the\nlibrary well enough in the initial post, instead focusing more on how it works.\nI will try to rectify that in this post, and in doing so hope to answer some of\nthe more well-stated arguments against classy prelude.</p><p>I strongly encourage discussion about classy prelude, and certainly want to\nhear critiques. But please try to make them based on actual facts with well\nreasoned arguments, not just asserting that typeclasses are horrible or that\nthis library will break all of Haskell's type safety.</p><h2>Let's start over: what is classy prelude?</h2><ul><li><p>It is a library which leverages type classes to provide name overloading,\nthereby reducing the number of import statements made and decreasing the\nsyntactic overhead of qualified imports.</p><p>Said another way: it's nothing more than syntactic sugar. There may\ncertainly be better theoretical approaches to such syntactic sugar (a new\nnamespace language extension, or a better module system, or maybe something\nlike TDNR), but none of those actually exist today. In today's Haskell, the\nonly approach possible to achieve this goal is typeclasses. (If someone knows\nsomething I don't, please say so.)</p></li><li><p>The motivation here is a simple hypothesis: programmers are lazy. Writing:</p><pre><code class=\"haskell\">\"foo\" ++ \"bar\"</code></pre><p>is far easier than:</p><pre><code class=\"haskell\">import qualified Data.Text as T\nT.pack \"foo\" `T.append` T.pack \"bar\"</code></pre><p>Therefore, people will tend towards the easier path, all else being equal.\nThe goal is to lower that resistance to the right way to do things, and\ntherefore encourage better code overall.</p></li><li><p>The purpose of classy prelude is <i>not</i> to encourage writing polymorphic\ncode based on the typeclasses provided. Though it's certainly possible to\nwrite code such as:</p><pre><code class=\"haskell\">{-# LANGUAGE NoImplicitPrelude #-}\nimport ClassyPrelude\nimport ClassyPrelude.Classes\nfoo :: (CanLookup t k v, CanInsertVal t k v)\n=&gt; k\n-&gt; v\n-&gt; t\n-&gt; Maybe v\nfoo x y z = lookup x $ insert x y z</code></pre><p>That's not my intention. Instead, the idea would be to actually nail this down to concrete types, e.g.:</p><pre><code class=\"haskell\">{-# LANGUAGE NoImplicitPrelude #-}\nimport ClassyPrelude\nfoo :: (Eq k, Hashable k) =&gt; k -&gt; v -&gt; LHashMap k v -&gt; Maybe v\nfoo x y z = lookup x $ insert x y z</code></pre><p>Compare that to the equivalent without classy-prelude:</p><pre><code class=\"haskell\">import Data.HashMap.Lazy (HashMap)\nimport qualified Data.HashMap.Lazy as HashMap\nimport Data.Hashable\nfoo :: (Eq k, Hashable k) =&gt; k -&gt; v -&gt; HashMap k v -&gt; Maybe v\nfoo x y z = HashMap.lookup x $ HashMap.insert x y z</code></pre><p>When used this way, the only difference from classy-prelude is syntactic.</p></li><li><p>That said, if people <i>want</i> to try to write polymorphic code with\nclassy-prelude, I see no problem with trying it out. It's true that there\nare no typeclass laws defined for the classes provided, and therefore such\ngeneric code <i>may</i> not work correctly, but it's certainly worth trying it out.\nWhich brings me to the most important point...</p></li><li><p>classy-prelude above all else is an <b>experiment</b>. It is in no way\nintended to be a replacement for the actual prelude (and probably never\nwill be). I've used it in a few smaller projects at work to remove redundant\ncode... and that's it. If someone sent me a pull request on one of the Yesod\nlibraries today which used classy-prelude, I would reject it, because <b>the\nlibrary is not ready for prime time</b>.</p><p>Are there questionable choices made right now? Absolutely. Some people have\npointed out that trying to unify a <code>ByteString</code> <code>map</code> and <code>conduit</code>'s <code>map</code>\ninto a single class may be overkill. I completely agree: it <b>may</b> be\noverkill. However, I vehemently disagree with anyone claiming that they know\nit's wrong. How can you know it's wrong, bad, evil, and kills kittens until\nyou've actually tried it?</p></li></ul><p>So far, my experience has been that error messages do not get significantly\nmore confusing, that code tends to just work the way you'd expect it to (since\nit's all just syntactic sugar for existing, well-tested and thoroughly\ntype-safe libraries), and that the code becomes more legible since we've\nremoved a bunch of unnecessary line noise (i.e., qualified usage of functions).</p><p>Are there downsides to this library? Certainly. Is it going to become the\nde-facto library used for all Haskell development? (Almost) certainly not. Has\nit already proven itself useful in some actual, real world code? Yes. And that\nlast point is the important one: even if you personally can't see a need for\nthis, others (myself included) do. Even if you believe that it violates every\nprinciple of Haskell you hold dear, your belief isn't enough to win an\nargument. And even if you try to declare a holy crusade against this thing, you\nwon't kill it. If people find it useful, they'll use it. If not, then it will\ndie without your help.</p><p>What I'm really saying is this: let's bump up the level of interaction here. If\nyou see a flaw, demonstrate the flaw. If you believe something is wrong,\nexplain that you <b>think</b> it's wrong, but don't start claiming to have\nabsolute truth on your side. I'm happy to engage in a healthy conversation\nabout this library, but I have better things to do with my time then engage in\npointless flame wars.</p>" "http://www.yesodweb.com/blog/2012/07/clarification-classy-prelude" (20484 15036) new 1 nil nil ((title nil "Yesod Web Framework: Clarification: classy prelude") (guid ((isPermaLink . "true")) "http://www.yesodweb.com/blog/2012/07/clarification-classy-prelude") (link nil "http://www.yesodweb.com/blog/2012/07/clarification-classy-prelude") (description nil "<p>Firstly, I wanted to mention that the <a href=\"http://hackage.haskell.org/package/markdown\">markdown engine powering this\nblog</a> is now available on Hackage.\nI made a <a href=\"https://groups.google.com/d/topic/yesodweb/peqyF3cUABM/discussion\">small release\nannouncement</a>.\nBasically: it's experimental, and I'd love feedback on how it works for others,\nbut it should be quite usable as-is.</p><p>Anyway, onto the main event.</p><hr /><p>When I <a href=\"http://www.yesodweb.com/blog/2012/07/classy-prelude\">announced classy\nprelude</a>, there was quite a\nmixed reaction from the community. There was quite a bit of positive feedback,\nand lots of people seemed interested. And on the flip side, a number of people\nvery unequivocally declared it a horrible, horrible idea.</p><p>I'm not going to mince words: I think a couple of the detractors are making a\nnumber of <a href=\"http://www.yesodweb.com/blog/2012/07/announcing-baseless-assertion\">baseless\nassertions</a>,\nattacking strawmen, and engaging in hyperbole. Declaring war on a new package\nand swearing to never use it or any of its dependencies to bring about its\neventually demise does not really fit into a normal, healthy discussion. Making\nclaims about \"brittle typeclass extensions\" without any clarification is not\nhelpful. When discussions devolve to such a level, I don't think there's any\npoint in engaging.</p><p>Part of the fault in all of this is that I did not clarify the purpose of the\nlibrary well enough in the initial post, instead focusing more on how it works.\nI will try to rectify that in this post, and in doing so hope to answer some of\nthe more well-stated arguments against classy prelude.</p><p>I strongly encourage discussion about classy prelude, and certainly want to\nhear critiques. But please try to make them based on actual facts with well\nreasoned arguments, not just asserting that typeclasses are horrible or that\nthis library will break all of Haskell's type safety.</p><h2>Let's start over: what is classy prelude?</h2><ul><li><p>It is a library which leverages type classes to provide name overloading,\nthereby reducing the number of import statements made and decreasing the\nsyntactic overhead of qualified imports.</p><p>Said another way: it's nothing more than syntactic sugar. There may\ncertainly be better theoretical approaches to such syntactic sugar (a new\nnamespace language extension, or a better module system, or maybe something\nlike TDNR), but none of those actually exist today. In today's Haskell, the\nonly approach possible to achieve this goal is typeclasses. (If someone knows\nsomething I don't, please say so.)</p></li><li><p>The motivation here is a simple hypothesis: programmers are lazy. Writing:</p><pre><code class=\"haskell\">\"foo\" ++ \"bar\"</code></pre><p>is far easier than:</p><pre><code class=\"haskell\">import qualified Data.Text as T\n\nT.pack \"foo\" `T.append` T.pack \"bar\"</code></pre><p>Therefore, people will tend towards the easier path, all else being equal.\nThe goal is to lower that resistance to the right way to do things, and\ntherefore encourage better code overall.</p></li><li><p>The purpose of classy prelude is <i>not</i> to encourage writing polymorphic\ncode based on the typeclasses provided. Though it's certainly possible to\nwrite code such as:</p><pre><code class=\"haskell\">{-# LANGUAGE NoImplicitPrelude #-}\nimport ClassyPrelude\nimport ClassyPrelude.Classes\n\nfoo :: (CanLookup t k v, CanInsertVal t k v)\n    =&gt; k\n    -&gt; v\n    -&gt; t\n    -&gt; Maybe v\nfoo x y z = lookup x $ insert x y z</code></pre><p>That's not my intention. Instead, the idea would be to actually nail this down to concrete types, e.g.:</p><pre><code class=\"haskell\">{-# LANGUAGE NoImplicitPrelude #-}\nimport ClassyPrelude\n\nfoo :: (Eq k, Hashable k) =&gt; k -&gt; v -&gt; LHashMap k v -&gt; Maybe v\nfoo x y z = lookup x $ insert x y z</code></pre><p>Compare that to the equivalent without classy-prelude:</p><pre><code class=\"haskell\">import Data.HashMap.Lazy (HashMap)\nimport qualified Data.HashMap.Lazy as HashMap\nimport Data.Hashable\n\nfoo :: (Eq k, Hashable k) =&gt; k -&gt; v -&gt; HashMap k v -&gt; Maybe v\nfoo x y z = HashMap.lookup x $ HashMap.insert x y z</code></pre><p>When used this way, the only difference from classy-prelude is syntactic.</p></li><li><p>That said, if people <i>want</i> to try to write polymorphic code with\nclassy-prelude, I see no problem with trying it out. It's true that there\nare no typeclass laws defined for the classes provided, and therefore such\ngeneric code <i>may</i> not work correctly, but it's certainly worth trying it out.\nWhich brings me to the most important point...</p></li><li><p>classy-prelude above all else is an <b>experiment</b>. It is in no way\nintended to be a replacement for the actual prelude (and probably never\nwill be). I've used it in a few smaller projects at work to remove redundant\ncode... and that's it. If someone sent me a pull request on one of the Yesod\nlibraries today which used classy-prelude, I would reject it, because <b>the\nlibrary is not ready for prime time</b>.</p><p>Are there questionable choices made right now? Absolutely. Some people have\npointed out that trying to unify a <code>ByteString</code> <code>map</code> and <code>conduit</code>'s <code>map</code>\ninto a single class may be overkill. I completely agree: it <b>may</b> be\noverkill. However, I vehemently disagree with anyone claiming that they know\nit's wrong. How can you know it's wrong, bad, evil, and kills kittens until\nyou've actually tried it?</p></li></ul><p>So far, my experience has been that error messages do not get significantly\nmore confusing, that code tends to just work the way you'd expect it to (since\nit's all just syntactic sugar for existing, well-tested and thoroughly\ntype-safe libraries), and that the code becomes more legible since we've\nremoved a bunch of unnecessary line noise (i.e., qualified usage of functions).</p><p>Are there downsides to this library? Certainly. Is it going to become the\nde-facto library used for all Haskell development? (Almost) certainly not. Has\nit already proven itself useful in some actual, real world code? Yes. And that\nlast point is the important one: even if you personally can't see a need for\nthis, others (myself included) do. Even if you believe that it violates every\nprinciple of Haskell you hold dear, your belief isn't enough to win an\nargument. And even if you try to declare a holy crusade against this thing, you\nwon't kill it. If people find it useful, they'll use it. If not, then it will\ndie without your help.</p><p>What I'm really saying is this: let's bump up the level of interaction here. If\nyou see a flaw, demonstrate the flaw. If you believe something is wrong,\nexplain that you <b>think</b> it's wrong, but don't start claiming to have\nabsolute truth on your side. I'm happy to engage in a healthy conversation\nabout this library, but I have better things to do with my time then engage in\npointless flame wars.</p>") (pubDate nil "Mon, 16 Jul 2012 16:01:00 +0000"))) ("Philip Wadler: The truth wears off" "<div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://1.bp.blogspot.com/-LQLjQaiAnE8/UAQIIlYFAMI/AAAAAAAAASo/uW1lbp_BAkU/s1600/truth-wears-off.jpg\"><img src=\"http://1.bp.blogspot.com/-LQLjQaiAnE8/UAQIIlYFAMI/AAAAAAAAASo/uW1lbp_BAkU/s1600/truth-wears-off.jpg\" border=\"0\" /></a></div><a href=\"http://www.newyorker.com/reporting/2010/12/13/101213fa_fact_lehrer?currentPage=1\">The truth wears off</a>, Jonah Lehrer, The New Yorker, 13 December 2010.  Recommended by Amer Diwan in his <a href=\"http://ecoop12.cs.purdue.edu/content/talks\">keynote</a> at PLDI 2012.  It's hard to establish an effect by rigorous experiment.  This article describes cases, mostly medical, where a demonstrated effect becomes harder to replicate as time passes.<div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/9757377-2756122570388749393?l=wadler.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>" "http://wadler.blogspot.com/2012/07/truth-wears-off.html" (20484 2584) new 2 nil nil ((title nil "Philip Wadler: The truth wears off") (guid ((isPermaLink . "false")) "tag:blogger.com,1999:blog-9757377.post-2756122570388749393") (link nil "http://wadler.blogspot.com/2012/07/truth-wears-off.html") (description nil "<div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://1.bp.blogspot.com/-LQLjQaiAnE8/UAQIIlYFAMI/AAAAAAAAASo/uW1lbp_BAkU/s1600/truth-wears-off.jpg\"><img src=\"http://1.bp.blogspot.com/-LQLjQaiAnE8/UAQIIlYFAMI/AAAAAAAAASo/uW1lbp_BAkU/s1600/truth-wears-off.jpg\" border=\"0\" /></a></div><a href=\"http://www.newyorker.com/reporting/2010/12/13/101213fa_fact_lehrer?currentPage=1\">The truth wears off</a>, Jonah Lehrer, The New Yorker, 13 December 2010.  Recommended by Amer Diwan in his <a href=\"http://ecoop12.cs.purdue.edu/content/talks\">keynote</a> at PLDI 2012.  It's hard to establish an effect by rigorous experiment.  This article describes cases, mostly medical, where a demonstrated effect becomes harder to replicate as time passes.<div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/9757377-2756122570388749393?l=wadler.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>") (pubDate nil "Mon, 16 Jul 2012 12:33:28 +0000") (author nil "noreply@blogger.com (Philip Wadler)"))) ("Philip Wadler: Lambda Calculus, Then and Now, by Dana Scott" "<div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://2.bp.blogspot.com/-GlrMAACd6RI/UAQCb-UfquI/AAAAAAAAASc/wV0cqnMlpE8/s1600/Scott_Dana_small.jpg\"><img src=\"http://2.bp.blogspot.com/-GlrMAACd6RI/UAQCb-UfquI/AAAAAAAAASc/wV0cqnMlpE8/s320/Scott_Dana_small.jpg\" height=\"320\" border=\"0\" width=\"246\" /></a></div>Last May, I was honoured to be invited to speak at Princeton's <a href=\"http://www.princeton.edu/turing/index.xml\">Turing Centennial Celebration</a>.  My <a href=\"http://homepages.inf.ed.ac.uk/wadler/topics/recent.html#churchs-coincidences\">talk</a> was scheduled between Dana Scott and Leslie Valiant.  Dana's talk was not an easy act to follow.  The talk summarises the history of lambda calculus from 1930 to the present, and a resource for future scholars.  I'm pleased that a version is now <a href=\"http://turing100.acm.org/lambda_calculus_timeline.pdf\">available</a>.  Dana asked me to indicate he would be pleased to receive any suggestions or criticisms. <div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/9757377-5829789125809187292?l=wadler.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>" "http://wadler.blogspot.com/2012/07/lambda-calculus-then-and-now-by-dana.html" (20484 1256) new 3 nil nil ((title nil "Philip Wadler: Lambda Calculus, Then and Now, by Dana Scott") (guid ((isPermaLink . "false")) "tag:blogger.com,1999:blog-9757377.post-5829789125809187292") (link nil "http://wadler.blogspot.com/2012/07/lambda-calculus-then-and-now-by-dana.html") (description nil "<div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://2.bp.blogspot.com/-GlrMAACd6RI/UAQCb-UfquI/AAAAAAAAASc/wV0cqnMlpE8/s1600/Scott_Dana_small.jpg\"><img src=\"http://2.bp.blogspot.com/-GlrMAACd6RI/UAQCb-UfquI/AAAAAAAAASc/wV0cqnMlpE8/s320/Scott_Dana_small.jpg\" height=\"320\" border=\"0\" width=\"246\" /></a></div>Last May, I was honoured to be invited to speak at Princeton's <a href=\"http://www.princeton.edu/turing/index.xml\">Turing Centennial Celebration</a>.  My <a href=\"http://homepages.inf.ed.ac.uk/wadler/topics/recent.html#churchs-coincidences\">talk</a> was scheduled between Dana Scott and Leslie Valiant.  Dana's talk was not an easy act to follow.  The talk summarises the history of lambda calculus from 1930 to the present, and a resource for future scholars.  I'm pleased that a version is now <a href=\"http://turing100.acm.org/lambda_calculus_timeline.pdf\">available</a>.  Dana asked me to indicate he would be pleased to receive any suggestions or criticisms. <div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/9757377-5829789125809187292?l=wadler.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>") (pubDate nil "Mon, 16 Jul 2012 12:11:20 +0000") (author nil "noreply@blogger.com (Philip Wadler)"))) ("apfelmus: FRP - Slides from the tutorial session in Halle" "<p>Hello everyone,</p>\n<p>last Friday, I gave a tutorial session on functional reactive programming (FRP) with reactive-banana at the <a href=\"http://iba-cg.de/hal7.html\">HaL 7 - Haskell in Halle/Saale</a> meeting.</p>\n<p>The tutorial was split into two parts: first a 30 minutes talk where I introduced the basic concepts and then one hour of live demonstration, where I sat down in front of a computer and implemented some examples in a dialogue with the audience. People told me that they liked it very much, which makes me very happy.</p>\n<p>For those who could not attend because they don’t speak German, I have now translated the <a href=\"https://github.com/HeinrichApfelmus/reactive-banana/blob/07f3e9bf44ec8c227442daef723f7e9682c5a342/reactive-banana/doc/tutorial-2012-07-en.pdf?raw=true\">slides from the introductory talk</a> into English and added some annotations. I think they may be a good introduction to the <code>Behavior</code> and <code>Event</code> types.</p>\n<p>Henning Thielemann also managed to organize audio and video recordings during the meeting, but it’s not clear whether the quality is alright. Post-processing will probably take a while. A big “thank you” to Henning and the program committee for organizing the meeting in the first place!</p>\n<hr /><p><a href=\"https://flattr.com/thing/29608/apfelmus-website\"><img src=\"http://api.flattr.com/button/flattr-badge-large.png\" alt=\"Flattr this\" border=\"0\" title=\"Flattr this\" /></a></p>" "http://apfelmus.nfshost.com/blog/2012/07/15-frp-tutorial-slides.html" (20482 44703) new 4 nil nil ((title nil "apfelmus: FRP - Slides from the tutorial session in Halle") (guid ((isPermaLink . "true")) "http://apfelmus.nfshost.com/blog/2012/07/15-frp-tutorial-slides.html") (link nil "http://apfelmus.nfshost.com/blog/2012/07/15-frp-tutorial-slides.html") (description nil "<p>Hello everyone,</p>\n<p>last Friday, I gave a tutorial session on functional reactive programming (FRP) with reactive-banana at the <a href=\"http://iba-cg.de/hal7.html\">HaL 7 - Haskell in Halle/Saale</a> meeting.</p>\n<p>The tutorial was split into two parts: first a 30 minutes talk where I introduced the basic concepts and then one hour of live demonstration, where I sat down in front of a computer and implemented some examples in a dialogue with the audience. People told me that they liked it very much, which makes me very happy.</p>\n<p>For those who could not attend because they don’t speak German, I have now translated the <a href=\"https://github.com/HeinrichApfelmus/reactive-banana/blob/07f3e9bf44ec8c227442daef723f7e9682c5a342/reactive-banana/doc/tutorial-2012-07-en.pdf?raw=true\">slides from the introductory talk</a> into English and added some annotations. I think they may be a good introduction to the <code>Behavior</code> and <code>Event</code> types.</p>\n<p>Henning Thielemann also managed to organize audio and video recordings during the meeting, but it’s not clear whether the quality is alright. Post-processing will probably take a while. A big “thank you” to Henning and the program committee for organizing the meeting in the first place!</p>\n<hr /><p><a href=\"https://flattr.com/thing/29608/apfelmus-website\"><img src=\"http://api.flattr.com/button/flattr-badge-large.png\" alt=\"Flattr this\" border=\"0\" title=\"Flattr this\" /></a></p>") (pubDate nil "Sun, 15 Jul 2012 11:50:55 +0000"))) ("Yesod Web Framework: Announcing baseless-assertion 0.1" "<p>I'm happy to announce the first release of baseless-assertion. This release is highly experimental: it has not seen any real-world usage yet. I highly encourage all potential users to test it out as soon and as often as possible.</p><p>baseless-assertion is a tool to help streamline discussions around Haskell. It is meant to deal with the all-too-prevalent usage of a statement made without any evidence to back it up. baseless-assertion comes in three forms:</p><ol><li><p>A Fry meme:</p><p><img src=\"http://www.yesodweb.com/assets/baseless-assertion.jpg\" alt=\"Not sure if tapping into a deep universal truth Or just making a baseless assertion\" title=\"baseless-assertion.jpg\" /></p></li><li>A text version: \"Not sure if referencing some universal truth, or just making a baseless assertion.\"</li><li>Textual reference to a non-present image: baseless-assertion.jpg. (Note: baseless-assertion.png is an acceptable usage as well. Please do <i>not</i> use baseless-assertion.gif, as it would imply non-present animation.)</li></ol><h2>Example Usages</h2><ul><li><i>Overzealous enumerator/conduit/pipes fan</i>: There's never a use case for lazy I/O, <i>my pet library</i> is always better.  <b>baseless-assertion.jpg</b></li><li><i>Overzealous Yesod/Snap/Happstack user</i>: <i>My favorite framework</i> is far better at <i>my pet feature</i> than any other web framework.  <b>baseless-assertion.jpg</b></li><li><i>Overzealous Haskeller</i>: The only way to write a program without bugs is with a type system at least as powerful as Haskell's. And any type system more powerful than Haskell's doesn't let you write useful programs.  <b>baseless-assertion.jpg</b></li></ul><p>As you can see, baseless-assertion is easy to use, and has a consistent calling convention.</p><h3>More complicated uses</h3><p>Not all usages of baseless-assertion are as simple as implied above. In some cases, a comment may contain multiple paragraphs, some of which are a baseless assertion, and some of which are accurate. In such a circumstance, it is recommended that you quote the unfounded statements and apply baseless-assertion individually to each one. In this case, we recommend use pattern (3) from above (textual reference to a non-present image).</p><h2>Invalid usages</h2><p>There are many cases where baseless-assertion may seem relevant, but is in fact invalid. Let's provide a few examples:</p><ul><li>\"I believe that Python is the greatest language ever.\" The only assertion being made is about the speaker's own preferences. Given that we can generally assume the speaker to know his/her own preferences, this is in fact not baseless. More generally, usage of terms such as \"in my opinion,\" \"in my experience,\" or \"anecdotally\" will disqualify a possible usage of baseless-assertion. (Feel free to continue a normal, healthy discussion, however!)</li><li>\"Haskell has a stronger type system than Javascript.\" Granted that there is not actually any basis for this assertion in the quote alone, context must be taken into account as well. If this statement was made to a group of people somewhat familiar with the two languages, it is not a baseless assertion per se. If it was stated in the middle of a high stakes poker game, it <i>would</i> qualify as a baseless-assertion, however.</li><li>\"Clearly, Java is the only real programming language today.\" Since sarcasm was implied, baseless-assertion cannot be used. However, given the lack of intonation in textual discourse, this can be difficult to ascertain.</li></ul><p>In general, if you believe you have seen an invalid usage of baseless-assertion, engage the user in dialog to try and clarify the situation.</p><h2>Enjoy</h2><p>As mentioned, this release is experimental. It's yet to be proven to actually solve real world problems, but it certainly has a strong theoretical basis. (<b>baseless-assertion.jpg</b>.) I'm looking forward to community feedback on ways to improve this tool, and thereby simplify the process of Haskell discussions.</p>" "http://www.yesodweb.com/blog/2012/07/announcing-baseless-assertion" (20481 38844) new 5 nil nil ((title nil "Yesod Web Framework: Announcing baseless-assertion 0.1") (guid ((isPermaLink . "true")) "http://www.yesodweb.com/blog/2012/07/announcing-baseless-assertion") (link nil "http://www.yesodweb.com/blog/2012/07/announcing-baseless-assertion") (description nil "<p>I'm happy to announce the first release of baseless-assertion. This release is highly experimental: it has not seen any real-world usage yet. I highly encourage all potential users to test it out as soon and as often as possible.</p><p>baseless-assertion is a tool to help streamline discussions around Haskell. It is meant to deal with the all-too-prevalent usage of a statement made without any evidence to back it up. baseless-assertion comes in three forms:</p><ol><li><p>A Fry meme:</p><p><img src=\"http://www.yesodweb.com/assets/baseless-assertion.jpg\" alt=\"Not sure if tapping into a deep universal truth Or just making a baseless assertion\" title=\"baseless-assertion.jpg\" /></p></li><li>A text version: \"Not sure if referencing some universal truth, or just making a baseless assertion.\"</li><li>Textual reference to a non-present image: baseless-assertion.jpg. (Note: baseless-assertion.png is an acceptable usage as well. Please do <i>not</i> use baseless-assertion.gif, as it would imply non-present animation.)</li></ol><h2>Example Usages</h2><ul><li><i>Overzealous enumerator/conduit/pipes fan</i>: There's never a use case for lazy I/O, <i>my pet library</i> is always better.  <b>baseless-assertion.jpg</b></li><li><i>Overzealous Yesod/Snap/Happstack user</i>: <i>My favorite framework</i> is far better at <i>my pet feature</i> than any other web framework.  <b>baseless-assertion.jpg</b></li><li><i>Overzealous Haskeller</i>: The only way to write a program without bugs is with a type system at least as powerful as Haskell's. And any type system more powerful than Haskell's doesn't let you write useful programs.  <b>baseless-assertion.jpg</b></li></ul><p>As you can see, baseless-assertion is easy to use, and has a consistent calling convention.</p><h3>More complicated uses</h3><p>Not all usages of baseless-assertion are as simple as implied above. In some cases, a comment may contain multiple paragraphs, some of which are a baseless assertion, and some of which are accurate. In such a circumstance, it is recommended that you quote the unfounded statements and apply baseless-assertion individually to each one. In this case, we recommend use pattern (3) from above (textual reference to a non-present image).</p><h2>Invalid usages</h2><p>There are many cases where baseless-assertion may seem relevant, but is in fact invalid. Let's provide a few examples:</p><ul><li>\"I believe that Python is the greatest language ever.\" The only assertion being made is about the speaker's own preferences. Given that we can generally assume the speaker to know his/her own preferences, this is in fact not baseless. More generally, usage of terms such as \"in my opinion,\" \"in my experience,\" or \"anecdotally\" will disqualify a possible usage of baseless-assertion. (Feel free to continue a normal, healthy discussion, however!)</li><li>\"Haskell has a stronger type system than Javascript.\" Granted that there is not actually any basis for this assertion in the quote alone, context must be taken into account as well. If this statement was made to a group of people somewhat familiar with the two languages, it is not a baseless assertion per se. If it was stated in the middle of a high stakes poker game, it <i>would</i> qualify as a baseless-assertion, however.</li><li>\"Clearly, Java is the only real programming language today.\" Since sarcasm was implied, baseless-assertion cannot be used. However, given the lack of intonation in textual discourse, this can be difficult to ascertain.</li></ul><p>In general, if you believe you have seen an invalid usage of baseless-assertion, engage the user in dialog to try and clarify the situation.</p><h2>Enjoy</h2><p>As mentioned, this release is experimental. It's yet to be proven to actually solve real world problems, but it certainly has a strong theoretical basis. (<b>baseless-assertion.jpg</b>.) I'm looking forward to community feedback on ways to improve this tool, and thereby simplify the process of Haskell discussions.</p>") (pubDate nil "Sat, 14 Jul 2012 16:01:00 +0000"))) ("Luke Palmer" "<p>What do you say when you have nothing to say?  What do you do when your song is a nice accompaniment to a vocal line, and there are no words to accompany?  </p>\n<p>I could talk about my life.  I could mention my new teaching job, the cosmic interference with my busking, the flood… those all seem so incidental. </p>\n<p>Maybe silence is okay.  Maybe I am saying something — I am writing <a href=\"http://soundcloud.com/luke-palmer-3\">a lot of music</a>, after all.  I’m feeling pressure from Amanda (my girlfriend and closest friend) — not in any way that she is instigating, just a side-effect of who she is — to say something meaningful, something important.  I can’t.  I don’t feel like my ideas are important in that way, in the way that they are ready to jump from my mind into another’s and have any benefit.  I think only vague half-truths: a strong conclusion, a value to hold on to, feels miles away.  I know personal truths, I am feeling confident in them, and it is a great feeling, but words always miss the mark.  They always make me seem either more certain or more uncertain than I am, with them I don’t know how to walk the fine line where I really communicate. And if I could . . . would I put it in a song; would I write it here?</p>\n<p>I don’t think I would be bothered if my music felt complete without words.  But I have a couple of songs in the oven that are just begging for words, that’s musically obvious to me. The missing instrument is words.  I see a symbol, a metaphor: my life for the song, the words for… what?  But it does feel that way — my life has a great groove but is also missing something.  Missing lyrics.</p>\n<p>I would normally argue that my lyricless music <i>is</i> saying something — it does have a message — but, like my thoughts and my truths, words cannot communicate it. But I’m incredulous. That argument doesn’t have the ring it used to.</p>\n<p>I –</p>\n<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/lukepalmer.wordpress.com/2025/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/lukepalmer.wordpress.com/2025/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godelicious/lukepalmer.wordpress.com/2025/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/delicious/lukepalmer.wordpress.com/2025/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gofacebook/lukepalmer.wordpress.com/2025/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/facebook/lukepalmer.wordpress.com/2025/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gotwitter/lukepalmer.wordpress.com/2025/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/twitter/lukepalmer.wordpress.com/2025/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gostumble/lukepalmer.wordpress.com/2025/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/stumble/lukepalmer.wordpress.com/2025/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godigg/lukepalmer.wordpress.com/2025/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/digg/lukepalmer.wordpress.com/2025/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/goreddit/lukepalmer.wordpress.com/2025/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/reddit/lukepalmer.wordpress.com/2025/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=lukepalmer.wordpress.com&amp;blog=5292379&amp;post=2025&amp;subd=lukepalmer&amp;ref=&amp;feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" "http://lukepalmer.wordpress.com/2012/07/13/2025/" (20479 47295) new 6 nil nil ((title nil "Luke Palmer") (guid ((isPermaLink . "false")) "http://lukepalmer.wordpress.com/?p=2025") (link nil "http://lukepalmer.wordpress.com/2012/07/13/2025/") (description nil "<p>What do you say when you have nothing to say?  What do you do when your song is a nice accompaniment to a vocal line, and there are no words to accompany?  </p>\n<p>I could talk about my life.  I could mention my new teaching job, the cosmic interference with my busking, the flood… those all seem so incidental. </p>\n<p>Maybe silence is okay.  Maybe I am saying something — I am writing <a href=\"http://soundcloud.com/luke-palmer-3\">a lot of music</a>, after all.  I’m feeling pressure from Amanda (my girlfriend and closest friend) — not in any way that she is instigating, just a side-effect of who she is — to say something meaningful, something important.  I can’t.  I don’t feel like my ideas are important in that way, in the way that they are ready to jump from my mind into another’s and have any benefit.  I think only vague half-truths: a strong conclusion, a value to hold on to, feels miles away.  I know personal truths, I am feeling confident in them, and it is a great feeling, but words always miss the mark.  They always make me seem either more certain or more uncertain than I am, with them I don’t know how to walk the fine line where I really communicate. And if I could . . . would I put it in a song; would I write it here?</p>\n<p>I don’t think I would be bothered if my music felt complete without words.  But I have a couple of songs in the oven that are just begging for words, that’s musically obvious to me. The missing instrument is words.  I see a symbol, a metaphor: my life for the song, the words for… what?  But it does feel that way — my life has a great groove but is also missing something.  Missing lyrics.</p>\n<p>I would normally argue that my lyricless music <i>is</i> saying something — it does have a message — but, like my thoughts and my truths, words cannot communicate it. But I’m incredulous. That argument doesn’t have the ring it used to.</p>\n<p>I –</p>\n<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/lukepalmer.wordpress.com/2025/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/lukepalmer.wordpress.com/2025/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godelicious/lukepalmer.wordpress.com/2025/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/delicious/lukepalmer.wordpress.com/2025/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gofacebook/lukepalmer.wordpress.com/2025/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/facebook/lukepalmer.wordpress.com/2025/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gotwitter/lukepalmer.wordpress.com/2025/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/twitter/lukepalmer.wordpress.com/2025/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gostumble/lukepalmer.wordpress.com/2025/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/stumble/lukepalmer.wordpress.com/2025/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godigg/lukepalmer.wordpress.com/2025/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/digg/lukepalmer.wordpress.com/2025/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/goreddit/lukepalmer.wordpress.com/2025/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/reddit/lukepalmer.wordpress.com/2025/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=lukepalmer.wordpress.com&amp;blog=5292379&amp;post=2025&amp;subd=lukepalmer&amp;ref=&amp;feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />") (pubDate nil "Fri, 13 Jul 2012 05:57:19 +0000"))) ("Darcs: darcs weekly news #98" "<h3 id=\"news-and-discussions\">  News and discussions</h3><ol style=\"\"><li>News from Aditya's Summer of Code work on patch index:<br /> <ul><li><a href=\"http://bsrkaditya.blogspot.com.ar/2012/06/gsoc-patch-index-week-2.html\"><code class=\"url\">http://bsrkaditya.blogspot.com.ar/2012/06/gsoc-patch-index-week-2.html</code></a></li><li><a href=\"http://bsrkaditya.blogspot.com.ar/2012/06/gsoc-patch-index-week-3-4.html\"><code class=\"url\">http://bsrkaditya.blogspot.com.ar/2012/06/gsoc-patch-index-week-3-4.html</code></a></li><li><a href=\"http://bsrkaditya.blogspot.com.ar/2012/06/gsoc-patch-index-week-5.html\"><code class=\"url\">http://bsrkaditya.blogspot.com.ar/2012/06/gsoc-patch-index-week-5.html</code></a></li><li><a href=\"http://bsrkaditya.blogspot.com.ar/2012/07/gsoc-patch-index-week-6.html\"><code class=\"url\">http://bsrkaditya.blogspot.com.ar/2012/07/gsoc-patch-index-week-6.html</code></a></li><li><a href=\"http://bsrkaditya.blogspot.com.ar/2012/07/gsoc-patch-index-week-7.html\"><code class=\"url\">http://bsrkaditya.blogspot.com.ar/2012/07/gsoc-patch-index-week-7.html</code></a></li></ul></li><li>We are now using the wiki as the home page. Be sure to visit it and give us feedback:<br /> <ul><li><a href=\"http://darcs.net/\"><code class=\"url\">http://darcs.net</code></a></li></ul></li><li>Eric Kow documented the workflow of having a group of users working with the same repository:<br /> <ul><li><a href=\"http://lists.osuosl.org/pipermail/darcs-users/2012-June/026523.html\"><code class=\"url\">http://lists.osuosl.org/pipermail/darcs-users/2012-June/026523.html</code></a></li><li><a href=\"http://darcs.net/Using/GroupRepo\"><code class=\"url\">http://darcs.net/Using/GroupRepo</code></a></li></ul></li></ol><h3 id=\"issues-resolved-in-the-last-week-3\">  Issues resolved in the last week (3)</h3><dl><dt>issue2193 Guillaume Hoffmann</dt><dd><ul><li>make that finalizeTentativeChanges no longer run tests</li><li><a href=\"http://bugs.darcs.net/issue2193\">http://bugs.darcs.net/issue2193</a></li></ul></dd><dt>issue2198 Guillaume Hoffmann</dt><dd><ul><li>move repo testing code to Darcs.Repository.Test</li><li><a href=\"http://bugs.darcs.net/issue2198\">http://bugs.darcs.net/issue2198</a></li></ul></dd><dt>issue2200 Owen Stephens</dt><dd><ul><li>darcs replace complains if no filepaths given</li><li><a href=\"http://bugs.darcs.net/issue2200\">http://bugs.darcs.net/issue2200</a></li></ul></dd></dl><h3 id=\"patches-applied-in-the-last-week-70\">  Patches applied in the last week (70)</h3>See <a href=\"http://wiki.darcs.net/DarcsWeeklyNews/2012-07-12\">darcs wiki entry</a> for details.<div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/819021106854702432-5098253725020594610?l=blog.darcs.net\" alt=\"\" height=\"1\" width=\"1\" /></div>" "http://blog.darcs.net/2012/07/news-and-discussions-news-from-adityas.html" (20478 62895) new 7 nil nil ((title nil "Darcs: darcs weekly news #98") (guid ((isPermaLink . "false")) "tag:blogger.com,1999:blog-819021106854702432.post-5098253725020594610") (link nil "http://blog.darcs.net/2012/07/news-and-discussions-news-from-adityas.html") (description nil "<h3 id=\"news-and-discussions\">  News and discussions</h3><ol style=\"\"><li>News from Aditya's Summer of Code work on patch index:<br /> <ul><li><a href=\"http://bsrkaditya.blogspot.com.ar/2012/06/gsoc-patch-index-week-2.html\"><code class=\"url\">http://bsrkaditya.blogspot.com.ar/2012/06/gsoc-patch-index-week-2.html</code></a></li><li><a href=\"http://bsrkaditya.blogspot.com.ar/2012/06/gsoc-patch-index-week-3-4.html\"><code class=\"url\">http://bsrkaditya.blogspot.com.ar/2012/06/gsoc-patch-index-week-3-4.html</code></a></li><li><a href=\"http://bsrkaditya.blogspot.com.ar/2012/06/gsoc-patch-index-week-5.html\"><code class=\"url\">http://bsrkaditya.blogspot.com.ar/2012/06/gsoc-patch-index-week-5.html</code></a></li><li><a href=\"http://bsrkaditya.blogspot.com.ar/2012/07/gsoc-patch-index-week-6.html\"><code class=\"url\">http://bsrkaditya.blogspot.com.ar/2012/07/gsoc-patch-index-week-6.html</code></a></li><li><a href=\"http://bsrkaditya.blogspot.com.ar/2012/07/gsoc-patch-index-week-7.html\"><code class=\"url\">http://bsrkaditya.blogspot.com.ar/2012/07/gsoc-patch-index-week-7.html</code></a></li></ul></li><li>We are now using the wiki as the home page. Be sure to visit it and give us feedback:<br /> <ul><li><a href=\"http://darcs.net/\"><code class=\"url\">http://darcs.net</code></a></li></ul></li><li>Eric Kow documented the workflow of having a group of users working with the same repository:<br /> <ul><li><a href=\"http://lists.osuosl.org/pipermail/darcs-users/2012-June/026523.html\"><code class=\"url\">http://lists.osuosl.org/pipermail/darcs-users/2012-June/026523.html</code></a></li><li><a href=\"http://darcs.net/Using/GroupRepo\"><code class=\"url\">http://darcs.net/Using/GroupRepo</code></a></li></ul></li></ol><h3 id=\"issues-resolved-in-the-last-week-3\">  Issues resolved in the last week (3)</h3><dl><dt>issue2193 Guillaume Hoffmann</dt><dd><ul><li>make that finalizeTentativeChanges no longer run tests</li><li><a href=\"http://bugs.darcs.net/issue2193\">http://bugs.darcs.net/issue2193</a></li></ul></dd><dt>issue2198 Guillaume Hoffmann</dt><dd><ul><li>move repo testing code to Darcs.Repository.Test</li><li><a href=\"http://bugs.darcs.net/issue2198\">http://bugs.darcs.net/issue2198</a></li></ul></dd><dt>issue2200 Owen Stephens</dt><dd><ul><li>darcs replace complains if no filepaths given</li><li><a href=\"http://bugs.darcs.net/issue2200\">http://bugs.darcs.net/issue2200</a></li></ul></dd></dl><h3 id=\"patches-applied-in-the-last-week-70\">  Patches applied in the last week (70)</h3>See <a href=\"http://wiki.darcs.net/DarcsWeeklyNews/2012-07-12\">darcs wiki entry</a> for details.<div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/819021106854702432-5098253725020594610?l=blog.darcs.net\" alt=\"\" height=\"1\" width=\"1\" /></div>") (pubDate nil "Thu, 12 Jul 2012 16:05:03 +0000") (author nil "noreply@blogger.com (guillaume)"))) ("Leon P Smith: Announcing split-channel" "<p>The <a href=\"http://hackage.haskell.org/package/split-channel\">split-channel</a> package is new library that is a small variation on <a href=\"http://www.haskell.org/ghc/docs/7.4.2/html/libraries/base/Control-Concurrent-Chan.html\">Control.Concurrent.Chan</a>. The most obvious change is that it splits the channel into sending and receiving ports. This has at least two advantages: first, that this enables the type system to more finely constrain program behavior, and second, a <code>SendPort</code> can have zero <code>ReceivePorts</code> associated with it, and messages written to such a channel can be garbage collected.</p>\n<p>This library started life last fall as part of my experiments in adding support for PostgreSQL’s asynchronous notifications to Chris Done’s native <a href=\"https://github.com/lpsmith/pgsql-simple/tree/async\">pgsql-simple</a> library. The initial motivation was that if a notification arrived and nobody was listening, I wanted to be able to garbage collect it. However, the type advantages are what keep me coming back.</p>\n<p>Beyond the primary change, this library has a number of other small improvements over <code>Control.Concurrent.Chan</code>: the deprecated thread-unsafe functions aren’t there, and several operators have been added or improved, most notably <code>listen</code>, <code>sendMany</code>, <code>fold</code>, and <code>split</code>.</p>\n<ol style=\"\">\n<li>\n<p><code>listen</code> attaches a new <code>ReceivePort</code> to an existing <code>SendPort</code>. <strike>By contrast, <code>Chan</code> only provides the ability to duplicate an existing <code>ReceivePort</code>.</strike></p>\n<p>Edit:  I was mistaken: <code>listen</code> is essentially equivalent to <code>dupChan</code>,  whereas <code>duplicate</code> is new.</p>\n</li>\n<li>\n<p><code>sendMany</code> sends a list of messages atomically. It’s a better name than <code>writeList2Chan</code>, which is not atomic and is only a convenience function written in terms of <code>send</code>. However, <code>writeList2Chan</code> does work on infinite streams, whereas <code>sendMany</code> does not.</p>\n</li>\n<li>\n<p><code>fold</code> is a generalization of <code>getChanContents</code>, potentially avoiding some data structures.</p>\n</li>\n<li>\n<p><code>split</code> cuts an existing channel into two channels. It gives you back a new <code>ReceivePort</code> associated with the existing <code>SendPort</code>, and a new <code>SendPort</code> associated with the existing <code>ReceivePorts</code>. This is a more general operator than one I’ve used in a few places to transparently swap out backend services.</p>\n<p><code>Chan</code> does not provide the <code>split</code> operator, though one could be added. However I am skeptical that this is a good idea: it’s just a little too effect-ful for comfort. I think that putting a <code>SendPort</code> in an <code>MVar</code> tends to be a better idea than using <code>split</code>, even though it does introduce another layer of indirection.</p>\n</li>\n</ol>\n<p>Finally, a few acknowledgements are in order: primarily, <code>Control.Concurrent.Chan</code> and its authors and contributors, and secondarily, Joey Adams for <a href=\"http://hackage.haskell.org/trac/ghc/ticket/5870\">GHC Bug #5870</a>, the fix of which has been incorporated into split-channel.</p>\n<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/meldingmonads.wordpress.com/491/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/meldingmonads.wordpress.com/491/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=blog.melding-monads.com&amp;blog=6077169&amp;post=491&amp;subd=meldingmonads&amp;ref=&amp;feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" "http://blog.melding-monads.com/2012/07/10/announcing-split-channel/" (20477 41897) new 8 nil nil ((title nil "Leon P Smith: Announcing split-channel") (guid ((isPermaLink . "false")) "http://blog.melding-monads.com/?p=491") (link nil "http://blog.melding-monads.com/2012/07/10/announcing-split-channel/") (description nil "<p>The <a href=\"http://hackage.haskell.org/package/split-channel\">split-channel</a> package is new library that is a small variation on <a href=\"http://www.haskell.org/ghc/docs/7.4.2/html/libraries/base/Control-Concurrent-Chan.html\">Control.Concurrent.Chan</a>. The most obvious change is that it splits the channel into sending and receiving ports. This has at least two advantages: first, that this enables the type system to more finely constrain program behavior, and second, a <code>SendPort</code> can have zero <code>ReceivePorts</code> associated with it, and messages written to such a channel can be garbage collected.</p>\n<p>This library started life last fall as part of my experiments in adding support for PostgreSQL’s asynchronous notifications to Chris Done’s native <a href=\"https://github.com/lpsmith/pgsql-simple/tree/async\">pgsql-simple</a> library. The initial motivation was that if a notification arrived and nobody was listening, I wanted to be able to garbage collect it. However, the type advantages are what keep me coming back.</p>\n<p>Beyond the primary change, this library has a number of other small improvements over <code>Control.Concurrent.Chan</code>: the deprecated thread-unsafe functions aren’t there, and several operators have been added or improved, most notably <code>listen</code>, <code>sendMany</code>, <code>fold</code>, and <code>split</code>.</p>\n<ol style=\"\">\n<li>\n<p><code>listen</code> attaches a new <code>ReceivePort</code> to an existing <code>SendPort</code>. <strike>By contrast, <code>Chan</code> only provides the ability to duplicate an existing <code>ReceivePort</code>.</strike></p>\n<p>Edit:  I was mistaken: <code>listen</code> is essentially equivalent to <code>dupChan</code>,  whereas <code>duplicate</code> is new.</p>\n</li>\n<li>\n<p><code>sendMany</code> sends a list of messages atomically. It’s a better name than <code>writeList2Chan</code>, which is not atomic and is only a convenience function written in terms of <code>send</code>. However, <code>writeList2Chan</code> does work on infinite streams, whereas <code>sendMany</code> does not.</p>\n</li>\n<li>\n<p><code>fold</code> is a generalization of <code>getChanContents</code>, potentially avoiding some data structures.</p>\n</li>\n<li>\n<p><code>split</code> cuts an existing channel into two channels. It gives you back a new <code>ReceivePort</code> associated with the existing <code>SendPort</code>, and a new <code>SendPort</code> associated with the existing <code>ReceivePorts</code>. This is a more general operator than one I’ve used in a few places to transparently swap out backend services.</p>\n<p><code>Chan</code> does not provide the <code>split</code> operator, though one could be added. However I am skeptical that this is a good idea: it’s just a little too effect-ful for comfort. I think that putting a <code>SendPort</code> in an <code>MVar</code> tends to be a better idea than using <code>split</code>, even though it does introduce another layer of indirection.</p>\n</li>\n</ol>\n<p>Finally, a few acknowledgements are in order: primarily, <code>Control.Concurrent.Chan</code> and its authors and contributors, and secondarily, Joey Adams for <a href=\"http://hackage.haskell.org/trac/ghc/ticket/5870\">GHC Bug #5870</a>, the fix of which has been incorporated into split-channel.</p>\n<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/meldingmonads.wordpress.com/491/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/meldingmonads.wordpress.com/491/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=blog.melding-monads.com&amp;blog=6077169&amp;post=491&amp;subd=meldingmonads&amp;ref=&amp;feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />") (pubDate nil "Wed, 11 Jul 2012 16:02:49 +0000"))) ("Wolfgang Jeltsch: Slides of my MFPS talk now online" "<p>MFPS took place a month ago, and today I finally managed to publish <a href=\"http://www.ioc.ee/~wolfgang/research/mfps-2012-slides.pdf\" title=\"Towards a Common Categorical Semantics for Linear-Time Temporal Logic and Functional Reactive Programming\">the slides of my talk</a> <img src=\"http://s1.wp.com/wp-includes/images/smilies/icon_wink.gif\" alt=\";-)\" class=\"wp-smiley\" /> . The topic of these slides is similar to the topic of <a href=\"http://jeltsch.wordpress.com/2012/05/18/talk-about-categorical-models-of-temporal-logic-and-frp/\" title=\"Talk about categorical models of temporal logic and FRP\">the seminar talk I gave at 10 May</a>, but the overlap is not too large. So you might be interested in having a look.</p>\n<br /> Tagged: <a href=\"http://jeltsch.wordpress.com/tag/categorical-logic/\">categorical logic</a>, <a href=\"http://jeltsch.wordpress.com/tag/category-theory/\">category theory</a>, <a href=\"http://jeltsch.wordpress.com/tag/curry-howard-correspondence/\">Curry–Howard correspondence</a>, <a href=\"http://jeltsch.wordpress.com/tag/frp/\">FRP</a>, <a href=\"http://jeltsch.wordpress.com/tag/intuitionistic-logic/\">intuitionistic logic</a>, <a href=\"http://jeltsch.wordpress.com/tag/logic/\">logic</a>, <a href=\"http://jeltsch.wordpress.com/tag/ltl/\">LTL</a>, <a href=\"http://jeltsch.wordpress.com/tag/mfps/\">MFPS</a>, <a href=\"http://jeltsch.wordpress.com/tag/modal-logic/\">modal logic</a>, <a href=\"http://jeltsch.wordpress.com/tag/publication/\">publication</a>, <a href=\"http://jeltsch.wordpress.com/tag/s4/\">S4</a>, <a href=\"http://jeltsch.wordpress.com/tag/semantics/\">semantics</a>, <a href=\"http://jeltsch.wordpress.com/tag/talk/\">talk</a>, <a href=\"http://jeltsch.wordpress.com/tag/temporal-logic/\">temporal logic</a> <a href=\"http://feeds.wordpress.com/1.0/gocomments/jeltsch.wordpress.com/450/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/jeltsch.wordpress.com/450/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=jeltsch.wordpress.com&amp;blog=33918393&amp;post=450&amp;subd=jeltsch&amp;ref=&amp;feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" "http://jeltsch.wordpress.com/2012/07/10/slides-of-my-mfps-talk-now-online/" (20476 26562) new 9 nil nil ((title nil "Wolfgang Jeltsch: Slides of my MFPS talk now online") (guid ((isPermaLink . "false")) "http://jeltsch.wordpress.com/?p=450") (link nil "http://jeltsch.wordpress.com/2012/07/10/slides-of-my-mfps-talk-now-online/") (description nil "<p>MFPS took place a month ago, and today I finally managed to publish <a href=\"http://www.ioc.ee/~wolfgang/research/mfps-2012-slides.pdf\" title=\"Towards a Common Categorical Semantics for Linear-Time Temporal Logic and Functional Reactive Programming\">the slides of my talk</a> <img src=\"http://s1.wp.com/wp-includes/images/smilies/icon_wink.gif\" alt=\";-)\" class=\"wp-smiley\" /> . The topic of these slides is similar to the topic of <a href=\"http://jeltsch.wordpress.com/2012/05/18/talk-about-categorical-models-of-temporal-logic-and-frp/\" title=\"Talk about categorical models of temporal logic and FRP\">the seminar talk I gave at 10 May</a>, but the overlap is not too large. So you might be interested in having a look.</p>\n<br /> Tagged: <a href=\"http://jeltsch.wordpress.com/tag/categorical-logic/\">categorical logic</a>, <a href=\"http://jeltsch.wordpress.com/tag/category-theory/\">category theory</a>, <a href=\"http://jeltsch.wordpress.com/tag/curry-howard-correspondence/\">Curry–Howard correspondence</a>, <a href=\"http://jeltsch.wordpress.com/tag/frp/\">FRP</a>, <a href=\"http://jeltsch.wordpress.com/tag/intuitionistic-logic/\">intuitionistic logic</a>, <a href=\"http://jeltsch.wordpress.com/tag/logic/\">logic</a>, <a href=\"http://jeltsch.wordpress.com/tag/ltl/\">LTL</a>, <a href=\"http://jeltsch.wordpress.com/tag/mfps/\">MFPS</a>, <a href=\"http://jeltsch.wordpress.com/tag/modal-logic/\">modal logic</a>, <a href=\"http://jeltsch.wordpress.com/tag/publication/\">publication</a>, <a href=\"http://jeltsch.wordpress.com/tag/s4/\">S4</a>, <a href=\"http://jeltsch.wordpress.com/tag/semantics/\">semantics</a>, <a href=\"http://jeltsch.wordpress.com/tag/talk/\">talk</a>, <a href=\"http://jeltsch.wordpress.com/tag/temporal-logic/\">temporal logic</a> <a href=\"http://feeds.wordpress.com/1.0/gocomments/jeltsch.wordpress.com/450/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/jeltsch.wordpress.com/450/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=jeltsch.wordpress.com&amp;blog=33918393&amp;post=450&amp;subd=jeltsch&amp;ref=&amp;feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />") (pubDate nil "Tue, 10 Jul 2012 17:34:58 +0000"))) ("Ken T Takusagawa: [ujbvajmv] Completely modular software" "<p>Consider creating a piece of software composed of modules such that any component can be easily replaced with another, independently written, compatible component.</p><p>All components can be replaced, especially including the module loader itself and related infrastructural glue.</p><p>Well documented APIs are the traditional, but very difficult, way to do this.  Are there other ways?  Pure functions without side effects will probably be useful.</p><p>A closed-source program could be gradually transformed to an open-source one.  But linking licenses might get in the way (e.g., GPL in contrast to LGPL).</p><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/6757805-5595447704239674434?l=kenta.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>" "http://kenta.blogspot.com/2012/07/ujbvajmv-completely-modular-software.html" (20475 45013) new 10 nil nil ((title nil "Ken T Takusagawa: [ujbvajmv] Completely modular software") (guid ((isPermaLink . "false")) "tag:blogger.com,1999:blog-6757805.post-5595447704239674434") (link nil "http://kenta.blogspot.com/2012/07/ujbvajmv-completely-modular-software.html") (description nil "<p>Consider creating a piece of software composed of modules such that any component can be easily replaced with another, independently written, compatible component.</p><p>All components can be replaced, especially including the module loader itself and related infrastructural glue.</p><p>Well documented APIs are the traditional, but very difficult, way to do this.  Are there other ways?  Pure functions without side effects will probably be useful.</p><p>A closed-source program could be gradually transformed to an open-source one.  But linking licenses might get in the way (e.g., GPL in contrast to LGPL).</p><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/6757805-5595447704239674434?l=kenta.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>") (pubDate nil "Tue, 10 Jul 2012 04:30:13 +0000") (author nil "noreply@blogger.com (Ken)"))) ("Brent Yorgey: Diagrams mentoring at Hac Phi" "<p><a href=\"http://www.haskell.org/haskellwiki/Hac_%CF%86\">Hac Phi</a> is coming up in less than a month, August 3-5 here in Philadelphia: three days of hanging out with awesome people, eating good food, and hacking on Haskell projects.  Judging by past instances, I promise you it will be super fun, whether you just started programming in Haskell yesterday or have been for twenty years.</p>\n<p>In case you need some extra encouragement and the <a href=\"http://projects.haskell.org/diagrams\">diagrams</a> project sounds interesting to you, let me explicitly state that <i>if you attend Hac Phi and want to help with the diagrams project, I will personally sit down with you</i> at least once, more likely multiple times, over the course of the weekend and walk through code with you, do some pair programming, whatever is appropriate to get you to the next level of productivity with diagrams and/or Haskell.  This applies no matter how much experience you have with diagrams or with Haskell—from absolutely none to quite a lot.</p>\n<p>In fact, I would be perfectly happy to spend the entire weekend mentoring others and writing not a single line of code myself.  Over the years I have learned that when it comes to a big project like diagrams, fostering collaboration is actually the most important aspect of a hackathon, rather than getting a bunch of coding done myself—I can always go pound out code at home once everyone has left.</p>\n<p>So, if that sounds like fun to you, be sure to <a href=\"http://www.haskell.org/haskellwiki/Hac_%CF%86/Register\">register</a> (registration closes in a little under two weeks), and let me know you’re coming.  I’m also happy to discuss concrete ideas for diagrams-related projects.</p>\n<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/byorgey.wordpress.com/840/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/byorgey.wordpress.com/840/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=byorgey.wordpress.com&amp;blog=1152889&amp;post=840&amp;subd=byorgey&amp;ref=&amp;feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" "http://byorgey.wordpress.com/2012/07/09/diagrams-mentoring-at-hac-phi/" (20475 10168) new 11 nil nil ((title nil "Brent Yorgey: Diagrams mentoring at Hac Phi") (guid ((isPermaLink . "false")) "http://byorgey.wordpress.com/?p=840") (link nil "http://byorgey.wordpress.com/2012/07/09/diagrams-mentoring-at-hac-phi/") (description nil "<p><a href=\"http://www.haskell.org/haskellwiki/Hac_%CF%86\">Hac Phi</a> is coming up in less than a month, August 3-5 here in Philadelphia: three days of hanging out with awesome people, eating good food, and hacking on Haskell projects.  Judging by past instances, I promise you it will be super fun, whether you just started programming in Haskell yesterday or have been for twenty years.</p>\n<p>In case you need some extra encouragement and the <a href=\"http://projects.haskell.org/diagrams\">diagrams</a> project sounds interesting to you, let me explicitly state that <i>if you attend Hac Phi and want to help with the diagrams project, I will personally sit down with you</i> at least once, more likely multiple times, over the course of the weekend and walk through code with you, do some pair programming, whatever is appropriate to get you to the next level of productivity with diagrams and/or Haskell.  This applies no matter how much experience you have with diagrams or with Haskell—from absolutely none to quite a lot.</p>\n<p>In fact, I would be perfectly happy to spend the entire weekend mentoring others and writing not a single line of code myself.  Over the years I have learned that when it comes to a big project like diagrams, fostering collaboration is actually the most important aspect of a hackathon, rather than getting a bunch of coding done myself—I can always go pound out code at home once everyone has left.</p>\n<p>So, if that sounds like fun to you, be sure to <a href=\"http://www.haskell.org/haskellwiki/Hac_%CF%86/Register\">register</a> (registration closes in a little under two weeks), and let me know you’re coming.  I’m also happy to discuss concrete ideas for diagrams-related projects.</p>\n<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/byorgey.wordpress.com/840/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/byorgey.wordpress.com/840/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=byorgey.wordpress.com&amp;blog=1152889&amp;post=840&amp;subd=byorgey&amp;ref=&amp;feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />") (pubDate nil "Mon, 09 Jul 2012 18:49:28 +0000"))) ("TypLAB: Multiple IP addresses on Amazon EC2" "Last week, Amazon announced support for multiple IP’s for instances inside a VPC. This can be useful in many situations where a single IP for a machine is not enough. One example is SSL endpoints, which can only pass on certificates based on the IP listened on, and don’t work on hostname, for example.<img src=\"http://feeds.feedburner.com/~r/typlab/blog/~4/PT5D7NJ_5Po\" height=\"1\" width=\"1\" />" "http://feedproxy.google.com/~r/typlab/blog/~3/PT5D7NJ_5Po/Multiple%20IP%20addresses%20on%20Amazon%20EC2" (20474 54736) new 12 nil nil ((title nil "TypLAB: Multiple IP addresses on Amazon EC2") (guid ((isPermaLink . "false")) "http://about.silkapp.com/page/Multiple%20IP%20addresses%20on%20Amazon%20EC2") (link nil "http://feedproxy.google.com/~r/typlab/blog/~3/PT5D7NJ_5Po/Multiple%20IP%20addresses%20on%20Amazon%20EC2") (description nil "Last week, Amazon announced support for multiple IP’s for instances inside a VPC. This can be useful in many situations where a single IP for a machine is not enough. One example is SSL endpoints, which can only pass on certificates based on the IP listened on, and don’t work on hostname, for example.<img src=\"http://feeds.feedburner.com/~r/typlab/blog/~4/PT5D7NJ_5Po\" height=\"1\" width=\"1\" />") (pubDate nil "Mon, 09 Jul 2012 13:00:00 +0000"))) ("Kevin Reid (kpreid): Status update" "<p>Arrived in California a few days ago; setting up assorted arrangements. I start work in a week.</p>" "http://kpreid.livejournal.com/46931.html" (20473 38404) new 13 nil nil ((title nil "Kevin Reid (kpreid): Status update") (guid ((isPermaLink . "true")) "http://kpreid.livejournal.com/46931.html") (link nil "http://kpreid.livejournal.com/46931.html") (description nil "<p>Arrived in California a few days ago; setting up assorted arrangements. I start work in a week.</p>") (pubDate nil "Sun, 08 Jul 2012 14:15:32 +0000") (author nil "kpreid@switchb.org (Kevin Reid (kpreid))"))) ("Russell O'Connor: Confession of a Haskell Hacker" "<p>I have a confession to make.\nI recently released two Haskell packages, <a href=\"http://hackage.haskell.org/package/lens-family-core\"><code>lens-family-core</code></a> and <a href=\"http://hackage.haskell.org/package/lens-family\"><code>lens-family</code></a> based on my <a href=\"http://r6.ca/blog/20120623T104901Z.html\" title=\"Polymorphic Update with van Laarhoven Lenses\">previous blog post</a> and <a href=\"http://comonad.com/reader/2012/mirrored-lenses/\" title=\"Mirrored Lenses\">Edward Kmett’s blog post</a>.\nHowever, I never tested this code before releasing it.\nby “never tested”, I mean that I am pretty sure that I never once executed any of this code.\nI did compile it many times, and I remember once I loaded the modules in ghci in order to type check some expressions to make sure my documentation about the composition laws were correct, but I think that is it.\n</p><p>Worse yet, when I wrote the <a href=\"http://hackage.haskell.org/packages/archive/lens-family-core/0.0.0/doc/html/Lens-Family-State-Lazy.html#v:focus\">focus</a> function, I actually had no idea how the function worked.\nI simply wrote a function that matched the required type.\nMy original definition was the following.\n</p><pre>focus l m = StateT $ unwrapMonad . getCompose . l (Compose . WrapMonad . (runStateT m))</pre>\n<p>All the functions used in this definition are simply <code>newType</code> wrappers and unwrappers that get compiled away.\nI figured that this code was so simple that it could not be wrong.\nI have never run it to find out for sure.\n</p><p>Now to be fair, this is a simple library and, more importantly, it is an extremely generic library.\nThe types are so polymorphic that I conjecture that there is only one way to write functions matching the required types such that <a>all parameters are used non-trivially</a> and recursion is not used.\nFurthermore, the interface for this library is based off of the existing <a href=\"http://hackage.haskell.org/package/data-lens\"><code>data-lens</code></a>.\n</p><p>I am not going to argue whether it is good or bad that I have never tested this code.\nI am just stating for the record that this is the case.\n</p>" "http://r6.ca/blog/20120708T122219Z.html" (20473 31611) new 14 nil nil ((title nil "Russell O'Connor: Confession of a Haskell Hacker") (guid ((isPermaLink . "true")) "http://r6.ca/blog/20120708T122219Z.html") (link nil "http://r6.ca/blog/20120708T122219Z.html") (description nil "<p>I have a confession to make.\nI recently released two Haskell packages, <a href=\"http://hackage.haskell.org/package/lens-family-core\"><code>lens-family-core</code></a> and <a href=\"http://hackage.haskell.org/package/lens-family\"><code>lens-family</code></a> based on my <a href=\"http://r6.ca/blog/20120623T104901Z.html\" title=\"Polymorphic Update with van Laarhoven Lenses\">previous blog post</a> and <a href=\"http://comonad.com/reader/2012/mirrored-lenses/\" title=\"Mirrored Lenses\">Edward Kmett’s blog post</a>.\nHowever, I never tested this code before releasing it.\nby “never tested”, I mean that I am pretty sure that I never once executed any of this code.\nI did compile it many times, and I remember once I loaded the modules in ghci in order to type check some expressions to make sure my documentation about the composition laws were correct, but I think that is it.\n\n</p><p>Worse yet, when I wrote the <a href=\"http://hackage.haskell.org/packages/archive/lens-family-core/0.0.0/doc/html/Lens-Family-State-Lazy.html#v:focus\">focus</a> function, I actually had no idea how the function worked.\nI simply wrote a function that matched the required type.\nMy original definition was the following.\n\n</p><pre>focus l m = StateT $ unwrapMonad . getCompose . l (Compose . WrapMonad . (runStateT m))</pre>\n\n<p>All the functions used in this definition are simply <code>newType</code> wrappers and unwrappers that get compiled away.\nI figured that this code was so simple that it could not be wrong.\nI have never run it to find out for sure.\n\n</p><p>Now to be fair, this is a simple library and, more importantly, it is an extremely generic library.\nThe types are so polymorphic that I conjecture that there is only one way to write functions matching the required types such that <a>all parameters are used non-trivially</a> and recursion is not used.\nFurthermore, the interface for this library is based off of the existing <a href=\"http://hackage.haskell.org/package/data-lens\"><code>data-lens</code></a>.\n\n</p><p>I am not going to argue whether it is good or bad that I have never tested this code.\nI am just stating for the record that this is the case.\n\n</p>") (pubDate nil "Sun, 08 Jul 2012 12:22:19 +0000"))) ("Neil Mitchell: Shake ICFP paper" "My ICFP 2012 Shake paper is now online: <a href=\"http://community.haskell.org/~ndm/downloads/paper-shake_before_building-10_sep_2012.pdf\">Shake Before Building - Replacing Make with Haskell</a>. From the abstract:<br /><br /><blockquote>Most complex software projects are compiled using a build tool (e.g. make), which runs commands in an order satisfying user-defined dependencies. Unfortunately, most build tools require all dependencies to be specified before the build starts. This restriction makes many dependency patterns difficult to express, especially those involving files generated at build time. We show how to eliminate this restriction, allowing additional dependencies to be specified while building. We have implemented our ideas in the Haskell library Shake, and have used Shake to write a complex build system which compiles millions of lines of code.</blockquote><br />There are two primary sources of documentation for Shake, the ICFP paper (as above) and the <a href=\"http://hackage.haskell.org/packages/archive/shake/latest/doc/html/Development-Shake.html\">package documentation</a>. The ICFP paper covers the theory, including how Shake relates to other tools (specifically make) and general remarks about how Shake is designed/implemented and how you can build things on top of it. The package documentation gives concrete examples of using the package and an exhaustive list of all functions available.<br /><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/7094652-833257261869448697?l=neilmitchell.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>" "http://neilmitchell.blogspot.com/2012/07/shake-icfp-paper.html" (20473 25126) new 15 nil nil ((title nil "Neil Mitchell: Shake ICFP paper") (guid ((isPermaLink . "false")) "tag:blogger.com,1999:blog-7094652.post-833257261869448697") (link nil "http://neilmitchell.blogspot.com/2012/07/shake-icfp-paper.html") (description nil "My ICFP 2012 Shake paper is now online: <a href=\"http://community.haskell.org/~ndm/downloads/paper-shake_before_building-10_sep_2012.pdf\">Shake Before Building - Replacing Make with Haskell</a>. From the abstract:<br /><br /><blockquote>Most complex software projects are compiled using a build tool (e.g. make), which runs commands in an order satisfying user-defined dependencies. Unfortunately, most build tools require all dependencies to be specified before the build starts. This restriction makes many dependency patterns difficult to express, especially those involving files generated at build time. We show how to eliminate this restriction, allowing additional dependencies to be specified while building. We have implemented our ideas in the Haskell library Shake, and have used Shake to write a complex build system which compiles millions of lines of code.</blockquote><br />There are two primary sources of documentation for Shake, the ICFP paper (as above) and the <a href=\"http://hackage.haskell.org/packages/archive/shake/latest/doc/html/Development-Shake.html\">package documentation</a>. The ICFP paper covers the theory, including how Shake relates to other tools (specifically make) and general remarks about how Shake is designed/implemented and how you can build things on top of it. The package documentation gives concrete examples of using the package and an exhaustive list of all functions available.<br /><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/7094652-833257261869448697?l=neilmitchell.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>") (pubDate nil "Sun, 08 Jul 2012 10:34:14 +0000") (author nil "noreply@blogger.com (Neil Mitchell)"))) ("Brent Yorgey: BlogLiterately 0.5 release" "<p>I have now released version 0.5 of <a href=\"http://hackage.haskell.org/package/BlogLiterately\"><code>BlogLiterately</code></a>. (You can <a href=\"http://byorgey.wordpress.com/2012/07/02/blogliterately-0-4-release/\">read about the 0.4 release here</a>.) This version does uploading of images! Here is proof:</p>\n<div style=\"text-align: center;\">\n<img src=\"http://byorgey.files.wordpress.com/2012/07/puppy-small.jpg?w=640\" />\n</div>\n<p>d’awww.</p>\n<p>(<a href=\"http://byorgey.wordpress.com/2012/07/07/new-haxr-release/\">My previous post</a> explains the problem and solution with image uploads.)</p>\n<p>It also allows you to specify <em>expected outputs</em> in a <code>ghci</code> session (a feature <a href=\"http://www.reddit.com/r/haskell/comments/vz5vn/blogliterately_04_brent_yorgeys_tool_for/c5936th\">suggested by Dan Burton</a>). This block</p>\n<pre><code>    [ghci]\n7+6\n13\n9+4\n12</code></pre>\n<p>now produces</p>\n<pre><code><span style=\"color: gray;\">ghci&gt; </span>7+6\n13\n<span style=\"color: gray;\">ghci&gt; </span>9+4\n<span style=\"color: red;\">13</span>\n<span style=\"color: blue;\">12</span>\n</code></pre>\n<p>Outputs that match the expected output are shown normally; outputs that don’t match the expected output are shown with the actual output in red and expected in blue. The idea is that this helps you catch errors in your code before uploading the post. (Of course, you don’t have to specify expected outputs if you don’t want to.)</p>\n<p>Another new feature is that <code>BlogLiterately</code> will prompt you for your password if you don’t specify it on the command line (another feature requested by Dan).</p>\n<p>Finally, one of the coolest new features (in my opinion) is that the internals are now <a href=\"http://hackage.haskell.org/package/BlogLiterately\">exposed as a library</a>, and in particular you can <a href=\"http://hackage.haskell.org/packages/archive/BlogLiterately/0.5/doc/html/Text-BlogLiterately-Run.html\">easily add your own custom transformation passes</a> (of type <code>Pandoc -&gt; IO Pandoc</code>) to the existing ones. So, for example, you could do something particular with your own specially tagged blocks (like <code>[ghci]</code> blocks), or wrap images in some fancy HTML to produce frames and captions, or automatically turn certain things into links, or whatever you can dream up. If you come up with any transformations you think might be more generally useful, please send them to me so I can include them in future releases for others to use.</p>\n<p>Happy blogging!</p>\n<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/byorgey.wordpress.com/829/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/byorgey.wordpress.com/829/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=byorgey.wordpress.com&amp;blog=1152889&amp;post=829&amp;subd=byorgey&amp;ref=&amp;feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" "http://byorgey.wordpress.com/2012/07/07/blogliterately-0-5-release/" (20472 40449) new 16 nil nil ((title nil "Brent Yorgey: BlogLiterately 0.5 release") (guid ((isPermaLink . "false")) "http://byorgey.wordpress.com/?p=829") (link nil "http://byorgey.wordpress.com/2012/07/07/blogliterately-0-5-release/") (description nil "<p>I have now released version 0.5 of <a href=\"http://hackage.haskell.org/package/BlogLiterately\"><code>BlogLiterately</code></a>. (You can <a href=\"http://byorgey.wordpress.com/2012/07/02/blogliterately-0-4-release/\">read about the 0.4 release here</a>.) This version does uploading of images! Here is proof:</p>\n<div style=\"text-align: center;\">\n<img src=\"http://byorgey.files.wordpress.com/2012/07/puppy-small.jpg?w=640\" />\n</div>\n<p>d’awww.</p>\n<p>(<a href=\"http://byorgey.wordpress.com/2012/07/07/new-haxr-release/\">My previous post</a> explains the problem and solution with image uploads.)</p>\n<p>It also allows you to specify <em>expected outputs</em> in a <code>ghci</code> session (a feature <a href=\"http://www.reddit.com/r/haskell/comments/vz5vn/blogliterately_04_brent_yorgeys_tool_for/c5936th\">suggested by Dan Burton</a>). This block</p>\n<pre><code>    [ghci]\n    7+6\n      13\n    9+4\n      12</code></pre>\n<p>now produces</p>\n<pre><code><span style=\"color: gray;\">ghci&gt; </span>7+6\n  13\n\n<span style=\"color: gray;\">ghci&gt; </span>9+4\n  <span style=\"color: red;\">13</span>\n  <span style=\"color: blue;\">12</span>\n</code></pre>\n<p>Outputs that match the expected output are shown normally; outputs that don’t match the expected output are shown with the actual output in red and expected in blue. The idea is that this helps you catch errors in your code before uploading the post. (Of course, you don’t have to specify expected outputs if you don’t want to.)</p>\n<p>Another new feature is that <code>BlogLiterately</code> will prompt you for your password if you don’t specify it on the command line (another feature requested by Dan).</p>\n<p>Finally, one of the coolest new features (in my opinion) is that the internals are now <a href=\"http://hackage.haskell.org/package/BlogLiterately\">exposed as a library</a>, and in particular you can <a href=\"http://hackage.haskell.org/packages/archive/BlogLiterately/0.5/doc/html/Text-BlogLiterately-Run.html\">easily add your own custom transformation passes</a> (of type <code>Pandoc -&gt; IO Pandoc</code>) to the existing ones. So, for example, you could do something particular with your own specially tagged blocks (like <code>[ghci]</code> blocks), or wrap images in some fancy HTML to produce frames and captions, or automatically turn certain things into links, or whatever you can dream up. If you come up with any transformations you think might be more generally useful, please send them to me so I can include them in future releases for others to use.</p>\n<p>Happy blogging!</p>\n<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/byorgey.wordpress.com/829/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/byorgey.wordpress.com/829/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=byorgey.wordpress.com&amp;blog=1152889&amp;post=829&amp;subd=byorgey&amp;ref=&amp;feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />") (pubDate nil "Sat, 07 Jul 2012 20:37:21 +0000"))) ("Alex Mason: Exploring CPU design using Haskell" "<p>For some time now, I’ve been thinking about designing my own CPU architecture. Last week, I couldn’t get the thought out of my head, and I finally gave in and started to really think about what I’d want from a moderately simple CPU. I’ve decided that I’m going to document the process as I go, to hopefully force myself to finish this project; I’m often quite bad at starting something I find fun, and losing interest before I get to something I’d call complete. I am hoping to change this… I really hope a future potential employers don’t read this bit…</p>\n<p>My aim for this project is to have something I can actually run programs on, and maybe even get an LLVM backend written so I can compile basic C programs for it. I plan to implement all the hardware design using the Haskell library Kansas Lava, which allows for designing hardware which can be both simulated in Haskell (you can play with most circuits in GHCI, which is amazingly nice), as well as produce VHDL which can be synthesised and used to configure things like an FPGA. My goal is to have this design running on my <a href=\"http://www.digilentinc.com/Products/Detail.cfm?NavPath=2,400,792&amp;Prod=S3EBOARD\">Spartan-3E FPGA Starter Board</a>, or possibly one of <a href=\"http://www.digilentinc.com/Products/Detail.cfm?NavPath=2,400,819&amp;Prod=GENESYS\">these</a> (due to its 64bit wide memory interface). So, on to the design!</p>\n<p>Obviously it has to be RISC; my skills in hardware design are rusty enough without me having to figure out how to parse binary data in hardware, and besides, no one uses CISC any more these days, they only pretend. But just saying it’s RISC doesn’t get me far, and I only had a vague idea of what I wanted to be able to do. There were lots of features from ARM that I wanted:</p>\n<ul>\n<li><p>(Almost) all instructions are conditional, which can make for some very efficient code, both in terms of speed and space required.</p></li>\n<li><p>Lots of registers. Well, I guess 16 is lots, but I wanted more.</p></li>\n<li><p>Most arithmetic instructions have free shifts on their second argument, so there’s no need for dedicated shift instructions. This is pretty neat, and I decided I wanted more free stuff! We’ll get to that in my next post.</p></li>\n</ul>\n<p>There were also some other architectures that intrigued me, notably SPARC.</p>\n<ul>\n<li><p>A register set to constant zero, useful for simplifying many operations. Sometimes you want to perform a computation, but you only care about some of its side effects, such as whether it overflows. You can just use this register as the destination, and the result will be lost, but the side effects wont. Also there’s no need for a negation instruction, since it’s just subtracting x from zero.</p></li>\n<li><p>A register window. On function calls, the registers available to new function are not the same as those of calling function, but there is an overlap of 8 registers, which is where the first 8 (I think) function arguments are passed. When the function returns, the window slides back, and the result will have been passed back in what are now the top 8 registers. I decided this is not a feature I need, because… it seems complicated to implement, and the advantages in such a simple design as mine aren’t really worth it as far as I can tell.</p></li>\n<li><p>A branch delay slot. ARM also has this, but I’d forgotten about it during my initial thinking, and realised it would be a useful thing to have to make implementation easier. Essentially what this means is that when a branch instruction is executed, the instruction immediately following it is executed before the branch actually occurs. In a pipelined architecture, this can be quite useful, it can help avoid pipeline stalls. I think one of the main reasons for them existing is due to the extra time needed to fetch the next instruction in order to execute it. The CPU could either stall for a cycle (or more) waiting for it, or it could do some useful work in the mean time.</p></li>\n</ul>\n<p>So with this I got started. I decided, somewhat arbitrarily, that I wanted this to be a 64 bit architecture, with 64 bit wide instructions. This choice would allow me to have more registers than architectures like ARM. It also meant I had more room for constants in instructions, making a lot of tasks easier, and avoiding memory accesses for almost all constants (I’ve ended up with constants up to 36 bits). Initially I was going to go all out, and have 256 64bit registers, but I figured this was a bit of a waste, and I eventually decided (again, somewhat arbitrarily) on 64 registers (plus some special purpose ones).</p>\n<p>I also really wanted conditional execution of instructions, and almost all instructions will be conditional. For those not in the know, this means that the instruction’s result is only executed if certain condition flags are set. This can lead to some extremely efficient branchless code, where in the past you would have had to jump between the two clauses of an if-else statement, now you can just perform the comparison, and have all the instructions from each execute conditionally. Sure you waste a few cycles, but you won’t stall the pipeline, and it usually means having less instructions in the code.</p>\n<p>Next I started to think about what operations my CPU would need, and what I would like on top of the basics. A came up with a list of basic arithmetic instructions:</p>\n<table>\n<caption id=\"arithmeticinstructions\">Arithmetic instructions</caption>\n<colgroup><col />\n<col />\n</colgroup><thead>\n<tr>\n<th>Instruction</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>add{c}{s}</td>\n<td>Addition of 64bit two’s complement numbers</td>\n</tr>\n<tr>\n<td>sub{c}{s}</td>\n<td>Subtract</td>\n</tr>\n<tr>\n<td>rsub{c}{s}</td>\n<td>Subtract with arguments reversed. The reason for the inclusion of this will become apparent soon int my next post.</td>\n</tr>\n<tr>\n<td>mul{s}</td>\n<td>Multiply</td>\n</tr>\n<tr>\n<td>mula{s}</td>\n<td>Multiply and accumulate. <code>res = res + a*b</code></td>\n</tr>\n<tr>\n<td>addsat{s}</td>\n<td>Saturating addition (Because ARM has it, and it seemed nifty)</td>\n</tr>\n<tr>\n<td>padd{32,16,8}</td>\n<td>Parallel addition</td>\n</tr>\n<tr>\n<td>psub{32,16,8}</td>\n<td>Parallel subtraction</td>\n</tr>\n<tr>\n<td>pmul{32,16,8}</td>\n<td>Parallel multiplication</td>\n</tr>\n<tr>\n<td> </td>\n<td> </td>\n</tr>\n<tr>\n<td>and{s}</td>\n<td>Bitwise and</td>\n</tr>\n<tr>\n<td>or{s}</td>\n<td>Bitwise or</td>\n</tr>\n<tr>\n<td>xor{s}</td>\n<td>Bitwise exclusive or</td>\n</tr>\n<tr>\n<td>nand{s}</td>\n<td>Bitwise not-and</td>\n</tr>\n<tr>\n<td>nor{s}</td>\n<td>Bitwise not-or</td>\n</tr>\n<tr>\n<td> </td>\n<td> </td>\n</tr>\n<tr>\n<td>cmp</td>\n<td>Comparison (<code>cmp rm op2</code> is an alias for <code>subs r0 rm op2</code>)</td>\n</tr>\n<tr>\n<td> </td>\n<td> </td>\n</tr>\n<tr>\n<td>max{,32,16,8}{s}</td>\n<td>Maximum</td>\n</tr>\n<tr>\n<td>min{,32,16,8}{s}</td>\n<td>Minimum</td>\n</tr>\n</tbody>\n</table>\n<p>The things in curly brackets are variants of the instruction. Instructions with the <code>{s}</code> variant mean they can set the condition flags based on their result, for example, <code>adds</code> can set the carry flag indicating that the addition had a carry out past the end of the result. Instructions with a <code>{c}</code> variant (ie <code>addc</code>) will perform their operation using the carry flag as an input, in whatever manner makes sense for the given instruction. For example, to add two 128 bit numbers in registers r10, 11 and r20, r21 with the result going into r30, r31, you might use something like:</p>\n<p></p><pre><code>adds r30, r10, r20; # Add, setting flags (ie carry)\naddc r31, r11, r21; # Add, using the previously set carried bit\n</code></pre><p></p>\n<p>Instructions with sizes after them, as you might expect, operate on differing sized inputs. <code>padd</code> can add 2×32bit numbers, 4×16bit, or 8×8bit.</p>\n<p>Then there’s the branching instructions. Since almost all instructions will be conditional, I only really need two kinds of branches. A standard branch, which covers all types of conditional branches automatically, and some kind of call instruction, which would not only modify the program counter, but also save the return address somewhere. There would also need to be its dual, a return instruction, which sets the program counter to the value that was previously saved.</p>\n<table>\n<caption id=\"branchinginstructions\">Branching instructions</caption>\n<colgroup><col />\n<col />\n</colgroup><thead>\n<tr>\n<th>Instruction</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>br</td>\n<td>Normal branch, <code>pc &lt;- src shiftL 3</code></td>\n</tr>\n<tr>\n<td>call</td>\n<td>Function call, otherwise known as branch and link on ARM. <code>ra &lt;- (pc shiftR 3)+1; pc &lt;- src shiftL 3</code></td>\n</tr>\n<tr>\n<td>ret</td>\n<td>Function return. <code>pc &lt;- ra shiftL 3</code></td>\n</tr>\n</tbody>\n</table>\n<p>There’s some odd stuff going on here, so I’ll explain. The shifts by three come from me wanting to ensure that instructions are always word aligned. Also doing this means that we can jump to constants 8 times further away than previously possible. In the call instruction, we save the address of the next instruction to the return address register, and set the program counter to the address given to the instruction. Each function is responsible for saving the ra if it’s going to make another function call, and restoring it before returning to its callee.</p>\n<p>So far we’ve got enough to be a sorta, kinda, maybe turing complete (assuming infinite registers…) machine, but there’s something quite important missing: memory access. This is something I have less planned out than the other forms of instructions, since I’m not sure what sort of features would be really useful, so more time will have to spent on this before I come up with a final design. What I have so far in terms of instructions are:</p>\n<table>\n<caption id=\"loadstoreinstructions\">Load/Store instructions</caption>\n<colgroup><col />\n<col />\n</colgroup><thead>\n<tr>\n<th>Instruction</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ld{,32,16,8}</td>\n<td>Load a {64,32,15,8}bit value from memory into a register. <code>rdest &lt;- mem[src]</code></td>\n</tr>\n<tr>\n<td>st{,32,16,8}</td>\n<td>Store   <code>mem[dst] &lt;- rsrc</code></td>\n</tr>\n<tr>\n<td>ldsp{,32,16,8}</td>\n<td>Load relative to stack pointer (Frame pointer?)</td>\n</tr>\n<tr>\n<td>stsp{,32,16,8}</td>\n<td>Store relative to stack pointer</td>\n</tr>\n<tr>\n<td>push{,32,16,8}</td>\n<td>Push a value onto the stack   <code>[sp] &lt;- rsrc; sp &lt;- sp - {8,4,2,1}</code></td>\n</tr>\n<tr>\n<td>pop{,32,16,8}</td>\n<td>Pop a value off the stack   <code>rdest &lt;- [sp]; sp &lt;- sp + {8,4,2,1}</code></td>\n</tr>\n</tbody>\n</table>\n<p>Here we have some pretty standard instruction, though the push and pop are maybe not in some RISC architectures because they’re easy to implement if you have direct access to the stack as a general purpose register. I haven’t decided whether I’ll do this or not, but I think it’s likely, since one day, it might be really useful to be able to swap stacks easily (Maybe it’s a possible security risk… ha, look at me worrying about security risks in a CPU that so far has to ability to run an operating system through lack of interrupts!). I’m also quite sure (thanks to shachaf on IRC) that my definitions for my <code>push</code> and <code>pop</code> instructions are wrong, there needs to be some addition to the stack pointer’s value before referencing it. I may also add a frame pointer to make life easier when working with function calls.</p>\n<p>I may also add instructions to save a range of registers to the stack and load them back in, like ARM has (though I have no idea how to implement that just yet)</p>\n<p>Lastly, there were some common operations, and some just plain cool ones I wanted to have available:</p>\n<table>\n<colgroup><col />\n<col />\n</colgroup><thead>\n<tr>\n<th>Instruction</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ctz</td>\n<td>Count trailing zeros</td>\n</tr>\n<tr>\n<td>ctlz</td>\n<td>Count leading zeros</td>\n</tr>\n<tr>\n<td>popcnt{,32,16,8}{a}</td>\n<td>Bit population count</td>\n</tr>\n<tr>\n<td>rpow2</td>\n<td>Round to next power of two</td>\n</tr>\n<tr>\n<td>extract</td>\n<td>Extract a range of bits res = op1[m..n] <code>shift</code> o. This might get removed, and made one of the instruction argument formats.</td>\n</tr>\n<tr>\n<td> </td>\n<td> </td>\n</tr>\n<tr>\n<td>mor</td>\n<td>See pages 11 and 12 (physical 16 and 17) of</td>\n</tr>\n<tr>\n<td>mxor</td>\n<td>https://docs.google.com/viewer?url=http://www-cs-faculty.stanford.edu/~uno/fasc1.ps.gz</td>\n</tr>\n</tbody>\n</table>\n<p>Many of these instructions are trivial to implement in hardware, but can take many many cycles to implement in software without proper support. I’m open to adding more of these if anyone can come up with some instructions they wish they had in their CPU of choice.</p>\n<p>The last thing I wanted to talk about before finishing off this first post was my ideas on what I would do about registers. I mentioned earlier that I likes the SPARC idea of having a constant zero register. After I came up with the idea of the <code>extract</code> instruction, realised that having a register of all 1 bits would also be useful for creating masks. Having this means you could do things like complement all the bits in a certain range like so:</p>\n<p></p><pre><code>xor r4, r4, r1[7:10]; # Use the constant 1's register to form a mask\n</code></pre><p></p>\n<p>I think this will turn out to be extremely useful in many situations.</p>\n<p>So far this is what I’ve come up with as a tentative plan for registers:</p>\n<table>\n<colgroup><col />\n<col />\n</colgroup><thead>\n<tr>\n<th>Register (alt name)</th>\n<th> </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>r0</td>\n<td>Constant zero register</td>\n</tr>\n<tr>\n<td>r1</td>\n<td>Constant <code>0xFFFFFFFFFFFFFFFF</code></td>\n</tr>\n<tr>\n<td>r2-r60</td>\n<td>General purpose (Maybe make r60 the frame pointer?)</td>\n</tr>\n<tr>\n<td>r61 (sp)</td>\n<td>Stack pointer</td>\n</tr>\n<tr>\n<td>r62 (ra)</td>\n<td>Return address</td>\n</tr>\n<tr>\n<td>r63 (ip)</td>\n<td>Instruction pointer</td>\n</tr>\n</tbody>\n</table>\n<p>I have some ideas about what the calling convention for this architecture should be, but that will have to wait for a later post.</p>\n<p>In the coming weeks and months I hope flesh out the details and design of this architecture, and hopefully you’ll find it fun to follow along. I plan to put everything up on github eventually, but I want something more concrete first. My next post will go into more detail about the instruction formats I’ve come up with, as well as my first adventure into Kansas Lava and creating a moderately complex adder/subtracter circuit. Until next time, happy hacking!</p>" "http://random.axman6.com/blog/?p=327" (20470 30194) new 17 nil nil ((title nil "Alex Mason: Exploring CPU design using Haskell") (guid ((isPermaLink . "true")) "http://random.axman6.com/blog/?p=327") (link nil "http://random.axman6.com/blog/?p=327") (description nil "<p>For some time now, I’ve been thinking about designing my own CPU architecture. Last week, I couldn’t get the thought out of my head, and I finally gave in and started to really think about what I’d want from a moderately simple CPU. I’ve decided that I’m going to document the process as I go, to hopefully force myself to finish this project; I’m often quite bad at starting something I find fun, and losing interest before I get to something I’d call complete. I am hoping to change this… I really hope a future potential employers don’t read this bit…</p>\n\n<p>My aim for this project is to have something I can actually run programs on, and maybe even get an LLVM backend written so I can compile basic C programs for it. I plan to implement all the hardware design using the Haskell library Kansas Lava, which allows for designing hardware which can be both simulated in Haskell (you can play with most circuits in GHCI, which is amazingly nice), as well as produce VHDL which can be synthesised and used to configure things like an FPGA. My goal is to have this design running on my <a href=\"http://www.digilentinc.com/Products/Detail.cfm?NavPath=2,400,792&amp;Prod=S3EBOARD\">Spartan-3E FPGA Starter Board</a>, or possibly one of <a href=\"http://www.digilentinc.com/Products/Detail.cfm?NavPath=2,400,819&amp;Prod=GENESYS\">these</a> (due to its 64bit wide memory interface). So, on to the design!</p>\n\n<p>Obviously it has to be RISC; my skills in hardware design are rusty enough without me having to figure out how to parse binary data in hardware, and besides, no one uses CISC any more these days, they only pretend. But just saying it’s RISC doesn’t get me far, and I only had a vague idea of what I wanted to be able to do. There were lots of features from ARM that I wanted:</p>\n\n<ul>\n<li><p>(Almost) all instructions are conditional, which can make for some very efficient code, both in terms of speed and space required.</p></li>\n<li><p>Lots of registers. Well, I guess 16 is lots, but I wanted more.</p></li>\n<li><p>Most arithmetic instructions have free shifts on their second argument, so there’s no need for dedicated shift instructions. This is pretty neat, and I decided I wanted more free stuff! We’ll get to that in my next post.</p></li>\n</ul>\n\n<p>There were also some other architectures that intrigued me, notably SPARC.</p>\n\n<ul>\n<li><p>A register set to constant zero, useful for simplifying many operations. Sometimes you want to perform a computation, but you only care about some of its side effects, such as whether it overflows. You can just use this register as the destination, and the result will be lost, but the side effects wont. Also there’s no need for a negation instruction, since it’s just subtracting x from zero.</p></li>\n<li><p>A register window. On function calls, the registers available to new function are not the same as those of calling function, but there is an overlap of 8 registers, which is where the first 8 (I think) function arguments are passed. When the function returns, the window slides back, and the result will have been passed back in what are now the top 8 registers. I decided this is not a feature I need, because… it seems complicated to implement, and the advantages in such a simple design as mine aren’t really worth it as far as I can tell.</p></li>\n<li><p>A branch delay slot. ARM also has this, but I’d forgotten about it during my initial thinking, and realised it would be a useful thing to have to make implementation easier. Essentially what this means is that when a branch instruction is executed, the instruction immediately following it is executed before the branch actually occurs. In a pipelined architecture, this can be quite useful, it can help avoid pipeline stalls. I think one of the main reasons for them existing is due to the extra time needed to fetch the next instruction in order to execute it. The CPU could either stall for a cycle (or more) waiting for it, or it could do some useful work in the mean time.</p></li>\n</ul>\n\n<p>So with this I got started. I decided, somewhat arbitrarily, that I wanted this to be a 64 bit architecture, with 64 bit wide instructions. This choice would allow me to have more registers than architectures like ARM. It also meant I had more room for constants in instructions, making a lot of tasks easier, and avoiding memory accesses for almost all constants (I’ve ended up with constants up to 36 bits). Initially I was going to go all out, and have 256 64bit registers, but I figured this was a bit of a waste, and I eventually decided (again, somewhat arbitrarily) on 64 registers (plus some special purpose ones).</p>\n\n<p>I also really wanted conditional execution of instructions, and almost all instructions will be conditional. For those not in the know, this means that the instruction’s result is only executed if certain condition flags are set. This can lead to some extremely efficient branchless code, where in the past you would have had to jump between the two clauses of an if-else statement, now you can just perform the comparison, and have all the instructions from each execute conditionally. Sure you waste a few cycles, but you won’t stall the pipeline, and it usually means having less instructions in the code.</p>\n\n<p>Next I started to think about what operations my CPU would need, and what I would like on top of the basics. A came up with a list of basic arithmetic instructions:</p>\n\n<table>\n<caption id=\"arithmeticinstructions\">Arithmetic instructions</caption>\n<colgroup><col />\n<col />\n</colgroup><thead>\n<tr>\n    <th>Instruction</th>\n    <th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n    <td>add{c}{s}</td>\n    <td>Addition of 64bit two’s complement numbers</td>\n</tr>\n<tr>\n    <td>sub{c}{s}</td>\n    <td>Subtract</td>\n</tr>\n<tr>\n    <td>rsub{c}{s}</td>\n    <td>Subtract with arguments reversed. The reason for the inclusion of this will become apparent soon int my next post.</td>\n</tr>\n<tr>\n    <td>mul{s}</td>\n    <td>Multiply</td>\n</tr>\n<tr>\n    <td>mula{s}</td>\n    <td>Multiply and accumulate. <code>res = res + a*b</code></td>\n</tr>\n<tr>\n    <td>addsat{s}</td>\n    <td>Saturating addition (Because ARM has it, and it seemed nifty)</td>\n</tr>\n<tr>\n    <td>padd{32,16,8}</td>\n    <td>Parallel addition</td>\n</tr>\n<tr>\n    <td>psub{32,16,8}</td>\n    <td>Parallel subtraction</td>\n</tr>\n<tr>\n    <td>pmul{32,16,8}</td>\n    <td>Parallel multiplication</td>\n</tr>\n<tr>\n    <td> </td>\n    <td> </td>\n</tr>\n<tr>\n    <td>and{s}</td>\n    <td>Bitwise and</td>\n</tr>\n<tr>\n    <td>or{s}</td>\n    <td>Bitwise or</td>\n</tr>\n<tr>\n    <td>xor{s}</td>\n    <td>Bitwise exclusive or</td>\n</tr>\n<tr>\n    <td>nand{s}</td>\n    <td>Bitwise not-and</td>\n</tr>\n<tr>\n    <td>nor{s}</td>\n    <td>Bitwise not-or</td>\n</tr>\n<tr>\n    <td> </td>\n    <td> </td>\n</tr>\n<tr>\n    <td>cmp</td>\n    <td>Comparison (<code>cmp rm op2</code> is an alias for <code>subs r0 rm op2</code>)</td>\n</tr>\n<tr>\n    <td> </td>\n    <td> </td>\n</tr>\n<tr>\n    <td>max{,32,16,8}{s}</td>\n    <td>Maximum</td>\n</tr>\n<tr>\n    <td>min{,32,16,8}{s}</td>\n    <td>Minimum</td>\n</tr>\n</tbody>\n</table>\n\n<p>The things in curly brackets are variants of the instruction. Instructions with the <code>{s}</code> variant mean they can set the condition flags based on their result, for example, <code>adds</code> can set the carry flag indicating that the addition had a carry out past the end of the result. Instructions with a <code>{c}</code> variant (ie <code>addc</code>) will perform their operation using the carry flag as an input, in whatever manner makes sense for the given instruction. For example, to add two 128 bit numbers in registers r10, 11 and r20, r21 with the result going into r30, r31, you might use something like:</p>\n\n<p></p><pre><code>adds r30, r10, r20; # Add, setting flags (ie carry)\naddc r31, r11, r21; # Add, using the previously set carried bit\n</code></pre><p></p>\n\n<p>Instructions with sizes after them, as you might expect, operate on differing sized inputs. <code>padd</code> can add 2×32bit numbers, 4×16bit, or 8×8bit.</p>\n\n<p>Then there’s the branching instructions. Since almost all instructions will be conditional, I only really need two kinds of branches. A standard branch, which covers all types of conditional branches automatically, and some kind of call instruction, which would not only modify the program counter, but also save the return address somewhere. There would also need to be its dual, a return instruction, which sets the program counter to the value that was previously saved.</p>\n\n<table>\n<caption id=\"branchinginstructions\">Branching instructions</caption>\n<colgroup><col />\n<col />\n</colgroup><thead>\n<tr>\n    <th>Instruction</th>\n    <th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n    <td>br</td>\n    <td>Normal branch, <code>pc &lt;- src shiftL 3</code></td>\n</tr>\n<tr>\n    <td>call</td>\n    <td>Function call, otherwise known as branch and link on ARM. <code>ra &lt;- (pc shiftR 3)+1; pc &lt;- src shiftL 3</code></td>\n</tr>\n<tr>\n    <td>ret</td>\n    <td>Function return. <code>pc &lt;- ra shiftL 3</code></td>\n</tr>\n</tbody>\n</table>\n\n<p>There’s some odd stuff going on here, so I’ll explain. The shifts by three come from me wanting to ensure that instructions are always word aligned. Also doing this means that we can jump to constants 8 times further away than previously possible. In the call instruction, we save the address of the next instruction to the return address register, and set the program counter to the address given to the instruction. Each function is responsible for saving the ra if it’s going to make another function call, and restoring it before returning to its callee.</p>\n\n<p>So far we’ve got enough to be a sorta, kinda, maybe turing complete (assuming infinite registers…) machine, but there’s something quite important missing: memory access. This is something I have less planned out than the other forms of instructions, since I’m not sure what sort of features would be really useful, so more time will have to spent on this before I come up with a final design. What I have so far in terms of instructions are:</p>\n\n<table>\n<caption id=\"loadstoreinstructions\">Load/Store instructions</caption>\n<colgroup><col />\n<col />\n</colgroup><thead>\n<tr>\n    <th>Instruction</th>\n    <th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n    <td>ld{,32,16,8}</td>\n    <td>Load a {64,32,15,8}bit value from memory into a register. <code>rdest &lt;- mem[src]</code></td>\n</tr>\n<tr>\n    <td>st{,32,16,8}</td>\n    <td>Store   <code>mem[dst] &lt;- rsrc</code></td>\n</tr>\n<tr>\n    <td>ldsp{,32,16,8}</td>\n    <td>Load relative to stack pointer (Frame pointer?)</td>\n</tr>\n<tr>\n    <td>stsp{,32,16,8}</td>\n    <td>Store relative to stack pointer</td>\n</tr>\n<tr>\n    <td>push{,32,16,8}</td>\n    <td>Push a value onto the stack   <code>[sp] &lt;- rsrc; sp &lt;- sp - {8,4,2,1}</code></td>\n</tr>\n<tr>\n    <td>pop{,32,16,8}</td>\n    <td>Pop a value off the stack   <code>rdest &lt;- [sp]; sp &lt;- sp + {8,4,2,1}</code></td>\n</tr>\n</tbody>\n</table>\n\n<p>Here we have some pretty standard instruction, though the push and pop are maybe not in some RISC architectures because they’re easy to implement if you have direct access to the stack as a general purpose register. I haven’t decided whether I’ll do this or not, but I think it’s likely, since one day, it might be really useful to be able to swap stacks easily (Maybe it’s a possible security risk… ha, look at me worrying about security risks in a CPU that so far has to ability to run an operating system through lack of interrupts!). I’m also quite sure (thanks to shachaf on IRC) that my definitions for my <code>push</code> and <code>pop</code> instructions are wrong, there needs to be some addition to the stack pointer’s value before referencing it. I may also add a frame pointer to make life easier when working with function calls.</p>\n\n<p>I may also add instructions to save a range of registers to the stack and load them back in, like ARM has (though I have no idea how to implement that just yet)</p>\n\n<p>Lastly, there were some common operations, and some just plain cool ones I wanted to have available:</p>\n\n<table>\n<colgroup><col />\n<col />\n</colgroup><thead>\n<tr>\n    <th>Instruction</th>\n    <th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n    <td>ctz</td>\n    <td>Count trailing zeros</td>\n</tr>\n<tr>\n    <td>ctlz</td>\n    <td>Count leading zeros</td>\n</tr>\n<tr>\n    <td>popcnt{,32,16,8}{a}</td>\n    <td>Bit population count</td>\n</tr>\n<tr>\n    <td>rpow2</td>\n    <td>Round to next power of two</td>\n</tr>\n<tr>\n    <td>extract</td>\n    <td>Extract a range of bits res = op1[m..n] <code>shift</code> o. This might get removed, and made one of the instruction argument formats.</td>\n</tr>\n<tr>\n    <td> </td>\n    <td> </td>\n</tr>\n<tr>\n    <td>mor</td>\n    <td>See pages 11 and 12 (physical 16 and 17) of</td>\n</tr>\n<tr>\n    <td>mxor</td>\n    <td>https://docs.google.com/viewer?url=http://www-cs-faculty.stanford.edu/~uno/fasc1.ps.gz</td>\n</tr>\n</tbody>\n</table>\n\n<p>Many of these instructions are trivial to implement in hardware, but can take many many cycles to implement in software without proper support. I’m open to adding more of these if anyone can come up with some instructions they wish they had in their CPU of choice.</p>\n\n<p>The last thing I wanted to talk about before finishing off this first post was my ideas on what I would do about registers. I mentioned earlier that I likes the SPARC idea of having a constant zero register. After I came up with the idea of the <code>extract</code> instruction, realised that having a register of all 1 bits would also be useful for creating masks. Having this means you could do things like complement all the bits in a certain range like so:</p>\n\n<p></p><pre><code>xor r4, r4, r1[7:10]; # Use the constant 1's register to form a mask\n</code></pre><p></p>\n\n<p>I think this will turn out to be extremely useful in many situations.</p>\n\n<p>So far this is what I’ve come up with as a tentative plan for registers:</p>\n\n<table>\n<colgroup><col />\n<col />\n</colgroup><thead>\n<tr>\n    <th>Register (alt name)</th>\n    <th> </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n    <td>r0</td>\n    <td>Constant zero register</td>\n</tr>\n<tr>\n    <td>r1</td>\n    <td>Constant <code>0xFFFFFFFFFFFFFFFF</code></td>\n</tr>\n<tr>\n    <td>r2-r60</td>\n    <td>General purpose (Maybe make r60 the frame pointer?)</td>\n</tr>\n<tr>\n    <td>r61 (sp)</td>\n    <td>Stack pointer</td>\n</tr>\n<tr>\n    <td>r62 (ra)</td>\n    <td>Return address</td>\n</tr>\n<tr>\n    <td>r63 (ip)</td>\n    <td>Instruction pointer</td>\n</tr>\n</tbody>\n</table>\n\n<p>I have some ideas about what the calling convention for this architecture should be, but that will have to wait for a later post.</p>\n\n<p>In the coming weeks and months I hope flesh out the details and design of this architecture, and hopefully you’ll find it fun to follow along. I plan to put everything up on github eventually, but I want something more concrete first. My next post will go into more detail about the instruction formats I’ve come up with, as well as my first adventure into Kansas Lava and creating a moderately complex adder/subtracter circuit. Until next time, happy hacking!</p>") (pubDate nil "Fri, 06 Jul 2012 05:21:54 +0000"))) ("David McGillicuddy: First prototype" "<div style=\"text-align: left;\" dir=\"ltr\"><span style=\"background-color: white;\">The first prototype of the Scoutess build bot has been finished on my machine! Currently the main advantage of using Scoutess over, say, cabal-dev is that Scoutess gives you absolute control over which versions of the dependencies to use and their location to allow you to test more comprehensively.</span><br /><br />Now of course it's time for a whole load of testing, debugging and code cleaning in order to turn my draft into a working and polished program. There are lots of further expansions planned including giving support for a whole host of code repositories, detailed build reports and automation.<br /><br />After I'm satisfied with the quality of the code my two next tasks will be:<br /><br /><ul style=\"text-align: left;\"><li>ghc-pkg and cabal are invoked with the function <span style=\"font-family: 'Courier New', Courier, monospace;\">System.Cmd.system</span> which is not enough for our needs as the closest thing to error reporting that it allows for is checking the ExitCode - I will probably refactor this to use <span style=\"font-family: 'Courier New', Courier, monospace;\">System.Process</span> instead.</li><li>Once we have access to stdout from these calls we can start to produce build reports detailing exactly what happened. I'm not really sure what these reports should consist of and what information is needed, I'll discuss this with Jeremy and Alp.</li></ul></div><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/4503472289464918478-7584045372924006755?l=projectscoutess.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>" "http://projectscoutess.blogspot.com/2012/07/first-prototype.html" (20469 51546) new 18 nil nil ((title nil "David McGillicuddy: First prototype") (guid ((isPermaLink . "false")) "tag:blogger.com,1999:blog-4503472289464918478.post-7584045372924006755") (link nil "http://projectscoutess.blogspot.com/2012/07/first-prototype.html") (description nil "<div style=\"text-align: left;\" dir=\"ltr\"><span style=\"background-color: white;\">The first prototype of the Scoutess build bot has been finished on my machine! Currently the main advantage of using Scoutess over, say, cabal-dev is that Scoutess gives you absolute control over which versions of the dependencies to use and their location to allow you to test more comprehensively.</span><br /><br />Now of course it's time for a whole load of testing, debugging and code cleaning in order to turn my draft into a working and polished program. There are lots of further expansions planned including giving support for a whole host of code repositories, detailed build reports and automation.<br /><br />After I'm satisfied with the quality of the code my two next tasks will be:<br /><br /><ul style=\"text-align: left;\"><li>ghc-pkg and cabal are invoked with the function <span style=\"font-family: 'Courier New', Courier, monospace;\">System.Cmd.system</span> which is not enough for our needs as the closest thing to error reporting that it allows for is checking the ExitCode - I will probably refactor this to use <span style=\"font-family: 'Courier New', Courier, monospace;\">System.Process</span> instead.</li><li>Once we have access to stdout from these calls we can start to produce build reports detailing exactly what happened. I'm not really sure what these reports should consist of and what information is needed, I'll discuss this with Jeremy and Alp.</li></ul></div><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/4503472289464918478-7584045372924006755?l=projectscoutess.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>") (pubDate nil "Thu, 05 Jul 2012 17:05:30 +0000") (author nil "noreply@blogger.com (David McGillicuddy)"))) ("Well-Typed.Com: Parallel Haskell Digest 11" "<p>It's time for another Parallel Haskell Digest! Unfortunately, this may\njust be our last one, at least within the context of the Parallel GHC\nproject. That said, we may as a community be at the very beginnings of\nHaskell as <em>the</em> language of choice for your parallel and concurrent\nneeds. Maybe we need to keep something like the Digest going to help our\nlittle FP monster through its infancy? Any volunteers in the community?\nIf you're interested in picking up the torch, please give us a shout!</p><p>Otherwise, if you can't take on a (perhaps rotating) digest commitment,\nbut still want to help, would you be kind enough to fill out a small\n<a href=\"http://goo.gl/bP2fn\">survey</a> on the digest? There are just five\nquestions on it, plus a feedback form. Anything you can say will help\nthose of us in the Secret Haskell Propaganda Commitee to fine tune our\nefforts:</p><p><a href=\"http://goo.gl/bP2fn\">Parallel Haskell Digest Survey</a></p><p>It's been a fantastic year for me, working on the Parallel GHC project,\nlearning about all sorts of neat ideas and technologies (as a basic\nparallel-naive Haskeller), and trying to reflect them back in a way that\nhopefully helps the broader community. Thanks to all of you in the\nparallel Haskell world first for cranking out all this great stuff for\nus to use, and second for your patience and support. Thanks especially\nto my follow Well-Typed-ers for all the fun chats, the feedback on\ndrafts, and help getting up to speed.</p><p>One last thing before signing off as your Parallel Haskell Digester.\nWhile the digest may be coming to an end, there will at least be one\nencore! It turns out we had so much to say in our last word of the\nmonth, that we'll have to put in in a follow-up posting. In the\nmeantime, we'll just leave you with a little teaser…</p><h3> News</h3><ul><li><p><a href=\"http://www.haskell.org/pipermail/haskell-cafe/2012-June/101579.html\">Announce: Haskell Platform 2012.2.0.0</a>\n(3 Jun)</p>\n<p>The new Haskell Platform is out! If you've been waiting for\nHaskell Platform before moving on GHC 7.4, now's a great time to\nupgrade. Of particular interest to parallel Haskellers, this latest\nGHC offers better profiling flags, multicore profiling, vastly\nimproved DPH, event logging [allows ThreadScope spark profiling],\nand more convenient RTS flags.</p></li></ul><ul><li><p><a href=\"http://www.haskell.org/pipermail/haskell-cafe/2012-June/101632.html\">Introducing FP Complete</a>\n(6 Jun)</p>\n<p>You might have Bartosz Milewski around. If not, have a look at\nthe\n<a href=\"http://fpcomplete.com/the-downfall-of-imperative-programming/\">Downfall of Imperative Programming</a>.\nBartosz posted a quick message introducing himself to the community\nalong with the new company FP Complete, which aims to commercialise\nHaskell. Bartosz believes that “now is the right time for Haskell to\nbecome a strong software industry player, especially that functional\nprogramming is being widely recognized as the answer to the recent\nmulticore and GPU explosion.” We'll hopefully find out more about FP\nComplete have in mind as their plans stabilise a bit.</p></li></ul><ul><li><p><a href=\"http://functionaljobs.com/jobs/111-3-year-postgraduate-rd-position-at-era7-bioinformatics\">3 year Bioinformatics R&amp;D position in Granada, Spain</a></p>\n<p>Love Functional Programming and concurrency? If you are a\nCS/Math/IT graduate without a PhD, and have had no more than 4 years\nof research experience, and have not lived in Spain for more than 12\nmonths (within the last 3 years), Era7 has a position for you! You'll\nbe hacking Scala and using AWS for everything. So if Akka is the sort\nof thing you're into, this could be the job for you.</p></li></ul><h3> Word of the month (teaser!)</h3><p>The word of the month series has given us a chance to survey the arsenal\nof Haskell parallelism and concurrency constructs:</p><ul><li>some low level foundations (sparks and threads),</li><li>three ways to do parallelism (parallel arrays, strategies, dataflow),</li><li>and some concurrency abstractions (locks, transactions, channels)</li></ul><p>The Haskell approach has been to explicitly recognise the vastness of\nthe parallelism/concurrency space, in other words, to provide a\nmultitude of right tools for a multitude of right jobs. Better still,\nthe tools we have are largely interoperable, should we find ourselves\nwith jobs that don't neatly fit into a single category.</p><p>The Haskell of 2012 may be in a great place for parallelism and\nconcurrency, but don't think this is the end of the story! What we've\nseen so far is only a snapshot of the technology as it hurtles through\nthe twenty-tens (How quaint are we, Future Haskeller?). While we can't\nsay what exactly the future will bring, we can look at one of the\ndirections that Haskell might branch into in the coming decade. The\nseries so far has focused on things you might do with a single computer,\nusing parallelism to speed up your software, or using concurrency\nabstractions to preserve your sanity in the face of non-determinism. But\nnow what if you have more than one computer?</p><p>Our final word of the month is <em>actor</em>. Actors are not specific to\ndistributed programming; they are really more of a low level concurrency\nabstraction on a par with threads. And they certainly aren't new either.\nThe actor model has been around since the early 70s at least, and has\nbeen seriously used for distributed programming since the late 80s with\nErlang. Can you guess where this word of the month is going? We have a\nbit more to say about it shortly, so while this is the last Parallel\nHaskell Digest, watch this space for the final word of the month :-)</p><h3> Parallel GHC project update</h3><p>Our work on the\n<a href=\"https://github.com/haskell-distributed/distributed-process\">distributed-process</a>\nimplementation of Cloud Haskell continues apace. We're almost there,\nhaving implemented most of the API described in the original\n<a href=\"http://research.microsoft.com/en-us/um/people/simonpj/papers/parallel/remote.pdf\">Epstein <em>et al</em></a>\npaper, except for node configuration and initialisation. We are very\nexcited to be getting this out of the door soon and into your hands. In\nfact, we've even submitted a proposal to present this work at the\nupcoming\n<a href=\"http://www.haskell.org/haskellwiki/HaskellImplementorsWorkshop\">Haskell Implementors Workshop</a>;\nso hopefully you'll be able to join Duncan and Edsko in Copenhagen and\ncatch up on the Cloud Haskell news.</p><p>As for ThreadScope, we last mentioned that we were working to make use\nof information from hardware performance counters (specifically, Linux\nPerf Events). This took a bit more work and trickier GHC patches than\nwe had anticipated, but it does seem to be in order now and we are now\nin the testing phase for the next release. The next ThreadScope release\nwill also include the use of heap statistics from the (eventual) GHC 7.6\nRTS, and some user interface enhancements suggested by our users.</p><h3> Tutorials</h3><ul><li><p><a href=\"https://plus.google.com/107890464054636586545/posts/LThYZELANCg\">Parallel and Concurrent Haskell Course slides</a></p>\n<p>Looks like the recent Summer School was a great time for all! We\nhad expert Haskellers talking parallelism and concurrency, a chateau,\ngood food, and lots of wine. Did you miss out? We can't help with the\nwine, but if you'd like to get in on some of the parallel action,\ncheck out Simon's slides. There are seven lectures in all, and some\n<a href=\"http://community.haskell.org/~simonmar/lab-exercises-cadarache.pdf\">lab exercises</a>\nto go with them:</p>\n<ol>\n<li>Basic pure parallelism</li>\n<li>The Par Monad</li>\n<li>Basic concurrency</li>\n<li>Software Transactional Memory</li>\n<li>Concurrent network servers</li>\n<li>Distributed programming</li>\n<li>GPU programming with Accelerate</li>\n</ol></li></ul><ul><li><p><a href=\"http://dmwit.com/gtk2hs/\">Threading and Gtk2Hs</a></p>\n<p>“So you're writing a Gtk2Hs application and you need to do some\nthreading.” Daniel Wagner has just the tutorial for you. The post\ncomes in two parts. First Daniel gives it all away with two keys\npoints (and a simple concrete example):</p>\n<ol><li>Make all Gtk calls from the main thread. If other threads need to\naffect the interface, use <code>postGUIAsync</code> or <code>postGUISync</code> to send\nyour code to the main thread.</li>\n<li>Link your program with the threaded runtime system by passing GHC\nthe <code>-threaded</code> option at link time.</li></ol>\n<p>For readers who want to learn more, Daniel then goes into much\nmore depth: the things that threading hard both in its own right and\nwhen working in Gtk2Hs in particular; the perils of using <code>unsafe</code> FFI\nimports (as opposed to <code>safe</code> ones); a peek into the Gtk2Hs guts\nshowing its interaction with Gtk and glib; and finally, some of the\npossible pitfalls, wrong things Daniel believed when he started and\nwhat he now believes instead.</p></li></ul><h3> Blogs and packages</h3><ul><li><p><a href=\"http://www.haskell.org/pipermail/haskell-cafe/2012-June/101808.html\">GHC-7.4.2-Eden - Parallel Haskell on multicore and cluster systems</a>\n(17 Jun)</p>\n<p>There is more than one way to do parallelism and distributed\nprogramming in Haskell. Mischa Dieterle announced a new release of\n<a href=\"http://www.mathematik.uni-marburg.de/~eden\">Eden</a>, an extension of\nHaskell which is “tailored for distributed systems but works equally\nwell on multicore architectures”.</p>\n<p>These extensions consist of a small number of constructs for\nworking with <em>processes</em> (processes work within disjoint address\nspaces and do not share any data). Eden provides automatic process\nhandling to reduce the amount of low-level detail needed to implement\nparallel algorithms, but also allows for the explicit control you may\nneed to get good performance.</p>\n<p>You can either install the full Eden system including the\ncompiler (GHC with the Eden parallel runtime system), libraries and\ntools; or just install a thread simulation by using a standard GHC to\ninstall the libraries and tools off Hackage.</p></li></ul><ul><li><p><a href=\"http://apfelmus.nfshost.com/blog/2012/06/07-forklift.html\">Forklift - a pattern for performing monadic actions in a worker thread</a> (7 Jun)</p>\n<p>Apfelmus recently noticed a recurring applied Haskell puzzle: how\ndo you combine two IO-wrapping monads that don't lend themselves to\nbeing combined via monad transformers? This arose in the context of\nShae Erisson's Summer of Code Project (Web based GHCi) which uses\nwebserver and interpreter packages providing monads of their own. A\ntypical approach would be to run separate threads and have the two\ncommunicate using something like an <code>MVar</code>; but each time reinvent\nthis solution, we end up creating some mini communication protocol\nspecific to the task.</p>\n<p>Apfelmus suggests a more generic variant of this approach, which\nhe calls the “forklift pattern” because it consists in <em>forking</em> a\nworker thread to <em>lift</em> arbitrary monadic actions into IO.</p>\n<pre>data ForkLift m = ForkLift  requests :: Chan (m ())\ncarry :: MonadIO m =&gt; ForkLift m -&gt; m a -&gt; IO a</pre>\n<p>The worker thread maintains a queue of requests. To run an\narbitrary action of type <code>m a</code>, you “carry” it over into <code>IO</code> with a\nhelper function that wraps it up in an <code>MVar</code> sandwich, sticks it on\nthe queue, and reads the <code>MVar</code> to get the result back. See Apfelmus's\nposting to see this cute trick in action.</p></li></ul><ul><li><p><a href=\"http://neilmitchell.blogspot.co.uk/2012/06/flavours-of-mvar_04.html\">The Flavours of MVar</a> (4 Jun)</p>\n<p>Neil Mitchell finds that that the flexibility of the <code>MVar</code> can\nleave some room for confusion: both taking from and putting to an\n<code>MVar</code> one can block, whereas it is likely that you only expect it to\nblock on one of those. In a quick and practical tutorial, Neil whips\nthrough three <code>MVar</code> patterns that he tends to use regularly:</p>\n<dl><dt>lock</dt><dd>guaranteed single-threaded access to some resource</dd>\n<dt>var</dt><dd>thread-safe mutable variables that never block on put</dd>\n<dt>barrier</dt><dd>starts empty, is written to once, then read one or more\ntimes.</dd></dl>\n<p>Building on these Neil shows a couple of examples of how one\nmight go one to combine these MVar uses to to get higher level\nabstractions: an action that can be invoked multiple times but runs at\nmost once, and a queue that collects messages individually and\ndelivers them in bulk. Check his post out, and maybe see why\n<code>join  $ modifyMVar …</code> is becoming one of his favourite idioms.</p></li></ul><ul><li><p><a href=\"http://tumblr.justtesting.org/post/24399176080/being-more-clever-about-vectorising-nested-data\">Being more clever about vectorising nested data parallelism</a> (4 Jun)</p>\n<p>Manuel Chakravarty tumbles: Our new draft paper\n<a href=\"http://www.cse.unsw.edu.au/~chak/papers/KCLLP12.html\">on Vectorisation Avoidance</a>\nintroduces a novel program analysis for nested data parallelism that\nlets us avoid vectorising purely scalar subcomputations. It includes a\nset of benchmark kernels that suggest that vectorisation avoidance\nimproves runtimes over merely using array stream fusion.</p></li></ul><ul><li><p><a href=\"http://tumblr.justtesting.org/post/24398752358/repa-3-more-control-over-array-representations-with\">Repa 3: more control over array representations with indexed types</a> (4 Jun)</p>\n<p>Another paper from the UNSW parallel Haskellers: We have got a\nnew draft paper on\n<a href=\"http://www.cse.unsw.edu.au/~chak/papers/LCKP12.html\">Guiding Parallel Array Fusion with Indexed Types</a>.\nIt describes the design and use of the 3rd generation Repa API, which\nuses type indices to give the programmer control over the various\nparallel array representations. The result are clearer programs that\nthe compiler can more easily optimise. The implementation of Repa 3 is\nready for use on Hackage in the repa package.</p></li></ul><ul><li><p><a href=\"http://www.haskell.org/pipermail/haskell-cafe/2012-May/101313.html\">Protocol Buffers 2.0.7</a>\n(19 May)</p>\n<p>Chris Kuklewicz is back! In the last digest, some folks in the\ncommunity were looking for him because they had patches for the\nprotocol buffers package family. Chris has not only resurfaced, but\nreleased an update to the packages, making them compile with GHC 7.4.1\nand handle missing package names better.</p></li></ul><ul><li><p><a href=\"http://breaks.for.alienz.org/blog/2012/05/20/generics-and-protocol-buffers/\">Generics and Protocol Buffers</a>\n(20 May)</p>\n<p>Nathan Howell thinks the protocol-buffers package is great:\nfull-featured, well-tested, no complaints about performance. However,\nmaintaining <code>.proto</code> files is “more than just a chore”. The <code>hprotoc</code>\ntool could help but is trickyp to integrated properly into the build\nsystem. Maybe there's another way, one which does not involve separate\nfiles or build tools. Have a look at his\n<a href=\"https://gist.github.com/2757253\">GitHub Gist</a> for a promising\nalternative solution using the\n<a href=\"http://hackage.haskell.org/package/type-level\">type-level</a>\nlibrary.</p></li></ul><ul><li><p><a href=\"http://www.haskell.org/pipermail/haskell-cafe/2012-June/101567.html\">SafeSemaphore</a>\n(2 Jun)</p>\n<p>Chris Kuklewicz has a problem, a solution, and a plea for\nhelp.</p>\n<ul><li>Problem: Control.Concurrent.QSem (and QSemN, SampleVar) are\n<a href=\"http://hackage.haskell.org/trac/ghc/ticket/3160\">broken</a> (they\nprovide no exception safety).</li>\n<li>Solution: his\n<a href=\"http://hackage.haskell.org/package/SafeSemaphore/\">SafeSemaphore</a>\npackage, just updated to 0.90, with several safer alternatives.</li>\n<li>Plea: Would it be possible to replace parts of GHC with\nSafeSemaphore, so as to unbreak the Haskell Platform?</li></ul>\n<p>It looks like Chris' plea has been heard, as Simon Marlow has\nrecently suggested importing the STM version for GHC 7.6.1</p></li></ul><ul><li><p><a href=\"http://hackage.haskell.org/package/Paraiso\">Paraiso</a> (7\nJun)</p>\n<p>Kazu <span style=\"font-variant: small-caps;\">Yamamoto</span>\n<a href=\"http://www.haskell.org/pipermail/haskell-cafe/2012-June/101649.html\">announced</a>\na couple of new parallel libraries from Japan. The first is Paraiso\n(by Takayuki <span style=\"font-variant: small-caps;\">Muranushi</span> of\nMonadius fame), a high-level language for implementing explicit\npartial-differential equations solvers on supercomputers as well as today's\nadvanced personal computers.</p></li></ul><ul><li><p><a href=\"http://hackage.haskell.org/package/GTALib\">GTALib</a> (7 Jun)</p>\n<p>Also from the Japan Parallel Haskell workld, is GTALib by Kento\n<span style=\"font-variant: small-caps;\">Emoto</span>.\nIt provides core functionalities of the GTA programming\nframework described in the paper\n<a href=\"http://research.nii.ac.jp/~hu/pub/esop12.pdf\">Generate, Test, and Aggregate A Calculation-based Framework for Systematic Parallel Programming with MapReduce</a></p></li></ul><h3> Mailing lists</h3><ul><li><p><a href=\"http://www.haskell.org/pipermail/haskell-cafe/2012-May/101318.html\">How to write Source for TChan working with LC.take?</a>\n(20 May)</p>\n<p>Hiromi <span style=\"font-variant: small-caps;\">Ishii</span> is writing a Data.Conduit <code>Source</code> that supplies its\nvalues from a <code>TChan</code>. He has three versions, one using the raw Pipe\nconstructors directly, one using <code>sourceState</code>, and one using <code>yield</code>.\nThe `yield' version does not seem to work as expected. At first this\nseemed like an unfortunate necessity, but after putting some thought\ninto it, Michael Snoyman proposed some\n<a href=\"http://www.yesodweb.com/blog/2012/05/next-conduit-changes\">modifications to conduit's await/yield</a>\nfunctions, which should allow Hiromi to write things in the intuitive\nway.</p></li></ul><ul><li><p><a href=\"http://www.haskell.org/pipermail/haskell-cafe/2012-May/101359.html\">Parallel cooperative multithreading?</a>\n(22 May)</p>\n<p>Benjamin Ylvisaker was wondering if it'd be possible to implement\nsomething like\n<a href=\"http://www.cs.hmc.edu/~stone/papers/ocm-unpublished.pdf\">Observationally Cooperative Multithreading</a>\n(OCM) in Haskell. The paper discusses Lua, C, and C++ implementations.\nBen thinks that Haskell would be an awesome fit such a framework. The\npremise behind OCM is that cooperative concurrency can be easier than\npreemptive concurrency, because you can use reason sequentially\nbetween invocations of pause/yield/wait. Historically, it has only\nworked on single processors, because the blocks of code between the\np/y/w calls need to be run atomically. Recent research means we know\nmore about how to efficiently run blocks of code atomically, so maybe\ncooperative concurrency can make a comeback?</p>\n<p>Ryan Newton thinks the comeback is indeed happening. He points in\nthe Haskell world to monad-par's use of ConT as an example of a a\nframework in which tasks cooperatively yield control whenever their\ndesired input data is not yet available. Mario Blažević has also\nthought about cooperative concurrency in Haskell, particularly in\ncontext of his monad-coroutine library; however, he found no speedups\nwhen he added support for running multiple co-routines in parallel.\nKetil Malde is sceptical that the proposed approach would be better\nthan using STM. He wonders if the paper's critique of STM applies to\nimplementations that keep transactional data are segregated by the\ntype system.</p></li></ul><ul><li><p><a href=\"http://www.haskell.org/pipermail/haskell-cafe/2012-May/101454.html\">How to translate Repa 2 program to efficient Repa 3 code?</a>\n(26 May)</p>\n<p>Michael Serra posted a StackOverflow thread asking about the\n<a href=\"http://stackoverflow.com/questions/10747079/what-are-the-key-differences-between-the-repa-2-and-3-apis\">differences between Repa 2 and 3 APIs</a>.\nHe has some simple image convolution tests with which run fast enough\nin Repa 2 with judicious use of <code>force</code>. But when translating the\ntests to Repa 3, he can't quite work out how to get the same kind of\nperformance. See the thread on StackOverflow for more details. In\nshort, <code>computeP</code> is the new <code>force</code>.</p></li></ul><ul><li><p><a href=\"http://www.haskell.org/pipermail/haskell-cafe/2012-June/101573.html\">Is Repa suitable for boxed arrays?...</a>\n(3 Jun)</p>\n<p>Stuart Hungerford needs to build a 2D Array of boxed Haskell\nvalues. He's attracted to Repa, but couldn't work out from the\ndocumentation if it would work with arbitrary values. Moreover,\ngetting the examples to work. Ben Lippmeier replies that it should\nwork (the array type would be something like <code>Array V DIM2 Float</code>).\nThe documentation is out of date (it's for Repa 2 and Repa 3 is\ndifferent). Until somebody gets a chance to update the documentation,\ntry the\n<a href=\"http://www.cse.unsw.edu.au/~benl/papers/guiding/guiding-Haskell2012-sub.pdf\">Repa 3 paper</a>,\nBen just submitted for Haskell Symposium 2012.</p></li></ul><ul><li><p><a href=\"https://groups.google.com/d/msg/parallel-haskell/A6mXn1Wv-KY/-63SHoGU31wJ\">Status and roadmap for Cloud Haskell?</a>\n(19 May)</p>\n<p>Ben Lee is very interested in the our work at Well-Typed on\n<code>distributed-process</code>, the followup implementation of Cloud Haskell.\nHow's progress? As mentioned in the Parallel GHC news above, we're\nalmost there! Edsko de Vries says that so far we've been focusing on\ntwo aspects of the new implementation, the design of the transport\nAPI, and a robust TCP implementation to sit on top of it. These two\nparts are nearly done. Meanwhile, we've been laying down\n<a href=\"https://github.com/haskell-distributed/distributed-process/wiki\">some documentation</a>\non our GitHub project wiki. If you want to help out, we'd love if you\ncould play with the TCP transport, and try to write some transports of\nyour own.</p></li></ul><ul><li><p><a href=\"https://groups.google.com/d/msg/parallel-haskell/Ykm3QJT12yw/8HpnoP8qsugJ\">`anyP' in DPH?</a>\n(21 May)</p>\n<p>Rob Stewart is trying to find the <code>anyP</code> function for Data\nParallel Haskell. Ben Lippmeier says that DPH is in flux at the moment\nand that the current user facing API can be found in\n<a href=\"http://hackage.haskell.org/package/dph-lifted-vseg\">dph-lifted-vseg</a>\nwhich provides an <code>orP</code> function.</p></li></ul><ul><li><p><a href=\"https://plus.google.com/109566665911385859313/posts/FAmNTExSLtz\">Everybody should write everything in Go?</a>\n(28 May)</p>\n<p>Ryan Hayes posted a small <a href=\"https://gist.github.com/3010649\">snippet of Go</a> showing how friendly he\nfound it for writing concurrent programs, “No pthread... not stupid\ncrap... just works!” The program seems to create 4 threads which print out 1\nto 100 each. What do Haskellers think? See the comments for some discussion\nbetween Haskell people like Simon Marlow, and some folks in the Go\ncommunity about our respective approaches to the problem.</p></li></ul><ul><li><p><a href=\"http://www.haskell.org/pipermail/libraries/2012-June/017892.html\">Proposal: Control.Concurrent.Async</a>\n(8 June)</p>\n<p>Deep into writing his book on Parallel Haskell, Simon Marlow\nproposes a higher-level concurrency API for the base package. The\nproposed\n<a href=\"http://community.haskell.org/~simonmar/async-stm/Control-Concurrent-Async.html\">Control.Concurrent.Async</a>\nwould help make sure that exceptions in child threads are dealt with\n(returned or passed up), and that threads aren't accidentally left\nrunning in the background.</p>\n<p>A few Haskellers commented that they would prefer that base be\nkept minimal as possible, and have counter-proposed making it a\npackage to be included in the Haskell Platform instead. See the thread\nfor some discussion on the API itself.</p></li></ul><h3> StackOverflow and Reddit</h3><ul><li><a href=\"http://stackoverflow.com/questions/10747079/what-are-the-key-differences-between-the-repa-2-and-3-apis\">What are the key differences between the Repa 2 and 3 APIs?</a></li><li><a href=\"http://stackoverflow.com/questions/10724946/does-par-create-another-thread\">Does <code>par</code> create another thread?</a></li><li><a href=\"http://stackoverflow.com/questions/10557055/how-to-improve-performence-of-this-haskell-code\">How to improve performence of this Haskell code?</a></li><li><a href=\"http://stackoverflow.com/questions/10166640/haskell-why-was-par-defined-the-way-it-was\">Haskell: Why was <code>par</code> defined the way it was?</a></li><li><a href=\"http://stackoverflow.com/questions/11073610/method-for-capturing-monad-stack-state\">Method for capturing monad stack state</a></li><li><a href=\"http://stackoverflow.com/questions/10871303/killing-a-thread-when-mvar-is-garbage-collected\">Killing a thread when MVar is garbage collected</a></li><li><a href=\"http://stackoverflow.com/questions/10627980/improving-simulation-performance-via-concurrency\">Improving simulation performance via concurrency</a></li><li><a href=\"http://stackoverflow.com/questions/10567223/haskell-framework-to-parallelize-non-threadsafe-c-lib\">Haskell framework to parallelize non-threadsafe C++ lib</a></li><li><a href=\"http://stackoverflow.com/questions/10449819/thread-safe-state-with-warp-wai\">Thread-safe state with Warp/WAI</a></li><li><a href=\"http://www.reddit.com/r/haskell/comments/uyy80/how_to_use_multiple_cores_when_compiling_with_ghc/\">How to use multiple cores when compiling with GHC? : haskell</a></li></ul><h3> Help and Feedback</h3><p>Well, this is the end of the Haskell Parallel Digest, but feedback would\nstill be much appreciated! Get in touch with me, Eric Kow, at\n<a href=\"mailto:parallel@well-typed.com\"><code>parallel@well-typed.com</code></a>. Bye\nfor now!\n</p>" "http://www.well-typed.com/blog/67" (20469 43844) new 19 nil nil ((title nil "Well-Typed.Com: Parallel Haskell Digest 11") (guid ((isPermaLink . "true")) "http://www.well-typed.com/blog/67") (link nil "http://www.well-typed.com/blog/67") (description nil "<p>It's time for another Parallel Haskell Digest! Unfortunately, this may\njust be our last one, at least within the context of the Parallel GHC\nproject. That said, we may as a community be at the very beginnings of\nHaskell as <em>the</em> language of choice for your parallel and concurrent\nneeds. Maybe we need to keep something like the Digest going to help our\nlittle FP monster through its infancy? Any volunteers in the community?\nIf you're interested in picking up the torch, please give us a shout!</p><p>Otherwise, if you can't take on a (perhaps rotating) digest commitment,\nbut still want to help, would you be kind enough to fill out a small\n<a href=\"http://goo.gl/bP2fn\">survey</a> on the digest? There are just five\nquestions on it, plus a feedback form. Anything you can say will help\nthose of us in the Secret Haskell Propaganda Commitee to fine tune our\nefforts:</p><p><a href=\"http://goo.gl/bP2fn\">Parallel Haskell Digest Survey</a></p><p>It's been a fantastic year for me, working on the Parallel GHC project,\nlearning about all sorts of neat ideas and technologies (as a basic\nparallel-naive Haskeller), and trying to reflect them back in a way that\nhopefully helps the broader community. Thanks to all of you in the\nparallel Haskell world first for cranking out all this great stuff for\nus to use, and second for your patience and support. Thanks especially\nto my follow Well-Typed-ers for all the fun chats, the feedback on\ndrafts, and help getting up to speed.</p><p>One last thing before signing off as your Parallel Haskell Digester.\nWhile the digest may be coming to an end, there will at least be one\nencore! It turns out we had so much to say in our last word of the\nmonth, that we'll have to put in in a follow-up posting. In the\nmeantime, we'll just leave you with a little teaser…</p><h3> News</h3><ul><li><p><a href=\"http://www.haskell.org/pipermail/haskell-cafe/2012-June/101579.html\">Announce: Haskell Platform 2012.2.0.0</a>\n(3 Jun)</p>\n \n<p>The new Haskell Platform is out! If you've been waiting for\nHaskell Platform before moving on GHC 7.4, now's a great time to\nupgrade. Of particular interest to parallel Haskellers, this latest\nGHC offers better profiling flags, multicore profiling, vastly\nimproved DPH, event logging [allows ThreadScope spark profiling],\nand more convenient RTS flags.</p></li></ul><ul><li><p><a href=\"http://www.haskell.org/pipermail/haskell-cafe/2012-June/101632.html\">Introducing FP Complete</a>\n(6 Jun)</p>\n \n<p>You might have Bartosz Milewski around. If not, have a look at\nthe\n<a href=\"http://fpcomplete.com/the-downfall-of-imperative-programming/\">Downfall of Imperative Programming</a>.\nBartosz posted a quick message introducing himself to the community\nalong with the new company FP Complete, which aims to commercialise\nHaskell. Bartosz believes that “now is the right time for Haskell to\nbecome a strong software industry player, especially that functional\nprogramming is being widely recognized as the answer to the recent\nmulticore and GPU explosion.” We'll hopefully find out more about FP\nComplete have in mind as their plans stabilise a bit.</p></li></ul><ul><li><p><a href=\"http://functionaljobs.com/jobs/111-3-year-postgraduate-rd-position-at-era7-bioinformatics\">3 year Bioinformatics R&amp;D position in Granada, Spain</a></p>\n \n<p>Love Functional Programming and concurrency? If you are a\nCS/Math/IT graduate without a PhD, and have had no more than 4 years\nof research experience, and have not lived in Spain for more than 12\nmonths (within the last 3 years), Era7 has a position for you! You'll\nbe hacking Scala and using AWS for everything. So if Akka is the sort\nof thing you're into, this could be the job for you.</p></li></ul><h3> Word of the month (teaser!)</h3><p>The word of the month series has given us a chance to survey the arsenal\nof Haskell parallelism and concurrency constructs:</p><ul><li>some low level foundations (sparks and threads),</li><li>three ways to do parallelism (parallel arrays, strategies, dataflow),</li><li>and some concurrency abstractions (locks, transactions, channels)</li></ul><p>The Haskell approach has been to explicitly recognise the vastness of\nthe parallelism/concurrency space, in other words, to provide a\nmultitude of right tools for a multitude of right jobs. Better still,\nthe tools we have are largely interoperable, should we find ourselves\nwith jobs that don't neatly fit into a single category.</p><p>The Haskell of 2012 may be in a great place for parallelism and\nconcurrency, but don't think this is the end of the story! What we've\nseen so far is only a snapshot of the technology as it hurtles through\nthe twenty-tens (How quaint are we, Future Haskeller?). While we can't\nsay what exactly the future will bring, we can look at one of the\ndirections that Haskell might branch into in the coming decade. The\nseries so far has focused on things you might do with a single computer,\nusing parallelism to speed up your software, or using concurrency\nabstractions to preserve your sanity in the face of non-determinism. But\nnow what if you have more than one computer?</p><p>Our final word of the month is <em>actor</em>. Actors are not specific to\ndistributed programming; they are really more of a low level concurrency\nabstraction on a par with threads. And they certainly aren't new either.\nThe actor model has been around since the early 70s at least, and has\nbeen seriously used for distributed programming since the late 80s with\nErlang. Can you guess where this word of the month is going? We have a\nbit more to say about it shortly, so while this is the last Parallel\nHaskell Digest, watch this space for the final word of the month :-)</p><h3> Parallel GHC project update</h3><p>Our work on the\n<a href=\"https://github.com/haskell-distributed/distributed-process\">distributed-process</a>\nimplementation of Cloud Haskell continues apace. We're almost there,\nhaving implemented most of the API described in the original\n<a href=\"http://research.microsoft.com/en-us/um/people/simonpj/papers/parallel/remote.pdf\">Epstein <em>et al</em></a>\npaper, except for node configuration and initialisation. We are very\nexcited to be getting this out of the door soon and into your hands. In\nfact, we've even submitted a proposal to present this work at the\nupcoming\n<a href=\"http://www.haskell.org/haskellwiki/HaskellImplementorsWorkshop\">Haskell Implementors Workshop</a>;\nso hopefully you'll be able to join Duncan and Edsko in Copenhagen and\ncatch up on the Cloud Haskell news.</p><p>As for ThreadScope, we last mentioned that we were working to make use\nof information from hardware performance counters (specifically, Linux\nPerf Events). This took a bit more work and trickier GHC patches than\nwe had anticipated, but it does seem to be in order now and we are now\nin the testing phase for the next release. The next ThreadScope release\nwill also include the use of heap statistics from the (eventual) GHC 7.6\nRTS, and some user interface enhancements suggested by our users.</p><h3> Tutorials</h3><ul><li><p><a href=\"https://plus.google.com/107890464054636586545/posts/LThYZELANCg\">Parallel and Concurrent Haskell Course slides</a></p>\n \n<p>Looks like the recent Summer School was a great time for all! We\nhad expert Haskellers talking parallelism and concurrency, a chateau,\ngood food, and lots of wine. Did you miss out? We can't help with the\nwine, but if you'd like to get in on some of the parallel action,\ncheck out Simon's slides. There are seven lectures in all, and some\n<a href=\"http://community.haskell.org/~simonmar/lab-exercises-cadarache.pdf\">lab exercises</a>\nto go with them:</p>\n \n<ol>\n   <li>Basic pure parallelism</li>\n   <li>The Par Monad</li>\n   <li>Basic concurrency</li>\n   <li>Software Transactional Memory</li>\n   <li>Concurrent network servers</li>\n   <li>Distributed programming</li>\n   <li>GPU programming with Accelerate</li>\n   </ol></li></ul><ul><li><p><a href=\"http://dmwit.com/gtk2hs/\">Threading and Gtk2Hs</a></p>\n \n<p>“So you're writing a Gtk2Hs application and you need to do some\nthreading.” Daniel Wagner has just the tutorial for you. The post\ncomes in two parts. First Daniel gives it all away with two keys\npoints (and a simple concrete example):</p>\n \n<ol><li>Make all Gtk calls from the main thread. If other threads need to\n    affect the interface, use <code>postGUIAsync</code> or <code>postGUISync</code> to send\n    your code to the main thread.</li>\n<li>Link your program with the threaded runtime system by passing GHC\n    the <code>-threaded</code> option at link time.</li></ol>\n \n<p>For readers who want to learn more, Daniel then goes into much\nmore depth: the things that threading hard both in its own right and\nwhen working in Gtk2Hs in particular; the perils of using <code>unsafe</code> FFI\nimports (as opposed to <code>safe</code> ones); a peek into the Gtk2Hs guts\nshowing its interaction with Gtk and glib; and finally, some of the\npossible pitfalls, wrong things Daniel believed when he started and\nwhat he now believes instead.</p></li></ul><h3> Blogs and packages</h3><ul><li><p><a href=\"http://www.haskell.org/pipermail/haskell-cafe/2012-June/101808.html\">GHC-7.4.2-Eden - Parallel Haskell on multicore and cluster systems</a>\n(17 Jun)</p>\n \n<p>There is more than one way to do parallelism and distributed\nprogramming in Haskell. Mischa Dieterle announced a new release of\n<a href=\"http://www.mathematik.uni-marburg.de/~eden\">Eden</a>, an extension of\nHaskell which is “tailored for distributed systems but works equally\nwell on multicore architectures”.</p>\n \n<p>These extensions consist of a small number of constructs for\nworking with <em>processes</em> (processes work within disjoint address\nspaces and do not share any data). Eden provides automatic process\nhandling to reduce the amount of low-level detail needed to implement\nparallel algorithms, but also allows for the explicit control you may\nneed to get good performance.</p>\n \n<p>You can either install the full Eden system including the\ncompiler (GHC with the Eden parallel runtime system), libraries and\ntools; or just install a thread simulation by using a standard GHC to\ninstall the libraries and tools off Hackage.</p></li></ul><ul><li><p><a href=\"http://apfelmus.nfshost.com/blog/2012/06/07-forklift.html\">Forklift - a pattern for performing monadic actions in a worker thread</a> (7 Jun)</p>\n \n<p>Apfelmus recently noticed a recurring applied Haskell puzzle: how\ndo you combine two IO-wrapping monads that don't lend themselves to\nbeing combined via monad transformers? This arose in the context of\nShae Erisson's Summer of Code Project (Web based GHCi) which uses\nwebserver and interpreter packages providing monads of their own. A\ntypical approach would be to run separate threads and have the two\ncommunicate using something like an <code>MVar</code>; but each time reinvent\nthis solution, we end up creating some mini communication protocol\nspecific to the task.</p>\n \n<p>Apfelmus suggests a more generic variant of this approach, which\nhe calls the “forklift pattern” because it consists in <em>forking</em> a\nworker thread to <em>lift</em> arbitrary monadic actions into IO.</p>\n \n<pre>data ForkLift m = ForkLift  requests :: Chan (m ()) \ncarry :: MonadIO m =&gt; ForkLift m -&gt; m a -&gt; IO a</pre>\n \n<p>The worker thread maintains a queue of requests. To run an\narbitrary action of type <code>m a</code>, you “carry” it over into <code>IO</code> with a\nhelper function that wraps it up in an <code>MVar</code> sandwich, sticks it on\nthe queue, and reads the <code>MVar</code> to get the result back. See Apfelmus's\nposting to see this cute trick in action.</p></li></ul><ul><li><p><a href=\"http://neilmitchell.blogspot.co.uk/2012/06/flavours-of-mvar_04.html\">The Flavours of MVar</a> (4 Jun)</p>\n \n<p>Neil Mitchell finds that that the flexibility of the <code>MVar</code> can\nleave some room for confusion: both taking from and putting to an\n<code>MVar</code> one can block, whereas it is likely that you only expect it to\nblock on one of those. In a quick and practical tutorial, Neil whips\nthrough three <code>MVar</code> patterns that he tends to use regularly:</p>\n \n<dl><dt>lock</dt><dd>guaranteed single-threaded access to some resource</dd>\n<dt>var</dt><dd>thread-safe mutable variables that never block on put</dd>\n<dt>barrier</dt><dd>starts empty, is written to once, then read one or more\n  times.</dd></dl>\n \n<p>Building on these Neil shows a couple of examples of how one\nmight go one to combine these MVar uses to to get higher level\nabstractions: an action that can be invoked multiple times but runs at\nmost once, and a queue that collects messages individually and\ndelivers them in bulk. Check his post out, and maybe see why\n<code>join  $ modifyMVar …</code> is becoming one of his favourite idioms.</p></li></ul><ul><li><p><a href=\"http://tumblr.justtesting.org/post/24399176080/being-more-clever-about-vectorising-nested-data\">Being more clever about vectorising nested data parallelism</a> (4 Jun)</p>\n \n<p>Manuel Chakravarty tumbles: Our new draft paper\n<a href=\"http://www.cse.unsw.edu.au/~chak/papers/KCLLP12.html\">on Vectorisation Avoidance</a>\nintroduces a novel program analysis for nested data parallelism that\nlets us avoid vectorising purely scalar subcomputations. It includes a\nset of benchmark kernels that suggest that vectorisation avoidance\nimproves runtimes over merely using array stream fusion.</p></li></ul><ul><li><p><a href=\"http://tumblr.justtesting.org/post/24398752358/repa-3-more-control-over-array-representations-with\">Repa 3: more control over array representations with indexed types</a> (4 Jun)</p>\n \n<p>Another paper from the UNSW parallel Haskellers: We have got a\nnew draft paper on\n<a href=\"http://www.cse.unsw.edu.au/~chak/papers/LCKP12.html\">Guiding Parallel Array Fusion with Indexed Types</a>.\nIt describes the design and use of the 3rd generation Repa API, which\nuses type indices to give the programmer control over the various\nparallel array representations. The result are clearer programs that\nthe compiler can more easily optimise. The implementation of Repa 3 is\nready for use on Hackage in the repa package.</p></li></ul><ul><li><p><a href=\"http://www.haskell.org/pipermail/haskell-cafe/2012-May/101313.html\">Protocol Buffers 2.0.7</a>\n(19 May)</p>\n \n<p>Chris Kuklewicz is back! In the last digest, some folks in the\ncommunity were looking for him because they had patches for the\nprotocol buffers package family. Chris has not only resurfaced, but\nreleased an update to the packages, making them compile with GHC 7.4.1\nand handle missing package names better.</p></li></ul><ul><li><p><a href=\"http://breaks.for.alienz.org/blog/2012/05/20/generics-and-protocol-buffers/\">Generics and Protocol Buffers</a>\n(20 May)</p>\n \n<p>Nathan Howell thinks the protocol-buffers package is great:\nfull-featured, well-tested, no complaints about performance. However,\nmaintaining <code>.proto</code> files is “more than just a chore”. The <code>hprotoc</code>\ntool could help but is trickyp to integrated properly into the build\nsystem. Maybe there's another way, one which does not involve separate\nfiles or build tools. Have a look at his\n<a href=\"https://gist.github.com/2757253\">GitHub Gist</a> for a promising\nalternative solution using the\n<a href=\"http://hackage.haskell.org/package/type-level\">type-level</a>\nlibrary.</p></li></ul><ul><li><p><a href=\"http://www.haskell.org/pipermail/haskell-cafe/2012-June/101567.html\">SafeSemaphore</a>\n(2 Jun)</p>\n \n<p>Chris Kuklewicz has a problem, a solution, and a plea for\nhelp.</p>\n \n<ul><li>Problem: Control.Concurrent.QSem (and QSemN, SampleVar) are\n<a href=\"http://hackage.haskell.org/trac/ghc/ticket/3160\">broken</a> (they\nprovide no exception safety).</li>\n<li>Solution: his\n<a href=\"http://hackage.haskell.org/package/SafeSemaphore/\">SafeSemaphore</a>\npackage, just updated to 0.90, with several safer alternatives.</li>\n<li>Plea: Would it be possible to replace parts of GHC with\nSafeSemaphore, so as to unbreak the Haskell Platform?</li></ul>\n \n<p>It looks like Chris' plea has been heard, as Simon Marlow has\nrecently suggested importing the STM version for GHC 7.6.1</p></li></ul><ul><li><p><a href=\"http://hackage.haskell.org/package/Paraiso\">Paraiso</a> (7\nJun)</p>\n \n<p>Kazu <span style=\"font-variant: small-caps;\">Yamamoto</span>\n<a href=\"http://www.haskell.org/pipermail/haskell-cafe/2012-June/101649.html\">announced</a>\na couple of new parallel libraries from Japan. The first is Paraiso\n(by Takayuki <span style=\"font-variant: small-caps;\">Muranushi</span> of\nMonadius fame), a high-level language for implementing explicit\npartial-differential equations solvers on supercomputers as well as today's\nadvanced personal computers.</p></li></ul><ul><li><p><a href=\"http://hackage.haskell.org/package/GTALib\">GTALib</a> (7 Jun)</p>\n \n<p>Also from the Japan Parallel Haskell workld, is GTALib by Kento\n<span style=\"font-variant: small-caps;\">Emoto</span>.\nIt provides core functionalities of the GTA programming\nframework described in the paper\n<a href=\"http://research.nii.ac.jp/~hu/pub/esop12.pdf\">Generate, Test, and Aggregate A Calculation-based Framework for Systematic Parallel Programming with MapReduce</a></p></li></ul><h3> Mailing lists</h3><ul><li><p><a href=\"http://www.haskell.org/pipermail/haskell-cafe/2012-May/101318.html\">How to write Source for TChan working with LC.take?</a>\n(20 May)</p>\n \n<p>Hiromi <span style=\"font-variant: small-caps;\">Ishii</span> is writing a Data.Conduit <code>Source</code> that supplies its\nvalues from a <code>TChan</code>. He has three versions, one using the raw Pipe\nconstructors directly, one using <code>sourceState</code>, and one using <code>yield</code>.\nThe `yield' version does not seem to work as expected. At first this\nseemed like an unfortunate necessity, but after putting some thought\ninto it, Michael Snoyman proposed some\n<a href=\"http://www.yesodweb.com/blog/2012/05/next-conduit-changes\">modifications to conduit's await/yield</a>\nfunctions, which should allow Hiromi to write things in the intuitive\nway.</p></li></ul><ul><li><p><a href=\"http://www.haskell.org/pipermail/haskell-cafe/2012-May/101359.html\">Parallel cooperative multithreading?</a>\n(22 May)</p>\n \n<p>Benjamin Ylvisaker was wondering if it'd be possible to implement\nsomething like\n<a href=\"http://www.cs.hmc.edu/~stone/papers/ocm-unpublished.pdf\">Observationally Cooperative Multithreading</a>\n(OCM) in Haskell. The paper discusses Lua, C, and C++ implementations.\nBen thinks that Haskell would be an awesome fit such a framework. The\npremise behind OCM is that cooperative concurrency can be easier than\npreemptive concurrency, because you can use reason sequentially\nbetween invocations of pause/yield/wait. Historically, it has only\nworked on single processors, because the blocks of code between the\np/y/w calls need to be run atomically. Recent research means we know\nmore about how to efficiently run blocks of code atomically, so maybe\ncooperative concurrency can make a comeback?</p>\n \n<p>Ryan Newton thinks the comeback is indeed happening. He points in\nthe Haskell world to monad-par's use of ConT as an example of a a\nframework in which tasks cooperatively yield control whenever their\ndesired input data is not yet available. Mario Blažević has also\nthought about cooperative concurrency in Haskell, particularly in\ncontext of his monad-coroutine library; however, he found no speedups\nwhen he added support for running multiple co-routines in parallel.\nKetil Malde is sceptical that the proposed approach would be better\nthan using STM. He wonders if the paper's critique of STM applies to\nimplementations that keep transactional data are segregated by the\ntype system.</p></li></ul><ul><li><p><a href=\"http://www.haskell.org/pipermail/haskell-cafe/2012-May/101454.html\">How to translate Repa 2 program to efficient Repa 3 code?</a>\n(26 May)</p>\n \n<p>Michael Serra posted a StackOverflow thread asking about the\n<a href=\"http://stackoverflow.com/questions/10747079/what-are-the-key-differences-between-the-repa-2-and-3-apis\">differences between Repa 2 and 3 APIs</a>.\nHe has some simple image convolution tests with which run fast enough\nin Repa 2 with judicious use of <code>force</code>. But when translating the\ntests to Repa 3, he can't quite work out how to get the same kind of\nperformance. See the thread on StackOverflow for more details. In\nshort, <code>computeP</code> is the new <code>force</code>.</p></li></ul><ul><li><p><a href=\"http://www.haskell.org/pipermail/haskell-cafe/2012-June/101573.html\">Is Repa suitable for boxed arrays?...</a>\n(3 Jun)</p>\n \n<p>Stuart Hungerford needs to build a 2D Array of boxed Haskell\nvalues. He's attracted to Repa, but couldn't work out from the\ndocumentation if it would work with arbitrary values. Moreover,\ngetting the examples to work. Ben Lippmeier replies that it should\nwork (the array type would be something like <code>Array V DIM2 Float</code>).\nThe documentation is out of date (it's for Repa 2 and Repa 3 is\ndifferent). Until somebody gets a chance to update the documentation,\ntry the\n<a href=\"http://www.cse.unsw.edu.au/~benl/papers/guiding/guiding-Haskell2012-sub.pdf\">Repa 3 paper</a>,\nBen just submitted for Haskell Symposium 2012.</p></li></ul><ul><li><p><a href=\"https://groups.google.com/d/msg/parallel-haskell/A6mXn1Wv-KY/-63SHoGU31wJ\">Status and roadmap for Cloud Haskell?</a>\n(19 May)</p>\n \n<p>Ben Lee is very interested in the our work at Well-Typed on\n<code>distributed-process</code>, the followup implementation of Cloud Haskell.\nHow's progress? As mentioned in the Parallel GHC news above, we're\nalmost there! Edsko de Vries says that so far we've been focusing on\ntwo aspects of the new implementation, the design of the transport\nAPI, and a robust TCP implementation to sit on top of it. These two\nparts are nearly done. Meanwhile, we've been laying down\n<a href=\"https://github.com/haskell-distributed/distributed-process/wiki\">some documentation</a>\non our GitHub project wiki. If you want to help out, we'd love if you\ncould play with the TCP transport, and try to write some transports of\nyour own.</p></li></ul><ul><li><p><a href=\"https://groups.google.com/d/msg/parallel-haskell/Ykm3QJT12yw/8HpnoP8qsugJ\">`anyP' in DPH?</a>\n(21 May)</p>\n \n<p>Rob Stewart is trying to find the <code>anyP</code> function for Data\nParallel Haskell. Ben Lippmeier says that DPH is in flux at the moment\nand that the current user facing API can be found in\n<a href=\"http://hackage.haskell.org/package/dph-lifted-vseg\">dph-lifted-vseg</a>\nwhich provides an <code>orP</code> function.</p></li></ul><ul><li><p><a href=\"https://plus.google.com/109566665911385859313/posts/FAmNTExSLtz\">Everybody should write everything in Go?</a>\n(28 May)</p>\n \n<p>Ryan Hayes posted a small <a href=\"https://gist.github.com/3010649\">snippet of Go</a> showing how friendly he\nfound it for writing concurrent programs, “No pthread... not stupid\ncrap... just works!” The program seems to create 4 threads which print out 1\nto 100 each. What do Haskellers think? See the comments for some discussion\nbetween Haskell people like Simon Marlow, and some folks in the Go\ncommunity about our respective approaches to the problem.</p></li></ul><ul><li><p><a href=\"http://www.haskell.org/pipermail/libraries/2012-June/017892.html\">Proposal: Control.Concurrent.Async</a>\n(8 June)</p>\n \n<p>Deep into writing his book on Parallel Haskell, Simon Marlow\nproposes a higher-level concurrency API for the base package. The\nproposed\n<a href=\"http://community.haskell.org/~simonmar/async-stm/Control-Concurrent-Async.html\">Control.Concurrent.Async</a>\nwould help make sure that exceptions in child threads are dealt with\n(returned or passed up), and that threads aren't accidentally left\nrunning in the background.</p>\n \n<p>A few Haskellers commented that they would prefer that base be\nkept minimal as possible, and have counter-proposed making it a\npackage to be included in the Haskell Platform instead. See the thread\nfor some discussion on the API itself.</p></li></ul><h3> StackOverflow and Reddit</h3><ul><li><a href=\"http://stackoverflow.com/questions/10747079/what-are-the-key-differences-between-the-repa-2-and-3-apis\">What are the key differences between the Repa 2 and 3 APIs?</a></li><li><a href=\"http://stackoverflow.com/questions/10724946/does-par-create-another-thread\">Does <code>par</code> create another thread?</a></li><li><a href=\"http://stackoverflow.com/questions/10557055/how-to-improve-performence-of-this-haskell-code\">How to improve performence of this Haskell code?</a></li><li><a href=\"http://stackoverflow.com/questions/10166640/haskell-why-was-par-defined-the-way-it-was\">Haskell: Why was <code>par</code> defined the way it was?</a></li><li><a href=\"http://stackoverflow.com/questions/11073610/method-for-capturing-monad-stack-state\">Method for capturing monad stack state</a></li><li><a href=\"http://stackoverflow.com/questions/10871303/killing-a-thread-when-mvar-is-garbage-collected\">Killing a thread when MVar is garbage collected</a></li><li><a href=\"http://stackoverflow.com/questions/10627980/improving-simulation-performance-via-concurrency\">Improving simulation performance via concurrency</a></li><li><a href=\"http://stackoverflow.com/questions/10567223/haskell-framework-to-parallelize-non-threadsafe-c-lib\">Haskell framework to parallelize non-threadsafe C++ lib</a></li><li><a href=\"http://stackoverflow.com/questions/10449819/thread-safe-state-with-warp-wai\">Thread-safe state with Warp/WAI</a></li><li><a href=\"http://www.reddit.com/r/haskell/comments/uyy80/how_to_use_multiple_cores_when_compiling_with_ghc/\">How to use multiple cores when compiling with GHC? : haskell</a></li></ul><h3> Help and Feedback</h3><p>Well, this is the end of the Haskell Parallel Digest, but feedback would\nstill be much appreciated! Get in touch with me, Eric Kow, at\n<a href=\"mailto:parallel@well-typed.com\"><code>parallel@well-typed.com</code></a>. Bye\nfor now!\n</p>") (pubDate nil "Thu, 05 Jul 2012 14:57:08 +0000"))) ("apfelmus: FRP - Tutorial session on FRP with reactive-banana in Halle" "<p>Hello everyone,</p>\n<p>I just wanted to remind you that I’m going to give a tutorial session on functional reactive programming with reactive-banana at the <a href=\"http://iba-cg.de/hal7.html\">HaL 7 - Haskell in Halle/Saale</a> meeting.</p>\n<ul>\n<li><em>When?</em> 13 July 2012. 11:30 am</li>\n<li><em>Where?</em> Martin-Luther-Universität Halle-Wittenberg, Institut für Informatik, Halle/Saale (Germany)</li>\n<li><em>URL?</em> <a href=\"http://iba-cg.de/hal7.html\">http://iba-cg.de/hal7.html</a></li>\n</ul>\n<p>In this tutorial session, I’m going to give a short introduction to FRP and then we’ll work through some examples. I encourage everyone to request particular examples from the <a href=\"http://haskell.org/haskellwiki/Reactive-banana/Examples\">examples collection</a> or to suggest new ones during the tutorial.</p>\n<p>If you want to participate, remember to <a href=\"http://sim.mathematik.uni-halle.de:8080/hal7/\"><strong>register</strong> for the tutorial</a> as we only have enough space to accomodate 25 people per tutorial. There are other tutorials as well, so check out the program to see if there’s anything else you like. In particular, <a href=\"http://www.andres-loeh.de/\">Andres Löh</a> is giving an introduction to GPU programming with the <a href=\"http://repa.ouroborus.net/\">repa</a> and <a href=\"https://github.com/AccelerateHS/accelerate/\">accelerate</a> libraries.</p>\n<p>To get most out of my reactive-banana tutorial, make sure that you install wxHaskell beforehand, as this tends to be a bit difficult.</p>\n<p>The session will be in German. Unfortunately, it probably won’t be recorded on video, but I can translate and post my introductory slides afterwards.</p>\n<hr /><p><a href=\"https://flattr.com/thing/29608/apfelmus-website\"><img src=\"http://api.flattr.com/button/flattr-badge-large.png\" alt=\"Flattr this\" border=\"0\" title=\"Flattr this\" /></a></p>" "http://apfelmus.nfshost.com/blog/2012/07/05-frp-reactive-banana-tutorial-session.html" (20469 30147) new 20 nil nil ((title nil "apfelmus: FRP - Tutorial session on FRP with reactive-banana in Halle") (guid ((isPermaLink . "true")) "http://apfelmus.nfshost.com/blog/2012/07/05-frp-reactive-banana-tutorial-session.html") (link nil "http://apfelmus.nfshost.com/blog/2012/07/05-frp-reactive-banana-tutorial-session.html") (description nil "<p>Hello everyone,</p>\n<p>I just wanted to remind you that I’m going to give a tutorial session on functional reactive programming with reactive-banana at the <a href=\"http://iba-cg.de/hal7.html\">HaL 7 - Haskell in Halle/Saale</a> meeting.</p>\n<ul>\n<li><em>When?</em> 13 July 2012. 11:30 am</li>\n<li><em>Where?</em> Martin-Luther-Universität Halle-Wittenberg, Institut für Informatik, Halle/Saale (Germany)</li>\n<li><em>URL?</em> <a href=\"http://iba-cg.de/hal7.html\">http://iba-cg.de/hal7.html</a></li>\n</ul>\n<p>In this tutorial session, I’m going to give a short introduction to FRP and then we’ll work through some examples. I encourage everyone to request particular examples from the <a href=\"http://haskell.org/haskellwiki/Reactive-banana/Examples\">examples collection</a> or to suggest new ones during the tutorial.</p>\n<p>If you want to participate, remember to <a href=\"http://sim.mathematik.uni-halle.de:8080/hal7/\"><strong>register</strong> for the tutorial</a> as we only have enough space to accomodate 25 people per tutorial. There are other tutorials as well, so check out the program to see if there’s anything else you like. In particular, <a href=\"http://www.andres-loeh.de/\">Andres Löh</a> is giving an introduction to GPU programming with the <a href=\"http://repa.ouroborus.net/\">repa</a> and <a href=\"https://github.com/AccelerateHS/accelerate/\">accelerate</a> libraries.</p>\n<p>To get most out of my reactive-banana tutorial, make sure that you install wxHaskell beforehand, as this tends to be a bit difficult.</p>\n<p>The session will be in German. Unfortunately, it probably won’t be recorded on video, but I can translate and post my introductory slides afterwards.</p>\n<hr /><p><a href=\"https://flattr.com/thing/29608/apfelmus-website\"><img src=\"http://api.flattr.com/button/flattr-badge-large.png\" alt=\"Flattr this\" border=\"0\" title=\"Flattr this\" /></a></p>") (pubDate nil "Thu, 05 Jul 2012 11:08:51 +0000"))) ("Mikael Vejdemo Johansson (Syzygy-): Jonas Thente och innumeracy" "<p><a href=\"http://www.dn.se/kultur-noje/kronikor/jonas-thente-matematik-som-huvudamne-tillhor-datiden--politikerna-bor-satsa-fram\">Jonas Thente har tyckt till på DN.</a> Matematik är ett föråldrat skolämne, eftersom alla har miniräknare.</p>\n<p>Jag har en historia jag hörde idag, som jag skulle vilja ta upp. En god vän (och universitetslärare i matematik) till mig förklarade hur han gör för att hantera fuskare på hans matematiktentor. Han sätter sig med studenten, och föreslår att de går igenom alla förklaringarna för varför det misstänkta fusket inte är fusk — och för varje ursäkt, så bedömer de sannolikheten att just de kunde ha hänt, och räknar samman sannolikheterna.</p>\n<p>“Jag missade att vi inte fick ha miniräknare.”<br />\n“Ja, okej då. Ska vi säga 50/50 på den?”<br />\n“Mmmmm.”</p>\n<p>och så där fortsätter det. Till sist, efter lagom många ursäkter, så räknar de ihop sannolikheten att allt verkligen hänt som studenten sagt; med de sannolikheter studenten själv gått med på — och ger studenten motsvarande andel av de poäng han annars hade fått. I utbyte slipper studenten disciplinnämnd och FUSKAR-stämpel och kan ta enbart en körd tenta som straff…</p>\n<p>Varenda student som åker fast för fusk går med på det. Varenda en tycker det låter som en bra deal när allt börjar.</p>\n<p>Thente tycker inte man behöver någon siffer-intuition, eftersom vi ändå alla har miniräknare. Gäller den åsikten fortfarande när vi diskuterar skattesatser i Almedalen? Gäller den fortfarande när vi försöker utröna om huruvida en farmor som laddat hem Pippi Långstrump från en Torrent åt sitt barnbarn verkligen kostat Hollywood ett par miljoner kronor? Eller är det möjligen så att matematiken fortfarande är relevant eftersom den bidrar med färdighet att tänka på och hantera numeriska storheter?</p>" "http://blog.mikael.johanssons.org/archive/2012/07/jonas-thente-och-innumeracy/" (20466 9932) new 21 nil nil ((title nil "Mikael Vejdemo Johansson (Syzygy-): Jonas Thente och innumeracy") (guid ((isPermaLink . "false")) "http://blog.mikael.johanssons.org/?p=334") (link nil "http://blog.mikael.johanssons.org/archive/2012/07/jonas-thente-och-innumeracy/") (description nil "<p><a href=\"http://www.dn.se/kultur-noje/kronikor/jonas-thente-matematik-som-huvudamne-tillhor-datiden--politikerna-bor-satsa-fram\">Jonas Thente har tyckt till på DN.</a> Matematik är ett föråldrat skolämne, eftersom alla har miniräknare.</p>\n<p>Jag har en historia jag hörde idag, som jag skulle vilja ta upp. En god vän (och universitetslärare i matematik) till mig förklarade hur han gör för att hantera fuskare på hans matematiktentor. Han sätter sig med studenten, och föreslår att de går igenom alla förklaringarna för varför det misstänkta fusket inte är fusk — och för varje ursäkt, så bedömer de sannolikheten att just de kunde ha hänt, och räknar samman sannolikheterna.</p>\n<p>“Jag missade att vi inte fick ha miniräknare.”<br />\n“Ja, okej då. Ska vi säga 50/50 på den?”<br />\n“Mmmmm.”</p>\n<p>och så där fortsätter det. Till sist, efter lagom många ursäkter, så räknar de ihop sannolikheten att allt verkligen hänt som studenten sagt; med de sannolikheter studenten själv gått med på — och ger studenten motsvarande andel av de poäng han annars hade fått. I utbyte slipper studenten disciplinnämnd och FUSKAR-stämpel och kan ta enbart en körd tenta som straff…</p>\n<p>Varenda student som åker fast för fusk går med på det. Varenda en tycker det låter som en bra deal när allt börjar.</p>\n<p>Thente tycker inte man behöver någon siffer-intuition, eftersom vi ändå alla har miniräknare. Gäller den åsikten fortfarande när vi diskuterar skattesatser i Almedalen? Gäller den fortfarande när vi försöker utröna om huruvida en farmor som laddat hem Pippi Långstrump från en Torrent åt sitt barnbarn verkligen kostat Hollywood ett par miljoner kronor? Eller är det möjligen så att matematiken fortfarande är relevant eftersom den bidrar med färdighet att tänka på och hantera numeriska storheter?</p>") (pubDate nil "Mon, 02 Jul 2012 22:55:08 +0000"))) ("Happstack Web Framework: Happstack Irregular News Issue #2" "<p>Hello! It is I, your editor Jeremy Shaw. I am pleased to bring you\nHappstack Irregular News Issue #2. Some exciting things have happened\nsince the last issue!</p>\n<h2>clckwrks</h2>\n<p>The biggest news since the last issue is the release of clckwrks:</p>\n<p><a href=\"http://www.clckwrks.com/\">clckwrks</a></p>\n<p>clckwrks is a Haskell-based blog and CMS framework with support for\nediting pages via the browser plus downloadable themes and plugins.</p>\n<p>clckwrks is now powering happstack.com and clckwrks.com.</p>\n<p>We are currently focusing on making the clckwrks blogging portion\nsolid. We have moved the official Happstack blog to clckwrks in order\nto encourage us to make it better :)</p>\n<p>If you want to help out, you can <a href=\"http://www.clckwrks.com/B/Timeline\">browse our bug\nlist</a> and find something to take\naction on. We are more than happy to provide guidance and other\nassistance.</p>\n<h2>reform</h2>\n<p>The other new big release was\n<a href=\"http://www.happstack.com/C/ViewPage/11\">reform</a>. <code>reform</code> is a form\ngeneration library that continues in the footsteps of <code>formlets</code> and\n<code>digestive-functors &lt;= 0.2</code>. <code>digestive-functors 0.3</code> has gone off to\nexplore a different direction, and we wanted to continue pushing the\ndevelopment in this direction. There are still many ideas we can share\nbetween the two libraries. Two changes we want to make in the next\nrelease include:</p>\n<ol>\n<li><p>switch to <code>Bifunctors</code> package instead of homebrewed\n<code>IndexedApplicative</code> (thanks to Leonid Onokhov for pointing that\nout). (Another alternative might be <code>index-core</code>, though it does not\nyet export the <code>Applicative</code> instances).</p></li>\n<li><p>consider using a <code>Free Applicative</code> / <code>Operational Applicative</code> for\nimplementing the <code>reform</code> applicative instances. <code>digestive functors\n0.3</code> does something like this and Jasper Van der Jeugt said it was\nvery beneficial and we should try it in <code>reform</code> as well.</p></li>\n</ol>\n<h2>happstack-yui</h2>\n<p>Dag Odenhall has released <code>happstack-yui</code>, which makes it easy to use\nYUI with Happstack. According the YUI website:</p>\n<p>\"YUI is a free, open source JavaScript and CSS framework for building richly interactive web applications.\"</p>\n<p><a href=\"http://www.happstack.com/docs/happstack-yui-7351.4.1/doc/html/happstack-yui/index.html\">happstack-yui</a></p>\n<p><a href=\"http://yuilibrary.com/\">YUI website</a></p>\n<h2>HSX</h2>\n<p>Niklas Broberg and I (Jeremy Shaw) did some work on HSX. It now builds\nwith GHC 7.4 and we also fixed some hidden bugs in\n<code>HSX.Transform</code>. One thing we have been experimenting with is a\n<code>QuasiQuoter</code> for HSX. A demo version can be found here:</p>\n<pre><code>darcs get http://src.seereason.com/hsx-qq/\n</code></pre>\n<p>The QQ provides an alternative to the <code>trhsx</code> preprocessor and\nallows you to write things like:</p>\n<pre><code>html :: (XMLGenerator m) =&gt; XMLGenT m (XMLType m)\nhtml = [hsx| &lt;p class=\"foo\"&gt;&lt;% map toUpper \"hello, world!\"  %&gt;&lt;/p&gt; |]\n</code></pre>\n<p>This should be included in the next release of HSX.</p>\n<p>The next release of HSX will also contain a major refactoring of the\npackages. Mostly we are just planning to move modules into different\npackages and divide things up differently. One major benefit of the\nnew arrangement is that you will no longer be required to install\n<code>HJavaScript</code> and <code>HJScript</code> even though you probably never use them.</p>\n<h2>Other Minor Fixes</h2>\n<ul>\n<li><p>changed types in <code>happstack-lite</code> so that <code>serveFile</code> and <code>asContentType</code>\nwork better together, and added <code>guessContentType</code>, <code>MimeMap</code>, <code>mimeType</code></p></li>\n<li><p>patched <code>happstack-jmacro</code> to work with older versions of <code>template haskell</code></p></li>\n<li><p>tweaks to <code>ixset.cabal</code> so that it does not require the latest <code>Cabal</code> to build</p></li>\n</ul>\n<h2>acid-state and hackage2</h2>\n<p>I have started research into why hackage2 requires so much RAM to\nrun. I will be blogging about that separately. I do expect that we can\nsubstantially reduce that amount of RAM it requires. So far I have\nuncovered two minor issues:</p>\n<ol>\n<li><p>it turns out that <code>mapM Lazy.readFile fileList</code> returns the file\ncontents lazily but opens all the files immediately. This means you\ncan run out of file descriptors if you have a lot of checkpoints or\nevent files. A patch has been submitted for <code>acid-state</code> and it will\nbe fixed in the next release.</p></li>\n<li><p><code>acid-state</code> reads the entire checkpoint file into RAM before\ndecoding it. There are a couple places in the code that cause this to\nhappen. The first place is in <code>cereal</code>. The <code>getLazyByteString</code>\nfunction does return a lazy <code>ByteString</code>.. but it does it by first\nreading a strict <code>ByteString</code> of the required length and then\nconverting it into a lazy <code>ByteString</code>. Changing the behavior of\n<code>getLazyByteString</code> is actually quite difficult, as <code>cereal</code> was\ndesigned to allow for value-level error handling, instead of throwing\nasync exceptions.</p>\n<p>We can probably work around this by using <code>runGetState</code> to get\none-chunk at a time and build the lazy <code>ByteString</code> that way. That\nmight actually be a lot less hackish than it sounds at first, because\nit allows us to explicity detect and handle failure cases and control\nhow much and when things are read into RAM. Though, at that point, it\nstarts to feel a bit like enumerators/iteratee/etc. Perhaps we will\nswitch to <code>pipes</code> at some point in time. <code>pipes</code> provides streaming for\npure (non-IO) values -- which is probably what we want here.</p></li>\n</ol>\n<h2>ELM</h2>\n<p>Evan Czaplicki has been doing a ton of work on ELM recently. As described on the <a href=\"http://elm-lang.org/\">ELM Language Homepage</a>:</p>\n<p>\"Elm is a type-safe, functional reactive language that compiles to HTML, CSS, and JavaScript.\"</p>\n<p>It is easy to use ELM with Happstack -- no special support is\nrequired. (i.e., we do not need <code>happstack-elm</code>). Vincent Ambo has\ncreated a simple demo here:</p>\n<p><a href=\"https://github.com/tazjin/Elm/tree/master/Examples/elm-happstack\">elm-happstack demo</a></p>\n<h2>web-routes + Hamlet</h2>\n<p>Vincent also wrote a nice blog post showing how to combine <code>web-routes</code>\n(type-safe URL routing) with <code>Hamlet</code> (a <code>QuasiQuoter</code> for generating\n<code>blaze-html</code> from HTML-like syntax):</p>\n<p><a href=\"http://tazj.in/en/1335123720\">Best of both worlds: Using Hamlet and web-routes with Happstack</a></p>\n<h2>quasi-quoter for language-css</h2>\n<p><code>JMacro</code> is great for creating JavaScript, but we still have a hole\nwhen it comes to generating CSS. The\n<a href=\"http://hackage.haskell.org/package/language-css\">language-css</a>\nlibrary already contains combinators and a syntax ADT for CSS3.</p>\n<p>If it had a parser, then we could also create a syntax-checking\n<code>[css| |]</code> <code>QuasiQuoter</code>.</p>\n<p>I have discussed the idea with Anton Kholomiov, and he is interested\n-- but we could use some one else to help write the parser. If you\nlove writing parsers, this should be a fun little project.</p>\n<h2>happstack.com theme</h2>\n<p>Finally, if you could suggest one thing that would make the\nhappstack.com website nicer that would be awesome. There are four\nthings we already plan to change:</p>\n<ol>\n<li><p>use black on white text instead of gray on white</p></li>\n<li><p>fix the paragraph width so that paragraphs are around 45em wide.</p></li>\n<li><p>fix the grid alignment so that things are properly aligned to the\ngrid</p></li>\n<li><p>add more dates to the pages so that it clear that the site and\nproject is still active</p></li>\n</ol>\n<p>If you have other suggestions, we would love to hear them! If you want\nto hack on the theme directly, that is even better!</p>\n<p>Until next time, happy hacking.</p>\n<p><em>Jeremy Shaw</em></p>" "http://www.happstack.com/C/ViewPage/12" (20465 52989) new 22 nil nil ((title nil "Happstack Web Framework: Happstack Irregular News Issue #2") (guid ((isPermaLink . "false")) "urn:uuid:8d103025-bad6-41fa-a506-f707cb3652c5") (link nil "http://www.happstack.com/C/ViewPage/12") (description nil "<p>Hello! It is I, your editor Jeremy Shaw. I am pleased to bring you\nHappstack Irregular News Issue #2. Some exciting things have happened\nsince the last issue!</p>\n\n<h2>clckwrks</h2>\n\n<p>The biggest news since the last issue is the release of clckwrks:</p>\n\n<p><a href=\"http://www.clckwrks.com/\">clckwrks</a></p>\n\n<p>clckwrks is a Haskell-based blog and CMS framework with support for\nediting pages via the browser plus downloadable themes and plugins.</p>\n\n<p>clckwrks is now powering happstack.com and clckwrks.com.</p>\n\n<p>We are currently focusing on making the clckwrks blogging portion\nsolid. We have moved the official Happstack blog to clckwrks in order\nto encourage us to make it better :)</p>\n\n<p>If you want to help out, you can <a href=\"http://www.clckwrks.com/B/Timeline\">browse our bug\nlist</a> and find something to take\naction on. We are more than happy to provide guidance and other\nassistance.</p>\n\n<h2>reform</h2>\n\n<p>The other new big release was\n<a href=\"http://www.happstack.com/C/ViewPage/11\">reform</a>. <code>reform</code> is a form\ngeneration library that continues in the footsteps of <code>formlets</code> and\n<code>digestive-functors &lt;= 0.2</code>. <code>digestive-functors 0.3</code> has gone off to\nexplore a different direction, and we wanted to continue pushing the\ndevelopment in this direction. There are still many ideas we can share\nbetween the two libraries. Two changes we want to make in the next\nrelease include:</p>\n\n<ol>\n<li><p>switch to <code>Bifunctors</code> package instead of homebrewed\n<code>IndexedApplicative</code> (thanks to Leonid Onokhov for pointing that\nout). (Another alternative might be <code>index-core</code>, though it does not\nyet export the <code>Applicative</code> instances).</p></li>\n<li><p>consider using a <code>Free Applicative</code> / <code>Operational Applicative</code> for\nimplementing the <code>reform</code> applicative instances. <code>digestive functors\n0.3</code> does something like this and Jasper Van der Jeugt said it was\nvery beneficial and we should try it in <code>reform</code> as well.</p></li>\n</ol>\n\n<h2>happstack-yui</h2>\n\n<p>Dag Odenhall has released <code>happstack-yui</code>, which makes it easy to use\nYUI with Happstack. According the YUI website:</p>\n\n<p>\"YUI is a free, open source JavaScript and CSS framework for building richly interactive web applications.\"</p>\n\n<p><a href=\"http://www.happstack.com/docs/happstack-yui-7351.4.1/doc/html/happstack-yui/index.html\">happstack-yui</a></p>\n\n<p><a href=\"http://yuilibrary.com/\">YUI website</a></p>\n\n<h2>HSX</h2>\n\n<p>Niklas Broberg and I (Jeremy Shaw) did some work on HSX. It now builds\nwith GHC 7.4 and we also fixed some hidden bugs in\n<code>HSX.Transform</code>. One thing we have been experimenting with is a\n<code>QuasiQuoter</code> for HSX. A demo version can be found here:</p>\n\n<pre><code>darcs get http://src.seereason.com/hsx-qq/\n</code></pre>\n\n<p>The QQ provides an alternative to the <code>trhsx</code> preprocessor and\nallows you to write things like:</p>\n\n<pre><code>html :: (XMLGenerator m) =&gt; XMLGenT m (XMLType m)\nhtml = [hsx| &lt;p class=\"foo\"&gt;&lt;% map toUpper \"hello, world!\"  %&gt;&lt;/p&gt; |]\n</code></pre>\n\n<p>This should be included in the next release of HSX.</p>\n\n<p>The next release of HSX will also contain a major refactoring of the\npackages. Mostly we are just planning to move modules into different\npackages and divide things up differently. One major benefit of the\nnew arrangement is that you will no longer be required to install\n<code>HJavaScript</code> and <code>HJScript</code> even though you probably never use them.</p>\n\n<h2>Other Minor Fixes</h2>\n\n<ul>\n<li><p>changed types in <code>happstack-lite</code> so that <code>serveFile</code> and <code>asContentType</code>\nwork better together, and added <code>guessContentType</code>, <code>MimeMap</code>, <code>mimeType</code></p></li>\n<li><p>patched <code>happstack-jmacro</code> to work with older versions of <code>template haskell</code></p></li>\n<li><p>tweaks to <code>ixset.cabal</code> so that it does not require the latest <code>Cabal</code> to build</p></li>\n</ul>\n\n<h2>acid-state and hackage2</h2>\n\n<p>I have started research into why hackage2 requires so much RAM to\nrun. I will be blogging about that separately. I do expect that we can\nsubstantially reduce that amount of RAM it requires. So far I have\nuncovered two minor issues:</p>\n\n<ol>\n<li><p>it turns out that <code>mapM Lazy.readFile fileList</code> returns the file\ncontents lazily but opens all the files immediately. This means you\ncan run out of file descriptors if you have a lot of checkpoints or\nevent files. A patch has been submitted for <code>acid-state</code> and it will\nbe fixed in the next release.</p></li>\n<li><p><code>acid-state</code> reads the entire checkpoint file into RAM before\ndecoding it. There are a couple places in the code that cause this to\nhappen. The first place is in <code>cereal</code>. The <code>getLazyByteString</code>\nfunction does return a lazy <code>ByteString</code>.. but it does it by first\nreading a strict <code>ByteString</code> of the required length and then\nconverting it into a lazy <code>ByteString</code>. Changing the behavior of\n<code>getLazyByteString</code> is actually quite difficult, as <code>cereal</code> was\ndesigned to allow for value-level error handling, instead of throwing\nasync exceptions.</p>\n\n<p>We can probably work around this by using <code>runGetState</code> to get\none-chunk at a time and build the lazy <code>ByteString</code> that way. That\nmight actually be a lot less hackish than it sounds at first, because\nit allows us to explicity detect and handle failure cases and control\nhow much and when things are read into RAM. Though, at that point, it\nstarts to feel a bit like enumerators/iteratee/etc. Perhaps we will\nswitch to <code>pipes</code> at some point in time. <code>pipes</code> provides streaming for\npure (non-IO) values -- which is probably what we want here.</p></li>\n</ol>\n\n<h2>ELM</h2>\n\n<p>Evan Czaplicki has been doing a ton of work on ELM recently. As described on the <a href=\"http://elm-lang.org/\">ELM Language Homepage</a>:</p>\n\n<p>\"Elm is a type-safe, functional reactive language that compiles to HTML, CSS, and JavaScript.\"</p>\n\n<p>It is easy to use ELM with Happstack -- no special support is\nrequired. (i.e., we do not need <code>happstack-elm</code>). Vincent Ambo has\ncreated a simple demo here:</p>\n\n<p><a href=\"https://github.com/tazjin/Elm/tree/master/Examples/elm-happstack\">elm-happstack demo</a></p>\n\n<h2>web-routes + Hamlet</h2>\n\n<p>Vincent also wrote a nice blog post showing how to combine <code>web-routes</code>\n(type-safe URL routing) with <code>Hamlet</code> (a <code>QuasiQuoter</code> for generating\n<code>blaze-html</code> from HTML-like syntax):</p>\n\n<p><a href=\"http://tazj.in/en/1335123720\">Best of both worlds: Using Hamlet and web-routes with Happstack</a></p>\n\n<h2>quasi-quoter for language-css</h2>\n\n<p><code>JMacro</code> is great for creating JavaScript, but we still have a hole\nwhen it comes to generating CSS. The\n<a href=\"http://hackage.haskell.org/package/language-css\">language-css</a>\nlibrary already contains combinators and a syntax ADT for CSS3.</p>\n\n<p>If it had a parser, then we could also create a syntax-checking\n<code>[css| |]</code> <code>QuasiQuoter</code>.</p>\n\n<p>I have discussed the idea with Anton Kholomiov, and he is interested\n-- but we could use some one else to help write the parser. If you\nlove writing parsers, this should be a fun little project.</p>\n\n<h2>happstack.com theme</h2>\n\n<p>Finally, if you could suggest one thing that would make the\nhappstack.com website nicer that would be awesome. There are four\nthings we already plan to change:</p>\n\n<ol>\n<li><p>use black on white text instead of gray on white</p></li>\n<li><p>fix the paragraph width so that paragraphs are around 45em wide.</p></li>\n<li><p>fix the grid alignment so that things are properly aligned to the\ngrid</p></li>\n<li><p>add more dates to the pages so that it clear that the site and\nproject is still active</p></li>\n</ol>\n\n<p>If you have other suggestions, we would love to hear them! If you want\nto hack on the theme directly, that is even better!</p>\n\n<p>Until next time, happy hacking.</p>\n\n<p><em>Jeremy Shaw</em></p>") (pubDate nil "Mon, 02 Jul 2012 16:40:29 +0000"))) ("Kevin Reid (kpreid): Porting GLToy to WebGL" "<p>Started a new project, <a href=\"https://github.com/kpreid/gltoyjs\" rel=\"nofollow\">GLToyJS</a>; I’m porting my <a href=\"http://switchb.org/kpreid/savers/#gltoy\" rel=\"nofollow\">GLToy</a> to WebGL. The advantage, besides using a higher-level language and modern OpenGL (shaders!), is that it is more cross-platform, rather than being a Mac-only screensaver. The disadvantage is that it’s not a screensaver at all, but a web page; I plan to add a wrapper to fix that, and I have a working proof of concept.</p>\n<p>So far I’ve put together the core framework and ported 6 of the original 13 effects (most of the in-my-current-opinion good ones, of course). An additional feature is that an effect’s parameters are described in JSON, which will be used to allow you to save a particularly good random result for future viewing. (I could just put them in the URL, in fact — I think I’ll try that next.)</p>\n<p>I haven't yet created any new effects, so nothing takes obvious advantage of the additional capabilities provided by shaders (other than refinements such as Phong-rather-than-Gouraud lighting and GPU-side particle systems). I also wrote a sketchy compatibility layer for the <a href=\"http://glsl.heroku.com/\" rel=\"nofollow\">GLSL Sandbox</a>’s interface so that you can drop in a fragment shader from there to make an effect; a possible thing to do would be automatically downloading from their gallery (if politeness and copyright law permits).</p>\n<p>It's not published as a web page anywhere yet, but it should be and I’ll let you know as soon as it is.</p>" "http://kpreid.livejournal.com/46791.html" (20463 39703) new 23 nil nil ((title nil "Kevin Reid (kpreid): Porting GLToy to WebGL") (guid ((isPermaLink . "true")) "http://kpreid.livejournal.com/46791.html") (link nil "http://kpreid.livejournal.com/46791.html") (description nil "<p>Started a new project, <a href=\"https://github.com/kpreid/gltoyjs\" rel=\"nofollow\">GLToyJS</a>; I’m porting my <a href=\"http://switchb.org/kpreid/savers/#gltoy\" rel=\"nofollow\">GLToy</a> to WebGL. The advantage, besides using a higher-level language and modern OpenGL (shaders!), is that it is more cross-platform, rather than being a Mac-only screensaver. The disadvantage is that it’s not a screensaver at all, but a web page; I plan to add a wrapper to fix that, and I have a working proof of concept.</p>\n\n<p>So far I’ve put together the core framework and ported 6 of the original 13 effects (most of the in-my-current-opinion good ones, of course). An additional feature is that an effect’s parameters are described in JSON, which will be used to allow you to save a particularly good random result for future viewing. (I could just put them in the URL, in fact — I think I’ll try that next.)</p>\n\n<p>I haven't yet created any new effects, so nothing takes obvious advantage of the additional capabilities provided by shaders (other than refinements such as Phong-rather-than-Gouraud lighting and GPU-side particle systems). I also wrote a sketchy compatibility layer for the <a href=\"http://glsl.heroku.com/\" rel=\"nofollow\">GLSL Sandbox</a>’s interface so that you can drop in a fragment shader from there to make an effect; a possible thing to do would be automatically downloading from their gallery (if politeness and copyright law permits).</p>\n\n<p>It's not published as a web page anywhere yet, but it should be and I’ll let you know as soon as it is.</p>") (pubDate nil "Sun, 01 Jul 2012 00:34:31 +0000") (author nil "kpreid@switchb.org (Kevin Reid (kpreid))"))) ("JP Moresmau: EclipseFP: integrating stylish-haskell" "<a href=\"https://github.com/jaspervdj/stylish-haskell\">Stylish-haskell</a> is a new code formatter for Haskell, and people have asked for it to be integrated in EclipseFP. This will be part of the 2.3.1 release.<br /><br />You install stylish-haskell and set its path as with any helper executable (if it's your path you don't even need to specify the path in EclipseFP). Then there's a preference page to set preferences for all projects in your workspace, and a property page on each project if you want project-specific settings:<br /><div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://4.bp.blogspot.com/-eB_BEpU6bUM/T-13wY2jyDI/AAAAAAAAAHU/sCaQsG65oWg/s1600/stylish_scr.png\"><img src=\"http://4.bp.blogspot.com/-eB_BEpU6bUM/T-13wY2jyDI/AAAAAAAAAHU/sCaQsG65oWg/s640/stylish_scr.png\" height=\"488\" border=\"0\" width=\"640\" /></a></div><br />Then it's only a matter of right-clicking on the source, and choose Source-&gt; Format. Or of course Ctrl+Shift+F which is the standard formatting shortcut in Eclipse. EclipseFP handles writing the YAML configuration file for you!<br /><br />Don't know yet when EclipseFP 2.3.1 will be released, pretty soon I think!<br /><br /><br /><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/37404288-2633552998806486247?l=jpmoresmau.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>" "http://jpmoresmau.blogspot.com/2012/06/eclipsefp-integrating-stylish-haskell.html" (20461 31637) new 24 nil nil ((title nil "JP Moresmau: EclipseFP: integrating stylish-haskell") (guid ((isPermaLink . "false")) "tag:blogger.com,1999:blog-37404288.post-2633552998806486247") (link nil "http://jpmoresmau.blogspot.com/2012/06/eclipsefp-integrating-stylish-haskell.html") (description nil "<a href=\"https://github.com/jaspervdj/stylish-haskell\">Stylish-haskell</a> is a new code formatter for Haskell, and people have asked for it to be integrated in EclipseFP. This will be part of the 2.3.1 release.<br /><br />You install stylish-haskell and set its path as with any helper executable (if it's your path you don't even need to specify the path in EclipseFP). Then there's a preference page to set preferences for all projects in your workspace, and a property page on each project if you want project-specific settings:<br /><div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://4.bp.blogspot.com/-eB_BEpU6bUM/T-13wY2jyDI/AAAAAAAAAHU/sCaQsG65oWg/s1600/stylish_scr.png\"><img src=\"http://4.bp.blogspot.com/-eB_BEpU6bUM/T-13wY2jyDI/AAAAAAAAAHU/sCaQsG65oWg/s640/stylish_scr.png\" height=\"488\" border=\"0\" width=\"640\" /></a></div><br />Then it's only a matter of right-clicking on the source, and choose Source-&gt; Format. Or of course Ctrl+Shift+F which is the standard formatting shortcut in Eclipse. EclipseFP handles writing the YAML configuration file for you!<br /><br />Don't know yet when EclipseFP 2.3.1 will be released, pretty soon I think!<br /><br /><br /><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/37404288-2633552998806486247?l=jpmoresmau.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>") (pubDate nil "Fri, 29 Jun 2012 09:55:33 +0000") (author nil "noreply@blogger.com (JP Moresmau)"))) ("JP Moresmau: Command history in EclipseFP GHCi console" "It seems to be a very basic functionality, but when you launch a GHCi session in EclipseFP, you don't have command history. You see the GHCi prompt, you can type all GHCi commands, but if you want to use the REPL repeatedly, you have the retype the same command every time. A few users have of course <a href=\"https://sourceforge.net/projects/eclipsefp/forums/forum/371922/topic/5370358\">asked for command history</a>.<br />Funny thing is, Eclipse doesn't give that out of the box, and on the web you can see a few frustrated people asking for it in their console views. But there seem to be <a href=\"https://bugs.eclipse.org/bugs/show_bug.cgi?id=36669\">no obvious solution</a>. I was rapidly becoming one of these frustrated people, so I had a look.<br />The most obvious is to create our own view to handle GHCi interaction, and manage the GHCi process ourselves. Doable, but that means rewriting the whole console UI (multiple console, potentially different colors for input/output, etc). So instead I had a look at contributing to the console Eclipse opens for us.<br />Oh boy. As usual with Eclipse, the <a href=\"http://help.eclipse.org/indigo/index.jsp?topic=%2Forg.eclipse.platform.doc.isv%2Freference%2Fapi%2Forg%2Feclipse%2Fui%2Fconsole%2Fpackage-summary.html\">console API</a> is quite daunting at first. You can create your own console, or you can just add contributors to the console UI, but since we're using the Eclipse standard classes for displaying a process, we're quite limited, and a lot of classes are created for us without any possibility of injecting our own. And nowhere did I find an easy way to just listen to what the user is sending to the process input stream!<br />So I didn't give up, and I managed to register key listeners and verify listeners on the actual console StyledText control, so I can listen to key presses and such. I then maintain the history of commands. There is a drop down action to see the list of commands, you can choose one from there, or you can use Control-Up and Control-Down to navigate the list. It also works when you paste in text from elsewhere. This will account for 95% of the cases, I hope. There are definitely things that don't work well: if you edit a command in the middle it won't record the proper one, for example, but these bugs I think I can live with for the moment.<br />For the moment it's enabled on interactive consoles (mainly for GHCi), but probably that code could be used outside of EclipseFP if anybody is interested. And of course if somebody has a better solution to the problem, let me know!<br /><br />Command history will be part of the next minor release of EclipseFP, 2.3.1.<br /><br /><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/37404288-5740357257930436190?l=jpmoresmau.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>" "http://jpmoresmau.blogspot.com/2012/06/command-history-in-eclipsefp-ghci.html" (20460 40767) new 25 nil nil ((title nil "JP Moresmau: Command history in EclipseFP GHCi console") (guid ((isPermaLink . "false")) "tag:blogger.com,1999:blog-37404288.post-5740357257930436190") (link nil "http://jpmoresmau.blogspot.com/2012/06/command-history-in-eclipsefp-ghci.html") (description nil "It seems to be a very basic functionality, but when you launch a GHCi session in EclipseFP, you don't have command history. You see the GHCi prompt, you can type all GHCi commands, but if you want to use the REPL repeatedly, you have the retype the same command every time. A few users have of course <a href=\"https://sourceforge.net/projects/eclipsefp/forums/forum/371922/topic/5370358\">asked for command history</a>.<br />Funny thing is, Eclipse doesn't give that out of the box, and on the web you can see a few frustrated people asking for it in their console views. But there seem to be <a href=\"https://bugs.eclipse.org/bugs/show_bug.cgi?id=36669\">no obvious solution</a>. I was rapidly becoming one of these frustrated people, so I had a look.<br />The most obvious is to create our own view to handle GHCi interaction, and manage the GHCi process ourselves. Doable, but that means rewriting the whole console UI (multiple console, potentially different colors for input/output, etc). So instead I had a look at contributing to the console Eclipse opens for us.<br />Oh boy. As usual with Eclipse, the <a href=\"http://help.eclipse.org/indigo/index.jsp?topic=%2Forg.eclipse.platform.doc.isv%2Freference%2Fapi%2Forg%2Feclipse%2Fui%2Fconsole%2Fpackage-summary.html\">console API</a> is quite daunting at first. You can create your own console, or you can just add contributors to the console UI, but since we're using the Eclipse standard classes for displaying a process, we're quite limited, and a lot of classes are created for us without any possibility of injecting our own. And nowhere did I find an easy way to just listen to what the user is sending to the process input stream!<br />So I didn't give up, and I managed to register key listeners and verify listeners on the actual console StyledText control, so I can listen to key presses and such. I then maintain the history of commands. There is a drop down action to see the list of commands, you can choose one from there, or you can use Control-Up and Control-Down to navigate the list. It also works when you paste in text from elsewhere. This will account for 95% of the cases, I hope. There are definitely things that don't work well: if you edit a command in the middle it won't record the proper one, for example, but these bugs I think I can live with for the moment.<br />For the moment it's enabled on interactive consoles (mainly for GHCi), but probably that code could be used outside of EclipseFP if anybody is interested. And of course if somebody has a better solution to the problem, let me know!<br /><br />Command history will be part of the next minor release of EclipseFP, 2.3.1.<br /><br /><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/37404288-5740357257930436190?l=jpmoresmau.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>") (pubDate nil "Thu, 28 Jun 2012 18:15:27 +0000") (author nil "noreply@blogger.com (JP Moresmau)"))) ("Magnus Therning: Qt state machines and automatic timed transitions" "<p>In the interest of full disclosure: this post is related to what I do for a living, development of and for embedded systems. I work for <a href=\"http://www.semcon.com/\">Semcon</a>, but they don’t make me wear a suit and tie so these are my words, and mine alone.</p>\n<h3>A bit of background info</h3>\n<p>In a recent project we had a system where the turning of the wheels were controlled by a simple dial.  It emitted pulses as it was turned and the pulse train was shifted slightly depending on the direction of the turn.  In software this was mapped onto two signals, one for each direction, with one signal emitted for each pulse in the train.  All very straight forward so far.</p>\n<p>To avoid accidental change of direction we decided that</p>\n<ol>\n<li>only start turning the wheels after having received four initial signals, and</li>\n<li>if a full second without receiving any signal meant that the turning had stopped.</li>\n</ol>\n<h3>The solution</h3>\n<p>The application was to be implemented using Qt, so using the Qt state machine framework was an obvious choice.  The full state machine wouldn’t have to be large, only 8 states.  The initial state (<code>sResting</code>) would indicate that the system was in a steady state (no turning), from there any received signal would advance into a successive state (<code>sOne</code>, <code>sTwo</code>, <code>sThree</code>, <code>sFour</code>) to indicate the number of received signals.  From the fourth state the machine would advance directly to a state (<code>sTurning</code>) where a received signal would initiate an actual turn of the wheels.  The turning would happen upon the entry into two separate states (<code>sTurnRight</code> and <code>sTurnLeft</code>), each of these states would instantly return to <code>sTurning</code>.  All of this is simple and straight forward, what wasn’t so clear was to implement the automatic return to the initial state after 1s of inactivity.</p>\n<h3>The implementation</h3>\n<p>As I like to do, I first experimented a little to find a suitable solution to the problem.  What follows is the resulting code of that experiment.  The final code used in the project ended up being very similar.  It’s all based around the method <code>postDelayedEvent()</code> found in <code>QStateMachine</code>.</p>\n<p>First off a new type of event is nedded, a <code>ReturnEvent</code>:</p>\n<div class=\"wp_syntax\"><table><tbody><tr><td class=\"line_numbers\"><pre>1\n2\n3\n4\n5\n</pre></td><td class=\"code\"><pre style=\"font-family: monospace;\" class=\"cpp-qt\"><span style=\"color: #0057AE;\">class</span> ReturnEvent <span style=\"color: #006E28;\">:</span> <span style=\"color: #0057AE;\">public</span> <span style=\"color: #22aadd;\">QEvent</span>\n<span style=\"color: #006E28;\">{</span>\n<span style=\"color: #0057AE;\">public</span><span style=\"color: #006E28;\">:</span>\nReturnEvent<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">:</span> <span style=\"color: #22aadd;\">QEvent</span><span style=\"color: #006E28;\">(</span><span style=\"color: #22aadd;\">QEvent</span><span style=\"color: #006E28;\">::</span><span style=\"color: #2B74C7;\">Type</span><span style=\"color: #006E28;\">(</span><span style=\"color: #22aadd;\">QEvent</span><span style=\"color: #006E28;\">::</span><span style=\"color: #2B74C7;\">User</span> <span style=\"color: #006E28;\">+</span> <span style=\"color: #B08000;\">1</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">{</span><span style=\"color: #006E28;\">}</span>\n<span style=\"color: #006E28;\">}</span><span style=\"color: #006E28;\">;</span></pre></td></tr></tbody></table></div>\n<p>There is also a need for a new type of transition, <code>ReturnTransition</code>:</p>\n<div class=\"wp_syntax\"><table><tbody><tr><td class=\"line_numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td><td class=\"code\"><pre style=\"font-family: monospace;\" class=\"cpp-qt\"><span style=\"color: #0057AE;\">class</span> ReturnTransition <span style=\"color: #006E28;\">:</span> <span style=\"color: #0057AE;\">public</span> QAbstractTransition\n<span style=\"color: #006E28;\">{</span>\n<span style=\"color: #0057AE;\">public</span><span style=\"color: #006E28;\">:</span>\nReturnTransition<span style=\"color: #006E28;\">(</span>QState <span style=\"color: #006E28;\">*</span>target<span style=\"color: #006E28;\">=</span><span style=\"color: #B08000;\">0</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">{</span> <span style=\"color: #000000; font-weight: bold;\">if</span><span style=\"color: #006E28;\">(</span>target<span style=\"color: #006E28;\">)</span> setTargetState<span style=\"color: #006E28;\">(</span>target<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span> <span style=\"color: #006E28;\">}</span>\n \n<span style=\"color: #0057AE;\">protected</span><span style=\"color: #006E28;\">:</span>\n<span style=\"color: #0057AE;\">virtual</span> <span style=\"color: #0057AE;\">bool</span> eventTest<span style=\"color: #006E28;\">(</span><span style=\"color: #22aadd;\">QEvent</span> <span style=\"color: #006E28;\">*</span>e<span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">{</span>\n<span style=\"color: #000000; font-weight: bold;\">return</span><span style=\"color: #006E28;\">(</span>e<span style=\"color: #006E28;\">-&gt;</span><span style=\"color: #2B74C7;\">type</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">==</span> <span style=\"color: #22aadd;\">QEvent</span><span style=\"color: #006E28;\">::</span><span style=\"color: #2B74C7;\">Type</span><span style=\"color: #006E28;\">(</span><span style=\"color: #22aadd;\">QEvent</span><span style=\"color: #006E28;\">::</span><span style=\"color: #2B74C7;\">User</span> <span style=\"color: #006E28;\">+</span> <span style=\"color: #B08000;\">1</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n<span style=\"color: #006E28;\">}</span>\n \n<span style=\"color: #0057AE;\">virtual</span> <span style=\"color: #0057AE;\">void</span> onTransition<span style=\"color: #006E28;\">(</span><span style=\"color: #22aadd;\">QEvent</span> <span style=\"color: #006E28;\">*</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">{</span><span style=\"color: #006E28;\">}</span>\n<span style=\"color: #006E28;\">}</span><span style=\"color: #006E28;\">;</span></pre></td></tr></tbody></table></div>\n<p>For the experiment I decided to use a simple widget containing two buttons, it would also hold the state machine:</p>\n<div class=\"wp_syntax\"><table><tbody><tr><td class=\"line_numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre></td><td class=\"code\"><pre style=\"font-family: monospace;\" class=\"cpp-qt\"><span style=\"color: #0057AE;\">class</span> MButtons <span style=\"color: #006E28;\">:</span> <span style=\"color: #0057AE;\">public</span> <span style=\"color: #22aadd;\">QWidget</span>\n<span style=\"color: #006E28;\">{</span>\nQ_OBJECT<span style=\"color: #006E28;\">;</span>\n \n<span style=\"color: #0057AE;\">public</span><span style=\"color: #006E28;\">:</span>\nMButtons<span style=\"color: #006E28;\">(</span>QStateMachine <span style=\"color: #006E28;\">&amp;</span>m<span style=\"color: #006E28;\">)</span>\n<span style=\"color: #006E28;\">:</span> _right<span style=\"color: #006E28;\">(</span><span style=\"color: #BF0303;\">\"Right\"</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span> _left<span style=\"color: #006E28;\">(</span><span style=\"color: #BF0303;\">\"Left\"</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span>\n_m<span style=\"color: #006E28;\">(</span>m<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span> _delayed<span style=\"color: #006E28;\">(</span><span style=\"color: #B08000;\">0</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">{</span>\n<span style=\"color: #22aadd;\">QBoxLayout</span> <span style=\"color: #006E28;\">*</span>lo <span style=\"color: #006E28;\">=</span> <span style=\"color: #000000; font-weight: bold;\">new</span> <span style=\"color: #22aadd;\">QBoxLayout</span><span style=\"color: #006E28;\">(</span><span style=\"color: #22aadd;\">QBoxLayout</span><span style=\"color: #006E28;\">::</span><span style=\"color: #2B74C7;\">TopToBottom</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\nlo<span style=\"color: #006E28;\">-&gt;</span><span style=\"color: #2B74C7;\">addWidget</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">&amp;</span>_right<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\nlo<span style=\"color: #006E28;\">-&gt;</span><span style=\"color: #2B74C7;\">addWidget</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">&amp;</span>_left<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n \nsetLayout<span style=\"color: #006E28;\">(</span>lo<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n<span style=\"color: #006E28;\">}</span>\n<span style=\"color: #0057AE;\">virtual</span> ~MButtons<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">{</span><span style=\"color: #006E28;\">}</span>\n \n<span style=\"color: #22aadd;\">QPushButton</span> _right<span style=\"color: #006E28;\">,</span>\n_left<span style=\"color: #006E28;\">;</span>\nQStateMachine <span style=\"color: #006E28;\">&amp;</span>_m<span style=\"color: #006E28;\">;</span></pre></td></tr></tbody></table></div>\n<p>The widget also holds the slots for all the state entry functions:</p>\n<div class=\"wp_syntax\"><table><tbody><tr><td class=\"line_numbers\"><pre>20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n</pre></td><td class=\"code\"><pre style=\"font-family: monospace;\" class=\"cpp-qt\"><span style=\"color: #0057AE;\">public</span> <span style=\"color: #0057AE;\">slots</span><span style=\"color: #006E28;\">:</span>\n<span style=\"color: #0057AE;\">void</span> sRestingEntered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">{</span>\n<span style=\"color: #0057AE;\">qDebug</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">&lt;&lt;</span> __PRETTY_FUNCTION__<span style=\"color: #006E28;\">;</span>\n<span style=\"color: #000000; font-weight: bold;\">if</span><span style=\"color: #006E28;\">(</span>_delayed<span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">{</span> _m.<span style=\"color: #2B74C7;\">cancelDelayedEvent</span><span style=\"color: #006E28;\">(</span>_delayed<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span> _delayed <span style=\"color: #006E28;\">=</span> <span style=\"color: #B08000;\">0</span><span style=\"color: #006E28;\">;</span> <span style=\"color: #006E28;\">}</span>\n<span style=\"color: #006E28;\">}</span>\n \n<span style=\"color: #0057AE;\">void</span> sOneEntered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">{</span>\n<span style=\"color: #0057AE;\">qDebug</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">&lt;&lt;</span> __PRETTY_FUNCTION__<span style=\"color: #006E28;\">;</span>\n<span style=\"color: #000000; font-weight: bold;\">if</span><span style=\"color: #006E28;\">(</span>_delayed<span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">{</span> _m.<span style=\"color: #2B74C7;\">cancelDelayedEvent</span><span style=\"color: #006E28;\">(</span>_delayed<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span> _delayed <span style=\"color: #006E28;\">=</span> <span style=\"color: #B08000;\">0</span><span style=\"color: #006E28;\">;</span> <span style=\"color: #006E28;\">}</span>\n_delayed <span style=\"color: #006E28;\">=</span> _m.<span style=\"color: #2B74C7;\">postDelayedEvent</span><span style=\"color: #006E28;\">(</span><span style=\"color: #000000; font-weight: bold;\">new</span> ReturnEvent<span style=\"color: #006E28;\">,</span> <span style=\"color: #B08000;\">1000</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n<span style=\"color: #006E28;\">}</span>\n \n<span style=\"color: #0057AE;\">void</span> sTwoEntered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">{</span>\n<span style=\"color: #0057AE;\">qDebug</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">&lt;&lt;</span> __PRETTY_FUNCTION__<span style=\"color: #006E28;\">;</span>\n<span style=\"color: #000000; font-weight: bold;\">if</span><span style=\"color: #006E28;\">(</span>_delayed<span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">{</span> _m.<span style=\"color: #2B74C7;\">cancelDelayedEvent</span><span style=\"color: #006E28;\">(</span>_delayed<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span> _delayed <span style=\"color: #006E28;\">=</span> <span style=\"color: #B08000;\">0</span><span style=\"color: #006E28;\">;</span> <span style=\"color: #006E28;\">}</span>\n_delayed <span style=\"color: #006E28;\">=</span> _m.<span style=\"color: #2B74C7;\">postDelayedEvent</span><span style=\"color: #006E28;\">(</span><span style=\"color: #000000; font-weight: bold;\">new</span> ReturnEvent<span style=\"color: #006E28;\">,</span> <span style=\"color: #B08000;\">1000</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n<span style=\"color: #006E28;\">}</span>\n<span style=\"color: #0057AE;\">void</span> sThreeEntered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">{</span>\n<span style=\"color: #0057AE;\">qDebug</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">&lt;&lt;</span> __PRETTY_FUNCTION__<span style=\"color: #006E28;\">;</span>\n<span style=\"color: #000000; font-weight: bold;\">if</span><span style=\"color: #006E28;\">(</span>_delayed<span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">{</span> _m.<span style=\"color: #2B74C7;\">cancelDelayedEvent</span><span style=\"color: #006E28;\">(</span>_delayed<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span> _delayed <span style=\"color: #006E28;\">=</span> <span style=\"color: #B08000;\">0</span><span style=\"color: #006E28;\">;</span> <span style=\"color: #006E28;\">}</span>\n_delayed <span style=\"color: #006E28;\">=</span> _m.<span style=\"color: #2B74C7;\">postDelayedEvent</span><span style=\"color: #006E28;\">(</span><span style=\"color: #000000; font-weight: bold;\">new</span> ReturnEvent<span style=\"color: #006E28;\">,</span> <span style=\"color: #B08000;\">1000</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n<span style=\"color: #006E28;\">}</span>\n<span style=\"color: #0057AE;\">void</span> sFourEntered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">{</span>\n<span style=\"color: #0057AE;\">qDebug</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">&lt;&lt;</span> __PRETTY_FUNCTION__<span style=\"color: #006E28;\">;</span>\n<span style=\"color: #000000; font-weight: bold;\">if</span><span style=\"color: #006E28;\">(</span>_delayed<span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">{</span> _m.<span style=\"color: #2B74C7;\">cancelDelayedEvent</span><span style=\"color: #006E28;\">(</span>_delayed<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span> _delayed <span style=\"color: #006E28;\">=</span> <span style=\"color: #B08000;\">0</span><span style=\"color: #006E28;\">;</span> <span style=\"color: #006E28;\">}</span>\n_delayed <span style=\"color: #006E28;\">=</span> _m.<span style=\"color: #2B74C7;\">postDelayedEvent</span><span style=\"color: #006E28;\">(</span><span style=\"color: #000000; font-weight: bold;\">new</span> ReturnEvent<span style=\"color: #006E28;\">,</span> <span style=\"color: #B08000;\">1000</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n<span style=\"color: #006E28;\">}</span>\n<span style=\"color: #0057AE;\">void</span> sTurningEntered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">{</span>\n<span style=\"color: #0057AE;\">qDebug</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">&lt;&lt;</span> __PRETTY_FUNCTION__<span style=\"color: #006E28;\">;</span>\n<span style=\"color: #000000; font-weight: bold;\">if</span><span style=\"color: #006E28;\">(</span>_delayed<span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">{</span> _m.<span style=\"color: #2B74C7;\">cancelDelayedEvent</span><span style=\"color: #006E28;\">(</span>_delayed<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span> _delayed <span style=\"color: #006E28;\">=</span> <span style=\"color: #B08000;\">0</span><span style=\"color: #006E28;\">;</span> <span style=\"color: #006E28;\">}</span>\n_delayed <span style=\"color: #006E28;\">=</span> _m.<span style=\"color: #2B74C7;\">postDelayedEvent</span><span style=\"color: #006E28;\">(</span><span style=\"color: #000000; font-weight: bold;\">new</span> ReturnEvent<span style=\"color: #006E28;\">,</span> <span style=\"color: #B08000;\">1000</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n<span style=\"color: #006E28;\">}</span>\n<span style=\"color: #0057AE;\">void</span> sTurnRightEntered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">{</span>\n<span style=\"color: #0057AE;\">qDebug</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">&lt;&lt;</span> __PRETTY_FUNCTION__<span style=\"color: #006E28;\">;</span>\n<span style=\"color: #006E28;\">}</span>\n<span style=\"color: #0057AE;\">void</span> sTurnLeftEntered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">{</span>\n<span style=\"color: #0057AE;\">qDebug</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">&lt;&lt;</span> __PRETTY_FUNCTION__<span style=\"color: #006E28;\">;</span>\n<span style=\"color: #006E28;\">}</span></pre></td></tr></tbody></table></div>\n<p>Sure, several of the entry functions could be folded into one, but in order to validate the idea it’s easier to make separate ones for each state.  The pattern is easy to spot, on entry a delayed return event is registered (if there’s a previous one its replaced with a new), except for the steady state (<code>sResting</code>) where any delayed event is removed, and the turning states (<code>sTurnRight</code> and <code>sTurnLeft</code>) since those states immediately return to <code>sTurning</code> anyway.</p>\n<p>Finally it also holds the handle for the delayed event:</p>\n<div class=\"wp_syntax\"><table><tbody><tr><td class=\"line_numbers\"><pre>58\n59\n60\n</pre></td><td class=\"code\"><pre style=\"font-family: monospace;\" class=\"cpp-qt\"><span style=\"color: #0057AE;\">private</span><span style=\"color: #006E28;\">:</span>\n<span style=\"color: #0057AE;\">int</span> _delayed<span style=\"color: #006E28;\">;</span>\n<span style=\"color: #006E28;\">}</span><span style=\"color: #006E28;\">;</span></pre></td></tr></tbody></table></div>\n<p>Now the main function for setting it all up is simple:</p>\n<div class=\"wp_syntax\"><table><tbody><tr><td class=\"line_numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n</pre></td><td class=\"code\"><pre style=\"font-family: monospace;\" class=\"cpp-qt\"><span style=\"color: #0057AE;\">int</span> main<span style=\"color: #006E28;\">(</span><span style=\"color: #0057AE;\">int</span> argc<span style=\"color: #006E28;\">,</span> <span style=\"color: #0057AE;\">char</span> <span style=\"color: #006E28;\">**</span>argv<span style=\"color: #006E28;\">)</span>\n<span style=\"color: #006E28;\">{</span>\n<span style=\"color: #22aadd;\">QApplication</span> app<span style=\"color: #006E28;\">(</span>argc<span style=\"color: #006E28;\">,</span> argv<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\nQStateMachine m<span style=\"color: #006E28;\">;</span>\nMButtons b<span style=\"color: #006E28;\">(</span>m<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\nb.<span style=\"color: #2B74C7;\">show</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n \nQState <span style=\"color: #006E28;\">*</span>sResting <span style=\"color: #006E28;\">=</span> <span style=\"color: #000000; font-weight: bold;\">new</span> QState<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span>\n<span style=\"color: #006E28;\">*</span>sOne <span style=\"color: #006E28;\">=</span> <span style=\"color: #000000; font-weight: bold;\">new</span> QState<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span>\n<span style=\"color: #006E28;\">*</span>sTwo <span style=\"color: #006E28;\">=</span> <span style=\"color: #000000; font-weight: bold;\">new</span> QState<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span>\n<span style=\"color: #006E28;\">*</span>sThree <span style=\"color: #006E28;\">=</span> <span style=\"color: #000000; font-weight: bold;\">new</span> QState<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span>\n<span style=\"color: #006E28;\">*</span>sFour <span style=\"color: #006E28;\">=</span> <span style=\"color: #000000; font-weight: bold;\">new</span> QState<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span>\n<span style=\"color: #006E28;\">*</span>sTurning <span style=\"color: #006E28;\">=</span> <span style=\"color: #000000; font-weight: bold;\">new</span> QState<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span>\n<span style=\"color: #006E28;\">*</span>sTurnRight <span style=\"color: #006E28;\">=</span> <span style=\"color: #000000; font-weight: bold;\">new</span> QState<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span>\n<span style=\"color: #006E28;\">*</span>sTurnLeft <span style=\"color: #006E28;\">=</span> <span style=\"color: #000000; font-weight: bold;\">new</span> QState<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n \nm.<span style=\"color: #2B74C7;\">addState</span><span style=\"color: #006E28;\">(</span>sResting<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\nm.<span style=\"color: #2B74C7;\">addState</span><span style=\"color: #006E28;\">(</span>sOne<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\nm.<span style=\"color: #2B74C7;\">addState</span><span style=\"color: #006E28;\">(</span>sTwo<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\nm.<span style=\"color: #2B74C7;\">addState</span><span style=\"color: #006E28;\">(</span>sThree<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\nm.<span style=\"color: #2B74C7;\">addState</span><span style=\"color: #006E28;\">(</span>sFour<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\nm.<span style=\"color: #2B74C7;\">addState</span><span style=\"color: #006E28;\">(</span>sTurning<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\nm.<span style=\"color: #2B74C7;\">addState</span><span style=\"color: #006E28;\">(</span>sTurnRight<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\nm.<span style=\"color: #2B74C7;\">addState</span><span style=\"color: #006E28;\">(</span>sTurnLeft<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\nm.<span style=\"color: #2B74C7;\">setInitialState</span><span style=\"color: #006E28;\">(</span>sResting<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n \nsResting<span style=\"color: #006E28;\">-&gt;</span><span style=\"color: #2B74C7;\">addTransition</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">&amp;</span>b._right<span style=\"color: #006E28;\">,</span> SIGNAL<span style=\"color: #006E28;\">(</span>clicked<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span> sOne<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\nsResting<span style=\"color: #006E28;\">-&gt;</span><span style=\"color: #2B74C7;\">addTransition</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">&amp;</span>b._left<span style=\"color: #006E28;\">,</span> SIGNAL<span style=\"color: #006E28;\">(</span>clicked<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span> sOne<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\nsOne<span style=\"color: #006E28;\">-&gt;</span><span style=\"color: #2B74C7;\">addTransition</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">&amp;</span>b._right<span style=\"color: #006E28;\">,</span> SIGNAL<span style=\"color: #006E28;\">(</span>clicked<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span> sTwo<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\nsOne<span style=\"color: #006E28;\">-&gt;</span><span style=\"color: #2B74C7;\">addTransition</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">&amp;</span>b._left<span style=\"color: #006E28;\">,</span> SIGNAL<span style=\"color: #006E28;\">(</span>clicked<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span> sTwo<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\nsOne<span style=\"color: #006E28;\">-&gt;</span><span style=\"color: #2B74C7;\">addTransition</span><span style=\"color: #006E28;\">(</span><span style=\"color: #000000; font-weight: bold;\">new</span> ReturnTransition<span style=\"color: #006E28;\">(</span>sResting<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\nsTwo<span style=\"color: #006E28;\">-&gt;</span><span style=\"color: #2B74C7;\">addTransition</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">&amp;</span>b._right<span style=\"color: #006E28;\">,</span> SIGNAL<span style=\"color: #006E28;\">(</span>clicked<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span> sThree<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\nsTwo<span style=\"color: #006E28;\">-&gt;</span><span style=\"color: #2B74C7;\">addTransition</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">&amp;</span>b._left<span style=\"color: #006E28;\">,</span> SIGNAL<span style=\"color: #006E28;\">(</span>clicked<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span> sThree<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\nsTwo<span style=\"color: #006E28;\">-&gt;</span><span style=\"color: #2B74C7;\">addTransition</span><span style=\"color: #006E28;\">(</span><span style=\"color: #000000; font-weight: bold;\">new</span> ReturnTransition<span style=\"color: #006E28;\">(</span>sResting<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\nsThree<span style=\"color: #006E28;\">-&gt;</span><span style=\"color: #2B74C7;\">addTransition</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">&amp;</span>b._right<span style=\"color: #006E28;\">,</span> SIGNAL<span style=\"color: #006E28;\">(</span>clicked<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span> sFour<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\nsThree<span style=\"color: #006E28;\">-&gt;</span><span style=\"color: #2B74C7;\">addTransition</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">&amp;</span>b._left<span style=\"color: #006E28;\">,</span> SIGNAL<span style=\"color: #006E28;\">(</span>clicked<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span> sFour<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\nsThree<span style=\"color: #006E28;\">-&gt;</span><span style=\"color: #2B74C7;\">addTransition</span><span style=\"color: #006E28;\">(</span><span style=\"color: #000000; font-weight: bold;\">new</span> ReturnTransition<span style=\"color: #006E28;\">(</span>sResting<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\nsFour<span style=\"color: #006E28;\">-&gt;</span><span style=\"color: #2B74C7;\">addTransition</span><span style=\"color: #006E28;\">(</span>sTurning<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\nsTurning<span style=\"color: #006E28;\">-&gt;</span><span style=\"color: #2B74C7;\">addTransition</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">&amp;</span>b._right<span style=\"color: #006E28;\">,</span> SIGNAL<span style=\"color: #006E28;\">(</span>clicked<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span> sTurnRight<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\nsTurning<span style=\"color: #006E28;\">-&gt;</span><span style=\"color: #2B74C7;\">addTransition</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">&amp;</span>b._left<span style=\"color: #006E28;\">,</span> SIGNAL<span style=\"color: #006E28;\">(</span>clicked<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span> sTurnLeft<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\nsTurning<span style=\"color: #006E28;\">-&gt;</span><span style=\"color: #2B74C7;\">addTransition</span><span style=\"color: #006E28;\">(</span><span style=\"color: #000000; font-weight: bold;\">new</span> ReturnTransition<span style=\"color: #006E28;\">(</span>sResting<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\nsTurnRight<span style=\"color: #006E28;\">-&gt;</span><span style=\"color: #2B74C7;\">addTransition</span><span style=\"color: #006E28;\">(</span>sTurning<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\nsTurnLeft<span style=\"color: #006E28;\">-&gt;</span><span style=\"color: #2B74C7;\">addTransition</span><span style=\"color: #006E28;\">(</span>sTurning<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n \n<span style=\"color: #22aadd;\">QObject</span><span style=\"color: #006E28;\">::</span><span style=\"color: #0057AE;\">connect</span><span style=\"color: #006E28;\">(</span>sResting<span style=\"color: #006E28;\">,</span> SIGNAL<span style=\"color: #006E28;\">(</span>entered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span> <span style=\"color: #006E28;\">&amp;</span>b<span style=\"color: #006E28;\">,</span> SLOT<span style=\"color: #006E28;\">(</span>sRestingEntered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n<span style=\"color: #22aadd;\">QObject</span><span style=\"color: #006E28;\">::</span><span style=\"color: #0057AE;\">connect</span><span style=\"color: #006E28;\">(</span>sOne<span style=\"color: #006E28;\">,</span> SIGNAL<span style=\"color: #006E28;\">(</span>entered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span> <span style=\"color: #006E28;\">&amp;</span>b<span style=\"color: #006E28;\">,</span> SLOT<span style=\"color: #006E28;\">(</span>sOneEntered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n<span style=\"color: #22aadd;\">QObject</span><span style=\"color: #006E28;\">::</span><span style=\"color: #0057AE;\">connect</span><span style=\"color: #006E28;\">(</span>sTwo<span style=\"color: #006E28;\">,</span> SIGNAL<span style=\"color: #006E28;\">(</span>entered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span> <span style=\"color: #006E28;\">&amp;</span>b<span style=\"color: #006E28;\">,</span> SLOT<span style=\"color: #006E28;\">(</span>sTwoEntered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n<span style=\"color: #22aadd;\">QObject</span><span style=\"color: #006E28;\">::</span><span style=\"color: #0057AE;\">connect</span><span style=\"color: #006E28;\">(</span>sThree<span style=\"color: #006E28;\">,</span> SIGNAL<span style=\"color: #006E28;\">(</span>entered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span> <span style=\"color: #006E28;\">&amp;</span>b<span style=\"color: #006E28;\">,</span> SLOT<span style=\"color: #006E28;\">(</span>sThreeEntered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n<span style=\"color: #22aadd;\">QObject</span><span style=\"color: #006E28;\">::</span><span style=\"color: #0057AE;\">connect</span><span style=\"color: #006E28;\">(</span>sFour<span style=\"color: #006E28;\">,</span> SIGNAL<span style=\"color: #006E28;\">(</span>entered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span> <span style=\"color: #006E28;\">&amp;</span>b<span style=\"color: #006E28;\">,</span> SLOT<span style=\"color: #006E28;\">(</span>sFourEntered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n<span style=\"color: #22aadd;\">QObject</span><span style=\"color: #006E28;\">::</span><span style=\"color: #0057AE;\">connect</span><span style=\"color: #006E28;\">(</span>sTurning<span style=\"color: #006E28;\">,</span> SIGNAL<span style=\"color: #006E28;\">(</span>entered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span> <span style=\"color: #006E28;\">&amp;</span>b<span style=\"color: #006E28;\">,</span> SLOT<span style=\"color: #006E28;\">(</span>sTurningEntered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n<span style=\"color: #22aadd;\">QObject</span><span style=\"color: #006E28;\">::</span><span style=\"color: #0057AE;\">connect</span><span style=\"color: #006E28;\">(</span>sTurnRight<span style=\"color: #006E28;\">,</span> SIGNAL<span style=\"color: #006E28;\">(</span>entered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span> <span style=\"color: #006E28;\">&amp;</span>b<span style=\"color: #006E28;\">,</span> SLOT<span style=\"color: #006E28;\">(</span>sTurnRightEntered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n<span style=\"color: #22aadd;\">QObject</span><span style=\"color: #006E28;\">::</span><span style=\"color: #0057AE;\">connect</span><span style=\"color: #006E28;\">(</span>sTurnLeft<span style=\"color: #006E28;\">,</span> SIGNAL<span style=\"color: #006E28;\">(</span>entered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span> <span style=\"color: #006E28;\">&amp;</span>b<span style=\"color: #006E28;\">,</span> SLOT<span style=\"color: #006E28;\">(</span>sTurnLeftEntered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n \nm.<span style=\"color: #2B74C7;\">start</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n \n<span style=\"color: #000000; font-weight: bold;\">return</span><span style=\"color: #006E28;\">(</span>app.<span style=\"color: #2B74C7;\">exec</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n<span style=\"color: #006E28;\">}</span></pre></td></tr></tbody></table></div>\n<h3>Conclusion and open questions</h3>\n<p>I’m fairly happy with the solution, but I’d be curious how other people, people more skilled in using Qt, would have solved the problem.</p>\n<p>For a while I considered solving the skipping of four initial signals using a single state and counter, but I saw no obvious easy way to implement that, so I instead opted to use separate states.  Slightly wasteful of resources, but not too bad, and simplicity <em>is</em> important.  I’m very curious to find out if there’s a simply way to implement it using a single state.</p>\n<p><a href=\"http://www.addtoany.com/share_save#url=http%3A%2F%2Ftherning.org%2Fmagnus%2Farchives%2F1051&amp;title=Qt%20state%20machines%20and%20automatic%20timed%20transitions\" id=\"wpa2a_2\" class=\"a2a_dd a2a_target addtoany_share_save\">Share/Bookmark</a></p>" "http://therning.org/magnus/archives/1051" (20459 32730) new 26 nil nil ((title nil "Magnus Therning: Qt state machines and automatic timed transitions") (guid ((isPermaLink . "false")) "http://therning.org/magnus/?p=1051") (link nil "http://therning.org/magnus/archives/1051") (description nil "<p>In the interest of full disclosure: this post is related to what I do for a living, development of and for embedded systems. I work for <a href=\"http://www.semcon.com/\">Semcon</a>, but they don’t make me wear a suit and tie so these are my words, and mine alone.</p>\n\n<h3>A bit of background info</h3>\n\n<p>In a recent project we had a system where the turning of the wheels were controlled by a simple dial.  It emitted pulses as it was turned and the pulse train was shifted slightly depending on the direction of the turn.  In software this was mapped onto two signals, one for each direction, with one signal emitted for each pulse in the train.  All very straight forward so far.</p>\n\n<p>To avoid accidental change of direction we decided that</p>\n\n<ol>\n<li>only start turning the wheels after having received four initial signals, and</li>\n<li>if a full second without receiving any signal meant that the turning had stopped.</li>\n</ol>\n\n<h3>The solution</h3>\n\n<p>The application was to be implemented using Qt, so using the Qt state machine framework was an obvious choice.  The full state machine wouldn’t have to be large, only 8 states.  The initial state (<code>sResting</code>) would indicate that the system was in a steady state (no turning), from there any received signal would advance into a successive state (<code>sOne</code>, <code>sTwo</code>, <code>sThree</code>, <code>sFour</code>) to indicate the number of received signals.  From the fourth state the machine would advance directly to a state (<code>sTurning</code>) where a received signal would initiate an actual turn of the wheels.  The turning would happen upon the entry into two separate states (<code>sTurnRight</code> and <code>sTurnLeft</code>), each of these states would instantly return to <code>sTurning</code>.  All of this is simple and straight forward, what wasn’t so clear was to implement the automatic return to the initial state after 1s of inactivity.</p>\n\n<h3>The implementation</h3>\n\n<p>As I like to do, I first experimented a little to find a suitable solution to the problem.  What follows is the resulting code of that experiment.  The final code used in the project ended up being very similar.  It’s all based around the method <code>postDelayedEvent()</code> found in <code>QStateMachine</code>.</p>\n\n<p>First off a new type of event is nedded, a <code>ReturnEvent</code>:</p>\n\n\n<div class=\"wp_syntax\"><table><tbody><tr><td class=\"line_numbers\"><pre>1\n2\n3\n4\n5\n</pre></td><td class=\"code\"><pre style=\"font-family: monospace;\" class=\"cpp-qt\"><span style=\"color: #0057AE;\">class</span> ReturnEvent <span style=\"color: #006E28;\">:</span> <span style=\"color: #0057AE;\">public</span> <span style=\"color: #22aadd;\">QEvent</span>\n<span style=\"color: #006E28;\">{</span>\n<span style=\"color: #0057AE;\">public</span><span style=\"color: #006E28;\">:</span>\n    ReturnEvent<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">:</span> <span style=\"color: #22aadd;\">QEvent</span><span style=\"color: #006E28;\">(</span><span style=\"color: #22aadd;\">QEvent</span><span style=\"color: #006E28;\">::</span><span style=\"color: #2B74C7;\">Type</span><span style=\"color: #006E28;\">(</span><span style=\"color: #22aadd;\">QEvent</span><span style=\"color: #006E28;\">::</span><span style=\"color: #2B74C7;\">User</span> <span style=\"color: #006E28;\">+</span> <span style=\"color: #B08000;\">1</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">{</span><span style=\"color: #006E28;\">}</span>\n<span style=\"color: #006E28;\">}</span><span style=\"color: #006E28;\">;</span></pre></td></tr></tbody></table></div>\n\n\n<p>There is also a need for a new type of transition, <code>ReturnTransition</code>:</p>\n\n\n<div class=\"wp_syntax\"><table><tbody><tr><td class=\"line_numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td><td class=\"code\"><pre style=\"font-family: monospace;\" class=\"cpp-qt\"><span style=\"color: #0057AE;\">class</span> ReturnTransition <span style=\"color: #006E28;\">:</span> <span style=\"color: #0057AE;\">public</span> QAbstractTransition\n<span style=\"color: #006E28;\">{</span>\n<span style=\"color: #0057AE;\">public</span><span style=\"color: #006E28;\">:</span>\n    ReturnTransition<span style=\"color: #006E28;\">(</span>QState <span style=\"color: #006E28;\">*</span>target<span style=\"color: #006E28;\">=</span><span style=\"color: #B08000;\">0</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">{</span> <span style=\"color: #000000; font-weight: bold;\">if</span><span style=\"color: #006E28;\">(</span>target<span style=\"color: #006E28;\">)</span> setTargetState<span style=\"color: #006E28;\">(</span>target<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span> <span style=\"color: #006E28;\">}</span>\n \n<span style=\"color: #0057AE;\">protected</span><span style=\"color: #006E28;\">:</span>\n    <span style=\"color: #0057AE;\">virtual</span> <span style=\"color: #0057AE;\">bool</span> eventTest<span style=\"color: #006E28;\">(</span><span style=\"color: #22aadd;\">QEvent</span> <span style=\"color: #006E28;\">*</span>e<span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">{</span>\n        <span style=\"color: #000000; font-weight: bold;\">return</span><span style=\"color: #006E28;\">(</span>e<span style=\"color: #006E28;\">-&gt;</span><span style=\"color: #2B74C7;\">type</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">==</span> <span style=\"color: #22aadd;\">QEvent</span><span style=\"color: #006E28;\">::</span><span style=\"color: #2B74C7;\">Type</span><span style=\"color: #006E28;\">(</span><span style=\"color: #22aadd;\">QEvent</span><span style=\"color: #006E28;\">::</span><span style=\"color: #2B74C7;\">User</span> <span style=\"color: #006E28;\">+</span> <span style=\"color: #B08000;\">1</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n    <span style=\"color: #006E28;\">}</span>\n \n    <span style=\"color: #0057AE;\">virtual</span> <span style=\"color: #0057AE;\">void</span> onTransition<span style=\"color: #006E28;\">(</span><span style=\"color: #22aadd;\">QEvent</span> <span style=\"color: #006E28;\">*</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">{</span><span style=\"color: #006E28;\">}</span>\n<span style=\"color: #006E28;\">}</span><span style=\"color: #006E28;\">;</span></pre></td></tr></tbody></table></div>\n\n\n<p>For the experiment I decided to use a simple widget containing two buttons, it would also hold the state machine:</p>\n\n\n<div class=\"wp_syntax\"><table><tbody><tr><td class=\"line_numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre></td><td class=\"code\"><pre style=\"font-family: monospace;\" class=\"cpp-qt\"><span style=\"color: #0057AE;\">class</span> MButtons <span style=\"color: #006E28;\">:</span> <span style=\"color: #0057AE;\">public</span> <span style=\"color: #22aadd;\">QWidget</span>\n<span style=\"color: #006E28;\">{</span>\n    Q_OBJECT<span style=\"color: #006E28;\">;</span>\n \n<span style=\"color: #0057AE;\">public</span><span style=\"color: #006E28;\">:</span>\n    MButtons<span style=\"color: #006E28;\">(</span>QStateMachine <span style=\"color: #006E28;\">&amp;</span>m<span style=\"color: #006E28;\">)</span>\n        <span style=\"color: #006E28;\">:</span> _right<span style=\"color: #006E28;\">(</span><span style=\"color: #BF0303;\">\"Right\"</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span> _left<span style=\"color: #006E28;\">(</span><span style=\"color: #BF0303;\">\"Left\"</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span>\n        _m<span style=\"color: #006E28;\">(</span>m<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span> _delayed<span style=\"color: #006E28;\">(</span><span style=\"color: #B08000;\">0</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">{</span>\n        <span style=\"color: #22aadd;\">QBoxLayout</span> <span style=\"color: #006E28;\">*</span>lo <span style=\"color: #006E28;\">=</span> <span style=\"color: #000000; font-weight: bold;\">new</span> <span style=\"color: #22aadd;\">QBoxLayout</span><span style=\"color: #006E28;\">(</span><span style=\"color: #22aadd;\">QBoxLayout</span><span style=\"color: #006E28;\">::</span><span style=\"color: #2B74C7;\">TopToBottom</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n        lo<span style=\"color: #006E28;\">-&gt;</span><span style=\"color: #2B74C7;\">addWidget</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">&amp;</span>_right<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n        lo<span style=\"color: #006E28;\">-&gt;</span><span style=\"color: #2B74C7;\">addWidget</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">&amp;</span>_left<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n \n        setLayout<span style=\"color: #006E28;\">(</span>lo<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n    <span style=\"color: #006E28;\">}</span>\n    <span style=\"color: #0057AE;\">virtual</span> ~MButtons<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">{</span><span style=\"color: #006E28;\">}</span>\n \n    <span style=\"color: #22aadd;\">QPushButton</span> _right<span style=\"color: #006E28;\">,</span>\n                _left<span style=\"color: #006E28;\">;</span>\n    QStateMachine <span style=\"color: #006E28;\">&amp;</span>_m<span style=\"color: #006E28;\">;</span></pre></td></tr></tbody></table></div>\n\n\n<p>The widget also holds the slots for all the state entry functions:</p>\n\n\n<div class=\"wp_syntax\"><table><tbody><tr><td class=\"line_numbers\"><pre>20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n</pre></td><td class=\"code\"><pre style=\"font-family: monospace;\" class=\"cpp-qt\"><span style=\"color: #0057AE;\">public</span> <span style=\"color: #0057AE;\">slots</span><span style=\"color: #006E28;\">:</span>\n    <span style=\"color: #0057AE;\">void</span> sRestingEntered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">{</span>\n        <span style=\"color: #0057AE;\">qDebug</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">&lt;&lt;</span> __PRETTY_FUNCTION__<span style=\"color: #006E28;\">;</span>\n        <span style=\"color: #000000; font-weight: bold;\">if</span><span style=\"color: #006E28;\">(</span>_delayed<span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">{</span> _m.<span style=\"color: #2B74C7;\">cancelDelayedEvent</span><span style=\"color: #006E28;\">(</span>_delayed<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span> _delayed <span style=\"color: #006E28;\">=</span> <span style=\"color: #B08000;\">0</span><span style=\"color: #006E28;\">;</span> <span style=\"color: #006E28;\">}</span>\n    <span style=\"color: #006E28;\">}</span>\n \n    <span style=\"color: #0057AE;\">void</span> sOneEntered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">{</span>\n        <span style=\"color: #0057AE;\">qDebug</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">&lt;&lt;</span> __PRETTY_FUNCTION__<span style=\"color: #006E28;\">;</span>\n        <span style=\"color: #000000; font-weight: bold;\">if</span><span style=\"color: #006E28;\">(</span>_delayed<span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">{</span> _m.<span style=\"color: #2B74C7;\">cancelDelayedEvent</span><span style=\"color: #006E28;\">(</span>_delayed<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span> _delayed <span style=\"color: #006E28;\">=</span> <span style=\"color: #B08000;\">0</span><span style=\"color: #006E28;\">;</span> <span style=\"color: #006E28;\">}</span>\n        _delayed <span style=\"color: #006E28;\">=</span> _m.<span style=\"color: #2B74C7;\">postDelayedEvent</span><span style=\"color: #006E28;\">(</span><span style=\"color: #000000; font-weight: bold;\">new</span> ReturnEvent<span style=\"color: #006E28;\">,</span> <span style=\"color: #B08000;\">1000</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n    <span style=\"color: #006E28;\">}</span>\n \n    <span style=\"color: #0057AE;\">void</span> sTwoEntered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">{</span>\n        <span style=\"color: #0057AE;\">qDebug</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">&lt;&lt;</span> __PRETTY_FUNCTION__<span style=\"color: #006E28;\">;</span>\n        <span style=\"color: #000000; font-weight: bold;\">if</span><span style=\"color: #006E28;\">(</span>_delayed<span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">{</span> _m.<span style=\"color: #2B74C7;\">cancelDelayedEvent</span><span style=\"color: #006E28;\">(</span>_delayed<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span> _delayed <span style=\"color: #006E28;\">=</span> <span style=\"color: #B08000;\">0</span><span style=\"color: #006E28;\">;</span> <span style=\"color: #006E28;\">}</span>\n        _delayed <span style=\"color: #006E28;\">=</span> _m.<span style=\"color: #2B74C7;\">postDelayedEvent</span><span style=\"color: #006E28;\">(</span><span style=\"color: #000000; font-weight: bold;\">new</span> ReturnEvent<span style=\"color: #006E28;\">,</span> <span style=\"color: #B08000;\">1000</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n    <span style=\"color: #006E28;\">}</span>\n    <span style=\"color: #0057AE;\">void</span> sThreeEntered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">{</span>\n        <span style=\"color: #0057AE;\">qDebug</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">&lt;&lt;</span> __PRETTY_FUNCTION__<span style=\"color: #006E28;\">;</span>\n        <span style=\"color: #000000; font-weight: bold;\">if</span><span style=\"color: #006E28;\">(</span>_delayed<span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">{</span> _m.<span style=\"color: #2B74C7;\">cancelDelayedEvent</span><span style=\"color: #006E28;\">(</span>_delayed<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span> _delayed <span style=\"color: #006E28;\">=</span> <span style=\"color: #B08000;\">0</span><span style=\"color: #006E28;\">;</span> <span style=\"color: #006E28;\">}</span>\n        _delayed <span style=\"color: #006E28;\">=</span> _m.<span style=\"color: #2B74C7;\">postDelayedEvent</span><span style=\"color: #006E28;\">(</span><span style=\"color: #000000; font-weight: bold;\">new</span> ReturnEvent<span style=\"color: #006E28;\">,</span> <span style=\"color: #B08000;\">1000</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n    <span style=\"color: #006E28;\">}</span>\n    <span style=\"color: #0057AE;\">void</span> sFourEntered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">{</span>\n        <span style=\"color: #0057AE;\">qDebug</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">&lt;&lt;</span> __PRETTY_FUNCTION__<span style=\"color: #006E28;\">;</span>\n        <span style=\"color: #000000; font-weight: bold;\">if</span><span style=\"color: #006E28;\">(</span>_delayed<span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">{</span> _m.<span style=\"color: #2B74C7;\">cancelDelayedEvent</span><span style=\"color: #006E28;\">(</span>_delayed<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span> _delayed <span style=\"color: #006E28;\">=</span> <span style=\"color: #B08000;\">0</span><span style=\"color: #006E28;\">;</span> <span style=\"color: #006E28;\">}</span>\n        _delayed <span style=\"color: #006E28;\">=</span> _m.<span style=\"color: #2B74C7;\">postDelayedEvent</span><span style=\"color: #006E28;\">(</span><span style=\"color: #000000; font-weight: bold;\">new</span> ReturnEvent<span style=\"color: #006E28;\">,</span> <span style=\"color: #B08000;\">1000</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n    <span style=\"color: #006E28;\">}</span>\n    <span style=\"color: #0057AE;\">void</span> sTurningEntered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">{</span>\n        <span style=\"color: #0057AE;\">qDebug</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">&lt;&lt;</span> __PRETTY_FUNCTION__<span style=\"color: #006E28;\">;</span>\n        <span style=\"color: #000000; font-weight: bold;\">if</span><span style=\"color: #006E28;\">(</span>_delayed<span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">{</span> _m.<span style=\"color: #2B74C7;\">cancelDelayedEvent</span><span style=\"color: #006E28;\">(</span>_delayed<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span> _delayed <span style=\"color: #006E28;\">=</span> <span style=\"color: #B08000;\">0</span><span style=\"color: #006E28;\">;</span> <span style=\"color: #006E28;\">}</span>\n        _delayed <span style=\"color: #006E28;\">=</span> _m.<span style=\"color: #2B74C7;\">postDelayedEvent</span><span style=\"color: #006E28;\">(</span><span style=\"color: #000000; font-weight: bold;\">new</span> ReturnEvent<span style=\"color: #006E28;\">,</span> <span style=\"color: #B08000;\">1000</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n    <span style=\"color: #006E28;\">}</span>\n    <span style=\"color: #0057AE;\">void</span> sTurnRightEntered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">{</span>\n        <span style=\"color: #0057AE;\">qDebug</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">&lt;&lt;</span> __PRETTY_FUNCTION__<span style=\"color: #006E28;\">;</span>\n    <span style=\"color: #006E28;\">}</span>\n    <span style=\"color: #0057AE;\">void</span> sTurnLeftEntered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">{</span>\n        <span style=\"color: #0057AE;\">qDebug</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span> <span style=\"color: #006E28;\">&lt;&lt;</span> __PRETTY_FUNCTION__<span style=\"color: #006E28;\">;</span>\n    <span style=\"color: #006E28;\">}</span></pre></td></tr></tbody></table></div>\n\n\n<p>Sure, several of the entry functions could be folded into one, but in order to validate the idea it’s easier to make separate ones for each state.  The pattern is easy to spot, on entry a delayed return event is registered (if there’s a previous one its replaced with a new), except for the steady state (<code>sResting</code>) where any delayed event is removed, and the turning states (<code>sTurnRight</code> and <code>sTurnLeft</code>) since those states immediately return to <code>sTurning</code> anyway.</p>\n\n<p>Finally it also holds the handle for the delayed event:</p>\n\n\n<div class=\"wp_syntax\"><table><tbody><tr><td class=\"line_numbers\"><pre>58\n59\n60\n</pre></td><td class=\"code\"><pre style=\"font-family: monospace;\" class=\"cpp-qt\"><span style=\"color: #0057AE;\">private</span><span style=\"color: #006E28;\">:</span>\n    <span style=\"color: #0057AE;\">int</span> _delayed<span style=\"color: #006E28;\">;</span>\n<span style=\"color: #006E28;\">}</span><span style=\"color: #006E28;\">;</span></pre></td></tr></tbody></table></div>\n\n\n<p>Now the main function for setting it all up is simple:</p>\n\n\n<div class=\"wp_syntax\"><table><tbody><tr><td class=\"line_numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n</pre></td><td class=\"code\"><pre style=\"font-family: monospace;\" class=\"cpp-qt\"><span style=\"color: #0057AE;\">int</span> main<span style=\"color: #006E28;\">(</span><span style=\"color: #0057AE;\">int</span> argc<span style=\"color: #006E28;\">,</span> <span style=\"color: #0057AE;\">char</span> <span style=\"color: #006E28;\">**</span>argv<span style=\"color: #006E28;\">)</span>\n<span style=\"color: #006E28;\">{</span>\n    <span style=\"color: #22aadd;\">QApplication</span> app<span style=\"color: #006E28;\">(</span>argc<span style=\"color: #006E28;\">,</span> argv<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n    QStateMachine m<span style=\"color: #006E28;\">;</span>\n    MButtons b<span style=\"color: #006E28;\">(</span>m<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n    b.<span style=\"color: #2B74C7;\">show</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n \n    QState <span style=\"color: #006E28;\">*</span>sResting <span style=\"color: #006E28;\">=</span> <span style=\"color: #000000; font-weight: bold;\">new</span> QState<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span>\n           <span style=\"color: #006E28;\">*</span>sOne <span style=\"color: #006E28;\">=</span> <span style=\"color: #000000; font-weight: bold;\">new</span> QState<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span>\n           <span style=\"color: #006E28;\">*</span>sTwo <span style=\"color: #006E28;\">=</span> <span style=\"color: #000000; font-weight: bold;\">new</span> QState<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span>\n           <span style=\"color: #006E28;\">*</span>sThree <span style=\"color: #006E28;\">=</span> <span style=\"color: #000000; font-weight: bold;\">new</span> QState<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span>\n           <span style=\"color: #006E28;\">*</span>sFour <span style=\"color: #006E28;\">=</span> <span style=\"color: #000000; font-weight: bold;\">new</span> QState<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span>\n           <span style=\"color: #006E28;\">*</span>sTurning <span style=\"color: #006E28;\">=</span> <span style=\"color: #000000; font-weight: bold;\">new</span> QState<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span>\n           <span style=\"color: #006E28;\">*</span>sTurnRight <span style=\"color: #006E28;\">=</span> <span style=\"color: #000000; font-weight: bold;\">new</span> QState<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span>\n           <span style=\"color: #006E28;\">*</span>sTurnLeft <span style=\"color: #006E28;\">=</span> <span style=\"color: #000000; font-weight: bold;\">new</span> QState<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n \n    m.<span style=\"color: #2B74C7;\">addState</span><span style=\"color: #006E28;\">(</span>sResting<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n    m.<span style=\"color: #2B74C7;\">addState</span><span style=\"color: #006E28;\">(</span>sOne<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n    m.<span style=\"color: #2B74C7;\">addState</span><span style=\"color: #006E28;\">(</span>sTwo<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n    m.<span style=\"color: #2B74C7;\">addState</span><span style=\"color: #006E28;\">(</span>sThree<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n    m.<span style=\"color: #2B74C7;\">addState</span><span style=\"color: #006E28;\">(</span>sFour<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n    m.<span style=\"color: #2B74C7;\">addState</span><span style=\"color: #006E28;\">(</span>sTurning<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n    m.<span style=\"color: #2B74C7;\">addState</span><span style=\"color: #006E28;\">(</span>sTurnRight<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n    m.<span style=\"color: #2B74C7;\">addState</span><span style=\"color: #006E28;\">(</span>sTurnLeft<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n    m.<span style=\"color: #2B74C7;\">setInitialState</span><span style=\"color: #006E28;\">(</span>sResting<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n \n    sResting<span style=\"color: #006E28;\">-&gt;</span><span style=\"color: #2B74C7;\">addTransition</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">&amp;</span>b._right<span style=\"color: #006E28;\">,</span> SIGNAL<span style=\"color: #006E28;\">(</span>clicked<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span> sOne<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n    sResting<span style=\"color: #006E28;\">-&gt;</span><span style=\"color: #2B74C7;\">addTransition</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">&amp;</span>b._left<span style=\"color: #006E28;\">,</span> SIGNAL<span style=\"color: #006E28;\">(</span>clicked<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span> sOne<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n    sOne<span style=\"color: #006E28;\">-&gt;</span><span style=\"color: #2B74C7;\">addTransition</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">&amp;</span>b._right<span style=\"color: #006E28;\">,</span> SIGNAL<span style=\"color: #006E28;\">(</span>clicked<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span> sTwo<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n    sOne<span style=\"color: #006E28;\">-&gt;</span><span style=\"color: #2B74C7;\">addTransition</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">&amp;</span>b._left<span style=\"color: #006E28;\">,</span> SIGNAL<span style=\"color: #006E28;\">(</span>clicked<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span> sTwo<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n    sOne<span style=\"color: #006E28;\">-&gt;</span><span style=\"color: #2B74C7;\">addTransition</span><span style=\"color: #006E28;\">(</span><span style=\"color: #000000; font-weight: bold;\">new</span> ReturnTransition<span style=\"color: #006E28;\">(</span>sResting<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n    sTwo<span style=\"color: #006E28;\">-&gt;</span><span style=\"color: #2B74C7;\">addTransition</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">&amp;</span>b._right<span style=\"color: #006E28;\">,</span> SIGNAL<span style=\"color: #006E28;\">(</span>clicked<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span> sThree<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n    sTwo<span style=\"color: #006E28;\">-&gt;</span><span style=\"color: #2B74C7;\">addTransition</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">&amp;</span>b._left<span style=\"color: #006E28;\">,</span> SIGNAL<span style=\"color: #006E28;\">(</span>clicked<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span> sThree<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n    sTwo<span style=\"color: #006E28;\">-&gt;</span><span style=\"color: #2B74C7;\">addTransition</span><span style=\"color: #006E28;\">(</span><span style=\"color: #000000; font-weight: bold;\">new</span> ReturnTransition<span style=\"color: #006E28;\">(</span>sResting<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n    sThree<span style=\"color: #006E28;\">-&gt;</span><span style=\"color: #2B74C7;\">addTransition</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">&amp;</span>b._right<span style=\"color: #006E28;\">,</span> SIGNAL<span style=\"color: #006E28;\">(</span>clicked<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span> sFour<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n    sThree<span style=\"color: #006E28;\">-&gt;</span><span style=\"color: #2B74C7;\">addTransition</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">&amp;</span>b._left<span style=\"color: #006E28;\">,</span> SIGNAL<span style=\"color: #006E28;\">(</span>clicked<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span> sFour<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n    sThree<span style=\"color: #006E28;\">-&gt;</span><span style=\"color: #2B74C7;\">addTransition</span><span style=\"color: #006E28;\">(</span><span style=\"color: #000000; font-weight: bold;\">new</span> ReturnTransition<span style=\"color: #006E28;\">(</span>sResting<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n    sFour<span style=\"color: #006E28;\">-&gt;</span><span style=\"color: #2B74C7;\">addTransition</span><span style=\"color: #006E28;\">(</span>sTurning<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n    sTurning<span style=\"color: #006E28;\">-&gt;</span><span style=\"color: #2B74C7;\">addTransition</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">&amp;</span>b._right<span style=\"color: #006E28;\">,</span> SIGNAL<span style=\"color: #006E28;\">(</span>clicked<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span> sTurnRight<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n    sTurning<span style=\"color: #006E28;\">-&gt;</span><span style=\"color: #2B74C7;\">addTransition</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">&amp;</span>b._left<span style=\"color: #006E28;\">,</span> SIGNAL<span style=\"color: #006E28;\">(</span>clicked<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span> sTurnLeft<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n    sTurning<span style=\"color: #006E28;\">-&gt;</span><span style=\"color: #2B74C7;\">addTransition</span><span style=\"color: #006E28;\">(</span><span style=\"color: #000000; font-weight: bold;\">new</span> ReturnTransition<span style=\"color: #006E28;\">(</span>sResting<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n    sTurnRight<span style=\"color: #006E28;\">-&gt;</span><span style=\"color: #2B74C7;\">addTransition</span><span style=\"color: #006E28;\">(</span>sTurning<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n    sTurnLeft<span style=\"color: #006E28;\">-&gt;</span><span style=\"color: #2B74C7;\">addTransition</span><span style=\"color: #006E28;\">(</span>sTurning<span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n \n    <span style=\"color: #22aadd;\">QObject</span><span style=\"color: #006E28;\">::</span><span style=\"color: #0057AE;\">connect</span><span style=\"color: #006E28;\">(</span>sResting<span style=\"color: #006E28;\">,</span> SIGNAL<span style=\"color: #006E28;\">(</span>entered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span> <span style=\"color: #006E28;\">&amp;</span>b<span style=\"color: #006E28;\">,</span> SLOT<span style=\"color: #006E28;\">(</span>sRestingEntered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n    <span style=\"color: #22aadd;\">QObject</span><span style=\"color: #006E28;\">::</span><span style=\"color: #0057AE;\">connect</span><span style=\"color: #006E28;\">(</span>sOne<span style=\"color: #006E28;\">,</span> SIGNAL<span style=\"color: #006E28;\">(</span>entered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span> <span style=\"color: #006E28;\">&amp;</span>b<span style=\"color: #006E28;\">,</span> SLOT<span style=\"color: #006E28;\">(</span>sOneEntered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n    <span style=\"color: #22aadd;\">QObject</span><span style=\"color: #006E28;\">::</span><span style=\"color: #0057AE;\">connect</span><span style=\"color: #006E28;\">(</span>sTwo<span style=\"color: #006E28;\">,</span> SIGNAL<span style=\"color: #006E28;\">(</span>entered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span> <span style=\"color: #006E28;\">&amp;</span>b<span style=\"color: #006E28;\">,</span> SLOT<span style=\"color: #006E28;\">(</span>sTwoEntered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n    <span style=\"color: #22aadd;\">QObject</span><span style=\"color: #006E28;\">::</span><span style=\"color: #0057AE;\">connect</span><span style=\"color: #006E28;\">(</span>sThree<span style=\"color: #006E28;\">,</span> SIGNAL<span style=\"color: #006E28;\">(</span>entered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span> <span style=\"color: #006E28;\">&amp;</span>b<span style=\"color: #006E28;\">,</span> SLOT<span style=\"color: #006E28;\">(</span>sThreeEntered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n    <span style=\"color: #22aadd;\">QObject</span><span style=\"color: #006E28;\">::</span><span style=\"color: #0057AE;\">connect</span><span style=\"color: #006E28;\">(</span>sFour<span style=\"color: #006E28;\">,</span> SIGNAL<span style=\"color: #006E28;\">(</span>entered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span> <span style=\"color: #006E28;\">&amp;</span>b<span style=\"color: #006E28;\">,</span> SLOT<span style=\"color: #006E28;\">(</span>sFourEntered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n    <span style=\"color: #22aadd;\">QObject</span><span style=\"color: #006E28;\">::</span><span style=\"color: #0057AE;\">connect</span><span style=\"color: #006E28;\">(</span>sTurning<span style=\"color: #006E28;\">,</span> SIGNAL<span style=\"color: #006E28;\">(</span>entered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span> <span style=\"color: #006E28;\">&amp;</span>b<span style=\"color: #006E28;\">,</span> SLOT<span style=\"color: #006E28;\">(</span>sTurningEntered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n    <span style=\"color: #22aadd;\">QObject</span><span style=\"color: #006E28;\">::</span><span style=\"color: #0057AE;\">connect</span><span style=\"color: #006E28;\">(</span>sTurnRight<span style=\"color: #006E28;\">,</span> SIGNAL<span style=\"color: #006E28;\">(</span>entered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span> <span style=\"color: #006E28;\">&amp;</span>b<span style=\"color: #006E28;\">,</span> SLOT<span style=\"color: #006E28;\">(</span>sTurnRightEntered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n    <span style=\"color: #22aadd;\">QObject</span><span style=\"color: #006E28;\">::</span><span style=\"color: #0057AE;\">connect</span><span style=\"color: #006E28;\">(</span>sTurnLeft<span style=\"color: #006E28;\">,</span> SIGNAL<span style=\"color: #006E28;\">(</span>entered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">,</span> <span style=\"color: #006E28;\">&amp;</span>b<span style=\"color: #006E28;\">,</span> SLOT<span style=\"color: #006E28;\">(</span>sTurnLeftEntered<span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n \n    m.<span style=\"color: #2B74C7;\">start</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n \n    <span style=\"color: #000000; font-weight: bold;\">return</span><span style=\"color: #006E28;\">(</span>app.<span style=\"color: #2B74C7;\">exec</span><span style=\"color: #006E28;\">(</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">)</span><span style=\"color: #006E28;\">;</span>\n<span style=\"color: #006E28;\">}</span></pre></td></tr></tbody></table></div>\n\n\n<h3>Conclusion and open questions</h3>\n\n<p>I’m fairly happy with the solution, but I’d be curious how other people, people more skilled in using Qt, would have solved the problem.</p>\n\n<p>For a while I considered solving the skipping of four initial signals using a single state and counter, but I saw no obvious easy way to implement that, so I instead opted to use separate states.  Slightly wasteful of resources, but not too bad, and simplicity <em>is</em> important.  I’m very curious to find out if there’s a simply way to implement it using a single state.</p>\n<p><a href=\"http://www.addtoany.com/share_save#url=http%3A%2F%2Ftherning.org%2Fmagnus%2Farchives%2F1051&amp;title=Qt%20state%20machines%20and%20automatic%20timed%20transitions\" id=\"wpa2a_2\" class=\"a2a_dd a2a_target addtoany_share_save\">Share/Bookmark</a></p>") (pubDate nil "Wed, 27 Jun 2012 21:49:14 +0000"))) ("Edward Kmett: Mirrored Lenses" "<p>Lenses are a great way to deal with functional references, but there are two common issues that arise from their use. </p>\n<ol>\n<li>There is a long-standing folklore position that lenses do not support polymorphic updates. This has actually caused a fair bit of embarrassment for the folks who'd like to incorporate lenses in any Haskell record system improvement.</li>\n<li>Access control. It'd be nice to have read-only or write-only properties -- \"one-way\" or \"mirrored\" lenses, as it were. Moreover, lenses are commonly viewed as an all or nothing proposition, in that it is hard to mix them with arbitrary user functions.</li>\n<li>Finally there is a bit of a cult around trying to generalize lenses by smashing a monad in the middle of them somewhere, it would be nice to be able to get into a list and work with each individual element in it without worrying about someone mucking up our lens laws, and perhaps avoid the whole generalized lens issue entirely.</li>\n</ol>\n<p>We'll take a whack at each of these concerns in turn today.<br />\n<span id=\"more-600\"></span></p>\n<pre lang=\"haskell\">   {-# LANGUAGE Rank2Types #-}  -- we'll relax this later\nimport Data.Complex -- for complex examples\n</pre>\n<p>First, let us consider the type of van Laarhoven lenses:</p>\n<pre lang=\"haskell\">type Lens a b =\nforall f. Functor f =&gt;\n(b -&gt; f b) -&gt; a -&gt; f a\n</pre>\n<p>with a couple of examples:</p>\n<pre class=\"haskell\"> \nrealLens :: <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:RealFloat\"><span style=\"background-color: #efefbf; font-weight: bold;\">RealFloat</span></a> a =&gt; Lens <span style=\"color: green;\">(</span>Complex a<span style=\"color: green;\">)</span> a\nrealLens f <span style=\"color: green;\">(</span>r :+ i<span style=\"color: green;\">)</span> = <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span style=\"font-weight: bold;\">fmap</span></a> <span style=\"color: green;\">(</span>:+ i<span style=\"color: green;\">)</span> <span style=\"color: green;\">(</span>f r<span style=\"color: green;\">)</span>\n \nimagLens :: <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:RealFloat\"><span style=\"background-color: #efefbf; font-weight: bold;\">RealFloat</span></a> a =&gt; Lens <span style=\"color: green;\">(</span>Complex a<span style=\"color: green;\">)</span> a\nimagLens f <span style=\"color: green;\">(</span>r :+ i<span style=\"color: green;\">)</span> = <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span style=\"font-weight: bold;\">fmap</span></a> <span style=\"color: green;\">(</span>r :+<span style=\"color: green;\">)</span> <span style=\"color: green;\">(</span>f i<span style=\"color: green;\">)</span>\n </pre>\n<p>These lenses have some very nice properties that we're going to exploit. By far their nicest property is that you can compose them using just <code>(.)</code> and <code>id</code> from the <code>Prelude</code> rather than having to go off and write a <code>Category</code>.</p>\n<h2>Lens Families</h2>\n<p><a href=\"http://r6.ca/blog/20120623T104901Z.html\">Russell O'Connor recently noted that these lenses permit polymorphic update</a> if you simply generalize their type signature to</p>\n<pre class=\"haskell\"> \n<span style=\"color: #06c; font-weight: bold;\">type</span> LensFamily a b c d =\n<span style=\"color: #06c; font-weight: bold;\">forall</span> f. <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Functor\"><span style=\"background-color: #efefbf; font-weight: bold;\">Functor</span></a> f =&gt;\n<span style=\"color: green;\">(</span>c -&gt; f d<span style=\"color: green;\">)</span> -&gt; a -&gt; f b\n </pre>\n<p>I'd like to note that you can't just let these 4 arguments vary with complete impunity, so I'll be referring to these as \"lens families\" rather than polymorphic lenses, a point that I'll address further below. In short, we want the original lens laws to still hold in spite of the generalized type signature, and this forces some of these types to be related. </p>\n<p>As an aside, each of the other lens types admit this same generalization! For instance the <code>Lens</code> type in <a href=\"http://hackage.haskell.org/package/data-lens\">data-lens</a> can be generalized using an indexed store comonad:</p>\n<pre class=\"haskell\"> \n<span style=\"color: #06c; font-weight: bold;\">data</span> Store c d b = Store <span style=\"color: green;\">(</span>d -&gt; b<span style=\"color: green;\">)</span> c\n \n<span style=\"color: #06c; font-weight: bold;\">instance</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Functor\"><span style=\"background-color: #efefbf; font-weight: bold;\">Functor</span></a> <span style=\"color: green;\">(</span>Store c d<span style=\"color: green;\">)</span> <span style=\"color: #06c; font-weight: bold;\">where</span>\n<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span style=\"font-weight: bold;\">fmap</span></a> f <span style=\"color: green;\">(</span>Store g c<span style=\"color: green;\">)</span> = Store <span style=\"color: green;\">(</span>f . g<span style=\"color: green;\">)</span> c\n \n<span style=\"color: #06c; font-weight: bold;\">newtype</span> DataLensFamily a b c d = DataLensFamily <span style=\"color: green;\">(</span>a -&gt; Store c d b<span style=\"color: green;\">)</span>\n </pre>\n<p>and we can freely convert back and forth to van Laarhoven lens families:</p>\n<pre class=\"haskell\"> \ndlens :: LensFamily a b c d -&gt; DataLensFamily a b c d\ndlens l = DataLensFamily <span style=\"color: green;\">(</span>l <span style=\"color: green;\">(</span>Store <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:id\"><span style=\"font-weight: bold;\">id</span></a><span style=\"color: green;\">)</span><span style=\"color: green;\">)</span>\n \nplens :: DataLensFamily a b c d -&gt; LensFamily a b c d\nplens <span style=\"color: green;\">(</span>DataLensFamily l<span style=\"color: green;\">)</span> f a = <span style=\"color: #06c; font-weight: bold;\">case</span> l a <span style=\"color: #06c; font-weight: bold;\">of</span>\nStore g c -&gt; <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span style=\"font-weight: bold;\">fmap</span></a> g <span style=\"color: green;\">(</span>f c<span style=\"color: green;\">)</span>\n </pre>\n<p>I leave it as an exercise to the reader to generalize the other lens types, but we'll stick to van Laarhoven lens families almost exclusively below.</p>\n<p>As Russell noted, we can define functions to get, modify and set the target of a lens very easily. I'll create local names for <code>Identity</code> and <code>Const</code>, mostly to help give nicer error messages later.</p>\n<p>We can read from a lens family:</p>\n<pre class=\"haskell\"> \n<span style=\"color: #06c; font-weight: bold;\">infixl</span> <span style=\"color: red;\">8</span> ^.\n<span style=\"color: #06c; font-weight: bold;\">newtype</span> Getting b a = Getting <span style=\"color: green;\">{</span> got :: b <span style=\"color: green;\">}</span>\n<span style=\"color: #06c; font-weight: bold;\">instance</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Functor\"><span style=\"background-color: #efefbf; font-weight: bold;\">Functor</span></a> <span style=\"color: green;\">(</span>Getting b<span style=\"color: green;\">)</span> <span style=\"color: #06c; font-weight: bold;\">where</span>\n<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span style=\"font-weight: bold;\">fmap</span></a> _ <span style=\"color: green;\">(</span>Getting b<span style=\"color: green;\">)</span> = Getting b\n<span style=\"color: green;\">(</span>^.<span style=\"color: green;\">)</span> :: a -&gt; <span style=\"color: green;\">(</span><span style=\"color: green;\">(</span>c -&gt; Getting c d<span style=\"color: green;\">)</span> -&gt; a -&gt; Getting c b<span style=\"color: green;\">)</span> -&gt; c\nx ^. l = got <span style=\"color: green;\">(</span>l Getting x<span style=\"color: green;\">)</span>\n </pre>\n<p>We can modify the target of the lens:</p>\n<pre class=\"haskell\"> \n<span style=\"color: #06c; font-weight: bold;\">newtype</span> Setting a = Setting <span style=\"color: green;\">{</span> unsetting :: a <span style=\"color: green;\">}</span>\n<span style=\"color: #06c; font-weight: bold;\">instance</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Functor\"><span style=\"background-color: #efefbf; font-weight: bold;\">Functor</span></a> Setting <span style=\"color: #06c; font-weight: bold;\">where</span>\n<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span style=\"font-weight: bold;\">fmap</span></a> f <span style=\"color: green;\">(</span>Setting a<span style=\"color: green;\">)</span> = Setting <span style=\"color: green;\">(</span>f a<span style=\"color: green;\">)</span>\n<span style=\"color: #06c; font-weight: bold;\">infixr</span> <span style=\"color: red;\">4</span> %=\n<span style=\"color: green;\">(</span>%=<span style=\"color: green;\">)</span> :: <span style=\"color: green;\">(</span><span style=\"color: green;\">(</span>c -&gt; Setting d<span style=\"color: green;\">)</span> -&gt; a -&gt; Setting b<span style=\"color: green;\">)</span> -&gt; <span style=\"color: green;\">(</span>c -&gt; d<span style=\"color: green;\">)</span> -&gt; a -&gt; b\nl %= f = unsetting . l <span style=\"color: green;\">(</span>Setting . f<span style=\"color: green;\">)</span>\n </pre>\n<p>We can set the target of the lens with impunity:</p>\n<pre class=\"haskell\"> \n<span style=\"color: #06c; font-weight: bold;\">infixr</span> <span style=\"color: red;\">4</span> ^=\n<span style=\"color: green;\">(</span>^=<span style=\"color: green;\">)</span> :: <span style=\"color: green;\">(</span><span style=\"color: green;\">(</span>c -&gt; Setting d<span style=\"color: green;\">)</span> -&gt; a -&gt; Setting b<span style=\"color: green;\">)</span> -&gt; d -&gt; a -&gt; b\nl ^= v = l %= <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:const\"><span style=\"font-weight: bold;\">const</span></a> v\n </pre>\n<p>We can build a lens family from a getter/setter pair</p>\n<pre class=\"haskell\"> \nlens :: <span style=\"color: green;\">(</span>a -&gt; c<span style=\"color: green;\">)</span> -&gt; <span style=\"color: green;\">(</span>a -&gt; d -&gt; b<span style=\"color: green;\">)</span> -&gt; LensFamily a b c d\nlens f g h a = <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span style=\"font-weight: bold;\">fmap</span></a> <span style=\"color: green;\">(</span>g a<span style=\"color: green;\">)</span> <span style=\"color: green;\">(</span>h <span style=\"color: green;\">(</span>f a<span style=\"color: green;\">)</span><span style=\"color: green;\">)</span>\n </pre>\n<p>or from a family of isomorphisms:</p>\n<pre class=\"haskell\"> \niso :: <span style=\"color: green;\">(</span>a -&gt; c<span style=\"color: green;\">)</span> -&gt; <span style=\"color: green;\">(</span>d -&gt; b<span style=\"color: green;\">)</span> -&gt; LensFamily a b c d\niso f g h a = <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span style=\"font-weight: bold;\">fmap</span></a> g <span style=\"color: green;\">(</span>h <span style=\"color: green;\">(</span>f a<span style=\"color: green;\">)</span><span style=\"color: green;\">)</span>\n </pre>\n<p>With these combinators in hand, we need some actual lens families to play with. Fortunately they are just as easy to construct as simple lenses. The only thing that changes is the type signature.  </p>\n<pre class=\"haskell\"> \nfstLens :: LensFamily <span style=\"color: green;\">(</span>a,c<span style=\"color: green;\">)</span> <span style=\"color: green;\">(</span>b,c<span style=\"color: green;\">)</span> a b\nfstLens f <span style=\"color: green;\">(</span>a,b<span style=\"color: green;\">)</span> = <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span style=\"font-weight: bold;\">fmap</span></a> <span style=\"color: green;\">(</span>\\x -&gt; <span style=\"color: green;\">(</span>x,b<span style=\"color: green;\">)</span><span style=\"color: green;\">)</span> <span style=\"color: green;\">(</span>f a<span style=\"color: green;\">)</span>\n \nsndLens :: LensFamily <span style=\"color: green;\">(</span>a,b<span style=\"color: green;\">)</span> <span style=\"color: green;\">(</span>a,c<span style=\"color: green;\">)</span> b c\nsndLens f <span style=\"color: green;\">(</span>a,b<span style=\"color: green;\">)</span> = <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span style=\"font-weight: bold;\">fmap</span></a> <span style=\"color: green;\">(</span><span style=\"color: green;\">(</span>,<span style=\"color: green;\">)</span> a<span style=\"color: green;\">)</span> <span style=\"color: green;\">(</span>f b<span style=\"color: green;\">)</span>\n \nswap :: <span style=\"color: green;\">(</span>a,b<span style=\"color: green;\">)</span> -&gt; <span style=\"color: green;\">(</span>b,a<span style=\"color: green;\">)</span>\nswap <span style=\"color: green;\">(</span>a,b<span style=\"color: green;\">)</span> = <span style=\"color: green;\">(</span>b,a<span style=\"color: green;\">)</span>\n \nswapped :: LensFamily <span style=\"color: green;\">(</span>a,b<span style=\"color: green;\">)</span> <span style=\"color: green;\">(</span>c,d<span style=\"color: green;\">)</span> <span style=\"color: green;\">(</span>b,a<span style=\"color: green;\">)</span> <span style=\"color: green;\">(</span>d,c<span style=\"color: green;\">)</span>\nswapped = iso swap swap\n </pre>\n<p>These can also build 'traditional' lenses:</p>\n<pre class=\"haskell\"> \nnegated :: <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span style=\"background-color: #efefbf; font-weight: bold;\">Num</span></a> a =&gt; Lens a a\nnegated = iso <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:negate\"><span style=\"font-weight: bold;\">negate</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:negate\"><span style=\"font-weight: bold;\">negate</span></a>\n </pre>\n<p>And since <code>Lens</code> and <code>LensFamily</code> are both type aliases, we can freely mix and match lenses with lens families:</p>\n<pre class=\"haskell\"> \nghci&gt; <span style=\"color: green;\">(</span><span style=\"color: red;\">1</span>:<span style=\"color: red;\">+2</span>,<span style=\"color: red;\">3</span><span style=\"color: green;\">)</span> ^.fstLens.realLens\n<span style=\"color: red;\">1.0</span>\nghci&gt; fstLens . realLens ^= <span style=\"color: red;\">4</span> $ <span style=\"color: green;\">(</span><span style=\"color: red;\">1</span>:<span style=\"color: red;\">+2</span>,<span style=\"color: red;\">3</span><span style=\"color: green;\">)</span>\n<span style=\"color: green;\">(</span><span style=\"color: red;\">4.0</span> :+ <span style=\"color: red;\">2.0</span>,<span style=\"color: red;\">3</span><span style=\"color: green;\">)</span>\n </pre>\n<p>But, we can now change types with our lens updates!</p>\n<pre class=\"haskell\"> \nghci&gt; <span style=\"color: green;\">(</span>fstLens . sndLens ^= <span style=\"color: #3c7331;\">\"hello\"</span><span style=\"color: green;\">)</span> <span style=\"color: green;\">(</span><span style=\"color: green;\">(</span><span style=\"color: red;\">1</span>,<span style=\"color: green;\">(</span><span style=\"color: green;\">)</span><span style=\"color: green;\">)</span>,<span style=\"color: red;\">3</span><span style=\"color: green;\">)</span>\n<span style=\"color: green;\">(</span><span style=\"color: green;\">(</span><span style=\"color: red;\">1</span>,<span style=\"color: #3c7331;\">\"hello\"</span><span style=\"color: green;\">)</span>,<span style=\"color: red;\">3</span><span style=\"color: green;\">)</span>\n </pre>\n<p>We can even do things like use the combinator</p>\n<pre class=\"haskell\"> \ntraverseLens :: <span style=\"color: green;\">(</span><span style=\"color: green;\">(</span>c -&gt; c<span style=\"color: green;\">)</span> -&gt; a -&gt; b<span style=\"color: green;\">)</span> -&gt; a -&gt; b\ntraverseLens f = f <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:id\"><span style=\"font-weight: bold;\">id</span></a>\n </pre>\n<p>to project a <code>Functor</code> out through an appropriate lens family:</p>\n<pre class=\"haskell\"> \nghci&gt; :t traverseLens <span style=\"color: green;\">(</span>fstLens . sndLens<span style=\"color: green;\">)</span>\ntraverseLens <span style=\"color: green;\">(</span>fstLens . sndLens<span style=\"color: green;\">)</span>\n:: <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Functor\"><span style=\"background-color: #efefbf; font-weight: bold;\">Functor</span></a> f =&gt; <span style=\"color: green;\">(</span><span style=\"color: green;\">(</span>a, f b<span style=\"color: green;\">)</span>, c<span style=\"color: green;\">)</span> -&gt; f <span style=\"color: green;\">(</span><span style=\"color: green;\">(</span>a, b<span style=\"color: green;\">)</span>, c<span style=\"color: green;\">)</span>\n </pre>\n<p>That takes care of polymorphic updates. </p>\n<h2>Why is it a Lens Family?</h2>\n<p>So, why do I use the term \"lens family\" rather than \"polymorphic lens\"?</p>\n<p>In order for the lens laws to hold, the 4 types parameterizing our lens family must be interrelated.</p>\n<p>In particular you need to be able to put back (with <code>^=</code>) what you get out of the lens (with <code>^.</code>) and put multiple times.</p>\n<p>This effectively constrains the space of possible legal lens families to those where there exists an index kind <code>i</code>, and two type families <code>outer :: i -&gt; *</code>, and <code>inner :: i -&gt; *</code>. If this were a viable type signature, then each lens family would actually have 2 parameters, yielding something like:</p>\n<pre class=\"haskell\"> \n<span style=\"color: #5d478b; font-style: italic;\">-- pseudo-Haskell</span>\n<span style=\"color: #5d478b; font-style: italic;\">-- type LensFamily outer inner =</span>\n<span style=\"color: #5d478b; font-style: italic;\">--    forall a b. LensFamily (outer a) (outer b) (inner a) (inner b)</span>\n </pre>\n<p>but you can't pass in type families as arguments like that, and even if you could, their lack of injectivity doesn't give the type checker enough to work with to compose your lenses. By specifying all 4 type arguments independently, we give the compiler enough to work with. But since the arguments aren't just freely polymorphic and are instead related by these index types, I'm choosing to call them \"lens families\" rather than \"polymorphic lenses\".</p>\n<h2>Getters</h2>\n<p>Note, we didn't use the full polymorphism of the van Laarhoven lenses in the signatures of <code>(^.)</code>, <code>(%=)</code> and <code>(^=)</code> above.</p>\n<p>What happens when we restrict the type of <code>Functor</code> we're allowed to pass to our lens?</p>\n<p>If we generalize the type of our getter ever so slightly from the type we pass to <code>(^.)</code> to permit composition, we get:</p>\n<pre class=\"haskell\"> \n<span style=\"color: #06c; font-weight: bold;\">type</span> Getter a c = <span style=\"color: #06c; font-weight: bold;\">forall</span> r d b. <span style=\"color: green;\">(</span>c -&gt; Getting r d<span style=\"color: green;\">)</span> -&gt; a -&gt; Getting r b\n </pre>\n<p>and we can make getters out of arbitrary Haskell functions that we have lying around with</p>\n<pre class=\"haskell\"> \n<span style=\"color: #5d478b; font-style: italic;\">-- | build a getting out of a function</span>\ngetting :: <span style=\"color: green;\">(</span>a -&gt; b<span style=\"color: green;\">)</span> -&gt; Getter a b\ngetting g f = Getting . got . f . g\n </pre>\n<p>For example:</p>\n<pre class=\"haskell\"> \ngetFst :: Getter <span style=\"color: green;\">(</span>a,b<span style=\"color: green;\">)</span> a\ngetFst = getting <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fst\"><span style=\"font-weight: bold;\">fst</span></a>\n \ngetSnd :: Getter <span style=\"color: green;\">(</span>a,b<span style=\"color: green;\">)</span> b\ngetSnd = getting <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:snd\"><span style=\"font-weight: bold;\">snd</span></a>\n </pre>\n<p>But this is particularly nice for things that <em>can't</em> be made into real lenses or lens families, because of loss of information:</p>\n<pre class=\"haskell\"> \ngetPhase :: <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:RealFloat\"><span style=\"background-color: #efefbf; font-weight: bold;\">RealFloat</span></a> a =&gt; Getter <span style=\"color: green;\">(</span>Complex a<span style=\"color: green;\">)</span> a\ngetPhase = getting phase\n \ngetAbs, getSignum  :: <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span style=\"background-color: #efefbf; font-weight: bold;\">Num</span></a> a =&gt; Getter a a\ngetAbs = getting <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:abs\"><span style=\"font-weight: bold;\">abs</span></a>\ngetSignum = getting <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:signum\"><span style=\"font-weight: bold;\">signum</span></a>\n </pre>\n<p>Notably, <code>getMagnitude</code> and <code>getPhase</code> can't be legal lenses because when the <code>magnitude</code> is 0, you lose <code>phase</code> information.</p>\n<p>These can be mixed and matched with other lenses when dereferencing with <code>(^.)</code></p>\n<pre class=\"haskell\"> \nghci&gt; <span style=\"color: green;\">(</span><span style=\"color: red;\">0</span>,<span style=\"color: green;\">(</span><span style=\"color: red;\">1</span>:<span style=\"color: red;\">+2</span>,<span style=\"color: red;\">3</span><span style=\"color: green;\">)</span><span style=\"color: green;\">)</span> ^. getting <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:snd\"><span style=\"font-weight: bold;\">snd</span></a> . fstLens . getting magnitude\n<span style=\"color: red;\">2.23606797749979</span>\n </pre>\n<p>But we get a type error when we attempt to write to a <code>Getter</code>.</p>\n<pre class=\"haskell\"> \nghci&gt; getting magnitude ^= <span style=\"color: red;\">12</span>\n&lt;interactive&gt;:<span style=\"color: red;\">2</span>:<span style=\"color: red;\">1</span>:\nCouldn't match expected <span style=\"color: #06c; font-weight: bold;\">type</span> `Setting d0'\nwith actual <span style=\"color: #06c; font-weight: bold;\">type</span> `Getting r0 d1'\nExpected <span style=\"color: #06c; font-weight: bold;\">type</span>: <span style=\"color: green;\">(</span>c0 -&gt; Setting d0<span style=\"color: green;\">)</span> -&gt; a1 -&gt; Setting b1\nActual <span style=\"color: #06c; font-weight: bold;\">type</span>: <span style=\"color: green;\">(</span>c0 -&gt; Getting r0 d1<span style=\"color: green;\">)</span> -&gt; a0 -&gt; Getting r0 b0\nIn the <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span style=\"font-weight: bold;\">return</span></a> <span style=\"color: #06c; font-weight: bold;\">type</span> <span style=\"color: #06c; font-weight: bold;\">of</span> a call <span style=\"color: #06c; font-weight: bold;\">of</span> `getting'\nIn the first argument <span style=\"color: #06c; font-weight: bold;\">of</span> `<span style=\"color: green;\">(</span>^=<span style=\"color: green;\">)</span>', namely `getting magnitude'\n&lt;/interactive&gt;</pre>\n<h2>Setters</h2>\n<p>So what about write-only properties?</p>\n<p>These have a less satisfying solution. We have to break our lens family structure slightly to make something that can strictly <em>only</em> be written to, by disabling the ability to read our current value entirely. </p>\n<pre class=\"haskell\"> \n<span style=\"color: #06c; font-weight: bold;\">type</span> Setter a d b = <span style=\"color: green;\">(</span><span style=\"color: green;\">(</span><span style=\"color: green;\">)</span> -&gt; Setting d<span style=\"color: green;\">)</span> -&gt; a -&gt; Setting b\n \nsetting :: <span style=\"color: green;\">(</span>a -&gt; d -&gt; b<span style=\"color: green;\">)</span> -&gt; Setter a d b\nsetting f g a = Setting <span style=\"color: green;\">(</span>f a <span style=\"color: green;\">(</span>unsetting <span style=\"color: green;\">(</span>g <span style=\"color: green;\">(</span><span style=\"color: green;\">)</span><span style=\"color: green;\">)</span><span style=\"color: green;\">)</span><span style=\"color: green;\">)</span>\n </pre>\n<p>Now we can make setters out of functions that take two arguments:</p>\n<pre class=\"haskell\"> \nplus, times :: <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span style=\"background-color: #efefbf; font-weight: bold;\">Num</span></a> a =&gt; Setter a a a\nplus = setting <span style=\"color: green;\">(</span>+<span style=\"color: green;\">)</span>\ntimes = setting <span style=\"color: green;\">(</span>*<span style=\"color: green;\">)</span>\n </pre>\n<pre class=\"haskell\"> \nghci&gt; setting <span style=\"color: green;\">(</span>+<span style=\"color: green;\">)</span> ^= <span style=\"color: red;\">12</span> $ <span style=\"color: red;\">32</span>\n<span style=\"color: red;\">44</span>\nghci&gt; fstLens . setting <span style=\"color: green;\">(</span>*<span style=\"color: green;\">)</span> ^= <span style=\"color: red;\">12</span> $ <span style=\"color: green;\">(</span><span style=\"color: red;\">2</span>,<span style=\"color: red;\">3</span><span style=\"color: green;\">)</span>\n<span style=\"color: green;\">(</span><span style=\"color: red;\">24</span>,<span style=\"color: red;\">3</span><span style=\"color: green;\">)</span>\n </pre>\n<p>However, these lenses have the unsatisfying property that they can only be placed last in the chain of lenses we're setting. </p>\n<pre class=\"haskell\"> \nghci&gt; <span style=\"color: green;\">(</span>setting <span style=\"color: green;\">(</span>+<span style=\"color: green;\">)</span> . realLens ^= <span style=\"color: red;\">12</span><span style=\"color: green;\">)</span> <span style=\"color: red;\">1</span>\n&lt;interactive&gt;:<span style=\"color: red;\">15</span>:<span style=\"color: red;\">16</span>:\nCouldn't match expected <span style=\"color: #06c; font-weight: bold;\">type</span> `<span style=\"color: green;\">(</span><span style=\"color: green;\">)</span>' with actual <span style=\"color: #06c; font-weight: bold;\">type</span> `Complex d0'\nExpected <span style=\"color: #06c; font-weight: bold;\">type</span>: <span style=\"color: green;\">(</span>d0 -&gt; Setting d0<span style=\"color: green;\">)</span> -&gt; <span style=\"color: green;\">(</span><span style=\"color: green;\">)</span> -&gt; Setting b0\nActual <span style=\"color: #06c; font-weight: bold;\">type</span>: <span style=\"color: green;\">(</span>d0 -&gt; Setting d0<span style=\"color: green;\">)</span>\n-&gt; Complex d0 -&gt; Setting <span style=\"color: green;\">(</span>Complex d0<span style=\"color: green;\">)</span>\nIn the second argument <span style=\"color: #06c; font-weight: bold;\">of</span> `<span style=\"color: green;\">(</span>.<span style=\"color: green;\">)</span>', namely `realLens'\nIn the first argument <span style=\"color: #06c; font-weight: bold;\">of</span> `<span style=\"color: green;\">(</span>^=<span style=\"color: green;\">)</span>', namely `setting <span style=\"color: green;\">(</span>+<span style=\"color: green;\">)</span> . realLens'\n&lt;/interactive&gt;</pre>\n<p>This isn't surprising, if you consider that to compose <code>data-lens</code> lenses you need to use <code>%=</code> to chain setters.</p>\n<h2>Modifiers</h2>\n<p>So what do we need to do to make a lens we can only modify but not read?</p>\n<p>Lets restore the lens family structure!</p>\n<pre class=\"haskell\"> \n<span style=\"color: #06c; font-weight: bold;\">type</span> Modifier a b c d = <span style=\"color: green;\">(</span>c -&gt; Setting d<span style=\"color: green;\">)</span> -&gt; a -&gt; Setting b\n \nmodifying :: <span style=\"color: green;\">(</span><span style=\"color: green;\">(</span>c -&gt; d<span style=\"color: green;\">)</span> -&gt; a -&gt; b<span style=\"color: green;\">)</span> -&gt; Modifier a b c d\nmodifying f g a = Setting <span style=\"color: green;\">(</span>f <span style=\"color: green;\">(</span>unsetting . g<span style=\"color: green;\">)</span> a<span style=\"color: green;\">)</span>\n </pre>\n<p><code>modifying</code> makes a modify-only lens family you can modify using local information, but can't tell anyone about the contents of.</p>\n<p>This lets us work with a lens over a variable number of elements in a structure, without worrying about a user accidentally \"putting back\" too many or too few entries.</p>\n<pre class=\"haskell\"> \nghci&gt; modifying <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span style=\"font-weight: bold;\">map</span></a> %= <span style=\"color: green;\">(</span><span style=\"color: red;\">+1</span><span style=\"color: green;\">)</span> $ <span style=\"color: green;\">[</span><span style=\"color: red;\">1</span>,<span style=\"color: red;\">2</span>,<span style=\"color: red;\">3</span><span style=\"color: green;\">]</span>\n<span style=\"color: green;\">[</span><span style=\"color: red;\">2</span>,<span style=\"color: red;\">3</span>,<span style=\"color: red;\">4</span><span style=\"color: green;\">]</span>\n </pre>\n<p>They can be composed with other lenses:</p>\n<pre class=\"haskell\"> \nghci&gt; modifying <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span style=\"font-weight: bold;\">map</span></a> . sndLens %= <span style=\"color: green;\">(</span><span style=\"color: red;\">+1</span><span style=\"color: green;\">)</span> $ <span style=\"color: green;\">[</span><span style=\"color: green;\">(</span><span style=\"color: #3c7331;\">\"hello\"</span>,<span style=\"color: red;\">1</span><span style=\"color: green;\">)</span>,<span style=\"color: green;\">(</span><span style=\"color: #3c7331;\">\"goodbye\"</span>,<span style=\"color: red;\">2</span><span style=\"color: green;\">)</span><span style=\"color: green;\">]</span>\n<span style=\"color: green;\">[</span><span style=\"color: green;\">(</span><span style=\"color: #3c7331;\">\"hello\"</span>,<span style=\"color: red;\">2</span><span style=\"color: green;\">)</span>,<span style=\"color: green;\">(</span><span style=\"color: #3c7331;\">\"goodbye\"</span>,<span style=\"color: red;\">3</span><span style=\"color: green;\">)</span><span style=\"color: green;\">]</span>\n </pre>\n<p>and unlike with a <code>Setter</code>, you can compose a <code>Modifier</code> with a <code>Modifier</code>:</p>\n<pre class=\"haskell\"> \nmodifying <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span style=\"font-weight: bold;\">fmap</span></a> . modifying <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span style=\"font-weight: bold;\">fmap</span></a>\n:: <span style=\"color: green;\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Functor\"><span style=\"background-color: #efefbf; font-weight: bold;\">Functor</span></a> g, <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Functor\"><span style=\"background-color: #efefbf; font-weight: bold;\">Functor</span></a> f<span style=\"color: green;\">)</span> =&gt;\n<span style=\"color: green;\">(</span>c -&gt; Setting d<span style=\"color: green;\">)</span> -&gt; f <span style=\"color: green;\">(</span>g c<span style=\"color: green;\">)</span> -&gt; Setting <span style=\"color: green;\">(</span>f <span style=\"color: green;\">(</span>g d<span style=\"color: green;\">)</span><span style=\"color: green;\">)</span>\n </pre>\n<p>but they cannot be read from directly:</p>\n<pre class=\"haskell\"> \nghci&gt; <span style=\"color: green;\">[</span><span style=\"color: red;\">1</span>,<span style=\"color: red;\">2</span>,<span style=\"color: red;\">3</span><span style=\"color: green;\">]</span> ^. modifying <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span style=\"font-weight: bold;\">fmap</span></a>\n&lt;interactive&gt;:<span style=\"color: red;\">18</span>:<span style=\"color: red;\">12</span>:\nCouldn't match expected <span style=\"color: #06c; font-weight: bold;\">type</span> `Getting c0 d0'\nwith actual <span style=\"color: #06c; font-weight: bold;\">type</span> `Setting d1'\nExpected <span style=\"color: #06c; font-weight: bold;\">type</span>: <span style=\"color: green;\">(</span>c0 -&gt; Getting c0 d0<span style=\"color: green;\">)</span> -&gt; <span style=\"color: green;\">[</span>t0<span style=\"color: green;\">]</span> -&gt; Getting c0 b1\nActual <span style=\"color: #06c; font-weight: bold;\">type</span>: Modifier a0 b0 c0 d1\nIn the <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span style=\"font-weight: bold;\">return</span></a> <span style=\"color: #06c; font-weight: bold;\">type</span> <span style=\"color: #06c; font-weight: bold;\">of</span> a call <span style=\"color: #06c; font-weight: bold;\">of</span> `modifying'\nIn the second argument <span style=\"color: #06c; font-weight: bold;\">of</span> `<span style=\"color: green;\">(</span>^.<span style=\"color: green;\">)</span>', namely `modifying <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span style=\"font-weight: bold;\">map</span></a>'\n&lt;/interactive&gt;</pre>\n<p>We can map over restricted domains:</p>\n<pre class=\"haskell\"> \nreals :: <span style=\"color: green;\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:RealFloat\"><span style=\"background-color: #efefbf; font-weight: bold;\">RealFloat</span></a> a, <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:RealFloat\"><span style=\"background-color: #efefbf; font-weight: bold;\">RealFloat</span></a> b<span style=\"color: green;\">)</span> =&gt; Modifier <span style=\"color: green;\">(</span>Complex a<span style=\"color: green;\">)</span> <span style=\"color: green;\">(</span>Complex b<span style=\"color: green;\">)</span> a b\nreals = modifying <span style=\"color: green;\">(</span>\\f <span style=\"color: green;\">(</span>r :+ i<span style=\"color: green;\">)</span> -&gt; f r :+ f i<span style=\"color: green;\">)</span>\n </pre>\n<p>and everything still composes:</p>\n<pre class=\"haskell\"> \nghci&gt; reals %= <span style=\"color: green;\">(</span><span style=\"color: red;\">+1</span><span style=\"color: green;\">)</span> $  <span style=\"color: red;\">1</span> :+ <span style=\"color: red;\">2</span>\n<span style=\"color: red;\">2</span> :+ <span style=\"color: red;\">3</span>\nghci&gt; fstLens . reals %= <span style=\"color: green;\">(</span><span style=\"color: red;\">+1</span><span style=\"color: green;\">)</span> $ <span style=\"color: green;\">(</span><span style=\"color: red;\">1</span> :+ <span style=\"color: red;\">2</span>, <span style=\"color: red;\">4</span><span style=\"color: green;\">)</span>\n<span style=\"color: green;\">(</span><span style=\"color: red;\">2.0</span> :+ <span style=\"color: red;\">3.0</span>,<span style=\"color: red;\">4</span><span style=\"color: green;\">)</span>\n </pre>\n<p>These aren't limited to actions that map over the entire structure, however!</p>\n<pre class=\"haskell\"> \nghci&gt; :m + Data.Lens\nghci&gt; modifying <span style=\"color: green;\">(</span>`adjust` <span style=\"color: #3c7331;\">\"goodbye\"</span><span style=\"color: green;\">)</span> %= <span style=\"color: green;\">(</span><span style=\"color: red;\">+1</span><span style=\"color: green;\">)</span> $\nfromList <span style=\"color: green;\">[</span><span style=\"color: green;\">(</span><span style=\"color: #3c7331;\">\"hello\"</span>,<span style=\"color: red;\">1</span><span style=\"color: green;\">)</span>,<span style=\"color: green;\">(</span><span style=\"color: #3c7331;\">\"goodbye\"</span>,<span style=\"color: red;\">2</span><span style=\"color: green;\">)</span><span style=\"color: green;\">]</span>\nfromList <span style=\"color: green;\">[</span><span style=\"color: green;\">(</span><span style=\"color: #3c7331;\">\"goodbye\"</span>,<span style=\"color: red;\">3</span><span style=\"color: green;\">)</span>,<span style=\"color: green;\">(</span><span style=\"color: #3c7331;\">\"hello\"</span>,<span style=\"color: red;\">1</span><span style=\"color: green;\">)</span><span style=\"color: green;\">]</span>\n </pre>\n<p>This lets us update potentially nested structures where something may or may not be present , which was fairly tedious to do with earlier lens representations.</p>\n<p>Both the former map-like example and the latter update-like behavior were commonly used examples in calls for partial lenses or 'multi-lenses', but here they are able to implemented using a restricted form of a more traditional lens type, and moreover they compose cleanly with other lenses and lens families.</p>\n<h2>Rank-1 Lens Families</h2>\n<p>At the very start I mentioned that you can dispense with the need for Rank-2 Types. Doing so requires much more tedious type signatures as the <code>LensFamily</code>, <code>Getter</code>, <code>Setter</code> and <code>Lens</code> aliases are no longer legal. Also, if you want to take a lens as an argument and use it in multiple contexts (e.g. as both a getter and a setter), you'll need to clone it to obtain a lens family. For example, this fails:</p>\n<pre class=\"haskell\"> \nghci&gt; :t \\l y -&gt; l ^= y ^. l + <span style=\"color: red;\">1</span> $ y\n&lt;interactive&gt;:<span style=\"color: red;\">1</span>:<span style=\"color: red;\">19</span>:\nCouldn't match expected <span style=\"color: #06c; font-weight: bold;\">type</span> `Getting d0 d1'\nwith actual <span style=\"color: #06c; font-weight: bold;\">type</span> `Setting d0'\nExpected <span style=\"color: #06c; font-weight: bold;\">type</span>: <span style=\"color: green;\">(</span>d0 -&gt; Getting d0 d1<span style=\"color: green;\">)</span> -&gt; a1 -&gt; Getting d0 b1\nActual <span style=\"color: #06c; font-weight: bold;\">type</span>: <span style=\"color: green;\">(</span>d0 -&gt; Setting d0<span style=\"color: green;\">)</span> -&gt; a0 -&gt; Setting b0\nIn the second argument <span style=\"color: #06c; font-weight: bold;\">of</span> `<span style=\"color: green;\">(</span>^.<span style=\"color: green;\">)</span>', namely `l'\nIn the first argument <span style=\"color: #06c; font-weight: bold;\">of</span> `<span style=\"color: green;\">(</span>+<span style=\"color: green;\">)</span>', namely `y ^. l'\n&lt;/interactive&gt;</pre>\n<p>But we can clone the supplied monomorphic lens using the composition of <code>dlens</code> and <code>plens</code> above, since the <code>DataLensFamily</code> completely characterizes the <code>LensFamily</code> with:</p>\n<pre class=\"haskell\"> \nclone ::\n<span style=\"color: green;\">(</span><span style=\"color: green;\">(</span>c -&gt; Store c d d<span style=\"color: green;\">)</span> -&gt; <span style=\"color: green;\">(</span>a -&gt; Store c d b<span style=\"color: green;\">)</span><span style=\"color: green;\">)</span> -&gt;\nLensFamily a b c d\nclone l f a = <span style=\"color: #06c; font-weight: bold;\">case</span> l <span style=\"color: green;\">(</span>Store <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:id\"><span style=\"font-weight: bold;\">id</span></a><span style=\"color: green;\">)</span> a <span style=\"color: #06c; font-weight: bold;\">of</span>\nStore g c -&gt; <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span style=\"font-weight: bold;\">fmap</span></a> g <span style=\"color: green;\">(</span>f c<span style=\"color: green;\">)</span>\n </pre>\n<p>and then the following code type checks:</p>\n<pre class=\"haskell\"> \nghci&gt; :t \\l y -&gt; clone l ^= y ^. clone l + <span style=\"color: red;\">1</span> $ y\n\\l y -&gt; clone l ^= y ^. clone l + <span style=\"color: red;\">1</span> $ y\n:: <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span style=\"background-color: #efefbf; font-weight: bold;\">Num</span></a> d =&gt; <span style=\"color: green;\">(</span><span style=\"color: green;\">(</span>c -&gt; Store c d1 d1<span style=\"color: green;\">)</span> -&gt; a -&gt; Store d d b<span style=\"color: green;\">)</span> -&gt; a -&gt; b\n </pre>\n<p>This means you could implement an entire library to deal with lens families with restricted getters and setters and remain within the confines of Haskell 98. However, the type signatures are considerably less elegant than what becomes available when you simply add Rank2Types.</p>\n<h2>Conclusion</h2>\n<p>So, we've demonstrated that van Laarhoven lens families let you have lenses that permit polymorphic update, let you offer lenses that are restricted to only allowing the use of getters, setters or modifiers, while granting you easy composition with the existing <code>(.)</code> and <code>id</code> from the <code>Prelude</code>.</p>\n<p>I think the practical existence and power of these combinators make a strong case for their use in any serious record reform proposal.</p>\n<p>My thanks go to Russell O'Connor. He first noticed that you can generalize van Laarhoven lenses and proposed the <code>clone</code> combinator as a path to Haskell 98/2010 compatibility, while retaining the nicer composition model.</p>" "http://comonad.com/reader/2012/mirrored-lenses/" (20456 43572) new 27 nil nil ((title nil "Edward Kmett: Mirrored Lenses") (guid ((isPermaLink . "false")) "http://comonad.com/reader/?p=600") (link nil "http://comonad.com/reader/2012/mirrored-lenses/") (description nil "<p>Lenses are a great way to deal with functional references, but there are two common issues that arise from their use. </p>\n<ol>\n<li>There is a long-standing folklore position that lenses do not support polymorphic updates. This has actually caused a fair bit of embarrassment for the folks who'd like to incorporate lenses in any Haskell record system improvement.</li>\n<li>Access control. It'd be nice to have read-only or write-only properties -- \"one-way\" or \"mirrored\" lenses, as it were. Moreover, lenses are commonly viewed as an all or nothing proposition, in that it is hard to mix them with arbitrary user functions.</li>\n<li>Finally there is a bit of a cult around trying to generalize lenses by smashing a monad in the middle of them somewhere, it would be nice to be able to get into a list and work with each individual element in it without worrying about someone mucking up our lens laws, and perhaps avoid the whole generalized lens issue entirely.</li>\n</ol>\n<p>We'll take a whack at each of these concerns in turn today.<br />\n<span id=\"more-600\"></span></p>\n<pre lang=\"haskell\">   {-# LANGUAGE Rank2Types #-}  -- we'll relax this later\n   import Data.Complex -- for complex examples\n</pre>\n<p>First, let us consider the type of van Laarhoven lenses:</p>\n<pre lang=\"haskell\">type Lens a b =\n  forall f. Functor f =&gt;\n  (b -&gt; f b) -&gt; a -&gt; f a\n</pre>\n<p>with a couple of examples:</p>\n<pre class=\"haskell\"> \nrealLens :: <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:RealFloat\"><span style=\"background-color: #efefbf; font-weight: bold;\">RealFloat</span></a> a =&gt; Lens <span style=\"color: green;\">(</span>Complex a<span style=\"color: green;\">)</span> a\nrealLens f <span style=\"color: green;\">(</span>r :+ i<span style=\"color: green;\">)</span> = <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span style=\"font-weight: bold;\">fmap</span></a> <span style=\"color: green;\">(</span>:+ i<span style=\"color: green;\">)</span> <span style=\"color: green;\">(</span>f r<span style=\"color: green;\">)</span>\n \nimagLens :: <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:RealFloat\"><span style=\"background-color: #efefbf; font-weight: bold;\">RealFloat</span></a> a =&gt; Lens <span style=\"color: green;\">(</span>Complex a<span style=\"color: green;\">)</span> a\nimagLens f <span style=\"color: green;\">(</span>r :+ i<span style=\"color: green;\">)</span> = <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span style=\"font-weight: bold;\">fmap</span></a> <span style=\"color: green;\">(</span>r :+<span style=\"color: green;\">)</span> <span style=\"color: green;\">(</span>f i<span style=\"color: green;\">)</span>\n </pre>\n<p>These lenses have some very nice properties that we're going to exploit. By far their nicest property is that you can compose them using just <code>(.)</code> and <code>id</code> from the <code>Prelude</code> rather than having to go off and write a <code>Category</code>.</p>\n<h2>Lens Families</h2>\n<p><a href=\"http://r6.ca/blog/20120623T104901Z.html\">Russell O'Connor recently noted that these lenses permit polymorphic update</a> if you simply generalize their type signature to</p>\n<pre class=\"haskell\"> \n<span style=\"color: #06c; font-weight: bold;\">type</span> LensFamily a b c d =\n  <span style=\"color: #06c; font-weight: bold;\">forall</span> f. <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Functor\"><span style=\"background-color: #efefbf; font-weight: bold;\">Functor</span></a> f =&gt;\n  <span style=\"color: green;\">(</span>c -&gt; f d<span style=\"color: green;\">)</span> -&gt; a -&gt; f b\n </pre>\n<p>I'd like to note that you can't just let these 4 arguments vary with complete impunity, so I'll be referring to these as \"lens families\" rather than polymorphic lenses, a point that I'll address further below. In short, we want the original lens laws to still hold in spite of the generalized type signature, and this forces some of these types to be related. </p>\n<p>As an aside, each of the other lens types admit this same generalization! For instance the <code>Lens</code> type in <a href=\"http://hackage.haskell.org/package/data-lens\">data-lens</a> can be generalized using an indexed store comonad:</p>\n<pre class=\"haskell\"> \n<span style=\"color: #06c; font-weight: bold;\">data</span> Store c d b = Store <span style=\"color: green;\">(</span>d -&gt; b<span style=\"color: green;\">)</span> c\n \n<span style=\"color: #06c; font-weight: bold;\">instance</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Functor\"><span style=\"background-color: #efefbf; font-weight: bold;\">Functor</span></a> <span style=\"color: green;\">(</span>Store c d<span style=\"color: green;\">)</span> <span style=\"color: #06c; font-weight: bold;\">where</span>\n  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span style=\"font-weight: bold;\">fmap</span></a> f <span style=\"color: green;\">(</span>Store g c<span style=\"color: green;\">)</span> = Store <span style=\"color: green;\">(</span>f . g<span style=\"color: green;\">)</span> c\n \n<span style=\"color: #06c; font-weight: bold;\">newtype</span> DataLensFamily a b c d = DataLensFamily <span style=\"color: green;\">(</span>a -&gt; Store c d b<span style=\"color: green;\">)</span>\n </pre>\n<p>and we can freely convert back and forth to van Laarhoven lens families:</p>\n<pre class=\"haskell\"> \ndlens :: LensFamily a b c d -&gt; DataLensFamily a b c d\ndlens l = DataLensFamily <span style=\"color: green;\">(</span>l <span style=\"color: green;\">(</span>Store <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:id\"><span style=\"font-weight: bold;\">id</span></a><span style=\"color: green;\">)</span><span style=\"color: green;\">)</span>\n \nplens :: DataLensFamily a b c d -&gt; LensFamily a b c d\nplens <span style=\"color: green;\">(</span>DataLensFamily l<span style=\"color: green;\">)</span> f a = <span style=\"color: #06c; font-weight: bold;\">case</span> l a <span style=\"color: #06c; font-weight: bold;\">of</span>\n  Store g c -&gt; <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span style=\"font-weight: bold;\">fmap</span></a> g <span style=\"color: green;\">(</span>f c<span style=\"color: green;\">)</span>\n </pre>\n<p>I leave it as an exercise to the reader to generalize the other lens types, but we'll stick to van Laarhoven lens families almost exclusively below.</p>\n<p>As Russell noted, we can define functions to get, modify and set the target of a lens very easily. I'll create local names for <code>Identity</code> and <code>Const</code>, mostly to help give nicer error messages later.</p>\n<p>We can read from a lens family:</p>\n<pre class=\"haskell\"> \n<span style=\"color: #06c; font-weight: bold;\">infixl</span> <span style=\"color: red;\">8</span> ^.\n<span style=\"color: #06c; font-weight: bold;\">newtype</span> Getting b a = Getting <span style=\"color: green;\">{</span> got :: b <span style=\"color: green;\">}</span>\n<span style=\"color: #06c; font-weight: bold;\">instance</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Functor\"><span style=\"background-color: #efefbf; font-weight: bold;\">Functor</span></a> <span style=\"color: green;\">(</span>Getting b<span style=\"color: green;\">)</span> <span style=\"color: #06c; font-weight: bold;\">where</span>\n    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span style=\"font-weight: bold;\">fmap</span></a> _ <span style=\"color: green;\">(</span>Getting b<span style=\"color: green;\">)</span> = Getting b\n<span style=\"color: green;\">(</span>^.<span style=\"color: green;\">)</span> :: a -&gt; <span style=\"color: green;\">(</span><span style=\"color: green;\">(</span>c -&gt; Getting c d<span style=\"color: green;\">)</span> -&gt; a -&gt; Getting c b<span style=\"color: green;\">)</span> -&gt; c\nx ^. l = got <span style=\"color: green;\">(</span>l Getting x<span style=\"color: green;\">)</span>\n </pre>\n<p>We can modify the target of the lens:</p>\n<pre class=\"haskell\"> \n<span style=\"color: #06c; font-weight: bold;\">newtype</span> Setting a = Setting <span style=\"color: green;\">{</span> unsetting :: a <span style=\"color: green;\">}</span>\n<span style=\"color: #06c; font-weight: bold;\">instance</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Functor\"><span style=\"background-color: #efefbf; font-weight: bold;\">Functor</span></a> Setting <span style=\"color: #06c; font-weight: bold;\">where</span>\n    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span style=\"font-weight: bold;\">fmap</span></a> f <span style=\"color: green;\">(</span>Setting a<span style=\"color: green;\">)</span> = Setting <span style=\"color: green;\">(</span>f a<span style=\"color: green;\">)</span>\n<span style=\"color: #06c; font-weight: bold;\">infixr</span> <span style=\"color: red;\">4</span> %=\n<span style=\"color: green;\">(</span>%=<span style=\"color: green;\">)</span> :: <span style=\"color: green;\">(</span><span style=\"color: green;\">(</span>c -&gt; Setting d<span style=\"color: green;\">)</span> -&gt; a -&gt; Setting b<span style=\"color: green;\">)</span> -&gt; <span style=\"color: green;\">(</span>c -&gt; d<span style=\"color: green;\">)</span> -&gt; a -&gt; b\nl %= f = unsetting . l <span style=\"color: green;\">(</span>Setting . f<span style=\"color: green;\">)</span>\n </pre>\n<p>We can set the target of the lens with impunity:</p>\n<pre class=\"haskell\"> \n<span style=\"color: #06c; font-weight: bold;\">infixr</span> <span style=\"color: red;\">4</span> ^=\n<span style=\"color: green;\">(</span>^=<span style=\"color: green;\">)</span> :: <span style=\"color: green;\">(</span><span style=\"color: green;\">(</span>c -&gt; Setting d<span style=\"color: green;\">)</span> -&gt; a -&gt; Setting b<span style=\"color: green;\">)</span> -&gt; d -&gt; a -&gt; b\nl ^= v = l %= <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:const\"><span style=\"font-weight: bold;\">const</span></a> v\n </pre>\n<p>We can build a lens family from a getter/setter pair</p>\n<pre class=\"haskell\"> \nlens :: <span style=\"color: green;\">(</span>a -&gt; c<span style=\"color: green;\">)</span> -&gt; <span style=\"color: green;\">(</span>a -&gt; d -&gt; b<span style=\"color: green;\">)</span> -&gt; LensFamily a b c d\nlens f g h a = <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span style=\"font-weight: bold;\">fmap</span></a> <span style=\"color: green;\">(</span>g a<span style=\"color: green;\">)</span> <span style=\"color: green;\">(</span>h <span style=\"color: green;\">(</span>f a<span style=\"color: green;\">)</span><span style=\"color: green;\">)</span>\n </pre>\n<p>or from a family of isomorphisms:</p>\n<pre class=\"haskell\"> \niso :: <span style=\"color: green;\">(</span>a -&gt; c<span style=\"color: green;\">)</span> -&gt; <span style=\"color: green;\">(</span>d -&gt; b<span style=\"color: green;\">)</span> -&gt; LensFamily a b c d\niso f g h a = <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span style=\"font-weight: bold;\">fmap</span></a> g <span style=\"color: green;\">(</span>h <span style=\"color: green;\">(</span>f a<span style=\"color: green;\">)</span><span style=\"color: green;\">)</span>\n </pre>\n<p>With these combinators in hand, we need some actual lens families to play with. Fortunately they are just as easy to construct as simple lenses. The only thing that changes is the type signature.  </p>\n<pre class=\"haskell\"> \nfstLens :: LensFamily <span style=\"color: green;\">(</span>a,c<span style=\"color: green;\">)</span> <span style=\"color: green;\">(</span>b,c<span style=\"color: green;\">)</span> a b\nfstLens f <span style=\"color: green;\">(</span>a,b<span style=\"color: green;\">)</span> = <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span style=\"font-weight: bold;\">fmap</span></a> <span style=\"color: green;\">(</span>\\x -&gt; <span style=\"color: green;\">(</span>x,b<span style=\"color: green;\">)</span><span style=\"color: green;\">)</span> <span style=\"color: green;\">(</span>f a<span style=\"color: green;\">)</span>\n \nsndLens :: LensFamily <span style=\"color: green;\">(</span>a,b<span style=\"color: green;\">)</span> <span style=\"color: green;\">(</span>a,c<span style=\"color: green;\">)</span> b c\nsndLens f <span style=\"color: green;\">(</span>a,b<span style=\"color: green;\">)</span> = <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span style=\"font-weight: bold;\">fmap</span></a> <span style=\"color: green;\">(</span><span style=\"color: green;\">(</span>,<span style=\"color: green;\">)</span> a<span style=\"color: green;\">)</span> <span style=\"color: green;\">(</span>f b<span style=\"color: green;\">)</span>\n \nswap :: <span style=\"color: green;\">(</span>a,b<span style=\"color: green;\">)</span> -&gt; <span style=\"color: green;\">(</span>b,a<span style=\"color: green;\">)</span>\nswap <span style=\"color: green;\">(</span>a,b<span style=\"color: green;\">)</span> = <span style=\"color: green;\">(</span>b,a<span style=\"color: green;\">)</span>\n \nswapped :: LensFamily <span style=\"color: green;\">(</span>a,b<span style=\"color: green;\">)</span> <span style=\"color: green;\">(</span>c,d<span style=\"color: green;\">)</span> <span style=\"color: green;\">(</span>b,a<span style=\"color: green;\">)</span> <span style=\"color: green;\">(</span>d,c<span style=\"color: green;\">)</span>\nswapped = iso swap swap\n </pre>\n<p>These can also build 'traditional' lenses:</p>\n<pre class=\"haskell\"> \nnegated :: <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span style=\"background-color: #efefbf; font-weight: bold;\">Num</span></a> a =&gt; Lens a a\nnegated = iso <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:negate\"><span style=\"font-weight: bold;\">negate</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:negate\"><span style=\"font-weight: bold;\">negate</span></a>\n </pre>\n<p>And since <code>Lens</code> and <code>LensFamily</code> are both type aliases, we can freely mix and match lenses with lens families:</p>\n<pre class=\"haskell\"> \nghci&gt; <span style=\"color: green;\">(</span><span style=\"color: red;\">1</span>:<span style=\"color: red;\">+2</span>,<span style=\"color: red;\">3</span><span style=\"color: green;\">)</span> ^.fstLens.realLens\n<span style=\"color: red;\">1.0</span>\nghci&gt; fstLens . realLens ^= <span style=\"color: red;\">4</span> $ <span style=\"color: green;\">(</span><span style=\"color: red;\">1</span>:<span style=\"color: red;\">+2</span>,<span style=\"color: red;\">3</span><span style=\"color: green;\">)</span>\n<span style=\"color: green;\">(</span><span style=\"color: red;\">4.0</span> :+ <span style=\"color: red;\">2.0</span>,<span style=\"color: red;\">3</span><span style=\"color: green;\">)</span>\n </pre>\n<p>But, we can now change types with our lens updates!</p>\n<pre class=\"haskell\"> \nghci&gt; <span style=\"color: green;\">(</span>fstLens . sndLens ^= <span style=\"color: #3c7331;\">\"hello\"</span><span style=\"color: green;\">)</span> <span style=\"color: green;\">(</span><span style=\"color: green;\">(</span><span style=\"color: red;\">1</span>,<span style=\"color: green;\">(</span><span style=\"color: green;\">)</span><span style=\"color: green;\">)</span>,<span style=\"color: red;\">3</span><span style=\"color: green;\">)</span>\n<span style=\"color: green;\">(</span><span style=\"color: green;\">(</span><span style=\"color: red;\">1</span>,<span style=\"color: #3c7331;\">\"hello\"</span><span style=\"color: green;\">)</span>,<span style=\"color: red;\">3</span><span style=\"color: green;\">)</span>\n </pre>\n<p>We can even do things like use the combinator</p>\n<pre class=\"haskell\"> \ntraverseLens :: <span style=\"color: green;\">(</span><span style=\"color: green;\">(</span>c -&gt; c<span style=\"color: green;\">)</span> -&gt; a -&gt; b<span style=\"color: green;\">)</span> -&gt; a -&gt; b\ntraverseLens f = f <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:id\"><span style=\"font-weight: bold;\">id</span></a>\n </pre>\n<p>to project a <code>Functor</code> out through an appropriate lens family:</p>\n<pre class=\"haskell\"> \nghci&gt; :t traverseLens <span style=\"color: green;\">(</span>fstLens . sndLens<span style=\"color: green;\">)</span>\ntraverseLens <span style=\"color: green;\">(</span>fstLens . sndLens<span style=\"color: green;\">)</span>\n  :: <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Functor\"><span style=\"background-color: #efefbf; font-weight: bold;\">Functor</span></a> f =&gt; <span style=\"color: green;\">(</span><span style=\"color: green;\">(</span>a, f b<span style=\"color: green;\">)</span>, c<span style=\"color: green;\">)</span> -&gt; f <span style=\"color: green;\">(</span><span style=\"color: green;\">(</span>a, b<span style=\"color: green;\">)</span>, c<span style=\"color: green;\">)</span>\n </pre>\n<p>That takes care of polymorphic updates. </p>\n<h2>Why is it a Lens Family?</h2>\n<p>So, why do I use the term \"lens family\" rather than \"polymorphic lens\"?</p>\n<p>In order for the lens laws to hold, the 4 types parameterizing our lens family must be interrelated.</p>\n<p>In particular you need to be able to put back (with <code>^=</code>) what you get out of the lens (with <code>^.</code>) and put multiple times.</p>\n<p>This effectively constrains the space of possible legal lens families to those where there exists an index kind <code>i</code>, and two type families <code>outer :: i -&gt; *</code>, and <code>inner :: i -&gt; *</code>. If this were a viable type signature, then each lens family would actually have 2 parameters, yielding something like:</p>\n<pre class=\"haskell\"> \n<span style=\"color: #5d478b; font-style: italic;\">-- pseudo-Haskell</span>\n<span style=\"color: #5d478b; font-style: italic;\">-- type LensFamily outer inner =</span>\n<span style=\"color: #5d478b; font-style: italic;\">--    forall a b. LensFamily (outer a) (outer b) (inner a) (inner b)</span>\n </pre>\n<p>but you can't pass in type families as arguments like that, and even if you could, their lack of injectivity doesn't give the type checker enough to work with to compose your lenses. By specifying all 4 type arguments independently, we give the compiler enough to work with. But since the arguments aren't just freely polymorphic and are instead related by these index types, I'm choosing to call them \"lens families\" rather than \"polymorphic lenses\".</p>\n<h2>Getters</h2>\n<p>Note, we didn't use the full polymorphism of the van Laarhoven lenses in the signatures of <code>(^.)</code>, <code>(%=)</code> and <code>(^=)</code> above.</p>\n<p>What happens when we restrict the type of <code>Functor</code> we're allowed to pass to our lens?</p>\n<p>If we generalize the type of our getter ever so slightly from the type we pass to <code>(^.)</code> to permit composition, we get:</p>\n<pre class=\"haskell\"> \n<span style=\"color: #06c; font-weight: bold;\">type</span> Getter a c = <span style=\"color: #06c; font-weight: bold;\">forall</span> r d b. <span style=\"color: green;\">(</span>c -&gt; Getting r d<span style=\"color: green;\">)</span> -&gt; a -&gt; Getting r b\n </pre>\n<p>and we can make getters out of arbitrary Haskell functions that we have lying around with</p>\n<pre class=\"haskell\"> \n<span style=\"color: #5d478b; font-style: italic;\">-- | build a getting out of a function</span>\ngetting :: <span style=\"color: green;\">(</span>a -&gt; b<span style=\"color: green;\">)</span> -&gt; Getter a b\ngetting g f = Getting . got . f . g\n </pre>\n<p>For example:</p>\n<pre class=\"haskell\"> \ngetFst :: Getter <span style=\"color: green;\">(</span>a,b<span style=\"color: green;\">)</span> a\ngetFst = getting <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fst\"><span style=\"font-weight: bold;\">fst</span></a>\n \ngetSnd :: Getter <span style=\"color: green;\">(</span>a,b<span style=\"color: green;\">)</span> b\ngetSnd = getting <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:snd\"><span style=\"font-weight: bold;\">snd</span></a>\n </pre>\n<p>But this is particularly nice for things that <em>can't</em> be made into real lenses or lens families, because of loss of information:</p>\n<pre class=\"haskell\"> \ngetPhase :: <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:RealFloat\"><span style=\"background-color: #efefbf; font-weight: bold;\">RealFloat</span></a> a =&gt; Getter <span style=\"color: green;\">(</span>Complex a<span style=\"color: green;\">)</span> a\ngetPhase = getting phase\n \ngetAbs, getSignum  :: <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span style=\"background-color: #efefbf; font-weight: bold;\">Num</span></a> a =&gt; Getter a a\ngetAbs = getting <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:abs\"><span style=\"font-weight: bold;\">abs</span></a>\ngetSignum = getting <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:signum\"><span style=\"font-weight: bold;\">signum</span></a>\n </pre>\n<p>Notably, <code>getMagnitude</code> and <code>getPhase</code> can't be legal lenses because when the <code>magnitude</code> is 0, you lose <code>phase</code> information.</p>\n<p>These can be mixed and matched with other lenses when dereferencing with <code>(^.)</code></p>\n<pre class=\"haskell\"> \nghci&gt; <span style=\"color: green;\">(</span><span style=\"color: red;\">0</span>,<span style=\"color: green;\">(</span><span style=\"color: red;\">1</span>:<span style=\"color: red;\">+2</span>,<span style=\"color: red;\">3</span><span style=\"color: green;\">)</span><span style=\"color: green;\">)</span> ^. getting <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:snd\"><span style=\"font-weight: bold;\">snd</span></a> . fstLens . getting magnitude\n<span style=\"color: red;\">2.23606797749979</span>\n </pre>\n<p>But we get a type error when we attempt to write to a <code>Getter</code>.</p>\n<pre class=\"haskell\"> \nghci&gt; getting magnitude ^= <span style=\"color: red;\">12</span>\n&lt;interactive&gt;:<span style=\"color: red;\">2</span>:<span style=\"color: red;\">1</span>:\n    Couldn't match expected <span style=\"color: #06c; font-weight: bold;\">type</span> `Setting d0'\n                with actual <span style=\"color: #06c; font-weight: bold;\">type</span> `Getting r0 d1'\n    Expected <span style=\"color: #06c; font-weight: bold;\">type</span>: <span style=\"color: green;\">(</span>c0 -&gt; Setting d0<span style=\"color: green;\">)</span> -&gt; a1 -&gt; Setting b1\n      Actual <span style=\"color: #06c; font-weight: bold;\">type</span>: <span style=\"color: green;\">(</span>c0 -&gt; Getting r0 d1<span style=\"color: green;\">)</span> -&gt; a0 -&gt; Getting r0 b0\n    In the <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span style=\"font-weight: bold;\">return</span></a> <span style=\"color: #06c; font-weight: bold;\">type</span> <span style=\"color: #06c; font-weight: bold;\">of</span> a call <span style=\"color: #06c; font-weight: bold;\">of</span> `getting'\n    In the first argument <span style=\"color: #06c; font-weight: bold;\">of</span> `<span style=\"color: green;\">(</span>^=<span style=\"color: green;\">)</span>', namely `getting magnitude'\n&lt;/interactive&gt;</pre>\n<h2>Setters</h2>\n<p>So what about write-only properties?</p>\n<p>These have a less satisfying solution. We have to break our lens family structure slightly to make something that can strictly <em>only</em> be written to, by disabling the ability to read our current value entirely. </p>\n<pre class=\"haskell\"> \n<span style=\"color: #06c; font-weight: bold;\">type</span> Setter a d b = <span style=\"color: green;\">(</span><span style=\"color: green;\">(</span><span style=\"color: green;\">)</span> -&gt; Setting d<span style=\"color: green;\">)</span> -&gt; a -&gt; Setting b\n \nsetting :: <span style=\"color: green;\">(</span>a -&gt; d -&gt; b<span style=\"color: green;\">)</span> -&gt; Setter a d b\nsetting f g a = Setting <span style=\"color: green;\">(</span>f a <span style=\"color: green;\">(</span>unsetting <span style=\"color: green;\">(</span>g <span style=\"color: green;\">(</span><span style=\"color: green;\">)</span><span style=\"color: green;\">)</span><span style=\"color: green;\">)</span><span style=\"color: green;\">)</span>\n </pre>\n<p>Now we can make setters out of functions that take two arguments:</p>\n<pre class=\"haskell\"> \nplus, times :: <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span style=\"background-color: #efefbf; font-weight: bold;\">Num</span></a> a =&gt; Setter a a a\nplus = setting <span style=\"color: green;\">(</span>+<span style=\"color: green;\">)</span>\ntimes = setting <span style=\"color: green;\">(</span>*<span style=\"color: green;\">)</span>\n </pre>\n<pre class=\"haskell\"> \nghci&gt; setting <span style=\"color: green;\">(</span>+<span style=\"color: green;\">)</span> ^= <span style=\"color: red;\">12</span> $ <span style=\"color: red;\">32</span>\n<span style=\"color: red;\">44</span>\nghci&gt; fstLens . setting <span style=\"color: green;\">(</span>*<span style=\"color: green;\">)</span> ^= <span style=\"color: red;\">12</span> $ <span style=\"color: green;\">(</span><span style=\"color: red;\">2</span>,<span style=\"color: red;\">3</span><span style=\"color: green;\">)</span>\n<span style=\"color: green;\">(</span><span style=\"color: red;\">24</span>,<span style=\"color: red;\">3</span><span style=\"color: green;\">)</span>\n </pre>\n<p>However, these lenses have the unsatisfying property that they can only be placed last in the chain of lenses we're setting. </p>\n<pre class=\"haskell\"> \nghci&gt; <span style=\"color: green;\">(</span>setting <span style=\"color: green;\">(</span>+<span style=\"color: green;\">)</span> . realLens ^= <span style=\"color: red;\">12</span><span style=\"color: green;\">)</span> <span style=\"color: red;\">1</span>\n&lt;interactive&gt;:<span style=\"color: red;\">15</span>:<span style=\"color: red;\">16</span>:\n    Couldn't match expected <span style=\"color: #06c; font-weight: bold;\">type</span> `<span style=\"color: green;\">(</span><span style=\"color: green;\">)</span>' with actual <span style=\"color: #06c; font-weight: bold;\">type</span> `Complex d0'\n    Expected <span style=\"color: #06c; font-weight: bold;\">type</span>: <span style=\"color: green;\">(</span>d0 -&gt; Setting d0<span style=\"color: green;\">)</span> -&gt; <span style=\"color: green;\">(</span><span style=\"color: green;\">)</span> -&gt; Setting b0\n      Actual <span style=\"color: #06c; font-weight: bold;\">type</span>: <span style=\"color: green;\">(</span>d0 -&gt; Setting d0<span style=\"color: green;\">)</span>\n                   -&gt; Complex d0 -&gt; Setting <span style=\"color: green;\">(</span>Complex d0<span style=\"color: green;\">)</span>\n    In the second argument <span style=\"color: #06c; font-weight: bold;\">of</span> `<span style=\"color: green;\">(</span>.<span style=\"color: green;\">)</span>', namely `realLens'\n    In the first argument <span style=\"color: #06c; font-weight: bold;\">of</span> `<span style=\"color: green;\">(</span>^=<span style=\"color: green;\">)</span>', namely `setting <span style=\"color: green;\">(</span>+<span style=\"color: green;\">)</span> . realLens'\n&lt;/interactive&gt;</pre>\n<p>This isn't surprising, if you consider that to compose <code>data-lens</code> lenses you need to use <code>%=</code> to chain setters.</p>\n<h2>Modifiers</h2>\n<p>So what do we need to do to make a lens we can only modify but not read?</p>\n<p>Lets restore the lens family structure!</p>\n<pre class=\"haskell\"> \n<span style=\"color: #06c; font-weight: bold;\">type</span> Modifier a b c d = <span style=\"color: green;\">(</span>c -&gt; Setting d<span style=\"color: green;\">)</span> -&gt; a -&gt; Setting b\n \nmodifying :: <span style=\"color: green;\">(</span><span style=\"color: green;\">(</span>c -&gt; d<span style=\"color: green;\">)</span> -&gt; a -&gt; b<span style=\"color: green;\">)</span> -&gt; Modifier a b c d\nmodifying f g a = Setting <span style=\"color: green;\">(</span>f <span style=\"color: green;\">(</span>unsetting . g<span style=\"color: green;\">)</span> a<span style=\"color: green;\">)</span>\n </pre>\n<p><code>modifying</code> makes a modify-only lens family you can modify using local information, but can't tell anyone about the contents of.</p>\n<p>This lets us work with a lens over a variable number of elements in a structure, without worrying about a user accidentally \"putting back\" too many or too few entries.</p>\n<pre class=\"haskell\"> \nghci&gt; modifying <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span style=\"font-weight: bold;\">map</span></a> %= <span style=\"color: green;\">(</span><span style=\"color: red;\">+1</span><span style=\"color: green;\">)</span> $ <span style=\"color: green;\">[</span><span style=\"color: red;\">1</span>,<span style=\"color: red;\">2</span>,<span style=\"color: red;\">3</span><span style=\"color: green;\">]</span>\n<span style=\"color: green;\">[</span><span style=\"color: red;\">2</span>,<span style=\"color: red;\">3</span>,<span style=\"color: red;\">4</span><span style=\"color: green;\">]</span>\n </pre>\n<p>They can be composed with other lenses:</p>\n<pre class=\"haskell\"> \nghci&gt; modifying <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span style=\"font-weight: bold;\">map</span></a> . sndLens %= <span style=\"color: green;\">(</span><span style=\"color: red;\">+1</span><span style=\"color: green;\">)</span> $ <span style=\"color: green;\">[</span><span style=\"color: green;\">(</span><span style=\"color: #3c7331;\">\"hello\"</span>,<span style=\"color: red;\">1</span><span style=\"color: green;\">)</span>,<span style=\"color: green;\">(</span><span style=\"color: #3c7331;\">\"goodbye\"</span>,<span style=\"color: red;\">2</span><span style=\"color: green;\">)</span><span style=\"color: green;\">]</span>\n<span style=\"color: green;\">[</span><span style=\"color: green;\">(</span><span style=\"color: #3c7331;\">\"hello\"</span>,<span style=\"color: red;\">2</span><span style=\"color: green;\">)</span>,<span style=\"color: green;\">(</span><span style=\"color: #3c7331;\">\"goodbye\"</span>,<span style=\"color: red;\">3</span><span style=\"color: green;\">)</span><span style=\"color: green;\">]</span>\n </pre>\n<p>and unlike with a <code>Setter</code>, you can compose a <code>Modifier</code> with a <code>Modifier</code>:</p>\n<pre class=\"haskell\"> \nmodifying <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span style=\"font-weight: bold;\">fmap</span></a> . modifying <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span style=\"font-weight: bold;\">fmap</span></a>\n  :: <span style=\"color: green;\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Functor\"><span style=\"background-color: #efefbf; font-weight: bold;\">Functor</span></a> g, <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Functor\"><span style=\"background-color: #efefbf; font-weight: bold;\">Functor</span></a> f<span style=\"color: green;\">)</span> =&gt;\n     <span style=\"color: green;\">(</span>c -&gt; Setting d<span style=\"color: green;\">)</span> -&gt; f <span style=\"color: green;\">(</span>g c<span style=\"color: green;\">)</span> -&gt; Setting <span style=\"color: green;\">(</span>f <span style=\"color: green;\">(</span>g d<span style=\"color: green;\">)</span><span style=\"color: green;\">)</span>\n </pre>\n<p>but they cannot be read from directly:</p>\n<pre class=\"haskell\"> \nghci&gt; <span style=\"color: green;\">[</span><span style=\"color: red;\">1</span>,<span style=\"color: red;\">2</span>,<span style=\"color: red;\">3</span><span style=\"color: green;\">]</span> ^. modifying <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span style=\"font-weight: bold;\">fmap</span></a>\n&lt;interactive&gt;:<span style=\"color: red;\">18</span>:<span style=\"color: red;\">12</span>:\n    Couldn't match expected <span style=\"color: #06c; font-weight: bold;\">type</span> `Getting c0 d0'\n                with actual <span style=\"color: #06c; font-weight: bold;\">type</span> `Setting d1'\n    Expected <span style=\"color: #06c; font-weight: bold;\">type</span>: <span style=\"color: green;\">(</span>c0 -&gt; Getting c0 d0<span style=\"color: green;\">)</span> -&gt; <span style=\"color: green;\">[</span>t0<span style=\"color: green;\">]</span> -&gt; Getting c0 b1\n      Actual <span style=\"color: #06c; font-weight: bold;\">type</span>: Modifier a0 b0 c0 d1\n    In the <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span style=\"font-weight: bold;\">return</span></a> <span style=\"color: #06c; font-weight: bold;\">type</span> <span style=\"color: #06c; font-weight: bold;\">of</span> a call <span style=\"color: #06c; font-weight: bold;\">of</span> `modifying'\n    In the second argument <span style=\"color: #06c; font-weight: bold;\">of</span> `<span style=\"color: green;\">(</span>^.<span style=\"color: green;\">)</span>', namely `modifying <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span style=\"font-weight: bold;\">map</span></a>'\n&lt;/interactive&gt;</pre>\n<p>We can map over restricted domains:</p>\n<pre class=\"haskell\"> \nreals :: <span style=\"color: green;\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:RealFloat\"><span style=\"background-color: #efefbf; font-weight: bold;\">RealFloat</span></a> a, <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:RealFloat\"><span style=\"background-color: #efefbf; font-weight: bold;\">RealFloat</span></a> b<span style=\"color: green;\">)</span> =&gt; Modifier <span style=\"color: green;\">(</span>Complex a<span style=\"color: green;\">)</span> <span style=\"color: green;\">(</span>Complex b<span style=\"color: green;\">)</span> a b\nreals = modifying <span style=\"color: green;\">(</span>\\f <span style=\"color: green;\">(</span>r :+ i<span style=\"color: green;\">)</span> -&gt; f r :+ f i<span style=\"color: green;\">)</span>\n </pre>\n<p>and everything still composes:</p>\n<pre class=\"haskell\"> \nghci&gt; reals %= <span style=\"color: green;\">(</span><span style=\"color: red;\">+1</span><span style=\"color: green;\">)</span> $  <span style=\"color: red;\">1</span> :+ <span style=\"color: red;\">2</span>\n<span style=\"color: red;\">2</span> :+ <span style=\"color: red;\">3</span>\nghci&gt; fstLens . reals %= <span style=\"color: green;\">(</span><span style=\"color: red;\">+1</span><span style=\"color: green;\">)</span> $ <span style=\"color: green;\">(</span><span style=\"color: red;\">1</span> :+ <span style=\"color: red;\">2</span>, <span style=\"color: red;\">4</span><span style=\"color: green;\">)</span>\n<span style=\"color: green;\">(</span><span style=\"color: red;\">2.0</span> :+ <span style=\"color: red;\">3.0</span>,<span style=\"color: red;\">4</span><span style=\"color: green;\">)</span>\n </pre>\n<p>These aren't limited to actions that map over the entire structure, however!</p>\n<pre class=\"haskell\"> \nghci&gt; :m + Data.Lens\nghci&gt; modifying <span style=\"color: green;\">(</span>`adjust` <span style=\"color: #3c7331;\">\"goodbye\"</span><span style=\"color: green;\">)</span> %= <span style=\"color: green;\">(</span><span style=\"color: red;\">+1</span><span style=\"color: green;\">)</span> $\n      fromList <span style=\"color: green;\">[</span><span style=\"color: green;\">(</span><span style=\"color: #3c7331;\">\"hello\"</span>,<span style=\"color: red;\">1</span><span style=\"color: green;\">)</span>,<span style=\"color: green;\">(</span><span style=\"color: #3c7331;\">\"goodbye\"</span>,<span style=\"color: red;\">2</span><span style=\"color: green;\">)</span><span style=\"color: green;\">]</span>\nfromList <span style=\"color: green;\">[</span><span style=\"color: green;\">(</span><span style=\"color: #3c7331;\">\"goodbye\"</span>,<span style=\"color: red;\">3</span><span style=\"color: green;\">)</span>,<span style=\"color: green;\">(</span><span style=\"color: #3c7331;\">\"hello\"</span>,<span style=\"color: red;\">1</span><span style=\"color: green;\">)</span><span style=\"color: green;\">]</span>\n </pre>\n<p>This lets us update potentially nested structures where something may or may not be present , which was fairly tedious to do with earlier lens representations.</p>\n<p>Both the former map-like example and the latter update-like behavior were commonly used examples in calls for partial lenses or 'multi-lenses', but here they are able to implemented using a restricted form of a more traditional lens type, and moreover they compose cleanly with other lenses and lens families.</p>\n<h2>Rank-1 Lens Families</h2>\n<p>At the very start I mentioned that you can dispense with the need for Rank-2 Types. Doing so requires much more tedious type signatures as the <code>LensFamily</code>, <code>Getter</code>, <code>Setter</code> and <code>Lens</code> aliases are no longer legal. Also, if you want to take a lens as an argument and use it in multiple contexts (e.g. as both a getter and a setter), you'll need to clone it to obtain a lens family. For example, this fails:</p>\n<pre class=\"haskell\"> \nghci&gt; :t \\l y -&gt; l ^= y ^. l + <span style=\"color: red;\">1</span> $ y\n&lt;interactive&gt;:<span style=\"color: red;\">1</span>:<span style=\"color: red;\">19</span>:\n    Couldn't match expected <span style=\"color: #06c; font-weight: bold;\">type</span> `Getting d0 d1'\n                with actual <span style=\"color: #06c; font-weight: bold;\">type</span> `Setting d0'\n    Expected <span style=\"color: #06c; font-weight: bold;\">type</span>: <span style=\"color: green;\">(</span>d0 -&gt; Getting d0 d1<span style=\"color: green;\">)</span> -&gt; a1 -&gt; Getting d0 b1\n      Actual <span style=\"color: #06c; font-weight: bold;\">type</span>: <span style=\"color: green;\">(</span>d0 -&gt; Setting d0<span style=\"color: green;\">)</span> -&gt; a0 -&gt; Setting b0\n    In the second argument <span style=\"color: #06c; font-weight: bold;\">of</span> `<span style=\"color: green;\">(</span>^.<span style=\"color: green;\">)</span>', namely `l'\n    In the first argument <span style=\"color: #06c; font-weight: bold;\">of</span> `<span style=\"color: green;\">(</span>+<span style=\"color: green;\">)</span>', namely `y ^. l'\n&lt;/interactive&gt;</pre>\n<p>But we can clone the supplied monomorphic lens using the composition of <code>dlens</code> and <code>plens</code> above, since the <code>DataLensFamily</code> completely characterizes the <code>LensFamily</code> with:</p>\n<pre class=\"haskell\"> \nclone ::\n  <span style=\"color: green;\">(</span><span style=\"color: green;\">(</span>c -&gt; Store c d d<span style=\"color: green;\">)</span> -&gt; <span style=\"color: green;\">(</span>a -&gt; Store c d b<span style=\"color: green;\">)</span><span style=\"color: green;\">)</span> -&gt;\n  LensFamily a b c d\nclone l f a = <span style=\"color: #06c; font-weight: bold;\">case</span> l <span style=\"color: green;\">(</span>Store <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:id\"><span style=\"font-weight: bold;\">id</span></a><span style=\"color: green;\">)</span> a <span style=\"color: #06c; font-weight: bold;\">of</span>\n  Store g c -&gt; <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span style=\"font-weight: bold;\">fmap</span></a> g <span style=\"color: green;\">(</span>f c<span style=\"color: green;\">)</span>\n </pre>\n<p>and then the following code type checks:</p>\n<pre class=\"haskell\"> \nghci&gt; :t \\l y -&gt; clone l ^= y ^. clone l + <span style=\"color: red;\">1</span> $ y\n\\l y -&gt; clone l ^= y ^. clone l + <span style=\"color: red;\">1</span> $ y\n  :: <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span style=\"background-color: #efefbf; font-weight: bold;\">Num</span></a> d =&gt; <span style=\"color: green;\">(</span><span style=\"color: green;\">(</span>c -&gt; Store c d1 d1<span style=\"color: green;\">)</span> -&gt; a -&gt; Store d d b<span style=\"color: green;\">)</span> -&gt; a -&gt; b\n </pre>\n<p>This means you could implement an entire library to deal with lens families with restricted getters and setters and remain within the confines of Haskell 98. However, the type signatures are considerably less elegant than what becomes available when you simply add Rank2Types.</p>\n<h2>Conclusion</h2>\n<p>So, we've demonstrated that van Laarhoven lens families let you have lenses that permit polymorphic update, let you offer lenses that are restricted to only allowing the use of getters, setters or modifiers, while granting you easy composition with the existing <code>(.)</code> and <code>id</code> from the <code>Prelude</code>.</p>\n<p>I think the practical existence and power of these combinators make a strong case for their use in any serious record reform proposal.</p>\n<p>My thanks go to Russell O'Connor. He first noticed that you can generalize van Laarhoven lenses and proposed the <code>clone</code> combinator as a path to Haskell 98/2010 compatibility, while retaining the nicer composition model.</p>") (pubDate nil "Mon, 25 Jun 2012 18:13:08 +0000"))) ("Bryan O'Sullivan: Performance: yes, it’s worth looking at the small stuff" "<p>While I was in New York for QCon last week, the temperatures started out quite mild, but soared back to their usual sweltering summertime levels by midweek. I thus found myself confined to my hotel room for a few hours one afternoon, feeling grateful for the air conditioning.</p>\n<p>As I waited for the sun to go down so that I might venture out in the heat without being cooked by both air and glare, I decided to return my attention to the Haskell <code>text</code> library for the first time in a while.</p>\n<p>This library is in a happy state of feature and bug stability, and it has grown in popularity to the point where it is now one of the ten most used libraries on Hackage (counting the number of other packages depending on it).</p>\n<table>\n<tbody><tr><th>\nlibrary\n</th><th>\n# deps\n</th></tr>\n<tr><td>\nbase\n</td><td align=\"right\">\n4757\n</td></tr>\n<tr><td>\ncontainers\n</td><td align=\"right\">\n1490\n</td></tr>\n<tr><td>\nbytestring\n</td><td align=\"right\">\n1368\n</td></tr>\n<tr><td>\nmtl\n</td><td align=\"right\">\n1243\n</td></tr>\n<tr><td>\ndirectory\n</td><td align=\"right\">\n742\n</td></tr>\n<tr><td>\nfilepath\n</td><td align=\"right\">\n669\n</td></tr>\n<tr><td>\narray\n</td><td align=\"right\">\n552\n</td></tr>\n<tr><td>\ntransformers\n</td><td align=\"right\">\n502\n</td></tr>\n<tr><td>\nparsec\n</td><td align=\"right\">\n491\n</td></tr>\n<tr><td>\ntext\n</td><td align=\"right\">\n454\n</td></tr>\n</tbody></table>\n<p>Very pleasing, right? But there are always improvements to be made, and I came across a couple of nice candidates after a little inspection.</p>\n<p>I’m going to talk about one of these in some detail, because it’s worth digging into a worked example of how to further improve the performance of code that is already fast, and this is nice and brief.</p>\n<p>The easiest of these candidates to explain is the function for decoding a bytestring containing UTF-8 text. Generally when we’re decoding UTF-8, the strings we use are relatively large, and so the small memory savings below will not usually be significant.</p>\n<p>The optimisation I discuss below appears in other performance sensitive contexts within the library in which small strings are common, so this is definitely a meaningful optimisation. For instance, the code for converting between the internal <tt>Stream</tt> type and a <tt>Text</tt> admits the same optimisation.</p>\n<p>Somewhat simplified, the beginning of our UTF-8 decoding function reads as follows:</p>\n<pre class=\"sourceCode\"><code class=\"sourceCode haskell\"><span class=\"ot\">decodeUtf8With </span><span class=\"ot\">::</span> <span class=\"dt\">OnDecodeError</span> <span class=\"ot\">-&gt;</span> <span class=\"dt\">ByteString</span> <span class=\"ot\">-&gt;</span> <span class=\"dt\">Text</span><br /><br />decodeUtf8With onErr bs <span class=\"fu\">=</span> textP ary <span class=\"dv\">0</span> alen<br /> <span class=\"kw\">where</span><br />  (ary,alen) <span class=\"fu\">=</span> A.run2 (A.new (<span class=\"fu\">length</span> bs) <span class=\"fu\">&gt;&gt;=</span> go)<br />  go dest <span class=\"fu\">=</span> <span class=\"co\">{- the actual decoding loop -}</span></code></pre>\n<p>The <code>A.run2</code> function referred to above is important to understand. It runs an action that returns a <em>mutable</em> array, and it “freezes” that array into an <em>immutable</em> array.</p>\n<pre class=\"sourceCode\"><code class=\"sourceCode haskell\"><span class=\"ot\">run2 </span><span class=\"ot\">::</span> (forall s<span class=\"fu\">.</span> <span class=\"dt\">ST</span> s (<span class=\"dt\">MArray</span> s, a)) <span class=\"ot\">-&gt;</span> (<span class=\"dt\">Array</span>, a)<br /><br />run2 k <span class=\"fu\">=</span> runST (<span class=\"kw\">do</span><br />                 (marr,b) <span class=\"ot\">&lt;-</span> k<br />                 arr <span class=\"ot\">&lt;-</span> unsafeFreeze marr<br />                 <span class=\"fu\">return</span> (arr,b))</code></pre>\n<p>Our <code>go</code> function is given an initial mutable array allocated by <code>A.new</code>, fills it with text, and returns the final mutable array (which may have been reallocated) and its size.</p>\n<p>I was curious about the performance of this code for very short strings, based on visual inspection alone.</p>\n<ul>\n<li><p>The <code>run2</code> function forces a tuple to be allocated by its callee, and both of the values in that tuple must be boxed.</p></li>\n<li><p>It then allocates another tuple, containing one new boxed value.</p></li>\n<li><p>That tuple is immediately deconstructed, and its components are passed to <code>textP</code>. This is a simple function that ensures that we always use the same value for zero-length strings, to save on allocation.</p></li>\n<li><p>Because the caller of <code>decodeUtf8With</code> may not demand a result from <code>textP</code>, it is possible that the result of this function could be an unevaluated thunk.</p></li>\n</ul>\n<p>For very short inputs, the overhead of allocating these tuples and boxing their parameters (required because tuples are polymorphic, and polymorphic values must be boxed) worried me as potentially a significant fraction of the \"real work\". (For longer strings, the actual decoding will dominate, so this becomes less of an issue. But short strings are common, and should be fast.)</p>\n<p>But first, can we be sure that those tuples really exist once the compiler has worked its magic? GHC has for a long time performed a clever optimisation called <a href=\"http://research.microsoft.com/en-us/um/people/simonpj/Papers/cpr/index.htm\"><em>constructed product result analysis</em></a>, or CPR. This tries to ensure that if a function returns multiple results (e.g. in a tuple or some other product type), it can (under some circumstances) use machine registers, avoiding boxing and memory allocation. Unfortunately, I checked the generated Core intermediate code, and CPR does not kick in for us here. It’s often fragile, and a case like this, where we carry a tuple from the <code>ST</code> monad into pure code, can easily defeat it. (It’s far from obvious when it will or will not work, so always best to check if it matters.)</p>\n<p>Remaining optimistic, we can manually get a little bit of a CPR-like effect by judicious choice of product types. Recall the type of <code>run2</code>:</p>\n<pre class=\"sourceCode\"><code class=\"sourceCode haskell\"><span class=\"ot\">run2 </span><span class=\"ot\">::</span> (forall s<span class=\"fu\">.</span> <span class=\"dt\">ST</span> s (<span class=\"dt\">MArray</span> s, a)) <span class=\"ot\">-&gt;</span> (<span class=\"dt\">Array</span>, a)</code></pre>\n<p>There are two profitable observations we can make here.</p>\n<p>To begin with, we know that the <code>a</code> parameter of the first tuple will be an <code>Int</code> in some particularly important cases. We use a specialised tuple to represent this idea.</p>\n<pre class=\"sourceCode\"><code class=\"sourceCode haskell\"><span class=\"co\">-- Instead of (MArray s, a):</span><br /><span class=\"kw\">data</span> <span class=\"dt\">Run</span> s <span class=\"fu\">=</span> <span class=\"dt\">Run</span> (<span class=\"dt\">MArray</span> s) <span class=\"ot\">{-# UNPACK #-}</span> <span class=\"fu\">!</span><span class=\"dt\">Int</span></code></pre>\n<p>We have explicitly instructed GHC to <em>not</em> box the <code>Int</code>; instead it will be stored <em>unboxed</em>, directly in the <code>Run</code> structure. This eliminates one memory allocation and the performance-sapping pointer indirection it would induce. (You might wonder why we don’t direct GHC to unbox the <code>MArray s</code> parameter. This value is just a pointer to an array, and we certainly don’t want to copy arrays around.)</p>\n<p>Our next observation is that any time we want to return a <code>Run</code>, we will always use the result to construct a <code>Text</code>. So why not construct the <code>Text</code> directly, and save our callers from doing it in many places?</p>\n<pre class=\"sourceCode\"><code class=\"sourceCode haskell\"><span class=\"ot\">runText </span><span class=\"ot\">::</span> (forall s<span class=\"fu\">.</span> <span class=\"dt\">ST</span> s (<span class=\"dt\">Run</span> s)) <span class=\"ot\">-&gt;</span> <span class=\"dt\">Text</span></code></pre>\n<p>Here’s what the body of <code>runText</code> looks like. We are no longer allocating a second tuple, and the <code>len</code> variable will never be boxed and then immediately unboxed. This brings us from allocating two tuples and an <code>Int</code> down to allocating just one <code>Run</code>.</p>\n<pre class=\"sourceCode\"><code class=\"sourceCode haskell\">runText act <span class=\"fu\">=</span> runST <span class=\"fu\">$</span> <span class=\"kw\">do</span><br />  <span class=\"dt\">Run</span> marr len <span class=\"ot\">&lt;-</span> act<br />  arr <span class=\"ot\">&lt;-</span> A.unsafeFreeze marr<br />  <span class=\"fu\">return</span> (textP arr <span class=\"dv\">0</span> len)</code></pre>\n<p>Experienced eyes will spot one last catch: because we are not forcing the result of the <code>textP</code> expression to be evaluated before we <code>return</code>, we are unnecessarily allocating a thunk here.</p>\n<p>Nevertheless, even with that small inefficiency, both time and memory usage did improve: we allocated a little less, so we did a little less work, and thus a microbenchmark that decoded millions of short words became a few percent faster.</p>\n<p>As gratifying as this is, can we improve on it further? Apart from the silly oversight of not forcing <code>textP</code>, there’s still that bothersome allocation of a <code>Run</code>. Reading the Core code generated by GHC indicates that CPR is still not happening, and so a <code>Run</code> really is being allocated and immediately thrown away. (I think that the polymorphic first parameter to <code>Run</code> might be defeating CPR, but I am not sure of this.)</p>\n<p>All along, we’ve been either allocating tuples or <code>Run</code>s and then immediately throwing them away. Allocation might be cheap, but <em>ceteris paribus</em>, not allocating anything will always be cheaper.</p>\n<p>Instead of returning a <code>Run</code> value, what if we were to have our action call a continuation to construct the final <code>Text</code> value?</p>\n<pre class=\"sourceCode\"><code class=\"sourceCode haskell\">runText <span class=\"ot\">::</span><br />  (forall s<span class=\"fu\">.</span><br />   (<span class=\"dt\">MArray</span> s <span class=\"ot\">-&gt;</span> <span class=\"dt\">Int</span> <span class=\"ot\">-&gt;</span> <span class=\"dt\">ST</span> s <span class=\"dt\">Text</span>)<br />   <span class=\"ot\">-&gt;</span> <span class=\"dt\">ST</span> s <span class=\"dt\">Text</span>)<br />  <span class=\"ot\">-&gt;</span> <span class=\"dt\">Text</span></code></pre>\n<p>The function that we call as our continuation captures no variables from its environment, so it has no hidden state for which we might need to allocate memory to save.</p>\n<pre class=\"sourceCode\"><code class=\"sourceCode haskell\">runText act <span class=\"fu\">=</span> runST (act <span class=\"fu\">$</span><br />  \\ <span class=\"fu\">!</span>marr <span class=\"fu\">!</span>len <span class=\"ot\">-&gt;</span> <span class=\"kw\">do</span><br />    arr <span class=\"ot\">&lt;-</span> A.unsafeFreeze marr<br />    <span class=\"fu\">return</span> <span class=\"fu\">$!</span> textP arr <span class=\"dv\">0</span> len)</code></pre>\n<p>We’ve now avoided the allocation of a <tt>Run</tt>, and just as importantly, we remembered to have the new <code>runText</code> force the result of the <code>textP</code> expression, so it will not allocate a thunk.</p>\n<p>The only downside to this approach is that GHC does very little inlining of continuation-based code, so our use of a continuation leaves a jump in the code path that we’d have preferred to see the inliner eliminate.</p>\n<p>This change in tack causes a significant reduction in memory allocation: on my small-decode microbenchmark, we allocate 17% less memory, and run 10% faster. I see the same improvement with another microbenchmark that exercises the <tt>Stream</tt> to <tt>Text</tt> conversion code, where I made the same optimisation. Given that I changed just a few lines of code in each case, this result makes me happy. If you’re interested, it might help to take a look at the final <a href=\"https://github.com/bos/text/blob/6e29fac297fe5d68a08e6314d508e4c67c265595/Data/Text/Encoding.hs#L98\">continuation-using version of <code>decodeUtf8With</code> in context</a>.</p>\n<p>Although simple, I hope that working through this in some detail has been interesting. Please let me know if you’d like to see more hands-on posts like this.</p>\n<div class=\"fb-like fb-social-plugin\"></div>" "http://www.serpentine.com/blog/2012/06/25/yes-its-worth-looking-at-the-small-stuff/" (20456 33009) new 28 nil nil ((title nil "Bryan O'Sullivan: Performance: yes, it’s worth looking at the small stuff") (guid ((isPermaLink . "false")) "http://www.serpentine.com/blog/?p=909") (link nil "http://www.serpentine.com/blog/2012/06/25/yes-its-worth-looking-at-the-small-stuff/") (description nil "<p>While I was in New York for QCon last week, the temperatures started out quite mild, but soared back to their usual sweltering summertime levels by midweek. I thus found myself confined to my hotel room for a few hours one afternoon, feeling grateful for the air conditioning.</p>\n<p>As I waited for the sun to go down so that I might venture out in the heat without being cooked by both air and glare, I decided to return my attention to the Haskell <code>text</code> library for the first time in a while.</p>\n<p>This library is in a happy state of feature and bug stability, and it has grown in popularity to the point where it is now one of the ten most used libraries on Hackage (counting the number of other packages depending on it).</p>\n<table>\n<tbody><tr><th>\nlibrary\n</th><th>\n# deps\n</th></tr>\n<tr><td>\nbase\n</td><td align=\"right\">\n4757\n</td></tr>\n<tr><td>\ncontainers\n</td><td align=\"right\">\n1490\n</td></tr>\n<tr><td>\nbytestring\n</td><td align=\"right\">\n1368\n</td></tr>\n<tr><td>\nmtl\n</td><td align=\"right\">\n1243\n</td></tr>\n<tr><td>\ndirectory\n</td><td align=\"right\">\n742\n</td></tr>\n<tr><td>\nfilepath\n</td><td align=\"right\">\n669\n</td></tr>\n<tr><td>\narray\n</td><td align=\"right\">\n552\n</td></tr>\n<tr><td>\ntransformers\n</td><td align=\"right\">\n502\n</td></tr>\n<tr><td>\nparsec\n</td><td align=\"right\">\n491\n</td></tr>\n<tr><td>\ntext\n</td><td align=\"right\">\n454\n</td></tr>\n</tbody></table>\n\n<p>Very pleasing, right? But there are always improvements to be made, and I came across a couple of nice candidates after a little inspection.</p>\n<p>I’m going to talk about one of these in some detail, because it’s worth digging into a worked example of how to further improve the performance of code that is already fast, and this is nice and brief.</p>\n<p>The easiest of these candidates to explain is the function for decoding a bytestring containing UTF-8 text. Generally when we’re decoding UTF-8, the strings we use are relatively large, and so the small memory savings below will not usually be significant.</p>\n<p>The optimisation I discuss below appears in other performance sensitive contexts within the library in which small strings are common, so this is definitely a meaningful optimisation. For instance, the code for converting between the internal <tt>Stream</tt> type and a <tt>Text</tt> admits the same optimisation.</p>\n<p>Somewhat simplified, the beginning of our UTF-8 decoding function reads as follows:</p>\n<pre class=\"sourceCode\"><code class=\"sourceCode haskell\"><span class=\"ot\">decodeUtf8With </span><span class=\"ot\">::</span> <span class=\"dt\">OnDecodeError</span> <span class=\"ot\">-&gt;</span> <span class=\"dt\">ByteString</span> <span class=\"ot\">-&gt;</span> <span class=\"dt\">Text</span><br /><br />decodeUtf8With onErr bs <span class=\"fu\">=</span> textP ary <span class=\"dv\">0</span> alen<br /> <span class=\"kw\">where</span><br />  (ary,alen) <span class=\"fu\">=</span> A.run2 (A.new (<span class=\"fu\">length</span> bs) <span class=\"fu\">&gt;&gt;=</span> go)<br />  go dest <span class=\"fu\">=</span> <span class=\"co\">{- the actual decoding loop -}</span></code></pre>\n<p>The <code>A.run2</code> function referred to above is important to understand. It runs an action that returns a <em>mutable</em> array, and it “freezes” that array into an <em>immutable</em> array.</p>\n<pre class=\"sourceCode\"><code class=\"sourceCode haskell\"><span class=\"ot\">run2 </span><span class=\"ot\">::</span> (forall s<span class=\"fu\">.</span> <span class=\"dt\">ST</span> s (<span class=\"dt\">MArray</span> s, a)) <span class=\"ot\">-&gt;</span> (<span class=\"dt\">Array</span>, a)<br /><br />run2 k <span class=\"fu\">=</span> runST (<span class=\"kw\">do</span><br />                 (marr,b) <span class=\"ot\">&lt;-</span> k<br />                 arr <span class=\"ot\">&lt;-</span> unsafeFreeze marr<br />                 <span class=\"fu\">return</span> (arr,b))</code></pre>\n<p>Our <code>go</code> function is given an initial mutable array allocated by <code>A.new</code>, fills it with text, and returns the final mutable array (which may have been reallocated) and its size.</p>\n<p>I was curious about the performance of this code for very short strings, based on visual inspection alone.</p>\n<ul>\n<li><p>The <code>run2</code> function forces a tuple to be allocated by its callee, and both of the values in that tuple must be boxed.</p></li>\n<li><p>It then allocates another tuple, containing one new boxed value.</p></li>\n<li><p>That tuple is immediately deconstructed, and its components are passed to <code>textP</code>. This is a simple function that ensures that we always use the same value for zero-length strings, to save on allocation.</p></li>\n<li><p>Because the caller of <code>decodeUtf8With</code> may not demand a result from <code>textP</code>, it is possible that the result of this function could be an unevaluated thunk.</p></li>\n</ul>\n<p>For very short inputs, the overhead of allocating these tuples and boxing their parameters (required because tuples are polymorphic, and polymorphic values must be boxed) worried me as potentially a significant fraction of the \"real work\". (For longer strings, the actual decoding will dominate, so this becomes less of an issue. But short strings are common, and should be fast.)</p>\n<p>But first, can we be sure that those tuples really exist once the compiler has worked its magic? GHC has for a long time performed a clever optimisation called <a href=\"http://research.microsoft.com/en-us/um/people/simonpj/Papers/cpr/index.htm\"><em>constructed product result analysis</em></a>, or CPR. This tries to ensure that if a function returns multiple results (e.g. in a tuple or some other product type), it can (under some circumstances) use machine registers, avoiding boxing and memory allocation. Unfortunately, I checked the generated Core intermediate code, and CPR does not kick in for us here. It’s often fragile, and a case like this, where we carry a tuple from the <code>ST</code> monad into pure code, can easily defeat it. (It’s far from obvious when it will or will not work, so always best to check if it matters.)</p>\n<p>Remaining optimistic, we can manually get a little bit of a CPR-like effect by judicious choice of product types. Recall the type of <code>run2</code>:</p>\n<pre class=\"sourceCode\"><code class=\"sourceCode haskell\"><span class=\"ot\">run2 </span><span class=\"ot\">::</span> (forall s<span class=\"fu\">.</span> <span class=\"dt\">ST</span> s (<span class=\"dt\">MArray</span> s, a)) <span class=\"ot\">-&gt;</span> (<span class=\"dt\">Array</span>, a)</code></pre>\n<p>There are two profitable observations we can make here.</p>\n<p>To begin with, we know that the <code>a</code> parameter of the first tuple will be an <code>Int</code> in some particularly important cases. We use a specialised tuple to represent this idea.</p>\n<pre class=\"sourceCode\"><code class=\"sourceCode haskell\"><span class=\"co\">-- Instead of (MArray s, a):</span><br /><span class=\"kw\">data</span> <span class=\"dt\">Run</span> s <span class=\"fu\">=</span> <span class=\"dt\">Run</span> (<span class=\"dt\">MArray</span> s) <span class=\"ot\">{-# UNPACK #-}</span> <span class=\"fu\">!</span><span class=\"dt\">Int</span></code></pre>\n<p>We have explicitly instructed GHC to <em>not</em> box the <code>Int</code>; instead it will be stored <em>unboxed</em>, directly in the <code>Run</code> structure. This eliminates one memory allocation and the performance-sapping pointer indirection it would induce. (You might wonder why we don’t direct GHC to unbox the <code>MArray s</code> parameter. This value is just a pointer to an array, and we certainly don’t want to copy arrays around.)</p>\n<p>Our next observation is that any time we want to return a <code>Run</code>, we will always use the result to construct a <code>Text</code>. So why not construct the <code>Text</code> directly, and save our callers from doing it in many places?</p>\n<pre class=\"sourceCode\"><code class=\"sourceCode haskell\"><span class=\"ot\">runText </span><span class=\"ot\">::</span> (forall s<span class=\"fu\">.</span> <span class=\"dt\">ST</span> s (<span class=\"dt\">Run</span> s)) <span class=\"ot\">-&gt;</span> <span class=\"dt\">Text</span></code></pre>\n<p>Here’s what the body of <code>runText</code> looks like. We are no longer allocating a second tuple, and the <code>len</code> variable will never be boxed and then immediately unboxed. This brings us from allocating two tuples and an <code>Int</code> down to allocating just one <code>Run</code>.</p>\n<pre class=\"sourceCode\"><code class=\"sourceCode haskell\">runText act <span class=\"fu\">=</span> runST <span class=\"fu\">$</span> <span class=\"kw\">do</span><br />  <span class=\"dt\">Run</span> marr len <span class=\"ot\">&lt;-</span> act<br />  arr <span class=\"ot\">&lt;-</span> A.unsafeFreeze marr<br />  <span class=\"fu\">return</span> (textP arr <span class=\"dv\">0</span> len)</code></pre>\n<p>Experienced eyes will spot one last catch: because we are not forcing the result of the <code>textP</code> expression to be evaluated before we <code>return</code>, we are unnecessarily allocating a thunk here.</p>\n<p>Nevertheless, even with that small inefficiency, both time and memory usage did improve: we allocated a little less, so we did a little less work, and thus a microbenchmark that decoded millions of short words became a few percent faster.</p>\n<p>As gratifying as this is, can we improve on it further? Apart from the silly oversight of not forcing <code>textP</code>, there’s still that bothersome allocation of a <code>Run</code>. Reading the Core code generated by GHC indicates that CPR is still not happening, and so a <code>Run</code> really is being allocated and immediately thrown away. (I think that the polymorphic first parameter to <code>Run</code> might be defeating CPR, but I am not sure of this.)</p>\n<p>All along, we’ve been either allocating tuples or <code>Run</code>s and then immediately throwing them away. Allocation might be cheap, but <em>ceteris paribus</em>, not allocating anything will always be cheaper.</p>\n<p>Instead of returning a <code>Run</code> value, what if we were to have our action call a continuation to construct the final <code>Text</code> value?</p>\n<pre class=\"sourceCode\"><code class=\"sourceCode haskell\">runText <span class=\"ot\">::</span><br />  (forall s<span class=\"fu\">.</span><br />   (<span class=\"dt\">MArray</span> s <span class=\"ot\">-&gt;</span> <span class=\"dt\">Int</span> <span class=\"ot\">-&gt;</span> <span class=\"dt\">ST</span> s <span class=\"dt\">Text</span>)<br />   <span class=\"ot\">-&gt;</span> <span class=\"dt\">ST</span> s <span class=\"dt\">Text</span>)<br />  <span class=\"ot\">-&gt;</span> <span class=\"dt\">Text</span></code></pre>\n<p>The function that we call as our continuation captures no variables from its environment, so it has no hidden state for which we might need to allocate memory to save.</p>\n<pre class=\"sourceCode\"><code class=\"sourceCode haskell\">runText act <span class=\"fu\">=</span> runST (act <span class=\"fu\">$</span><br />  \\ <span class=\"fu\">!</span>marr <span class=\"fu\">!</span>len <span class=\"ot\">-&gt;</span> <span class=\"kw\">do</span><br />    arr <span class=\"ot\">&lt;-</span> A.unsafeFreeze marr<br />    <span class=\"fu\">return</span> <span class=\"fu\">$!</span> textP arr <span class=\"dv\">0</span> len)</code></pre>\n<p>We’ve now avoided the allocation of a <tt>Run</tt>, and just as importantly, we remembered to have the new <code>runText</code> force the result of the <code>textP</code> expression, so it will not allocate a thunk.</p>\n<p>The only downside to this approach is that GHC does very little inlining of continuation-based code, so our use of a continuation leaves a jump in the code path that we’d have preferred to see the inliner eliminate.</p>\n<p>This change in tack causes a significant reduction in memory allocation: on my small-decode microbenchmark, we allocate 17% less memory, and run 10% faster. I see the same improvement with another microbenchmark that exercises the <tt>Stream</tt> to <tt>Text</tt> conversion code, where I made the same optimisation. Given that I changed just a few lines of code in each case, this result makes me happy. If you’re interested, it might help to take a look at the final <a href=\"https://github.com/bos/text/blob/6e29fac297fe5d68a08e6314d508e4c67c265595/Data/Text/Encoding.hs#L98\">continuation-using version of <code>decodeUtf8With</code> in context</a>.</p>\n<p>Although simple, I hope that working through this in some detail has been interesting. Please let me know if you’d like to see more hands-on posts like this.</p>\n<div class=\"fb-like fb-social-plugin\"></div>") (pubDate nil "Mon, 25 Jun 2012 15:17:05 +0000"))) ("Ken T Takusagawa: [brzolmsf] Target" "<p><img src=\"http://mit.edu/kenta/www/three/target/brzolmsf/target-narrow.png\" alt=\"target\" height=\"450\" width=\"450\" /></p><p><a href=\"http://mit.edu/kenta/www/three/target/brzolmsf\">Haskell source code</a></p><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/6757805-2150102816156522137?l=kenta.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>" "http://kenta.blogspot.com/2012/06/brzolmsf-target.html" (20455 64040) new 29 nil nil ((title nil "Ken T Takusagawa: [brzolmsf] Target") (guid ((isPermaLink . "false")) "tag:blogger.com,1999:blog-6757805.post-2150102816156522137") (link nil "http://kenta.blogspot.com/2012/06/brzolmsf-target.html") (description nil "<p><img src=\"http://mit.edu/kenta/www/three/target/brzolmsf/target-narrow.png\" alt=\"target\" height=\"450\" width=\"450\" /></p><p><a href=\"http://mit.edu/kenta/www/three/target/brzolmsf\">Haskell source code</a></p><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/6757805-2150102816156522137?l=kenta.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>") (pubDate nil "Mon, 25 Jun 2012 05:42:00 +0000") (author nil "noreply@blogger.com (Ken)"))) ("Paul Johnson: A secure bitcoin device" "Bitcoins seem to be here to stay. They are being used an increasing amount, in ways both legitimate and illegitimate. But security is a problem for any system where irrevocable and (almost) untraceable transactions can move significant value. The conventional banking system has evolved a system of traceability that lets it wind back fraudulent or simply erroneous transactions, but bitcoins lack such safeguards. Added to this is the fact that any bitcoin wallet system has to be connected to other untrusted computers in order to be useful (and in practice that usually means the Internet). Malware exists that automatically hunts for bitcoin wallets and empties them.<br /><br />In short, keeping BTC on your home PC is about as secure as keeping physical cash in a pot on the mantelpiece while having your house redecorated.<br /><br />So what would it take to make a bitcoin wallet secure? The answer is, quite a lot.<br /><br /><h3>Threat Analysis</h3>Step one of security is a threat analysis: what are you protecting, who are the threat, and how well funded are they?<br /><br /><b>What?</b> In this case lets assume that we want to protect a bitcoin wallet for common transactions, but the user has conventional bank accounts, pension fund and so forth holding the majority of their non-physical wealth. So the wallet typically only has the equivalent of $100-$200 in it, enough for a week's groceries. Very occasionally it may have enough for a bigger purchase, say $20,000 to buy a car. Lets also assume that bitcoins are in widespread use (suppose Amazon accepted them) and hence pretty much anyone with sense will have done the usual things to protect their wallets. (If that means buying our solution, then our solution is going to be protecting a lot of money, more on this later). This is also not going to protect people who want to keep large amounts of cash outside of a bank: they will need to take stronger measures; the bitcoin equivalent of a safe bolted to a wall rather than a cashbox in a drawer.<br /><br />This leaves out a lot of use-cases: Amazon, in particular, are going to need to keep a float worth many thousands of dollars, if not millions. And behind them are going to be financial institutions with substantial holdings. But at that point custom security becomes feasible. This post is about protecting Joe Sixpack's wallet.<br /><br /><b>Who?</b> Lets assume that Joe and Jane Sixpack know enough to keep their wallet physically protected, and can trust the people they let into the house, at least to the point of not picking their pockets. That's not always the case of course, but its a good starting assumption. Similarly we are not going to try to prevent them from transferring money to confidence tricksters. So that limits the threat to the digital equivalent of burglary or pick-pocketing; an untrusted outsider gains access to the wallet and steals the coins from it. In this case that would be various forms of digital intruder, either using real-time hacking or malware.<br /><br /><b>How well funded?</b> Not all crime is rational, but it can still be a useful starting point to assume that the threat is a hypothetical rational criminal willing to invest resources in the expectation of a return on their investment. In other words we can assume that the resources available to roughly match the rewards on offer.<br /><br />The two strategies available to an attacker are to take whatever cash happens to be in the wallet at the time, or to wait until a substantial sum is transferred in and take that. Given the likely time to wait for Joe and Jane to buy a new car (and even assuming that they pay for it using BTC instead of a debit card), its probably better to take the available cash immediately.<br /><br />So the most lucrative form of theft would be a \"class break\" against all wallets of a particular type, followed by a swift emptying of those wallets before countermeasures could be taken. That would be very lucrative indeed. If you could compromise a million wallets with $100 worth of BTC each, you could take $100,000,000. The actual yield would be smaller due to the need to hide, launder and extract value from the cash. But clearly Joe and Jane Sixpack are going to have to be protected against some extremely well-funded adversaries.<br /><br /><h3><br />A Dedicated Device</h3>Rootkits that compromise virtual machines are already available and doing the rounds. So trying to wall off the wallet from the rest of a PC is not going to work. A secure bitcoin wallet has to be based on a dedicated platform. For the same reason this platform is going to need its own physical user interface: having it take orders to transfer money from an untrusted PC is as bad as having the wallet on the PC. So we need a device with enough computing power to send and receive BTC, plus a screen and a numeric keyboard for entering PINs and confirming transactions. When you want to transfer BTC to someone your computer sends the amount and ID of the destination wallet to your device, and the device then asks for independent confirmation of the transaction on its screen. As long as the device security is not compromised it is impossible to extract BTC from the device without a human being agreeing to it.<br /><br />This implies a small device with a modest processor, a couple of gigabytes of flash, a keypad, a low-resolution LCD screen and a USB port. This is about the same specification as a cheap mobile phone, suggesting that such a device could be mass produced and sold for a few tens of dollars.<br /><br />Clearly such a device is going to need a very high degree of internal security, but, given a well defined protocol for transaction requests from outside, this should not be a problem. There will also need to be a secure path for updated software and corresponding upstream security: the digital signature for software updates in particular would be a very tempting target for an attacker.<br /><br /><h3>Backups</h3>Clearly the wallet device may be damaged or suffer corruption. One solution would simply be to accept the risk, in the same way we accept that money is lost if a physical wallet gets destroyed in a fire. But computers fail rather more often than that, so a backup is probably necessary.<br /><br />The problem is that a backup is also an attack avenue: because of the way bitcoin works, if you can get hold of a copy of someone's wallet then you can empty it using any PC. So any backup has to be just as secure, and yet kept reasonably up to date at the same time.<br /><br />One option would be to keep the wallet on two independent SD flash cards configured for RAID 1: if one card fails it can be securely destroyed and replaced, and if the device fails then the cards can be moved to a new one. That just leaves data corruption and physical damage as risks. Corruption risk can be minimised by careful design of the software, such as keeping a known-good copy of the wallet as backup during a transaction and running validity checks before committing to the new one. Physical damage is a sufficiently remote possibility to be tolerable in this application.<br /><h3>Other Attacks</h3>The kind of device described so far can be used to verify that money is being sent to a particular wallet, identified by a string of digits. As long as the user knows the destination wallet ID they can be sure that they have sent the right amount to the right person. But this creates a possible attack: malware on the user's PC could systematically replace receiving wallet IDs with those of the attacker. Thus when Joe Sixpack buys a laptop on Ebay he would see payment details specifying a wallet ID and, not realising that this was not the wallet of the vendor, unwittingly send payment to the thief.<br /><br />In theory this can be avoided by a digital certificate tying the wallet to a particular person, to be verified and displayed by the wallet device as part of the transaction authorisation. But that requires a wider public key infrastructure that has so far proven expensive and fragile; it might work for large vendors, but not for small ones.<br /><br /><h3>In the Meantime</h3>For now most of these measures are not necessary. Bitcoin wallets are sufficiently rare that simple measures, such as keeping your wallet on a dedicated virtual machine, are probably sufficient. But if bitcoins become a widespread and popular form of payment then standardised security solutions will become necessary, and any standardised security will be a target for class breaks that will enable many users to be attacked at once.<br /><br />If I were to use bitcoins today I would probably put them on a dedicated Raspberry Pi set to make regular encrypted backups to a share on my regular PC, and write down the (very long and random) key somewhere safe. But not everybody is going to be able to set up such a system themselves.<div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/5975524006824862804-7855544607603160692?l=paulspontifications.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>" "http://paulspontifications.blogspot.com/2012/06/secure-bitcoin-device.html" (20455 29163) new 30 nil nil ((title nil "Paul Johnson: A secure bitcoin device") (guid ((isPermaLink . "false")) "tag:blogger.com,1999:blog-5975524006824862804.post-7855544607603160692") (link nil "http://paulspontifications.blogspot.com/2012/06/secure-bitcoin-device.html") (description nil "Bitcoins seem to be here to stay. They are being used an increasing amount, in ways both legitimate and illegitimate. But security is a problem for any system where irrevocable and (almost) untraceable transactions can move significant value. The conventional banking system has evolved a system of traceability that lets it wind back fraudulent or simply erroneous transactions, but bitcoins lack such safeguards. Added to this is the fact that any bitcoin wallet system has to be connected to other untrusted computers in order to be useful (and in practice that usually means the Internet). Malware exists that automatically hunts for bitcoin wallets and empties them.<br /><br />In short, keeping BTC on your home PC is about as secure as keeping physical cash in a pot on the mantelpiece while having your house redecorated.<br /><br />So what would it take to make a bitcoin wallet secure? The answer is, quite a lot.<br /><br /><h3>Threat Analysis</h3>Step one of security is a threat analysis: what are you protecting, who are the threat, and how well funded are they?<br /><br /><b>What?</b> In this case lets assume that we want to protect a bitcoin wallet for common transactions, but the user has conventional bank accounts, pension fund and so forth holding the majority of their non-physical wealth. So the wallet typically only has the equivalent of $100-$200 in it, enough for a week's groceries. Very occasionally it may have enough for a bigger purchase, say $20,000 to buy a car. Lets also assume that bitcoins are in widespread use (suppose Amazon accepted them) and hence pretty much anyone with sense will have done the usual things to protect their wallets. (If that means buying our solution, then our solution is going to be protecting a lot of money, more on this later). This is also not going to protect people who want to keep large amounts of cash outside of a bank: they will need to take stronger measures; the bitcoin equivalent of a safe bolted to a wall rather than a cashbox in a drawer.<br /><br />This leaves out a lot of use-cases: Amazon, in particular, are going to need to keep a float worth many thousands of dollars, if not millions. And behind them are going to be financial institutions with substantial holdings. But at that point custom security becomes feasible. This post is about protecting Joe Sixpack's wallet.<br /><br /><b>Who?</b> Lets assume that Joe and Jane Sixpack know enough to keep their wallet physically protected, and can trust the people they let into the house, at least to the point of not picking their pockets. That's not always the case of course, but its a good starting assumption. Similarly we are not going to try to prevent them from transferring money to confidence tricksters. So that limits the threat to the digital equivalent of burglary or pick-pocketing; an untrusted outsider gains access to the wallet and steals the coins from it. In this case that would be various forms of digital intruder, either using real-time hacking or malware.<br /><br /><b>How well funded?</b> Not all crime is rational, but it can still be a useful starting point to assume that the threat is a hypothetical rational criminal willing to invest resources in the expectation of a return on their investment. In other words we can assume that the resources available to roughly match the rewards on offer.<br /><br />The two strategies available to an attacker are to take whatever cash happens to be in the wallet at the time, or to wait until a substantial sum is transferred in and take that. Given the likely time to wait for Joe and Jane to buy a new car (and even assuming that they pay for it using BTC instead of a debit card), its probably better to take the available cash immediately.<br /><br />So the most lucrative form of theft would be a \"class break\" against all wallets of a particular type, followed by a swift emptying of those wallets before countermeasures could be taken. That would be very lucrative indeed. If you could compromise a million wallets with $100 worth of BTC each, you could take $100,000,000. The actual yield would be smaller due to the need to hide, launder and extract value from the cash. But clearly Joe and Jane Sixpack are going to have to be protected against some extremely well-funded adversaries.<br /><br /><h3><br />A Dedicated Device</h3>Rootkits that compromise virtual machines are already available and doing the rounds. So trying to wall off the wallet from the rest of a PC is not going to work. A secure bitcoin wallet has to be based on a dedicated platform. For the same reason this platform is going to need its own physical user interface: having it take orders to transfer money from an untrusted PC is as bad as having the wallet on the PC. So we need a device with enough computing power to send and receive BTC, plus a screen and a numeric keyboard for entering PINs and confirming transactions. When you want to transfer BTC to someone your computer sends the amount and ID of the destination wallet to your device, and the device then asks for independent confirmation of the transaction on its screen. As long as the device security is not compromised it is impossible to extract BTC from the device without a human being agreeing to it.<br /><br />This implies a small device with a modest processor, a couple of gigabytes of flash, a keypad, a low-resolution LCD screen and a USB port. This is about the same specification as a cheap mobile phone, suggesting that such a device could be mass produced and sold for a few tens of dollars.<br /><br />Clearly such a device is going to need a very high degree of internal security, but, given a well defined protocol for transaction requests from outside, this should not be a problem. There will also need to be a secure path for updated software and corresponding upstream security: the digital signature for software updates in particular would be a very tempting target for an attacker.<br /><br /><h3>Backups</h3>Clearly the wallet device may be damaged or suffer corruption. One solution would simply be to accept the risk, in the same way we accept that money is lost if a physical wallet gets destroyed in a fire. But computers fail rather more often than that, so a backup is probably necessary.<br /><br />The problem is that a backup is also an attack avenue: because of the way bitcoin works, if you can get hold of a copy of someone's wallet then you can empty it using any PC. So any backup has to be just as secure, and yet kept reasonably up to date at the same time.<br /><br />One option would be to keep the wallet on two independent SD flash cards configured for RAID 1: if one card fails it can be securely destroyed and replaced, and if the device fails then the cards can be moved to a new one. That just leaves data corruption and physical damage as risks. Corruption risk can be minimised by careful design of the software, such as keeping a known-good copy of the wallet as backup during a transaction and running validity checks before committing to the new one. Physical damage is a sufficiently remote possibility to be tolerable in this application.<br /><h3>Other Attacks</h3>The kind of device described so far can be used to verify that money is being sent to a particular wallet, identified by a string of digits. As long as the user knows the destination wallet ID they can be sure that they have sent the right amount to the right person. But this creates a possible attack: malware on the user's PC could systematically replace receiving wallet IDs with those of the attacker. Thus when Joe Sixpack buys a laptop on Ebay he would see payment details specifying a wallet ID and, not realising that this was not the wallet of the vendor, unwittingly send payment to the thief.<br /><br />In theory this can be avoided by a digital certificate tying the wallet to a particular person, to be verified and displayed by the wallet device as part of the transaction authorisation. But that requires a wider public key infrastructure that has so far proven expensive and fragile; it might work for large vendors, but not for small ones.<br /><br /><h3>In the Meantime</h3>For now most of these measures are not necessary. Bitcoin wallets are sufficiently rare that simple measures, such as keeping your wallet on a dedicated virtual machine, are probably sufficient. But if bitcoins become a widespread and popular form of payment then standardised security solutions will become necessary, and any standardised security will be a target for class breaks that will enable many users to be attacked at once.<br /><br />If I were to use bitcoins today I would probably put them on a dedicated Raspberry Pi set to make regular encrypted backups to a share on my regular PC, and write down the (very long and random) key somewhere safe. But not everybody is going to be able to set up such a system themselves.<div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/5975524006824862804-7855544607603160692?l=paulspontifications.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>") (pubDate nil "Sun, 24 Jun 2012 20:00:43 +0000") (author nil "noreply@blogger.com (Paul Johnson)"))) ("Mihai Maruseac: Well, I’m back" "<p style=\"text-align: justify;\">Nearly an year has passed since I last wrote on this blog with a specific plan in mind. There were several articles in the meantime but very few and written because of a moment’s hunch.</p>\n<p style=\"text-align: justify;\">I’m back now, even if for a short period of time.</p>\n<p style=\"text-align: justify;\">This article is divided into two parts (I’ll try to make them be under 500 words each):</p>\n<ul style=\"text-align: justify;\">\n<li>a <a href=\"http://pgraycode.wordpress.com/2012/06/24/well-im-back/2/\">short overview</a> of what I did during this time</li>\n<li>a <a href=\"http://pgraycode.wordpress.com/2012/06/24/well-im-back/3/\">preview</a> of the future plans</li>\n</ul>\n<p style=\"text-align: justify;\">Each of the two parts has a separate page.</p>\n<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/pgraycode.wordpress.com/1101/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/pgraycode.wordpress.com/1101/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godelicious/pgraycode.wordpress.com/1101/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/delicious/pgraycode.wordpress.com/1101/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gofacebook/pgraycode.wordpress.com/1101/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/facebook/pgraycode.wordpress.com/1101/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gotwitter/pgraycode.wordpress.com/1101/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/twitter/pgraycode.wordpress.com/1101/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gostumble/pgraycode.wordpress.com/1101/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/stumble/pgraycode.wordpress.com/1101/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godigg/pgraycode.wordpress.com/1101/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/digg/pgraycode.wordpress.com/1101/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/goreddit/pgraycode.wordpress.com/1101/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/reddit/pgraycode.wordpress.com/1101/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=pgraycode.wordpress.com&amp;blog=6568508&amp;post=1101&amp;subd=pgraycode&amp;ref=&amp;feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" "http://pgraycode.wordpress.com/2012/06/24/well-im-back/" (20455 22244) new 31 nil nil ((title nil "Mihai Maruseac: Well, I’m back") (guid ((isPermaLink . "false")) "http://pgraycode.wordpress.com/?p=1101") (link nil "http://pgraycode.wordpress.com/2012/06/24/well-im-back/") (description nil "<p style=\"text-align: justify;\">Nearly an year has passed since I last wrote on this blog with a specific plan in mind. There were several articles in the meantime but very few and written because of a moment’s hunch.</p>\n<p style=\"text-align: justify;\">I’m back now, even if for a short period of time.</p>\n<p style=\"text-align: justify;\">This article is divided into two parts (I’ll try to make them be under 500 words each):</p>\n<ul style=\"text-align: justify;\">\n<li>a <a href=\"http://pgraycode.wordpress.com/2012/06/24/well-im-back/2/\">short overview</a> of what I did during this time</li>\n<li>a <a href=\"http://pgraycode.wordpress.com/2012/06/24/well-im-back/3/\">preview</a> of the future plans</li>\n</ul>\n<p style=\"text-align: justify;\">Each of the two parts has a separate page.</p>\n<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/pgraycode.wordpress.com/1101/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/pgraycode.wordpress.com/1101/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godelicious/pgraycode.wordpress.com/1101/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/delicious/pgraycode.wordpress.com/1101/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gofacebook/pgraycode.wordpress.com/1101/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/facebook/pgraycode.wordpress.com/1101/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gotwitter/pgraycode.wordpress.com/1101/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/twitter/pgraycode.wordpress.com/1101/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gostumble/pgraycode.wordpress.com/1101/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/stumble/pgraycode.wordpress.com/1101/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godigg/pgraycode.wordpress.com/1101/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/digg/pgraycode.wordpress.com/1101/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/goreddit/pgraycode.wordpress.com/1101/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/reddit/pgraycode.wordpress.com/1101/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=pgraycode.wordpress.com&amp;blog=6568508&amp;post=1101&amp;subd=pgraycode&amp;ref=&amp;feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />") (pubDate nil "Sun, 24 Jun 2012 18:05:24 +0000"))) ("Edward Amsden: Master's Thesis Update" "<p>I've published the API for my signal function library, as well as my preproposal and my proposal, at <a href=\"http://eamsden.github.com/pushbasedFRP/\">http://eamsden.github.com/pushbasedFRP/</a><a>. When I have a full draft of my thesis, I expect to put the draft at this location as well. The code repository now contains a simple demonstration application. This upcoming week will be a great deal of writing, implementation of the comparison application, and debugging of the signal function library.</a></p><div class=\"blogger-post-footer\"><a><img src=\"https://blogger.googleusercontent.com/tracker/129107585769892414-2623800831750781348?l=blog.edwardamsden.com\" alt=\"\" height=\"1\" width=\"1\" /></a></div>" "http://blog.edwardamsden.com/2012/06/masters-thesis-update.html" (20454 18792) new 32 nil nil ((title nil "Edward Amsden: Master's Thesis Update") (guid ((isPermaLink . "false")) "tag:blogger.com,1999:blog-129107585769892414.post-2623800831750781348") (link nil "http://blog.edwardamsden.com/2012/06/masters-thesis-update.html") (description nil "<p>I've published the API for my signal function library, as well as my preproposal and my proposal, at <a href=\"http://eamsden.github.com/pushbasedFRP/\">http://eamsden.github.com/pushbasedFRP/</a><a>. When I have a full draft of my thesis, I expect to put the draft at this location as well. The code repository now contains a simple demonstration application. This upcoming week will be a great deal of writing, implementation of the comparison application, and debugging of the signal function library.</a></p><div class=\"blogger-post-footer\"><a><img src=\"https://blogger.googleusercontent.com/tracker/129107585769892414-2623800831750781348?l=blog.edwardamsden.com\" alt=\"\" height=\"1\" width=\"1\" /></a></div>") (pubDate nil "Sat, 23 Jun 2012 22:55:36 +0000") (author nil "noreply@blogger.com (Edward Amsden)"))) ("Russell O'Connor: Polymorphic Update with van Laarhoven Lenses" "<pre>import Control.Applicative (Const(..), (&lt;$&gt;))\nimport Control.Monad.Identity (Identity(..))\nimport Data.Functor.Compose (Compose(..))</pre>\n<p>There has been a lot of interest in record proposals for Haskell lately.\nMany people want to integrate <a href=\"http://www.haskellforall.com/2012/01/haskell-for-mainstream-programmers_28.html\" title=\"Haskell for all: Lenses\">lenses</a> with the record system, but one problem is that most lens libraries are incompatible with polymorphic record updating.\n</p><p>Here is a simple example of polymorphic record updating.\nSuppose we make the following simple polymorphic record type.\n</p><pre>data Pair a b = Pair {pi1 :: a, pi2 :: b} deriving Show\nexamplePair :: Pair Int Char\nexamplePair = Pair {pi1 = 1, pi2 = 'b'}</pre>\n<p>In Haskell, we can then update <code>examplePair</code> (by making an updated copy) as follows.\n</p><pre>λ&gt; examplePair {pi1 = \"a\"}\nPair {pi1 = \"a\", pi2 = 'b'}</pre>\n<p>Notice the type has changed from <code>Pair Int Char</code> to <code>Pair String Char</code>.\nThis is what we mean by polymorphic record updates.\nPolymorphic record updates allows records with type parameters to be updated in such a way that their type parameters change.\nMost lens libraries do not support polymorphic record updates.\n</p><p>However, I recently realized that <a href=\"http://www.twanvl.nl/blog/haskell/cps-functional-references\" title=\"CPS based functional references\">van Laarhoven style lenses</a> do support polymorphic record updates.\nIn fact, they support it right out of the box.\nWe would have seen this in <a href=\"http://www.twanvl.nl/blog/haskell/cps-functional-references\" title=\"CPS based functional references\">Twan’s original blog post</a> had he not given a type alias for them.\n</p><p>Imagine this alternative history of Haskell.\nIt is 1996, and the Haskell committee is about to introduce record syntax into Haskell 1.3.\nHowever, a (very) young Twan van Laarhoven joins the Haskell committee with fresh ideas.\nInstead of introducing field names as projection functions <code>pi1 :: Pair a b -&gt; a</code> and <code>pi2 :: Pair a b -&gt; b</code>,\nhe pursuade them to give field names the following unusual definitions instead.\n</p><pre>pi1 :: Functor f =&gt; (a -&gt; f a') -&gt; Pair a b -&gt; f (Pair a' b)\npi1 f (Pair a b) = (\\x -&gt; Pair x b) &lt;$&gt; f a\npi2 :: Functor f =&gt; (b -&gt; f b') -&gt; Pair a b -&gt; f (Pair a b')\npi2 f (Pair a b) = (\\x -&gt; Pair a x) &lt;$&gt; f b</pre>\n<p>These are the van Laarhoven lenses for the first and second fields of <code>Pair</code>.\nThe Haskell committee adds some new Prelude functions to support these lenses.\n</p><pre>-- getter\ninfixl 8 ^.\n(^.) :: a -&gt; ((b -&gt; Const b b') -&gt; a -&gt; Const b a') -&gt; b\nx ^. l = getConst $ l Const x\n-- modifier\ninfixr 4 %=\n(%=) :: ((b -&gt; Identity b') -&gt; a -&gt; Identity a') -&gt; (b -&gt; b') -&gt; a -&gt; a'\nl %= f = runIdentity . l (Identity . f)\n-- setter\ninfixr 4 ^=\n(^=) :: ((b -&gt; Identity b') -&gt; a -&gt; Identity a') -&gt; b' -&gt; a -&gt; a'\nl ^= v = l %= (const v)</pre>\n<p>Now we can do field access and simple polymorphic field updates:\n</p><pre>λ&gt; examplePair ^. pi1\n1\nλ&gt; examplePair ^. pi2\n'b'\nλ&gt; (pi1 ^= \"a\") examplePair\nPair {pi1 = \"a\", pi2 = 'b'}\nλ&gt; (pi1 ^= \"a\") . (pi2 %= fromEnum) $ examplePair\nPair {pi1 = \"a\", pi2 = 98}</pre>\nMoreover, we get lens composition.\nIn fact, van Laarhoven lenses compose with the composition function <code>(.)</code> and <code>id</code> is the identity lens.\nSuppose we define the following nested record.\n<pre>nestedPair :: Pair (Pair Int Char) String\nnestedPair = Pair {pi1 = examplePair, pi2 = \"FTW!\"}</pre>\nNow we can access and update nested elements of this pair\n<pre>λ&gt; nestedPair ^. pi1 ^. pi2\n'b'\nλ&gt; nestedPair ^. (pi1 . pi2)\n'b'\nλ&gt; (pi1 . pi2 ^= [\"nested\", \"polymorphic\", \"update\"]) nestedPair\nPair {pi1 = Pair {pi1 = 1, pi2 = [\"nested\",\"polymorphic\",\"update\"]}, pi2 = \"FTW!\"}</pre>\nand we can do useless things with the identity lens.\n<pre>λ&gt; examplePair ^. id\nPair {pi1 = 1, pi2 = 'b'}\nλ&gt; (id ^= ()) examplePair\n()</pre>\n<p>Further more, users can make their own lenses for <a href=\"http://hackage.haskell.org/packages/archive/data-lens/2.10.0/doc/html/Data-Lens-Common.html#v:mapLens\">Data.Map</a>, etc. that are compatible with the prelude lens operations as long as they follow the two van Laarhoven lens laws:\n</p><pre>lens Identity === Identity\nlens (composeCoalgebroid f g) === composeCoalgebroid (lens f) (lens g)\nwhere\ncomposeCoalgebroid :: (Functor f, Functor g) =&gt; (b -&gt; f c) -&gt; (a -&gt; g b) -&gt; a -&gt; (Compose g f) c\ncomposeCoalgebroid f g a = Compose $ f &lt;$&gt; g a</pre>\n<p>There are some caveats with this approach though.\nIt only natively supports simple polymorphic record update.\nIn Haskell, you can do complex polymorphic updates.\nFor instance, with the following record\n</p><pre>data Complicated a b = Complicated {field1 :: a, field2 :: a, field3 :: b} deriving Show\ncomplexExample :: Complicated Int Char\ncomplexExample = Complicated {field1 = 1, field2 = 2, field3 = 'c'}</pre>\nyou can polymorphically update <code>field1</code> and <code>field2</code> together:\n<pre>λ&gt; complexExample {field1 = False, field2 = True}\nComplicated {field1 = False, field2 = True, field3 = 'c'}</pre>\n<p>However it is not possible to compose the polymorphic van Laarhoven lenses <code>field1</code> and <code>field2</code> to do this.\nAs consolation, it is possible to hand create a van Laarhoven lens to do the update.\n</p><pre>handmadeLens :: Functor f =&gt; ((a, a) -&gt; f (a', a')) -&gt; Complicated a b -&gt; f (Complicated a' b)\nhandmadeLens g (Complicated f1 f2 f3) = (\\(n1, n2) -&gt; Complicated n1 n2 f3) &lt;$&gt; g (f1, f2)</pre>\n<pre>λ&gt; (handmadeLens ^= (False, True)) complexExample\nComplicated {field1 = False, field2 = True, field3 = 'c'}</pre>\n<p>It might be possible to create syntax that derives these complex lenses just in time from a sequence of field names.\n</p><p>In conclusion, contrary to popular belief, polymorphic record updates are possible with lenses.\nNone of this post has addressed the namespace issue with records, nor was it intended to be a record proposal for Haskell.\nHowever, it might be possible to incorporate this with a namespace proposal to somehow get a nice record syntax with first-class lenses and at least simple polymorphic record updates.\n</p>" "http://r6.ca/blog/20120623T104901Z.html" (20453 40733) new 33 nil nil ((title nil "Russell O'Connor: Polymorphic Update with van Laarhoven Lenses") (guid ((isPermaLink . "true")) "http://r6.ca/blog/20120623T104901Z.html") (link nil "http://r6.ca/blog/20120623T104901Z.html") (description nil "<pre>import Control.Applicative (Const(..), (&lt;$&gt;))\nimport Control.Monad.Identity (Identity(..))\nimport Data.Functor.Compose (Compose(..))</pre>\n\n<p>There has been a lot of interest in record proposals for Haskell lately.\nMany people want to integrate <a href=\"http://www.haskellforall.com/2012/01/haskell-for-mainstream-programmers_28.html\" title=\"Haskell for all: Lenses\">lenses</a> with the record system, but one problem is that most lens libraries are incompatible with polymorphic record updating.\n\n</p><p>Here is a simple example of polymorphic record updating.\nSuppose we make the following simple polymorphic record type.\n\n</p><pre>data Pair a b = Pair {pi1 :: a, pi2 :: b} deriving Show\n\nexamplePair :: Pair Int Char\nexamplePair = Pair {pi1 = 1, pi2 = 'b'}</pre>\n\n<p>In Haskell, we can then update <code>examplePair</code> (by making an updated copy) as follows.\n\n</p><pre>λ&gt; examplePair {pi1 = \"a\"}\nPair {pi1 = \"a\", pi2 = 'b'}</pre>\n\n<p>Notice the type has changed from <code>Pair Int Char</code> to <code>Pair String Char</code>.\nThis is what we mean by polymorphic record updates.\nPolymorphic record updates allows records with type parameters to be updated in such a way that their type parameters change.\nMost lens libraries do not support polymorphic record updates.\n\n</p><p>However, I recently realized that <a href=\"http://www.twanvl.nl/blog/haskell/cps-functional-references\" title=\"CPS based functional references\">van Laarhoven style lenses</a> do support polymorphic record updates.\nIn fact, they support it right out of the box.\nWe would have seen this in <a href=\"http://www.twanvl.nl/blog/haskell/cps-functional-references\" title=\"CPS based functional references\">Twan’s original blog post</a> had he not given a type alias for them.\n\n</p><p>Imagine this alternative history of Haskell.\nIt is 1996, and the Haskell committee is about to introduce record syntax into Haskell 1.3.\nHowever, a (very) young Twan van Laarhoven joins the Haskell committee with fresh ideas.\nInstead of introducing field names as projection functions <code>pi1 :: Pair a b -&gt; a</code> and <code>pi2 :: Pair a b -&gt; b</code>,\nhe pursuade them to give field names the following unusual definitions instead.\n\n</p><pre>pi1 :: Functor f =&gt; (a -&gt; f a') -&gt; Pair a b -&gt; f (Pair a' b)\npi1 f (Pair a b) = (\\x -&gt; Pair x b) &lt;$&gt; f a\n\npi2 :: Functor f =&gt; (b -&gt; f b') -&gt; Pair a b -&gt; f (Pair a b')\npi2 f (Pair a b) = (\\x -&gt; Pair a x) &lt;$&gt; f b</pre>\n\n<p>These are the van Laarhoven lenses for the first and second fields of <code>Pair</code>.\nThe Haskell committee adds some new Prelude functions to support these lenses.\n\n</p><pre>-- getter\ninfixl 8 ^.\n(^.) :: a -&gt; ((b -&gt; Const b b') -&gt; a -&gt; Const b a') -&gt; b\nx ^. l = getConst $ l Const x\n\n-- modifier\ninfixr 4 %=\n(%=) :: ((b -&gt; Identity b') -&gt; a -&gt; Identity a') -&gt; (b -&gt; b') -&gt; a -&gt; a'\nl %= f = runIdentity . l (Identity . f)\n\n-- setter\ninfixr 4 ^=\n(^=) :: ((b -&gt; Identity b') -&gt; a -&gt; Identity a') -&gt; b' -&gt; a -&gt; a'\nl ^= v = l %= (const v)</pre>\n\n<p>Now we can do field access and simple polymorphic field updates:\n\n</p><pre>λ&gt; examplePair ^. pi1\n1\n\nλ&gt; examplePair ^. pi2\n'b'\n\nλ&gt; (pi1 ^= \"a\") examplePair \nPair {pi1 = \"a\", pi2 = 'b'}\n\nλ&gt; (pi1 ^= \"a\") . (pi2 %= fromEnum) $ examplePair \nPair {pi1 = \"a\", pi2 = 98}</pre>\n\nMoreover, we get lens composition.\nIn fact, van Laarhoven lenses compose with the composition function <code>(.)</code> and <code>id</code> is the identity lens.\nSuppose we define the following nested record.\n\n<pre>nestedPair :: Pair (Pair Int Char) String\nnestedPair = Pair {pi1 = examplePair, pi2 = \"FTW!\"}</pre>\n\nNow we can access and update nested elements of this pair\n\n<pre>λ&gt; nestedPair ^. pi1 ^. pi2\n'b'\n\nλ&gt; nestedPair ^. (pi1 . pi2)\n'b'\n\nλ&gt; (pi1 . pi2 ^= [\"nested\", \"polymorphic\", \"update\"]) nestedPair\nPair {pi1 = Pair {pi1 = 1, pi2 = [\"nested\",\"polymorphic\",\"update\"]}, pi2 = \"FTW!\"}</pre>\n\nand we can do useless things with the identity lens.\n\n<pre>λ&gt; examplePair ^. id\nPair {pi1 = 1, pi2 = 'b'}\n\nλ&gt; (id ^= ()) examplePair\n()</pre>\n\n<p>Further more, users can make their own lenses for <a href=\"http://hackage.haskell.org/packages/archive/data-lens/2.10.0/doc/html/Data-Lens-Common.html#v:mapLens\">Data.Map</a>, etc. that are compatible with the prelude lens operations as long as they follow the two van Laarhoven lens laws:\n\n</p><pre>lens Identity === Identity\n\nlens (composeCoalgebroid f g) === composeCoalgebroid (lens f) (lens g)\n where\n  composeCoalgebroid :: (Functor f, Functor g) =&gt; (b -&gt; f c) -&gt; (a -&gt; g b) -&gt; a -&gt; (Compose g f) c\n  composeCoalgebroid f g a = Compose $ f &lt;$&gt; g a</pre>\n<p>There are some caveats with this approach though.\nIt only natively supports simple polymorphic record update.\nIn Haskell, you can do complex polymorphic updates.\nFor instance, with the following record\n\n</p><pre>data Complicated a b = Complicated {field1 :: a, field2 :: a, field3 :: b} deriving Show\n\ncomplexExample :: Complicated Int Char\ncomplexExample = Complicated {field1 = 1, field2 = 2, field3 = 'c'}</pre>\n\nyou can polymorphically update <code>field1</code> and <code>field2</code> together:\n\n<pre>λ&gt; complexExample {field1 = False, field2 = True}\nComplicated {field1 = False, field2 = True, field3 = 'c'}</pre>\n\n<p>However it is not possible to compose the polymorphic van Laarhoven lenses <code>field1</code> and <code>field2</code> to do this.\nAs consolation, it is possible to hand create a van Laarhoven lens to do the update.\n\n</p><pre>handmadeLens :: Functor f =&gt; ((a, a) -&gt; f (a', a')) -&gt; Complicated a b -&gt; f (Complicated a' b)\nhandmadeLens g (Complicated f1 f2 f3) = (\\(n1, n2) -&gt; Complicated n1 n2 f3) &lt;$&gt; g (f1, f2)</pre>\n\n<pre>λ&gt; (handmadeLens ^= (False, True)) complexExample \nComplicated {field1 = False, field2 = True, field3 = 'c'}</pre>\n\n<p>It might be possible to create syntax that derives these complex lenses just in time from a sequence of field names.\n\n</p><p>In conclusion, contrary to popular belief, polymorphic record updates are possible with lenses.\nNone of this post has addressed the namespace issue with records, nor was it intended to be a record proposal for Haskell.\nHowever, it might be possible to incorporate this with a namespace proposal to somehow get a nice record syntax with first-class lenses and at least simple polymorphic record updates.\n\n</p>") (pubDate nil "Sat, 23 Jun 2012 10:49:01 +0000"))) ("Edward Z. Yang: Why verification results in higher quality code" "<div class=\"document\">\n<p>Correctness is overrated. After all, no one knows what it means for any reasonably complicated system to be \"correct\", and even when we do, the mileposts move around on a daily basis. With the <em>raison d'être</em> of formal verification stripped away, can we still consider it a worthy goal?</p>\n<p>Perhaps verification results in higher quality code. But this is not obviously true: correctness is not quality. We might hope that high quality code is readable and easily understood, that it should be as self-contained and independent from the rest of the system, that it is efficient and economical. There is no a priori reason to believe that verification would grant us any of these properties. No matter how horrible some code is, as long as it is correct, there exists a proof which vouches for its correctness.</p>\n<p>But as anyone who has gone through the sweat and tears of verifying a program can tell you, formal verification really does make your code better. Here's the secret: proving theorems is really hard. If we want any hope to successfully prove something about a program, we <em>must</em> to make <em>reasoning</em> about the code as easy as possible. A program under verification irresistibly gravitates towards it’s most “reasonable” form, because otherwise the proofs are simply too arduous to carry out. And in this form, the tenets of high quality code follow.</p>\n<p>Take for example <a href=\"http://adam.chlipala.net/bedrock/\" class=\"reference external\">Bedrock</a>, a system for building verified low-level programs which manipulate pointers and registers. These are programs that deal with mutable state, a feature which is well known to dramatically increase the difficulty of reasoning. Bedrock, and many systems like it, would be dead out of the water if not for the development of an important system called <a href=\"http://en.wikipedia.org/wiki/Separation_logic\" class=\"reference external\">separation logic</a>.  The central idea behind it is so obvious to any experienced practitioner it is barely worth stating: private local state is easier to reason about than public global state—<strong>modularity</strong> is good. It enforces this through a clever formalism, the star operator, which combines two assertions about two regions of memory while assuring that the regions are <em>disjoint</em>. Regardless, the end result is this: if your components are independent, the theorem proving is easy; if your components are tangled together, the theorem proving is hard. You do the math.</p>\n<p>But it doesn’t stop there. When different components do interact, the principle of <strong>encapsulation</strong> says that I do not want to know all of the gory details of a component, just its high-level interface. In theorem prover land, “all of the gory details” means unmanageably large facts about many pointers, and a \"high-level interface\" is an <em>abstract predicate</em> which rolls up all of these facts into a single, cohesive logical fact (“this is a linked list.”) Developing these predicates is critical to keeping your theorem statements concise and understandable, and in higher-order provers like Bedrock, they can apply not only to data but also to code, i.e. function pointers.</p>\n<p>The tenets of high quality code speak for code that is written for humans to understand, and not just machines to execute. But code that is written for machines to understand have many of the same properties that are valued by humans, for if they do not, getting the machine to “understand” becomes an impossible task. Computers may be simple-minded, but all that means is code a computer can understand is code that you can understand too. And <em>that</em> is high quality code.</p>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/ezyang/~4/LWIHq6qfWVE\" height=\"1\" width=\"1\" />" "http://feedproxy.google.com/~r/ezyang/~3/LWIHq6qfWVE/" (20453 18603) new 34 nil nil ((title nil "Edward Z. Yang: Why verification results in higher quality code") (guid ((isPermaLink . "false")) "http://blog.ezyang.com/?p=6920") (link nil "http://feedproxy.google.com/~r/ezyang/~3/LWIHq6qfWVE/") (description nil "<div class=\"document\">\n\n\n\n<p>Correctness is overrated. After all, no one knows what it means for any reasonably complicated system to be \"correct\", and even when we do, the mileposts move around on a daily basis. With the <em>raison d'être</em> of formal verification stripped away, can we still consider it a worthy goal?</p>\n<p>Perhaps verification results in higher quality code. But this is not obviously true: correctness is not quality. We might hope that high quality code is readable and easily understood, that it should be as self-contained and independent from the rest of the system, that it is efficient and economical. There is no a priori reason to believe that verification would grant us any of these properties. No matter how horrible some code is, as long as it is correct, there exists a proof which vouches for its correctness.</p>\n<p>But as anyone who has gone through the sweat and tears of verifying a program can tell you, formal verification really does make your code better. Here's the secret: proving theorems is really hard. If we want any hope to successfully prove something about a program, we <em>must</em> to make <em>reasoning</em> about the code as easy as possible. A program under verification irresistibly gravitates towards it’s most “reasonable” form, because otherwise the proofs are simply too arduous to carry out. And in this form, the tenets of high quality code follow.</p>\n<p>Take for example <a href=\"http://adam.chlipala.net/bedrock/\" class=\"reference external\">Bedrock</a>, a system for building verified low-level programs which manipulate pointers and registers. These are programs that deal with mutable state, a feature which is well known to dramatically increase the difficulty of reasoning. Bedrock, and many systems like it, would be dead out of the water if not for the development of an important system called <a href=\"http://en.wikipedia.org/wiki/Separation_logic\" class=\"reference external\">separation logic</a>.  The central idea behind it is so obvious to any experienced practitioner it is barely worth stating: private local state is easier to reason about than public global state—<strong>modularity</strong> is good. It enforces this through a clever formalism, the star operator, which combines two assertions about two regions of memory while assuring that the regions are <em>disjoint</em>. Regardless, the end result is this: if your components are independent, the theorem proving is easy; if your components are tangled together, the theorem proving is hard. You do the math.</p>\n<p>But it doesn’t stop there. When different components do interact, the principle of <strong>encapsulation</strong> says that I do not want to know all of the gory details of a component, just its high-level interface. In theorem prover land, “all of the gory details” means unmanageably large facts about many pointers, and a \"high-level interface\" is an <em>abstract predicate</em> which rolls up all of these facts into a single, cohesive logical fact (“this is a linked list.”) Developing these predicates is critical to keeping your theorem statements concise and understandable, and in higher-order provers like Bedrock, they can apply not only to data but also to code, i.e. function pointers.</p>\n<p>The tenets of high quality code speak for code that is written for humans to understand, and not just machines to execute. But code that is written for machines to understand have many of the same properties that are valued by humans, for if they do not, getting the machine to “understand” becomes an impossible task. Computers may be simple-minded, but all that means is code a computer can understand is code that you can understand too. And <em>that</em> is high quality code.</p>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/ezyang/~4/LWIHq6qfWVE\" height=\"1\" width=\"1\" />") (pubDate nil "Sat, 23 Jun 2012 04:40:11 +0000"))) ("Johan Tibell: Haskell Implementors' Workshop, Call for Talks" "<p>Gregory Collins' and I are organizing this year's <a href=\"http://www.haskell.org/haskellwiki/HaskellImplementorsWorkshop/2012\">Haskell Implementors' Workshop</a> in Copenhagen. If you like to give a talk, see the <a href=\"http://www.haskell.org/pipermail/haskell/2012-June/023392.html\">instructions in the Call-for-Talks email</a>. The acceptable range of topics is quite wide. If you've been hacking on some cool project lately, please do apply.</p><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/927289640963145319-1488999194462078606?l=blog.johantibell.com\" alt=\"\" height=\"1\" width=\"1\" /></div>" "http://blog.johantibell.com/2012/06/haskell-implementors-workshop-call-for.html" (20448 49514) new 35 nil nil ((title nil "Johan Tibell: Haskell Implementors' Workshop, Call for Talks") (guid ((isPermaLink . "false")) "tag:blogger.com,1999:blog-927289640963145319.post-1488999194462078606") (link nil "http://blog.johantibell.com/2012/06/haskell-implementors-workshop-call-for.html") (description nil "<p>Gregory Collins' and I are organizing this year's <a href=\"http://www.haskell.org/haskellwiki/HaskellImplementorsWorkshop/2012\">Haskell Implementors' Workshop</a> in Copenhagen. If you like to give a talk, see the <a href=\"http://www.haskell.org/pipermail/haskell/2012-June/023392.html\">instructions in the Call-for-Talks email</a>. The acceptable range of topics is quite wide. If you've been hacking on some cool project lately, please do apply.</p><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/927289640963145319-1488999194462078606?l=blog.johantibell.com\" alt=\"\" height=\"1\" width=\"1\" /></div>") (pubDate nil "Tue, 19 Jun 2012 18:14:02 +0000") (author nil "noreply@blogger.com (Johan Tibell)"))) ("Functional Jobs: 3 year postgraduate R&amp;D position at era7 bioinformatics (Full-time)" "<p>You'll be  programming in Scala, using AWS for <em>everything</em>, applying weighted transducers and category theoretic stuff to build systems for indexing, querying and processing massive Next Generation Sequencing data, and working on the integration of pathways and transcriptional network data into <a href=\"http://bio4j.com\">bio4j</a>.</p>\n<h3>experience/requirements</h3>\n<p>We're looking for a CS/Math/IT graduate, for an EU project funded 3-year postion, with the posibility of doing a PhD. You should have <strong>less</strong> than <strong>4</strong> years (full-time equivalent) of research experience, <strong>not</strong> have lived in Spain for more than 12 months within the last 3 years, and you should <strong>not</strong> have a PhD; those are essential requirements.</p>\n<p>It will really help if you have experience with</p>\n<ul>\n<li>functional programming (preferably Scala, but Haskell and/or ML will also be OK)</li>\n<li>AWS, particularly EC2, S3 and DynamoDB.</li>\n<li>concurrency in Scala: akka, fundamentally futures and dataflow concurrency.</li>\n</ul>\n<h3>knowledge and/or interests</h3>\n<ul>\n<li><strong>category theory</strong>. The more you know, the better! in particular,\n<ul>\n<li>monoidal categories (traced monoidal, with feedback, compact-closed) and its relationship with notions of computation (geometry of interaction, semantics of processes, etc). Even more in particular, the work of <a href=\"http://dscpi.uninsubria.it/staff/Walters\">RFC Walters</a> et al on concurrency and distributed systems.</li>\n<li>enriched category theory, of the flavour often used in functional programming (cartesian base category). This means strong monads and comonads, applicative functors, etc.</li>\n</ul></li>\n<li><strong>string matching/indexing</strong>, <em>weighted finite-state transducers</em> and related matters such as compact directed acyclic word graphs.</li>\n<li><strong>bioinformatics</strong>, more specifically NGS (Next Generation Sequencing) data management and analysis.</li>\n</ul>\n<h3>work practices</h3>\n<p>we expect you to have a deep unrepentant love for abstraction, together with the burning desire to build stuff that works. You should be comfortable with</p>\n<ul>\n<li>a (git + github)-based work environment,</li>\n<li>releasing all code produced under <a href=\"http://www.gnu.org/licenses/agpl-3.0.html\">AGPLv3</a></li>\n<li>releasing all data produced under an <a href=\"http://opendefinition.org/licenses/\">open data conformant license</a></li>\n<li>publishing everything stemming from your work in <em>open-access</em> journals</li>\n</ul>\n<h3>work environment</h3>\n<p>era7 bioinformatics is a small interdisciplinary bioinformatics company, focused on bacterial genomics; for most of the 3 year period (first 30 months), you'll be based in <strong>Granada, Spain</strong>, in the same office of all the people doing R&amp;D at era7 bioinformatics: a healthy mix of bioinformaticians, CS/IT people and mathematicians; all of them really nice people! </p>\n<p>You'll be located at LMU Munich the remaining 6 months.</p>\n<h4>want to know more</h4>\n<p>There's a </p>\n<ul>\n<li><a href=\"http://goo.gl/mpTly\">formal job description</a>, at the INTERCROSSING EU project <a href=\"http://goo.gl/CE0Z5\">wiki</a></li>\n<li>and the official job advert at <a href=\"http://ec.europa.eu/euraxess/index.cfm/jobs/jobDetails/33789811\">euraxess</a></li>\n</ul>\n<p>Feel free to contact any of <span class=\"spam-protect\"><span class=\"user\">rtobes</span> [at] <span class=\"host\">era7 [dot] com</span></span>, <span class=\"spam-protect\"><span class=\"user\">eparejatobes</span> [at] <span class=\"host\">ohnosequences [dot] com</span></span>, <span class=\"spam-protect\"><span class=\"user\">epareja</span> [at] <span class=\"host\">era7 [dot] com</span></span> for more info.</p>\n<h3>deadlines</h3>\n<p>You should apply before <strong>July 5</strong>; you'll be expected to start by the end of September.</p>\n<p>Get information on <a href=\"http://functionaljobs.com/jobs/111-3-year-postgraduate-rd-position-at-era7-bioinformatics\">how to apply</a> for this position.</p>" "http://functionaljobs.com/jobs/111-3-year-postgraduate-rd-position-at-era7-bioinformatics" (20448 46694) new 36 nil nil ((title nil "Functional Jobs: 3 year postgraduate R&amp;D position at era7 bioinformatics (Full-time)") (guid ((isPermaLink . "false")) "urn:uuid:32c47234-d691-74c7-2bbd-a2e8b6e92636") (link nil "http://functionaljobs.com/jobs/111-3-year-postgraduate-rd-position-at-era7-bioinformatics") (description nil "<p>You'll be  programming in Scala, using AWS for <em>everything</em>, applying weighted transducers and category theoretic stuff to build systems for indexing, querying and processing massive Next Generation Sequencing data, and working on the integration of pathways and transcriptional network data into <a href=\"http://bio4j.com\">bio4j</a>.</p>\n\n<h3>experience/requirements</h3>\n\n<p>We're looking for a CS/Math/IT graduate, for an EU project funded 3-year postion, with the posibility of doing a PhD. You should have <strong>less</strong> than <strong>4</strong> years (full-time equivalent) of research experience, <strong>not</strong> have lived in Spain for more than 12 months within the last 3 years, and you should <strong>not</strong> have a PhD; those are essential requirements.</p>\n\n<p>It will really help if you have experience with</p>\n\n<ul>\n<li>functional programming (preferably Scala, but Haskell and/or ML will also be OK)</li>\n<li>AWS, particularly EC2, S3 and DynamoDB.</li>\n<li>concurrency in Scala: akka, fundamentally futures and dataflow concurrency.</li>\n</ul>\n\n<h3>knowledge and/or interests</h3>\n\n<ul>\n<li><strong>category theory</strong>. The more you know, the better! in particular,\n\n<ul>\n<li>monoidal categories (traced monoidal, with feedback, compact-closed) and its relationship with notions of computation (geometry of interaction, semantics of processes, etc). Even more in particular, the work of <a href=\"http://dscpi.uninsubria.it/staff/Walters\">RFC Walters</a> et al on concurrency and distributed systems.</li>\n<li>enriched category theory, of the flavour often used in functional programming (cartesian base category). This means strong monads and comonads, applicative functors, etc.</li>\n</ul></li>\n<li><strong>string matching/indexing</strong>, <em>weighted finite-state transducers</em> and related matters such as compact directed acyclic word graphs.</li>\n<li><strong>bioinformatics</strong>, more specifically NGS (Next Generation Sequencing) data management and analysis.</li>\n</ul>\n\n<h3>work practices</h3>\n\n<p>we expect you to have a deep unrepentant love for abstraction, together with the burning desire to build stuff that works. You should be comfortable with</p>\n\n<ul>\n<li>a (git + github)-based work environment,</li>\n<li>releasing all code produced under <a href=\"http://www.gnu.org/licenses/agpl-3.0.html\">AGPLv3</a></li>\n<li>releasing all data produced under an <a href=\"http://opendefinition.org/licenses/\">open data conformant license</a></li>\n<li>publishing everything stemming from your work in <em>open-access</em> journals</li>\n</ul>\n\n<h3>work environment</h3>\n\n<p>era7 bioinformatics is a small interdisciplinary bioinformatics company, focused on bacterial genomics; for most of the 3 year period (first 30 months), you'll be based in <strong>Granada, Spain</strong>, in the same office of all the people doing R&amp;D at era7 bioinformatics: a healthy mix of bioinformaticians, CS/IT people and mathematicians; all of them really nice people! </p>\n\n<p>You'll be located at LMU Munich the remaining 6 months.</p>\n\n<h4>want to know more</h4>\n\n<p>There's a </p>\n\n<ul>\n<li><a href=\"http://goo.gl/mpTly\">formal job description</a>, at the INTERCROSSING EU project <a href=\"http://goo.gl/CE0Z5\">wiki</a></li>\n<li>and the official job advert at <a href=\"http://ec.europa.eu/euraxess/index.cfm/jobs/jobDetails/33789811\">euraxess</a></li>\n</ul>\n\n<p>Feel free to contact any of <span class=\"spam-protect\"><span class=\"user\">rtobes</span> [at] <span class=\"host\">era7 [dot] com</span></span>, <span class=\"spam-protect\"><span class=\"user\">eparejatobes</span> [at] <span class=\"host\">ohnosequences [dot] com</span></span>, <span class=\"spam-protect\"><span class=\"user\">epareja</span> [at] <span class=\"host\">era7 [dot] com</span></span> for more info.</p>\n\n<h3>deadlines</h3>\n\n<p>You should apply before <strong>July 5</strong>; you'll be expected to start by the end of September.</p>\n<p>Get information on <a href=\"http://functionaljobs.com/jobs/111-3-year-postgraduate-rd-position-at-era7-bioinformatics\">how to apply</a> for this position.</p>") (pubDate nil "Tue, 19 Jun 2012 17:27:02 +0000"))) ("Bryn Keller: Snap on Azure" "<p>Yesterday I started experimenting with Haskell on Azure by putting up a <a href=\"http://snapframework.com/\">Snap</a> server. It doesn’t do much, it’s just the default starter application you get when you do “snap init,” but it’s up and running on Azure. Here’s how it works.</p>\n<p>Start with the latest Haskell Platform. Then install the Snap packages with cabal. A record of the steps I had to perform on my system is <a href=\"http://www.xoltar.org/?p=81\">here</a>. Once you’ve got a working Snap install, the easiest way to accomplish the steps listed below is to just clone the <a href=\"https://github.com/xoltar/snapazure\">snapazure github repository</a>. After that you can skip to the “Packing and Deploying” section.</p>\n<p>Start by adding the various configuration files that Azure needs to know how to package up the application. </p>\n<p>The most important one is the .csdef file that tells Azure about the files that comprise your application. I’ll spare you the actual XML, please take a look at the repository. There’s an interesting trick in there for passing environment variables to the application so that it can listen on the correct host and port – credit for this is due to Steve Marx, who used it first in his <a href=\"https://github.com/smarx/pythonrole\">pythonrole</a> project.</p>\n<p>The .config files are also XML files, they specify primarily the number of instances of your service that Azure should run when you upload them.</p>\n<p>Once those files are in place, make a folder called WorkerRole, cd into it, and do “snap init” to create your Snap application. Build it using “cabal install –bindir=.” so that the executable will be placed in the WorkerRole folder.</p>\n<p><strong>Packing and Deploying </strong></p>\n<p>Next, “cd ..” and then run “cspack ServiceDefinition.csdef” – this will create the ServiceDefinition.csx file, which is the archive that you’ll upload to Azure. You’ll then go create a Cloud Service, and upload the ServiceDefinition.csx along with the ServiceConfiguration.Cloud.config file to either the staging or production site. It may take quite some time (my first upload took around 15 minutes), but in the end you’ll have a Snap application running in your Azure account.</p>\n<p>Here’s mine: <a href=\"http://snapdemo.cloudapp.net\">http://snapdemo.cloudapp.net</a> </p>\n<p>Github repo to get you started: <a href=\"http://github.com/xoltar/snapazure\">http://github.com/xoltar/snapazure</a></p>" "http://www.xoltar.org/?p=83" (20448 12660) new 37 nil nil ((title nil "Bryn Keller: Snap on Azure") (guid ((isPermaLink . "true")) "http://www.xoltar.org/?p=83") (link nil "http://www.xoltar.org/?p=83") (description nil "<p>Yesterday I started experimenting with Haskell on Azure by putting up a <a href=\"http://snapframework.com/\">Snap</a> server. It doesn’t do much, it’s just the default starter application you get when you do “snap init,” but it’s up and running on Azure. Here’s how it works.</p>\n<p>Start with the latest Haskell Platform. Then install the Snap packages with cabal. A record of the steps I had to perform on my system is <a href=\"http://www.xoltar.org/?p=81\">here</a>. Once you’ve got a working Snap install, the easiest way to accomplish the steps listed below is to just clone the <a href=\"https://github.com/xoltar/snapazure\">snapazure github repository</a>. After that you can skip to the “Packing and Deploying” section.</p>\n<p>Start by adding the various configuration files that Azure needs to know how to package up the application. </p>\n<p>The most important one is the .csdef file that tells Azure about the files that comprise your application. I’ll spare you the actual XML, please take a look at the repository. There’s an interesting trick in there for passing environment variables to the application so that it can listen on the correct host and port – credit for this is due to Steve Marx, who used it first in his <a href=\"https://github.com/smarx/pythonrole\">pythonrole</a> project.</p>\n<p>The .config files are also XML files, they specify primarily the number of instances of your service that Azure should run when you upload them.</p>\n<p>Once those files are in place, make a folder called WorkerRole, cd into it, and do “snap init” to create your Snap application. Build it using “cabal install –bindir=.” so that the executable will be placed in the WorkerRole folder.</p>\n<p><strong>Packing and Deploying </strong></p>\n<p>Next, “cd ..” and then run “cspack ServiceDefinition.csdef” – this will create the ServiceDefinition.csx file, which is the archive that you’ll upload to Azure. You’ll then go create a Cloud Service, and upload the ServiceDefinition.csx along with the ServiceConfiguration.Cloud.config file to either the staging or production site. It may take quite some time (my first upload took around 15 minutes), but in the end you’ll have a Snap application running in your Azure account.</p>\n<p>Here’s mine: <a href=\"http://snapdemo.cloudapp.net\">http://snapdemo.cloudapp.net</a> </p>\n<p>Github repo to get you started: <a href=\"http://github.com/xoltar/snapazure\">http://github.com/xoltar/snapazure</a></p>") (pubDate nil "Tue, 19 Jun 2012 07:59:48 +0000"))) ("David McGillicuddy: Coming along nicely" "<div style=\"text-align: left;\" dir=\"ltr\">A large part of my time has been spent fleshing out the code skeleton that Jeremy created in <span style=\"font-family: 'Courier New', Courier, monospace;\">Scoutess.DataFlow</span>. Having most of the structure already defined has made understanding the different parts of <span style=\"font-family: 'Courier New', Courier, monospace;\">Scoutess</span> and how they fit together much easier and I've been steadily replacing those <span style=\"font-family: 'Courier New', Courier, monospace;\">undefined</span>s with actual code.<br /><br />One thing I wasn't expecting from the Summer of Code was how much I'd learn and how quickly - in just the last few days I've been introduced to and used the Arrow, Map, Bimap, Text and Graph packages which is almost more than I used in my entire dissertation!<br /><br />Perhaps the most involved code that I've written has been the function <span style=\"font-family: 'Courier New', Courier, monospace;\">calculateDependencies</span> which creates the dependency graph for a given package. As it searches through all the packages recursively it assigns each package a unique Vertex in a Bimap and builds a Map of dependences which is then used to create the Graph - this way only packages that are reachable are stored in the Bimap. The heart of the logic is roughly:<br /><span style=\"font-family: 'Courier New', Courier, monospace; font-size: x-small;\">dependencyMap :: Package</span><br /><span style=\"font-family: 'Courier New', Courier, monospace; font-size: x-small;\">              -&gt; State (Bimap Vertex VersionInfo)</span><br /><span style=\"font-family: 'Courier New', Courier, monospace; font-size: x-small;\">                       (Map   Vertex [Vertex])</span><br /><span style=\"font-family: 'Courier New', Courier, monospace; font-size: x-small;\">dependencyMap package = do</span><br /><span style=\"font-family: 'Courier New', Courier, monospace; font-size: x-small;\">    let deps =  getImmDeps package</span><br /><span style=\"font-family: 'Courier New', Courier, monospace; font-size: x-small;\">    newDeps  &lt;- filterM (gets . notMemberR) deps</span><br /><span style=\"font-family: 'Courier New', Courier, monospace; font-size: x-small;\">    packageI &lt;- getOrAddVersionIndex package</span><br /><span style=\"font-family: 'Courier New', Courier, monospace; font-size: x-small;\">    depsI    &lt;- mapM getOrAddVersionIndex deps</span><br /><span style=\"font-family: 'Courier New', Courier, monospace; font-size: x-small;\">    depsMap  &lt;- mapM dependencyMap newDeps</span><br /><span style=\"font-family: 'Courier New', Courier, monospace; font-size: x-small;\">    return $ insert packageI depsI (unions depsMap)</span><br /><br />However, note that this is similar to the Cabal's <span style=\"font-family: 'Courier New', Courier, monospace;\">Distribution.Simple.PackageIndex.dependencyGraph</span> function and I need to spend some time thinking about how feasible it would be to align Scoutess' data types with Cabal's in order to make use of their library. After all, Cabal is far more extensive than anything I could possibly hope to create this summer but the problem in this lies in that Scoutess approaches things from a different angle to Cabal and has different goals.<br /><br />In <span style=\"font-family: 'Courier New', Courier, monospace;\">Scoutess.Service.Source.Hackage</span>, the function <span style=\"font-family: 'Courier New', Courier, monospace;\">fetchLatestVersionOf</span> would download the package index from Hackage and then search it for the given package name to obtain its latest version. Splitting the first step of this into the function <span style=\"font-family: 'Courier New', Courier, monospace;\">fetchAllVersions</span> was simple, made the code cleaner and came in useful when implementing <span style=\"font-family: 'Courier New', Courier, monospace;\">fetchVersionsFrom Hackage</span> back in <span style=\"font-family: 'Courier New', Courier, monospace;\">DataFlow</span>.</div><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/4503472289464918478-4881568155670602054?l=projectscoutess.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>" "http://projectscoutess.blogspot.com/2012/06/coming-along-nicely.html" (20447 45640) new 38 nil nil ((title nil "David McGillicuddy: Coming along nicely") (guid ((isPermaLink . "false")) "tag:blogger.com,1999:blog-4503472289464918478.post-4881568155670602054") (link nil "http://projectscoutess.blogspot.com/2012/06/coming-along-nicely.html") (description nil "<div style=\"text-align: left;\" dir=\"ltr\">A large part of my time has been spent fleshing out the code skeleton that Jeremy created in <span style=\"font-family: 'Courier New', Courier, monospace;\">Scoutess.DataFlow</span>. Having most of the structure already defined has made understanding the different parts of <span style=\"font-family: 'Courier New', Courier, monospace;\">Scoutess</span> and how they fit together much easier and I've been steadily replacing those <span style=\"font-family: 'Courier New', Courier, monospace;\">undefined</span>s with actual code.<br /><br />One thing I wasn't expecting from the Summer of Code was how much I'd learn and how quickly - in just the last few days I've been introduced to and used the Arrow, Map, Bimap, Text and Graph packages which is almost more than I used in my entire dissertation!<br /><br />Perhaps the most involved code that I've written has been the function <span style=\"font-family: 'Courier New', Courier, monospace;\">calculateDependencies</span> which creates the dependency graph for a given package. As it searches through all the packages recursively it assigns each package a unique Vertex in a Bimap and builds a Map of dependences which is then used to create the Graph - this way only packages that are reachable are stored in the Bimap. The heart of the logic is roughly:<br /><span style=\"font-family: 'Courier New', Courier, monospace; font-size: x-small;\">dependencyMap :: Package</span><br /><span style=\"font-family: 'Courier New', Courier, monospace; font-size: x-small;\">              -&gt; State (Bimap Vertex VersionInfo)</span><br /><span style=\"font-family: 'Courier New', Courier, monospace; font-size: x-small;\">                       (Map   Vertex [Vertex])</span><br /><span style=\"font-family: 'Courier New', Courier, monospace; font-size: x-small;\">dependencyMap package = do</span><br /><span style=\"font-family: 'Courier New', Courier, monospace; font-size: x-small;\">    let deps =  getImmDeps package</span><br /><span style=\"font-family: 'Courier New', Courier, monospace; font-size: x-small;\">    newDeps  &lt;- filterM (gets . notMemberR) deps</span><br /><span style=\"font-family: 'Courier New', Courier, monospace; font-size: x-small;\">    packageI &lt;- getOrAddVersionIndex package</span><br /><span style=\"font-family: 'Courier New', Courier, monospace; font-size: x-small;\">    depsI    &lt;- mapM getOrAddVersionIndex deps</span><br /><span style=\"font-family: 'Courier New', Courier, monospace; font-size: x-small;\">    depsMap  &lt;- mapM dependencyMap newDeps</span><br /><span style=\"font-family: 'Courier New', Courier, monospace; font-size: x-small;\">    return $ insert packageI depsI (unions depsMap)</span><br /><br />However, note that this is similar to the Cabal's <span style=\"font-family: 'Courier New', Courier, monospace;\">Distribution.Simple.PackageIndex.dependencyGraph</span> function and I need to spend some time thinking about how feasible it would be to align Scoutess' data types with Cabal's in order to make use of their library. After all, Cabal is far more extensive than anything I could possibly hope to create this summer but the problem in this lies in that Scoutess approaches things from a different angle to Cabal and has different goals.<br /><br />In <span style=\"font-family: 'Courier New', Courier, monospace;\">Scoutess.Service.Source.Hackage</span>, the function <span style=\"font-family: 'Courier New', Courier, monospace;\">fetchLatestVersionOf</span> would download the package index from Hackage and then search it for the given package name to obtain its latest version. Splitting the first step of this into the function <span style=\"font-family: 'Courier New', Courier, monospace;\">fetchAllVersions</span> was simple, made the code cleaner and came in useful when implementing <span style=\"font-family: 'Courier New', Courier, monospace;\">fetchVersionsFrom Hackage</span> back in <span style=\"font-family: 'Courier New', Courier, monospace;\">DataFlow</span>.</div><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/4503472289464918478-4881568155670602054?l=projectscoutess.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>") (pubDate nil "Mon, 18 Jun 2012 22:57:12 +0000") (author nil "noreply@blogger.com (David McGillicuddy)"))) ("Bill Atkins" "<blockquote>But non-terminating programs are super useful, you wouldn't want your operating system stop after a few keystrokes saying \"I'm done, buddy\". </blockquote>- <a href=\"http://etorreborre.blogspot.com/2012/06/strong-functional-programming.html\">Eric Torreborre</a><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/5428232882395758357-4282487342630786795?l=moreindirection.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>" "http://moreindirection.blogspot.com/2012/06/but-non-terminating-programs-are-super.html" (20446 39365) new 39 nil nil ((title nil "Bill Atkins") (guid ((isPermaLink . "false")) "tag:blogger.com,1999:blog-5428232882395758357.post-4282487342630786795") (link nil "http://moreindirection.blogspot.com/2012/06/but-non-terminating-programs-are-super.html") (description nil "<blockquote>But non-terminating programs are super useful, you wouldn't want your operating system stop after a few keystrokes saying \"I'm done, buddy\". </blockquote>- <a href=\"http://etorreborre.blogspot.com/2012/06/strong-functional-programming.html\">Eric Torreborre</a><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/5428232882395758357-4282487342630786795?l=moreindirection.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>") (pubDate nil "Mon, 18 Jun 2012 03:00:21 +0000") (author nil "noreply@blogger.com (More Indirection)"))) ("Snap Framework: Announcing: Snap Framework v0.9" "<div class=\"markdown\">\n<p>The Snap team is happy to announce the release of version 0.9 of the Snap Framework.</p><h2 id=\"new-features\">New features</h2><ul><li><p>The snaplet infrastructure now has support for user-specified execution environments. This allows you to switch between different config file sets with a -e option on the command line. The default environment is “devel”, which means that each snaplet will look in “devel.cfg” for config data. So if you have existing snaplets with config files, you will have to rename them.</p></li><li><p>Janne Hellsten contributed a new “snap init” project template that demonstrates use of the session and auth snaplets.</p></li><li><p>The code for our development mode dynamic reloader has been split out into two separate packages <a href=\"http://hackage.haskell.org/package/snap-loader-dynamic\">snap-loader-dynamic</a> and <a href=\"http://hackage.haskell.org/package/snap-loader-static\">snap-loader-static</a>. This has several positive effects. First, it allows you to use the reloader without all the dependencies required by the snap package. Second, you no longer have to build with <code>cabal install snap -fhint</code> to allow reloading. Development mode is always available in an application generated by “snap init” simply by building it with “-fdevelopment”.</p></li><li><p>Removed the aging libev backend from snap-server.</p></li><li><p>Added a startupHook functions that allow you to get socket data for the running server.</p></li></ul><h2 id=\"bugfixes-minor-improvements\">Bugfixes / minor improvements</h2><ul><li><p>We have converted a number of internal data structures to use Data.HashMap.Strict instead of Data.Map. In the case where these maps are visible in the external API, this is a breaking change. The modules Snap.Util.FileServe.{MimeMap, HandlerMap} are among those affected.</p></li><li><p>Export overlooked functions for getting and setting maximumNumberOfFormInputs in Snap.Util.FileUploads.</p></li><li><p>Added application/json as a compressible mime type.</p></li><li><p>Added support for the HTTP PATCH method and arbitrary user-defined extension methods.</p></li><li><p>Fixed a bug in setHeader causing it to have no effect.</p></li><li><p>Added a workaround for a problem where GHC 7.4 on Windows complained about a missing RecordWildCards extension.</p></li><li><p>Fixed a bug in loginUser that caused it to always return success.</p></li><li><p>Fixed a bug in Heist’s getXMLDoc function to use XML instead of HTML parsing.</p></li></ul><h2 id=\"dependencies\">Dependencies</h2><ul><li>Increased blaze-html upper bound to include 0.5.*</li><li>Increased MonadCatchIO-transformers upper bound to include 0.3.*</li><li>Increased mtl upper bound to include 2.1.*</li><li>Increased xmlhtml upper bound to include 0.2.*</li></ul>\n</div>" "http://snapframework.com/blog/2012/06/17/snap-0.9-released" (20446 29444) new 40 nil nil ((title nil "Snap Framework: Announcing: Snap Framework v0.9") (guid ((isPermaLink . "true")) "http://snapframework.com/blog/2012/06/17/snap-0.9-released") (link nil "http://snapframework.com/blog/2012/06/17/snap-0.9-released") (description nil "<div class=\"markdown\">\n<p>The Snap team is happy to announce the release of version 0.9 of the Snap Framework.</p><h2 id=\"new-features\">New features</h2><ul><li><p>The snaplet infrastructure now has support for user-specified execution environments. This allows you to switch between different config file sets with a -e option on the command line. The default environment is “devel”, which means that each snaplet will look in “devel.cfg” for config data. So if you have existing snaplets with config files, you will have to rename them.</p></li><li><p>Janne Hellsten contributed a new “snap init” project template that demonstrates use of the session and auth snaplets.</p></li><li><p>The code for our development mode dynamic reloader has been split out into two separate packages <a href=\"http://hackage.haskell.org/package/snap-loader-dynamic\">snap-loader-dynamic</a> and <a href=\"http://hackage.haskell.org/package/snap-loader-static\">snap-loader-static</a>. This has several positive effects. First, it allows you to use the reloader without all the dependencies required by the snap package. Second, you no longer have to build with <code>cabal install snap -fhint</code> to allow reloading. Development mode is always available in an application generated by “snap init” simply by building it with “-fdevelopment”.</p></li><li><p>Removed the aging libev backend from snap-server.</p></li><li><p>Added a startupHook functions that allow you to get socket data for the running server.</p></li></ul><h2 id=\"bugfixes-minor-improvements\">Bugfixes / minor improvements</h2><ul><li><p>We have converted a number of internal data structures to use Data.HashMap.Strict instead of Data.Map. In the case where these maps are visible in the external API, this is a breaking change. The modules Snap.Util.FileServe.{MimeMap, HandlerMap} are among those affected.</p></li><li><p>Export overlooked functions for getting and setting maximumNumberOfFormInputs in Snap.Util.FileUploads.</p></li><li><p>Added application/json as a compressible mime type.</p></li><li><p>Added support for the HTTP PATCH method and arbitrary user-defined extension methods.</p></li><li><p>Fixed a bug in setHeader causing it to have no effect.</p></li><li><p>Added a workaround for a problem where GHC 7.4 on Windows complained about a missing RecordWildCards extension.</p></li><li><p>Fixed a bug in loginUser that caused it to always return success.</p></li><li><p>Fixed a bug in Heist’s getXMLDoc function to use XML instead of HTML parsing.</p></li></ul><h2 id=\"dependencies\">Dependencies</h2><ul><li>Increased blaze-html upper bound to include 0.5.*</li><li>Increased MonadCatchIO-transformers upper bound to include 0.3.*</li><li>Increased mtl upper bound to include 2.1.*</li><li>Increased xmlhtml upper bound to include 0.2.*</li></ul>\n\n</div>") (pubDate nil "Mon, 18 Jun 2012 00:15:00 +0000") (author nil "mightybyte@gmail.com (Doug Beardsley)"))) ("Neil Mitchell: Shake Storage Layer" "<i>Summary: Shake maintains metadata as the build progresses. This metadata must remain up to date and consistent even if the process is killed. This post describes my new strategy for doing that.</i><br /><br /><a href=\"http://community.haskell.org/~ndm/shake\">Shake</a> is an advanced build system, and in common with nearly all advanced build systems, it maintains extra metadata about rules - when the rule was last run, what the dependencies were, how long it took etc. If the metadata associated with a rule is not available, the rule must be rerun, which is often expensive. Any build system is likely to be interrupted on a regular basis - both due to failing rules (compile errors) and the user aborting a build. As a result, it is important that the metadata is robustly stored to disk as soon as it is produced.<br /><br />In this post, I outline the old solution to maintaining metadata, along with the new solution available in shake-0.3, which I just released. The new solution has a number of benefits:<br /><br /><ul><li>Reduces time loading/saving metadata by up to 75%. In practice this is unlikely to make a significant difference unless no rules need running.</li><li>Exceptions at any point will not cause file handles to be left open.</li><li>Previously there were very small windows where if the process died suddenly all metadata would be corrupted. These have been eliminated.</li><li>I removed all knowledge of the build system from the storage layer, making it properly decoupled.</li></ul><br />Most of these improvements have been driven by people using Shake in new ways. When used as a replacement for Make, with one invocation per run, many of these issues are theoretical. Now people are running Shake in background threads and forcibly killing and restarting it on a regular basis, these issues can be observed in practice. However, the improvements will benefit everyone.<br /><br /><b>The Old Solution</b><br /><br />The old solution has remained basically the same since the very first version of Shake, over three years ago. Shake maintains two files - the database contains the metadata, while the journal contains a list of metadata updates that can be appended to. The sequence of steps is:<br /><br /><ul><li>Load the database</li><li>If the journal exists then:<br />  <ul>  <li>Replay the journal into the database</li>  <li>Save the database</li>  <li>Delete the journal</li>  </ul></li><li>Run the build, storing any updates to the journal</li><li>Save the database</li><li>Delete the journal</li></ul><br />This solution works well, but has a couple of flaws. Whenever we save the database, if it gets corrupted half-way through, we lose the entire database, causing the build to start from scratch. Another problem is that if we are building nothing, we read in all the metadata, then write it all out again with only one single modification (incrementing the build time step). Since serialisation takes 3x longer than deserialisation (in benchmarks on the Shake metadata) about 75% of the time associated with the metadata is wasted. Even when we have made many updates, the data is already stored in the journal, so rewriting the database is not strictly necessary.<br /><br /><b>The New Solution</b><br /><br />The new solution keeps a single database, containing a list of key/value pairs, which can be appended to. At certain points a backup file is made, simply a copy of an existing database. The sequence of steps is:<br /><br /><ul><li>If the backup file exists, delete the database and use the backup file</li><li>Read all records from the database</li><li>Put the records into a Map</li><li>If the Map is significantly smaller than the number of records then</li>  <ul>  <li>Rename the database to the backup</li>  <li>Resave the database</li>  <li>Delete the backup</li>  </ul><li>Run the build, storing any updates to the database</li></ul><br />In this method we never save the data after a successful run, but just close the file handles. The database accumulates key/value pairs, but only the last value associated with any key in the database is useful - earlier values are ignored. At some point the database will contain a significant number of keys that are no longer useful, and at that point we rewrite the database, taking care to make a backup before starting.<br /><br />This post outlines the general steps, omitting details such as version stamps and consistency checks, which are highly important for a robust build system. These details are taken care of in the full implementation, available in the source as Development.Shake.Storage, taking about 100 lines.<br /><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/7094652-7670191595380249805?l=neilmitchell.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>" "http://neilmitchell.blogspot.com/2012/06/shake-storage-layer.html" (20446 13432) new 41 nil nil ((title nil "Neil Mitchell: Shake Storage Layer") (guid ((isPermaLink . "false")) "tag:blogger.com,1999:blog-7094652.post-7670191595380249805") (link nil "http://neilmitchell.blogspot.com/2012/06/shake-storage-layer.html") (description nil "<i>Summary: Shake maintains metadata as the build progresses. This metadata must remain up to date and consistent even if the process is killed. This post describes my new strategy for doing that.</i><br /><br /><a href=\"http://community.haskell.org/~ndm/shake\">Shake</a> is an advanced build system, and in common with nearly all advanced build systems, it maintains extra metadata about rules - when the rule was last run, what the dependencies were, how long it took etc. If the metadata associated with a rule is not available, the rule must be rerun, which is often expensive. Any build system is likely to be interrupted on a regular basis - both due to failing rules (compile errors) and the user aborting a build. As a result, it is important that the metadata is robustly stored to disk as soon as it is produced.<br /><br />In this post, I outline the old solution to maintaining metadata, along with the new solution available in shake-0.3, which I just released. The new solution has a number of benefits:<br /><br /><ul><li>Reduces time loading/saving metadata by up to 75%. In practice this is unlikely to make a significant difference unless no rules need running.</li><li>Exceptions at any point will not cause file handles to be left open.</li><li>Previously there were very small windows where if the process died suddenly all metadata would be corrupted. These have been eliminated.</li><li>I removed all knowledge of the build system from the storage layer, making it properly decoupled.</li></ul><br />Most of these improvements have been driven by people using Shake in new ways. When used as a replacement for Make, with one invocation per run, many of these issues are theoretical. Now people are running Shake in background threads and forcibly killing and restarting it on a regular basis, these issues can be observed in practice. However, the improvements will benefit everyone.<br /><br /><b>The Old Solution</b><br /><br />The old solution has remained basically the same since the very first version of Shake, over three years ago. Shake maintains two files - the database contains the metadata, while the journal contains a list of metadata updates that can be appended to. The sequence of steps is:<br /><br /><ul><li>Load the database</li><li>If the journal exists then:<br />  <ul>  <li>Replay the journal into the database</li>  <li>Save the database</li>  <li>Delete the journal</li>  </ul></li><li>Run the build, storing any updates to the journal</li><li>Save the database</li><li>Delete the journal</li></ul><br />This solution works well, but has a couple of flaws. Whenever we save the database, if it gets corrupted half-way through, we lose the entire database, causing the build to start from scratch. Another problem is that if we are building nothing, we read in all the metadata, then write it all out again with only one single modification (incrementing the build time step). Since serialisation takes 3x longer than deserialisation (in benchmarks on the Shake metadata) about 75% of the time associated with the metadata is wasted. Even when we have made many updates, the data is already stored in the journal, so rewriting the database is not strictly necessary.<br /><br /><b>The New Solution</b><br /><br />The new solution keeps a single database, containing a list of key/value pairs, which can be appended to. At certain points a backup file is made, simply a copy of an existing database. The sequence of steps is:<br /><br /><ul><li>If the backup file exists, delete the database and use the backup file</li><li>Read all records from the database</li><li>Put the records into a Map</li><li>If the Map is significantly smaller than the number of records then</li>  <ul>  <li>Rename the database to the backup</li>  <li>Resave the database</li>  <li>Delete the backup</li>  </ul><li>Run the build, storing any updates to the database</li></ul><br />In this method we never save the data after a successful run, but just close the file handles. The database accumulates key/value pairs, but only the last value associated with any key in the database is useful - earlier values are ignored. At some point the database will contain a significant number of keys that are no longer useful, and at that point we rewrite the database, taking care to make a backup before starting.<br /><br />This post outlines the general steps, omitting details such as version stamps and consistency checks, which are highly important for a robust build system. These details are taken care of in the full implementation, available in the source as Development.Shake.Storage, taking about 100 lines.<br /><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/7094652-7670191595380249805?l=neilmitchell.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>") (pubDate nil "Sun, 17 Jun 2012 19:48:08 +0000") (author nil "noreply@blogger.com (Neil Mitchell)"))) ("\"A multi-user browser-based GHCi\": June Update" "<h3>Mid-term evaluation is approaching, what’s the status of ghclive?</h3>\n<p>So far I’ve written four prototypes demonstrating various pieces.</p>\n<ul>\n<li><a href=\"https://github.com/shapr/ghclive/tree/master/prototypes/hintdownloadexecute\" target=\"_blank\" title=\"hintdownloadexecute\">hintdownloadexecute</a> adds code downloading to the <a href=\"http://code.haskell.org/hint/devel/examples/example.hs\" target=\"_blank\" title=\"hint example\">demo</a> that comes with hint.</li>\n<li><a href=\"https://github.com/shapr/ghclive/tree/master/prototypes/scottywebexecute\" target=\"_blank\" title=\"scottywebexecute\">scottywebexecute</a> add code execution to a demo that comes with the <a href=\"https://github.com/xich/scotty/\" target=\"_blank\" title=\"scotty\">scotty</a> web server.</li>\n<li><a href=\"https://github.com/shapr/ghclive/tree/master/prototypes/scottyjsonclock\" target=\"_blank\" title=\"scottyjsonclock\">scottyjsonclock</a> was a quick refresher for how AJAX works in Haskell.</li>\n<li><a href=\"https://github.com/shapr/ghclive/tree/master/prototypes/hintpostexecute\" target=\"_blank\" title=\"hintpostexecute\">hintpostexecute</a> uses all the previous prototypes together to give a very basic ghci in the browser, with the Main.hs module being loaded from any http URL.</li>\n<li><a href=\"https://github.com/shapr/ghclive/tree/master/prototypes/jqueryconsole\" target=\"_blank\">jqueryconsole</a> extends the above prototypes to use <a href=\"https://github.com/chrisdone/\" target=\"_blank\">Chris Done</a>‘s <a href=\"https://github.com/chrisdone/jquery-console\" target=\"_blank\">jquery-console</a> as famously seen in <a href=\"http://tryhaskell.org/\" target=\"_blank\">tryhaskell.org</a>, giving a more GHCi-like result.</li>\n</ul>\n<p>The end goal is still a collaborative shared source code editor and ghci on a single web page, with some extensions. I’d like to turn the jqueryconsole prototype into a cabal package to have on hackage right around midterm. Which leads us to the questions.</p>\n<h3>How should IO be handled?</h3>\n<p>Reading and writing to local files will work normally, but what about getLine and putStrLn? Should those have ‘web enabled’ versions that get or send text output to the browser?</p>\n<p>I’d certainly like that, but how to do that without writing a modified Prelude?</p>\n<h3>What’s up with typeclass instance defaulting?</h3>\n<p>While (show . read) typechecks just fine, as types show below, the code still won’t do what you expect (unless you expect () ). Which typeclass instance should it choose? There’s not enough information.</p>\n<pre>show :: Show a =&gt; a -&gt; String\nread :: Read a =&gt; String -&gt; a\n(show.read) :: String -&gt; String</pre>\n<p>This is also true for a typeclass like ToHTML where you have a function that produces a concrete HTML type result.</p>\n<p>GHCi has built-in typeclass defaulting, and chooses () as the instance to read, but that won’t work for richer types like ToHTML. The standard fix is to add type annotations one way or another.</p>\n<p>Luite has a concrete working (failing) <a href=\"http://hpaste.org/69852\" target=\"_blank\" title=\"polymorphic results can't choose even one typeclass instance\">demonstration</a> of this problem. He also has a low level hack that uses the ghc-api to randomly choose a typeclass instance that will typecheck. Is there a better approach?</p>\n<h3>How to deal with signal handlers getting eaten by ghc-api?</h3>\n<p>If you’ve used ghc-api directly or through hint, you’ve noticed that ^C is no longer a UserInterrupt you can catch. This is because the ghc-api still acts much like ghci would, and <a href=\"http://hackage.haskell.org/trac/ghc/ticket/4162\" target=\"_blank\" title=\"ghc trac - ghc-api messes up signal handlers\">eats your signal handlers</a>.</p>\n<p>Carl Howells wrote <a href=\"https://github.com/snapframework/snap-loader-dynamic/blob/master/src/Snap/Loader/Dynamic/Signal.hs\" target=\"_blank\">save-and-restore handlers</a> for snap, maybe that’s the best option?</p>\n<h3>What’s the best choice for a collaborative editing component?</h3>\n<p><a href=\"https://github.com/luite\" target=\"_blank\" title=\"Luite!\">Luite Stegeman</a> and I have had several discussions on which in-browser collaborative code editing component is the best choice.</p>\n<p>So far it looks like <a href=\"http://codemirror.net/\" target=\"_blank\" title=\"CodeMirror\">CodeMirror</a>, because it already has Haskell syntax highlighting and several people have hacked it into a <a href=\"http://boxbase.org/ether/\" target=\"_blank\" title=\"codemirror-ether demo\">collaborative widget</a>.</p>\n<p>Do you have any other suggestions for a collaborative in-browser code editing widget?</p>\n<h3>Props</h3>\n<p>Much appreciation to my mentor <a href=\"http://apfelmus.nfshost.com/\" target=\"_blank\" title=\"Apfelmus\">Apfelmus</a> for the helpful weekly meetings and <a href=\"https://github.com/luite\" target=\"_blank\" title=\"Luite Stegeman\">Luite</a> for lots of discussion on IRC!</p>\n<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/ghclive.wordpress.com/21/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/ghclive.wordpress.com/21/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godelicious/ghclive.wordpress.com/21/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/delicious/ghclive.wordpress.com/21/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gofacebook/ghclive.wordpress.com/21/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/facebook/ghclive.wordpress.com/21/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gotwitter/ghclive.wordpress.com/21/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/twitter/ghclive.wordpress.com/21/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gostumble/ghclive.wordpress.com/21/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/stumble/ghclive.wordpress.com/21/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godigg/ghclive.wordpress.com/21/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/digg/ghclive.wordpress.com/21/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/goreddit/ghclive.wordpress.com/21/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/reddit/ghclive.wordpress.com/21/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=ghclive.wordpress.com&amp;blog=36007019&amp;post=21&amp;subd=ghclive&amp;ref=&amp;feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" "http://ghclive.wordpress.com/2012/06/15/june-update/" (20444 43185) new 42 nil nil ((title nil "\"A multi-user browser-based GHCi\": June Update") (guid ((isPermaLink . "false")) "http://ghclive.wordpress.com/?p=21") (link nil "http://ghclive.wordpress.com/2012/06/15/june-update/") (description nil "<h3>Mid-term evaluation is approaching, what’s the status of ghclive?</h3>\n<p>So far I’ve written four prototypes demonstrating various pieces.</p>\n<ul>\n<li><a href=\"https://github.com/shapr/ghclive/tree/master/prototypes/hintdownloadexecute\" target=\"_blank\" title=\"hintdownloadexecute\">hintdownloadexecute</a> adds code downloading to the <a href=\"http://code.haskell.org/hint/devel/examples/example.hs\" target=\"_blank\" title=\"hint example\">demo</a> that comes with hint.</li>\n<li><a href=\"https://github.com/shapr/ghclive/tree/master/prototypes/scottywebexecute\" target=\"_blank\" title=\"scottywebexecute\">scottywebexecute</a> add code execution to a demo that comes with the <a href=\"https://github.com/xich/scotty/\" target=\"_blank\" title=\"scotty\">scotty</a> web server.</li>\n<li><a href=\"https://github.com/shapr/ghclive/tree/master/prototypes/scottyjsonclock\" target=\"_blank\" title=\"scottyjsonclock\">scottyjsonclock</a> was a quick refresher for how AJAX works in Haskell.</li>\n<li><a href=\"https://github.com/shapr/ghclive/tree/master/prototypes/hintpostexecute\" target=\"_blank\" title=\"hintpostexecute\">hintpostexecute</a> uses all the previous prototypes together to give a very basic ghci in the browser, with the Main.hs module being loaded from any http URL.</li>\n<li><a href=\"https://github.com/shapr/ghclive/tree/master/prototypes/jqueryconsole\" target=\"_blank\">jqueryconsole</a> extends the above prototypes to use <a href=\"https://github.com/chrisdone/\" target=\"_blank\">Chris Done</a>‘s <a href=\"https://github.com/chrisdone/jquery-console\" target=\"_blank\">jquery-console</a> as famously seen in <a href=\"http://tryhaskell.org/\" target=\"_blank\">tryhaskell.org</a>, giving a more GHCi-like result.</li>\n</ul>\n<p>The end goal is still a collaborative shared source code editor and ghci on a single web page, with some extensions. I’d like to turn the jqueryconsole prototype into a cabal package to have on hackage right around midterm. Which leads us to the questions.</p>\n<h3>How should IO be handled?</h3>\n<p>Reading and writing to local files will work normally, but what about getLine and putStrLn? Should those have ‘web enabled’ versions that get or send text output to the browser?</p>\n<p>I’d certainly like that, but how to do that without writing a modified Prelude?</p>\n<h3>What’s up with typeclass instance defaulting?</h3>\n<p>While (show . read) typechecks just fine, as types show below, the code still won’t do what you expect (unless you expect () ). Which typeclass instance should it choose? There’s not enough information.</p>\n<pre>show :: Show a =&gt; a -&gt; String\nread :: Read a =&gt; String -&gt; a\n(show.read) :: String -&gt; String</pre>\n<p>This is also true for a typeclass like ToHTML where you have a function that produces a concrete HTML type result.</p>\n<p>GHCi has built-in typeclass defaulting, and chooses () as the instance to read, but that won’t work for richer types like ToHTML. The standard fix is to add type annotations one way or another.</p>\n<p>Luite has a concrete working (failing) <a href=\"http://hpaste.org/69852\" target=\"_blank\" title=\"polymorphic results can't choose even one typeclass instance\">demonstration</a> of this problem. He also has a low level hack that uses the ghc-api to randomly choose a typeclass instance that will typecheck. Is there a better approach?</p>\n<h3>How to deal with signal handlers getting eaten by ghc-api?</h3>\n<p>If you’ve used ghc-api directly or through hint, you’ve noticed that ^C is no longer a UserInterrupt you can catch. This is because the ghc-api still acts much like ghci would, and <a href=\"http://hackage.haskell.org/trac/ghc/ticket/4162\" target=\"_blank\" title=\"ghc trac - ghc-api messes up signal handlers\">eats your signal handlers</a>.</p>\n<p>Carl Howells wrote <a href=\"https://github.com/snapframework/snap-loader-dynamic/blob/master/src/Snap/Loader/Dynamic/Signal.hs\" target=\"_blank\">save-and-restore handlers</a> for snap, maybe that’s the best option?</p>\n<h3>What’s the best choice for a collaborative editing component?</h3>\n<p><a href=\"https://github.com/luite\" target=\"_blank\" title=\"Luite!\">Luite Stegeman</a> and I have had several discussions on which in-browser collaborative code editing component is the best choice.</p>\n<p>So far it looks like <a href=\"http://codemirror.net/\" target=\"_blank\" title=\"CodeMirror\">CodeMirror</a>, because it already has Haskell syntax highlighting and several people have hacked it into a <a href=\"http://boxbase.org/ether/\" target=\"_blank\" title=\"codemirror-ether demo\">collaborative widget</a>.</p>\n<p>Do you have any other suggestions for a collaborative in-browser code editing widget?</p>\n<h3>Props</h3>\n<p>Much appreciation to my mentor <a href=\"http://apfelmus.nfshost.com/\" target=\"_blank\" title=\"Apfelmus\">Apfelmus</a> for the helpful weekly meetings and <a href=\"https://github.com/luite\" target=\"_blank\" title=\"Luite Stegeman\">Luite</a> for lots of discussion on IRC!</p>\n<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/ghclive.wordpress.com/21/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/ghclive.wordpress.com/21/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godelicious/ghclive.wordpress.com/21/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/delicious/ghclive.wordpress.com/21/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gofacebook/ghclive.wordpress.com/21/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/facebook/ghclive.wordpress.com/21/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gotwitter/ghclive.wordpress.com/21/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/twitter/ghclive.wordpress.com/21/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gostumble/ghclive.wordpress.com/21/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/stumble/ghclive.wordpress.com/21/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godigg/ghclive.wordpress.com/21/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/digg/ghclive.wordpress.com/21/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/goreddit/ghclive.wordpress.com/21/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/reddit/ghclive.wordpress.com/21/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=ghclive.wordpress.com&amp;blog=36007019&amp;post=21&amp;subd=ghclive&amp;ref=&amp;feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />") (pubDate nil "Sat, 16 Jun 2012 15:39:29 +0000"))) ("Ketil Malde: Low cost ARM computers" "<p>The ARM CPU is one of the oldest RISC architectures, dating back to the Acorn. Although MIPS and PowerPC still hold some territory among embedded systems, ARM is by all indications the most ubiquitous architecture for general computing. Until the $25 <a href=\"http://raspberrypi.org/\">Raspberry PI</a>, ARM computers tended to cost as much as a low end PC, and thus they were mostly for enthusiasts. With prices well below the $100 mark, a large market for low power devices seems to be emerging.</p>\n<p>The ones I’ve looked at comes with either an ARM11 (which confusingly enough is an incarnation of the ARMv6 <em>architecture</em>) or a Cortex-A (ARMv7) CPU. The latter is about <a href=\"http://en.wikipedia.org/wiki/List_of_ARM_microprocessor_cores\">twice as fast</a> at the same clock speeds, and tends to be clocked 20-50% higher as well. For many applications (e.g. HTPC), GPU is important, and here things get even more complicated. The current generation consists of the Mali 400MP (used in Samsung Galaxy SII/III), nVidia’s Tegra 3 (HTC One X), and the PowerVR SGX543 (iPhone 4S). From the <a href=\"http://www.glbenchmark.com/result.jsp?glpro21=glpro&amp;orderby=438&amp;screen-group=true&amp;screen-group-value=1&amp;submi=OK&amp;screen=4&amp;screen=3&amp;screen=2&amp;screen=1&amp;screen=0&amp;os=0&amp;os=1&amp;os=2&amp;os=3&amp;os=4&amp;version=all&amp;certified_only=2&amp;brand=all&amp;gpu=all\">benchmarks</a>, these appear to be roughly equivalent in performance.</p>\n<p>So, let’s see what we’ve got:</p>\n<h2 id=\"raspberry-pi\">Raspberry PI</h2>\n<p>The <a href=\"http://www.raspberrypi.org/faqs\">Rπ</a> is a $25 or $35 device, sporting a Broadcom BCM2835 System-on-Chip. This SoC contains an ARM1176JZFS (ARMv6) core at 700Mhz. It is said to include a floating-point-unit, which makes me wonder if the others don’t?</p>\n<p>The GPU is a Videocore 4 GPU. It advertises 1Gpixel/s, 1.5Gtexel/s, and 24 GFLOPs, I’ve seen other numbers that the Mali 400MP does 10GFLOPs at 300MHz, so this looks pretty strong. <a href=\"http://www.eurogamer.net/articles/digitalfoundry-raspberry-pi-gpu-outperforms-iphone-4s\">This</a> seems a bit marketing-oriented, but also indicates substantially better graphics performance for the Rπ. At any rate, it should be able to do 1080p at 30 FPS and decode H.264 video, so it should be sufficient for most HTPC needs.</p>\n<p>It has USB, HDMI, RCA video, and audio outputs, and the extra $10 for the B model buys you ethernet and an extra USB port. It boots from the SDcard. If you want wifi, you’ll need a dongle. Finally, it has a set of GPIO pins, so you can program it to blink leds, listen to button presses, or open your garage door.</p>\n<h2 id=\"via-apc-8750\">VIA APC 8750</h2>\n<p>The <a href=\"http://www.pcmag.com/article2/0,2817,2404770,00.asp\">APC</a> contains a VIA WonderMedia ARM 11 (also ARMv6) SoC running at 800MHz, and it is equipped with 512MB RAM and 2GB flash. The form-factor is Neo-ITX, which means that it will fit into existing PC cases. Connectivity is good, with VGA, HDMI, 4xUSB 2.0, a microSD slot, 10/100 Eth, audio, and mic connectors - but no wifi. Apparently it doesn’t boot from SD, which means you might be able to brick it by flashing it with a broken bootloader. Also, the ads say 720p video only, but the SoC <a href=\"http://www.wondermedia.com.tw/en/products/platform/soc/wm8750/\">claims</a> to support 1080p. At any rate, it looks like a rather weak option for graphics.</p>\n<h2 id=\"rikomagic-mk802-and-mele-a1000\">Rikomagic MK802 and Mele A1000</h2>\n<p>The <a href=\"http://rhombus-tech.net/allwinner_a10/\">AllWinner A10</a> SoC contains a single-core 1GHz Cortex 8 (and thus ARMv7) CPU paired with a Mali 400MP GPU. CPU performance can thus be expected to be a substantial improvement over the ARM11-based solutions, with decent if not quite cutting-edge graphics. In addition to performance, Ubuntu officially supports ARMv7 (but not v6), and it also advertises 2160P video - four times the pixels of normal full HD video. Good luck finding a matching display.</p>\n<div class=\"figure\">\n<img src=\"http://blog.malde.org/images/mk802.jpg\" alt=\"The Rikomagic MK802 is a small thumbdrive-sized computer with a Cortex A8 CPU.\" title=\"The Rikomagic MK802\" /><p class=\"caption\">The Rikomagic MK802 is a small thumbdrive-sized computer with a Cortex A8 CPU.</p>\n</div>\n<p>The Rikomagic <a href=\"http://arstechnica.com/gadgets/2012/05/new-74-android-mini-computer-is-slightly-larger-than-a-thumb-drive/\">MK802</a> is a tiny “thumb drive” form factor. It comes with 512 or 1024MB RAM, 4G flash in addition to the SD card slot (which it boots from), and contains wifi, HDMI, and USB 2.0. The link above claims 1.5GHz and Mali 400, but <a href=\"http://www.aliexpress.com/product-fm/563764893-Freeshipping-Rikomagic-MK802-Mini-PC-Mini-Android4-0-dongle-android-IPTV-google-tv-smart-android-box-wholesalers.html\">Ali Express</a> says 1GHz, and perhaps more importantly, that the GPU is “OpenGL ES2.0 (AMD Z430) / OpenVG1.1(AMD Z160)”. Now, as far as I can tell, the AMD Z430 is also known as Adreno 200, and is an old GPU with about 10% of the Mali’s performance. It doesn’t seem to make much sense, since the Mali is claimed to be built into the SoC, but I wonder what this is supposed to mean.</p>\n<p>The Mele <a href=\"http://liliputing.com/2012/03/mele-a1000-is-a-70-hackable-linux-friendly-arm-based-pc.html\">A1000</a> is the flexible alternative. It, too, comes with a case, but it’s of the more usual set-top-box type, and the benefit is more flexibility, adding SATA, 4xUSB 2.0, VGA, and digital audio out to the MK802s outputs.</p>\n<p>You can buy either at ~$74 (with an extra $10 to get the 1GB RAM MK802), and although it’s the most expensive options, it’s still quite cheap: the similar form-factor <a href=\"http://www.fxitech.com/products/\">Cotton Candy</a> costs $200, although it has a dual-core Cortex A9 and 1GB. Also, it looks like a bare A10 board is in the <a href=\"http://rhombus-tech.net/allwinner_a10/orders/\">works</a>. This could be an interesting competitor to the Rπ.</p>\n<h2 id=\"summary\">Summary</h2>\n<p>So, to sum up: for a cheap board with GPIO, and if you don’t mind acquiring a case separately, get the Raspberry PI. If you want to use an existing PC case, the VIA board might work out, but otherwise the extra $20 for the Mele A1000 is probably a better deal since you get a box, more CPU and GPU power, and built-in wifi. If you value discression over connectivity, the MK802 looks pretty good.</p>\n<p>At less than $75 (and certainly at $25), I think a barrier has been broken. If you’re moderately enthusiastic, you can pick one of these just for fun. Just like apps and smartphones, enthusiast will come up with new and interesting ways to use these in all kinds of settings. But currently, the most interesting aspect these have in common is availability. Specifically, that there is none: they all seem to be out of stock. Another important challenge is software availability. The CPU is perhaps simple enough (although I’m told the Linux ARM tree is rather complicated), but the GPUs are a mess of proprietary, closed technology. There is an Open Source driver (called <a href=\"http://www.phoronix.com/scan.php?page=news_item&amp;px=MTEwODA\">Lima</a>) for the Mali GPUs, but it’s unclear how well it works, and all the sites I’ve looked at were at most able to bring up a rather shaky Ubuntu or Android. These two issues <em>must</em> be addressed, but as soon as they are, I think there is a pretty sizable market out there for whomever manages to churn out the devices in sufficient numbers, <em>and</em> manages to get good - preferably open source - drivers letting people take advantage of GPUs and peripherals.</p>" "http://blog.malde.org/posts/low-cost-ARM-options.html" (20443 14115) new 43 nil nil ((title nil "Ketil Malde: Low cost ARM computers") (guid ((isPermaLink . "true")) "http://blog.malde.org/posts/low-cost-ARM-options.html") (link nil "http://blog.malde.org/posts/low-cost-ARM-options.html") (description nil "<p>The ARM CPU is one of the oldest RISC architectures, dating back to the Acorn. Although MIPS and PowerPC still hold some territory among embedded systems, ARM is by all indications the most ubiquitous architecture for general computing. Until the $25 <a href=\"http://raspberrypi.org/\">Raspberry PI</a>, ARM computers tended to cost as much as a low end PC, and thus they were mostly for enthusiasts. With prices well below the $100 mark, a large market for low power devices seems to be emerging.</p>\n<p>The ones I’ve looked at comes with either an ARM11 (which confusingly enough is an incarnation of the ARMv6 <em>architecture</em>) or a Cortex-A (ARMv7) CPU. The latter is about <a href=\"http://en.wikipedia.org/wiki/List_of_ARM_microprocessor_cores\">twice as fast</a> at the same clock speeds, and tends to be clocked 20-50% higher as well. For many applications (e.g. HTPC), GPU is important, and here things get even more complicated. The current generation consists of the Mali 400MP (used in Samsung Galaxy SII/III), nVidia’s Tegra 3 (HTC One X), and the PowerVR SGX543 (iPhone 4S). From the <a href=\"http://www.glbenchmark.com/result.jsp?glpro21=glpro&amp;orderby=438&amp;screen-group=true&amp;screen-group-value=1&amp;submi=OK&amp;screen=4&amp;screen=3&amp;screen=2&amp;screen=1&amp;screen=0&amp;os=0&amp;os=1&amp;os=2&amp;os=3&amp;os=4&amp;version=all&amp;certified_only=2&amp;brand=all&amp;gpu=all\">benchmarks</a>, these appear to be roughly equivalent in performance.</p>\n<p>So, let’s see what we’ve got:</p>\n<h2 id=\"raspberry-pi\">Raspberry PI</h2>\n<p>The <a href=\"http://www.raspberrypi.org/faqs\">Rπ</a> is a $25 or $35 device, sporting a Broadcom BCM2835 System-on-Chip. This SoC contains an ARM1176JZFS (ARMv6) core at 700Mhz. It is said to include a floating-point-unit, which makes me wonder if the others don’t?</p>\n<p>The GPU is a Videocore 4 GPU. It advertises 1Gpixel/s, 1.5Gtexel/s, and 24 GFLOPs, I’ve seen other numbers that the Mali 400MP does 10GFLOPs at 300MHz, so this looks pretty strong. <a href=\"http://www.eurogamer.net/articles/digitalfoundry-raspberry-pi-gpu-outperforms-iphone-4s\">This</a> seems a bit marketing-oriented, but also indicates substantially better graphics performance for the Rπ. At any rate, it should be able to do 1080p at 30 FPS and decode H.264 video, so it should be sufficient for most HTPC needs.</p>\n<p>It has USB, HDMI, RCA video, and audio outputs, and the extra $10 for the B model buys you ethernet and an extra USB port. It boots from the SDcard. If you want wifi, you’ll need a dongle. Finally, it has a set of GPIO pins, so you can program it to blink leds, listen to button presses, or open your garage door.</p>\n<h2 id=\"via-apc-8750\">VIA APC 8750</h2>\n<p>The <a href=\"http://www.pcmag.com/article2/0,2817,2404770,00.asp\">APC</a> contains a VIA WonderMedia ARM 11 (also ARMv6) SoC running at 800MHz, and it is equipped with 512MB RAM and 2GB flash. The form-factor is Neo-ITX, which means that it will fit into existing PC cases. Connectivity is good, with VGA, HDMI, 4xUSB 2.0, a microSD slot, 10/100 Eth, audio, and mic connectors - but no wifi. Apparently it doesn’t boot from SD, which means you might be able to brick it by flashing it with a broken bootloader. Also, the ads say 720p video only, but the SoC <a href=\"http://www.wondermedia.com.tw/en/products/platform/soc/wm8750/\">claims</a> to support 1080p. At any rate, it looks like a rather weak option for graphics.</p>\n<h2 id=\"rikomagic-mk802-and-mele-a1000\">Rikomagic MK802 and Mele A1000</h2>\n<p>The <a href=\"http://rhombus-tech.net/allwinner_a10/\">AllWinner A10</a> SoC contains a single-core 1GHz Cortex 8 (and thus ARMv7) CPU paired with a Mali 400MP GPU. CPU performance can thus be expected to be a substantial improvement over the ARM11-based solutions, with decent if not quite cutting-edge graphics. In addition to performance, Ubuntu officially supports ARMv7 (but not v6), and it also advertises 2160P video - four times the pixels of normal full HD video. Good luck finding a matching display.</p>\n<div class=\"figure\">\n<img src=\"http://blog.malde.org/images/mk802.jpg\" alt=\"The Rikomagic MK802 is a small thumbdrive-sized computer with a Cortex A8 CPU.\" title=\"The Rikomagic MK802\" /><p class=\"caption\">The Rikomagic MK802 is a small thumbdrive-sized computer with a Cortex A8 CPU.</p>\n</div>\n<p>The Rikomagic <a href=\"http://arstechnica.com/gadgets/2012/05/new-74-android-mini-computer-is-slightly-larger-than-a-thumb-drive/\">MK802</a> is a tiny “thumb drive” form factor. It comes with 512 or 1024MB RAM, 4G flash in addition to the SD card slot (which it boots from), and contains wifi, HDMI, and USB 2.0. The link above claims 1.5GHz and Mali 400, but <a href=\"http://www.aliexpress.com/product-fm/563764893-Freeshipping-Rikomagic-MK802-Mini-PC-Mini-Android4-0-dongle-android-IPTV-google-tv-smart-android-box-wholesalers.html\">Ali Express</a> says 1GHz, and perhaps more importantly, that the GPU is “OpenGL ES2.0 (AMD Z430) / OpenVG1.1(AMD Z160)”. Now, as far as I can tell, the AMD Z430 is also known as Adreno 200, and is an old GPU with about 10% of the Mali’s performance. It doesn’t seem to make much sense, since the Mali is claimed to be built into the SoC, but I wonder what this is supposed to mean.</p>\n<p>The Mele <a href=\"http://liliputing.com/2012/03/mele-a1000-is-a-70-hackable-linux-friendly-arm-based-pc.html\">A1000</a> is the flexible alternative. It, too, comes with a case, but it’s of the more usual set-top-box type, and the benefit is more flexibility, adding SATA, 4xUSB 2.0, VGA, and digital audio out to the MK802s outputs.</p>\n<p>You can buy either at ~$74 (with an extra $10 to get the 1GB RAM MK802), and although it’s the most expensive options, it’s still quite cheap: the similar form-factor <a href=\"http://www.fxitech.com/products/\">Cotton Candy</a> costs $200, although it has a dual-core Cortex A9 and 1GB. Also, it looks like a bare A10 board is in the <a href=\"http://rhombus-tech.net/allwinner_a10/orders/\">works</a>. This could be an interesting competitor to the Rπ.</p>\n<h2 id=\"summary\">Summary</h2>\n<p>So, to sum up: for a cheap board with GPIO, and if you don’t mind acquiring a case separately, get the Raspberry PI. If you want to use an existing PC case, the VIA board might work out, but otherwise the extra $20 for the Mele A1000 is probably a better deal since you get a box, more CPU and GPU power, and built-in wifi. If you value discression over connectivity, the MK802 looks pretty good.</p>\n<p>At less than $75 (and certainly at $25), I think a barrier has been broken. If you’re moderately enthusiastic, you can pick one of these just for fun. Just like apps and smartphones, enthusiast will come up with new and interesting ways to use these in all kinds of settings. But currently, the most interesting aspect these have in common is availability. Specifically, that there is none: they all seem to be out of stock. Another important challenge is software availability. The CPU is perhaps simple enough (although I’m told the Linux ARM tree is rather complicated), but the GPUs are a mess of proprietary, closed technology. There is an Open Source driver (called <a href=\"http://www.phoronix.com/scan.php?page=news_item&amp;px=MTEwODA\">Lima</a>) for the Mali GPUs, but it’s unclear how well it works, and all the sites I’ve looked at were at most able to bring up a rather shaky Ubuntu or Android. These two issues <em>must</em> be addressed, but as soon as they are, I think there is a pretty sizable market out there for whomever manages to churn out the devices in sufficient numbers, <em>and</em> manages to get good - preferably open source - drivers letting people take advantage of GPUs and peripherals.</p>") (pubDate nil "Fri, 15 Jun 2012 13:22:43 +0000"))) ("Ben Moseley: Unfolding with View Patterns" "A while back I across a way of looking at fold / unfold duality which I've not seen anywhere else. It makes use of view patterns to highlight the symmetry in the implementation of the two combinators.<br /><br />Firstly, for reference, the standard implementation:<br /><br /><span style=\"font-size: x-small;\" class=\"Apple-style-span\"></span><br /><blockquote class=\"tr_bq\"><span style=\"font-family: 'Courier New', Courier, monospace;\" class=\"Apple-style-span\">foldr :: (a -&gt; b -&gt; b) -&gt; b -&gt; [a] -&gt; b<br />foldr f b [] = b<br />foldr f b (x : xs) = f x $ foldr f b xs</span></blockquote>Then we rewrite the inputs slightly:<span style=\"font-size: x-small;\" class=\"Apple-style-span\"></span><br /><blockquote class=\"tr_bq\"><span style=\"font-size: x-small;\" class=\"Apple-style-span\"><span style=\"font-family: 'Courier New', Courier, monospace;\" class=\"Apple-style-span\"><br />foldr3 :: (() -&gt; b,(a,b) -&gt; b) -&gt; [a] -&gt; b<br />foldr3 (b,f) [] = b ()<br />foldr3 (b,f) (x : xs) = f (x, foldr3 (b,f) xs)<br /> </span></span></blockquote><span style=\"font-size: x-small;\" class=\"Apple-style-span\"></span>...and rewrite them a little more...:<span style=\"font-size: x-small;\" class=\"Apple-style-span\"></span><br /><blockquote class=\"tr_bq\"><span style=\"font-size: x-small;\" class=\"Apple-style-span\"><span style=\"font-family: 'Courier New', Courier, monospace;\" class=\"Apple-style-span\">-- | (+) -| Delta    (Coproduct bifunctor is left adjoint to Diagonal functor)<br />foldr4 :: (Either () (a,b) -&gt; b) -&gt; [a] -&gt; b<br />foldr4 f       [] = f $ Left  ()<br />foldr4 f (x : xs) = f $ Right (x, foldr4 f xs)</span></span></blockquote><br /><blockquote class=\"tr_bq\"><span style=\"font-size: x-small;\" class=\"Apple-style-span\"><span style=\"font-family: 'Courier New', Courier, monospace;\" class=\"Apple-style-span\"></span></span><br /><div style=\"margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;\">...now we can create 'unfoldr' just by swapping the LHS and RHS of the definitions of 'foldr4':<span style=\"font-size: x-small;\" class=\"Apple-style-span\"></span></div><blockquote class=\"tr_bq\"></blockquote><span style=\"font-size: x-small;\" class=\"Apple-style-span\"><span style=\"font-family: 'Courier New', Courier, monospace;\" class=\"Apple-style-span\">-- | Now just swap the LHS and RHS of the '=' !!!<br />unfoldr2 :: (b -&gt; Either () (a,b)) -&gt; b -&gt; [a]<br />unfoldr2 f (f -&gt; Left  ()                   ) = []<br />unfoldr2 f (f -&gt; Right (x, unfoldr2 f -&gt; xs)) = (x : xs)</span></span></blockquote><span style=\"font-size: x-small;\" class=\"Apple-style-span\"><div style=\"font-family: Calibri, sans-serif;\"><br /></div></span><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/3857512306503018420-1458009480450343029?l=nattermorphisms.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>" "http://nattermorphisms.blogspot.com/2012/06/unfolding-with-view-patterns.html" (20442 52845) new 44 nil nil ((title nil "Ben Moseley: Unfolding with View Patterns") (guid ((isPermaLink . "false")) "tag:blogger.com,1999:blog-3857512306503018420.post-1458009480450343029") (link nil "http://nattermorphisms.blogspot.com/2012/06/unfolding-with-view-patterns.html") (description nil "A while back I across a way of looking at fold / unfold duality which I've not seen anywhere else. It makes use of view patterns to highlight the symmetry in the implementation of the two combinators.<br /><br />Firstly, for reference, the standard implementation:<br /><br /><span style=\"font-size: x-small;\" class=\"Apple-style-span\"></span><br /><blockquote class=\"tr_bq\"><span style=\"font-family: 'Courier New', Courier, monospace;\" class=\"Apple-style-span\">foldr :: (a -&gt; b -&gt; b) -&gt; b -&gt; [a] -&gt; b<br />foldr f b [] = b<br />foldr f b (x : xs) = f x $ foldr f b xs</span></blockquote>Then we rewrite the inputs slightly:<span style=\"font-size: x-small;\" class=\"Apple-style-span\"></span><br /><blockquote class=\"tr_bq\"><span style=\"font-size: x-small;\" class=\"Apple-style-span\"><span style=\"font-family: 'Courier New', Courier, monospace;\" class=\"Apple-style-span\"><br />foldr3 :: (() -&gt; b,(a,b) -&gt; b) -&gt; [a] -&gt; b<br />foldr3 (b,f) [] = b ()<br />foldr3 (b,f) (x : xs) = f (x, foldr3 (b,f) xs)<br /> </span></span></blockquote><span style=\"font-size: x-small;\" class=\"Apple-style-span\"></span>...and rewrite them a little more...:<span style=\"font-size: x-small;\" class=\"Apple-style-span\"></span><br /><blockquote class=\"tr_bq\"><span style=\"font-size: x-small;\" class=\"Apple-style-span\"><span style=\"font-family: 'Courier New', Courier, monospace;\" class=\"Apple-style-span\">-- | (+) -| Delta    (Coproduct bifunctor is left adjoint to Diagonal functor)<br />foldr4 :: (Either () (a,b) -&gt; b) -&gt; [a] -&gt; b<br />foldr4 f       [] = f $ Left  ()<br />foldr4 f (x : xs) = f $ Right (x, foldr4 f xs)</span></span></blockquote><br /><blockquote class=\"tr_bq\"><span style=\"font-size: x-small;\" class=\"Apple-style-span\"><span style=\"font-family: 'Courier New', Courier, monospace;\" class=\"Apple-style-span\"></span></span><br /><div style=\"margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;\">...now we can create 'unfoldr' just by swapping the LHS and RHS of the definitions of 'foldr4':<span style=\"font-size: x-small;\" class=\"Apple-style-span\"></span></div><blockquote class=\"tr_bq\"></blockquote><span style=\"font-size: x-small;\" class=\"Apple-style-span\"><span style=\"font-family: 'Courier New', Courier, monospace;\" class=\"Apple-style-span\">-- | Now just swap the LHS and RHS of the '=' !!!<br />unfoldr2 :: (b -&gt; Either () (a,b)) -&gt; b -&gt; [a]<br />unfoldr2 f (f -&gt; Left  ()                   ) = []<br />unfoldr2 f (f -&gt; Right (x, unfoldr2 f -&gt; xs)) = (x : xs)</span></span></blockquote><span style=\"font-size: x-small;\" class=\"Apple-style-span\"><div style=\"font-family: Calibri, sans-serif;\"><br /></div></span><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/3857512306503018420-1458009480450343029?l=nattermorphisms.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>") (pubDate nil "Fri, 15 Jun 2012 05:55:57 +0000") (author nil "noreply@blogger.com (Ben)"))) ("Joyride Laboratories: Open Development Marketing: Three Live Examples (Indie)" "<p class=\"en\"></p><p style=\"text-align: center;\"><img src=\"http://qubodup.files.wordpress.com/2011/01/od1.png\" style=\"display: block; margin-left: auto; margin-right: auto;\" title=\"Open development graph: being open about your developments makes noise, grows the community and lets you meet new people which in the end all interact which each other.\" height=\"402\" width=\"444\" alt=\"Open development graph: being open about your development makes noise, grows the community and lets you meet new people which in the end all interact which each other.\" /><br />Image: Open development graph: being open about your development makes noise, grows the community and lets you meet new people which has potential to interact which each other.</p>\n<p>Today, Data Realms (Cortex Command) <a href=\"http://devlog.datarealms.com/cortex-command/datas-todo-list-for-cortex-command/\">started sharing their backlog</a> (aka ToDo-list) with the public. This made me want to re-capture some methods of being open about your game development and using this for marketing.</p>\n<h3>1. \"Leak\" alphas to pre-orderers</h3>\n<p>When your early version already has re-play value, allowing people to pre-order your games and to play your alpha versions is one of the best things you can do.</p>\n<p style=\"text-align: center;\"><a href=\"http://www.flickr.com/photos/qubodup/7184311777/\" title=\"Open Development Marketing Example Wolfire by Iwan Gabovitch, on Flickr\"><img src=\"http://farm9.staticflickr.com/8021/7184311777_a7f29210af.jpg\" alt=\"Open Development Marketing Example Wolfire\" height=\"500\" width=\"500\" /></a><br />Image: Wolfire's Overgrowth alpha \"leaks\" get distributed via their <a href=\"http://forums.wolfire.com/viewforum.php?f=13\">preorder forum</a>, which you can only see if you preordered the game.</p>\n<h3>2. Show off remaining tasks and bugs</h3>\n<p>Progress bars are beauty in players' eyes. Simply giving players read (and ideally write) access to your internal bug tracker allows super-fans to stalk you with no additional efforts on your side.</p>\n<p style=\"text-align: center;\"><a href=\"http://www.flickr.com/photos/qubodup/7369546090/\" title=\"Open Development Marketing Example Unknown Worlds by Iwan Gabovitch, on Flickr\"><img src=\"http://farm8.staticflickr.com/7072/7369546090_5bac3cb073.jpg\" alt=\"Open Development Marketing Example Unknown Worlds\" height=\"500\" width=\"500\" /></a><br />Image: Natural Selection 2's roadmap progress is being shared by Unknown Worlds live, <a href=\"http://www.unknownworlds.com/ns2/progress\">directly on the game's homepage</a>.</p>\n<h3>3. Share your design knowledge</h3>\n<p>When a game strongly depends on its plot, it often becomes hard for the writers and designers to let players read or play the story before the project is finished. Even in these cases there is still a lot available in the designers' heads that can be shared spoiler-free: Instead of letting the player experience an in-game plot-twist prematurely (before the game is released), you can teach them about how plot twists are constructed and examine examples of plot twists in existing games.</p>\n<p style=\"text-align: center;\"><a href=\"http://www.flickr.com/photos/qubodup/7369545938/\" title=\"Open Development Marketing Example Frictional Games by Iwan Gabovitch, on Flickr\"><img src=\"http://farm6.staticflickr.com/5079/7369545938_e836b34ffe.jpg\" alt=\"Open Development Marketing Example Frictional Games\" height=\"500\" width=\"500\" /></a><br />Image: Frictional Games shares thoughts about game and story design in their <a href=\"http://frictionalgames.blogspot.de/2012/01/narrative-not-game-mechnaic.html\">\"Narrative not a game mechanic?\" article</a>.</p>\n<h3>Afterword</h3>\n<p>I myself work at <a href=\"http://joyridelabs.de/\">Joyride Labs</a> on a Linux/OSX/Windows game. Our engine code is <a href=\"http://joyridelabs.de/game/code/\">open source</a>, we <a href=\"http://joyridelabs.de/blog/?p=150\">sometimes</a> <a href=\"http://joyridelabs.de/blog/?p=391\">share</a> <a href=\"http://joyridelabs.de/blog/?p=579\">insights</a> about <a href=\"http://joyridelabs.de/blog/?p=460\">our code</a> (this is often <a href=\"http://www.haskell.org/\">Haskell</a>-related and we should do this more often), our <a href=\"https://bugs.launchpad.net/nikki\">bug tracker</a> is completely public, our pre-release versions (that exclude the story mode) are available for <a href=\"http://joyridelabs.de/game/download/\">download for free</a>.</p>\n<p>This short article is based on <a href=\"http://opendevmarketing.blogspot.de/\">old slides</a> I used at a talk at <a href=\"http://gd-bachelor.htw-berlin.de/\">HTW Berlin</a>. Are there any other noteworthy examples you would like to share? Please do so in the comments.</p><p></p>" "http://joyridelabs.de/blog/?p=1407" (20440 63011) new 45 nil nil ((title nil "Joyride Laboratories: Open Development Marketing: Three Live Examples (Indie)") (guid ((isPermaLink . "true")) "http://joyridelabs.de/blog/?p=1407") (link nil "http://joyridelabs.de/blog/?p=1407") (description nil "<p class=\"en\"></p><p style=\"text-align: center;\"><img src=\"http://qubodup.files.wordpress.com/2011/01/od1.png\" style=\"display: block; margin-left: auto; margin-right: auto;\" title=\"Open development graph: being open about your developments makes noise, grows the community and lets you meet new people which in the end all interact which each other.\" height=\"402\" width=\"444\" alt=\"Open development graph: being open about your development makes noise, grows the community and lets you meet new people which in the end all interact which each other.\" /><br />Image: Open development graph: being open about your development makes noise, grows the community and lets you meet new people which has potential to interact which each other.</p>\n<p>Today, Data Realms (Cortex Command) <a href=\"http://devlog.datarealms.com/cortex-command/datas-todo-list-for-cortex-command/\">started sharing their backlog</a> (aka ToDo-list) with the public. This made me want to re-capture some methods of being open about your game development and using this for marketing.</p>\n<h3>1. \"Leak\" alphas to pre-orderers</h3>\n<p>When your early version already has re-play value, allowing people to pre-order your games and to play your alpha versions is one of the best things you can do.</p>\n<p style=\"text-align: center;\"><a href=\"http://www.flickr.com/photos/qubodup/7184311777/\" title=\"Open Development Marketing Example Wolfire by Iwan Gabovitch, on Flickr\"><img src=\"http://farm9.staticflickr.com/8021/7184311777_a7f29210af.jpg\" alt=\"Open Development Marketing Example Wolfire\" height=\"500\" width=\"500\" /></a><br />Image: Wolfire's Overgrowth alpha \"leaks\" get distributed via their <a href=\"http://forums.wolfire.com/viewforum.php?f=13\">preorder forum</a>, which you can only see if you preordered the game.</p>\n<h3>2. Show off remaining tasks and bugs</h3>\n<p>Progress bars are beauty in players' eyes. Simply giving players read (and ideally write) access to your internal bug tracker allows super-fans to stalk you with no additional efforts on your side.</p>\n<p style=\"text-align: center;\"><a href=\"http://www.flickr.com/photos/qubodup/7369546090/\" title=\"Open Development Marketing Example Unknown Worlds by Iwan Gabovitch, on Flickr\"><img src=\"http://farm8.staticflickr.com/7072/7369546090_5bac3cb073.jpg\" alt=\"Open Development Marketing Example Unknown Worlds\" height=\"500\" width=\"500\" /></a><br />Image: Natural Selection 2's roadmap progress is being shared by Unknown Worlds live, <a href=\"http://www.unknownworlds.com/ns2/progress\">directly on the game's homepage</a>.</p>\n<h3>3. Share your design knowledge</h3>\n<p>When a game strongly depends on its plot, it often becomes hard for the writers and designers to let players read or play the story before the project is finished. Even in these cases there is still a lot available in the designers' heads that can be shared spoiler-free: Instead of letting the player experience an in-game plot-twist prematurely (before the game is released), you can teach them about how plot twists are constructed and examine examples of plot twists in existing games.</p>\n<p style=\"text-align: center;\"><a href=\"http://www.flickr.com/photos/qubodup/7369545938/\" title=\"Open Development Marketing Example Frictional Games by Iwan Gabovitch, on Flickr\"><img src=\"http://farm6.staticflickr.com/5079/7369545938_e836b34ffe.jpg\" alt=\"Open Development Marketing Example Frictional Games\" height=\"500\" width=\"500\" /></a><br />Image: Frictional Games shares thoughts about game and story design in their <a href=\"http://frictionalgames.blogspot.de/2012/01/narrative-not-game-mechnaic.html\">\"Narrative not a game mechanic?\" article</a>.</p>\n<h3>Afterword</h3>\n<p>I myself work at <a href=\"http://joyridelabs.de/\">Joyride Labs</a> on a Linux/OSX/Windows game. Our engine code is <a href=\"http://joyridelabs.de/game/code/\">open source</a>, we <a href=\"http://joyridelabs.de/blog/?p=150\">sometimes</a> <a href=\"http://joyridelabs.de/blog/?p=391\">share</a> <a href=\"http://joyridelabs.de/blog/?p=579\">insights</a> about <a href=\"http://joyridelabs.de/blog/?p=460\">our code</a> (this is often <a href=\"http://www.haskell.org/\">Haskell</a>-related and we should do this more often), our <a href=\"https://bugs.launchpad.net/nikki\">bug tracker</a> is completely public, our pre-release versions (that exclude the story mode) are available for <a href=\"http://joyridelabs.de/game/download/\">download for free</a>.</p>\n<p>This short article is based on <a href=\"http://opendevmarketing.blogspot.de/\">old slides</a> I used at a talk at <a href=\"http://gd-bachelor.htw-berlin.de/\">HTW Berlin</a>. Are there any other noteworthy examples you would like to share? Please do so in the comments.</p><p></p>") (pubDate nil "Wed, 13 Jun 2012 20:20:51 +0000"))) ("Joyride Laboratories: Honest Compiler" "<p class=\"en\"><strong>WARNING:</strong> This is a development post. So if you're not into programming, you might find it pretty boring...\n<br /> <br />\nI am glad, I am not the only one thinking that Haskell can be very complicated at times. This is an error message the <a href=\"http://haskell.org/ghc/\">ghc</a> just gave me:\n<br /> <br />\n<code>\n</code></p><pre>My brain just exploded.\nI can't handle pattern bindings for [...]\n</pre>\n<p></p>" "http://joyridelabs.de/blog/?p=391" (20440 62575) new 46 nil nil ((title nil "Joyride Laboratories: Honest Compiler") (guid ((isPermaLink . "true")) "http://joyridelabs.de/blog/?p=391") (link nil "http://joyridelabs.de/blog/?p=391") (description nil "<p class=\"en\"><strong>WARNING:</strong> This is a development post. So if you're not into programming, you might find it pretty boring...\n<br /> <br />\nI am glad, I am not the only one thinking that Haskell can be very complicated at times. This is an error message the <a href=\"http://haskell.org/ghc/\">ghc</a> just gave me:\n<br /> <br />\n<code>\n</code></p><pre>My brain just exploded.\n    I can't handle pattern bindings for [...]\n</pre>\n<p></p>") (pubDate nil "Wed, 13 Jun 2012 20:13:35 +0000"))) ("Jan Stolarek: A History of Haskell" "<p style=\"text-align: justify;\">Recently I read a paper <a href=\"http://research.microsoft.com/en-us/um/people/simonpj/papers/history-of-haskell/\">“A History of Haskell: Being Lazy With Class”</a> by Paul Hudak, John Hughes, Simon Peyton Jones and Philip Wadler. Now it’s time to share some impressions.</p>\n<p style=\"text-align: justify;\">First of all this is a very long read. It took me a couple of days to get through 55 pages of dense, two-column text. Well, if you exclude the references section length reduces to 45 pages, but that’s still quite a lot. The title can be slightly misleading. This paper is about history but it is also practically about everything related to Haskell. It describes creation of the Haskell Committee, initial meetings and discussions about language goals, features and name. But that’s only a small part of this paper. The rest is about principles, features, contributions, tools and community. Of course all of this is placed in a historical context and I must say it is very insightful to know the motivation behind some particular language features. I consider hours spent on reading this paper a very good investment. “A History of Haskell” is a great summary of Haskell’s development process as a whole. As a beginner I learned a lot of things about the language that I wasn’t aware of. Wide overview of literature presented in the paper gives a general idea on what is researched in the Haskell world, which gives me some ideas where to go with my own research. This paper is definitely a must-read for people diving into Haskell!</p>" "http://ics.p.lodz.pl/~stolarek/blog/2012/06/a-history-of-haskell/" (20440 30895) new 47 nil nil ((title nil "Jan Stolarek: A History of Haskell") (guid ((isPermaLink . "false")) "http://ics.p.lodz.pl/~stolarek/blog/?p=478") (link nil "http://ics.p.lodz.pl/~stolarek/blog/2012/06/a-history-of-haskell/") (description nil "<p style=\"text-align: justify;\">Recently I read a paper <a href=\"http://research.microsoft.com/en-us/um/people/simonpj/papers/history-of-haskell/\">“A History of Haskell: Being Lazy With Class”</a> by Paul Hudak, John Hughes, Simon Peyton Jones and Philip Wadler. Now it’s time to share some impressions.</p>\n<p style=\"text-align: justify;\">First of all this is a very long read. It took me a couple of days to get through 55 pages of dense, two-column text. Well, if you exclude the references section length reduces to 45 pages, but that’s still quite a lot. The title can be slightly misleading. This paper is about history but it is also practically about everything related to Haskell. It describes creation of the Haskell Committee, initial meetings and discussions about language goals, features and name. But that’s only a small part of this paper. The rest is about principles, features, contributions, tools and community. Of course all of this is placed in a historical context and I must say it is very insightful to know the motivation behind some particular language features. I consider hours spent on reading this paper a very good investment. “A History of Haskell” is a great summary of Haskell’s development process as a whole. As a beginner I learned a lot of things about the language that I wasn’t aware of. Wide overview of literature presented in the paper gives a general idea on what is researched in the Haskell world, which gives me some ideas where to go with my own research. This paper is definitely a must-read for people diving into Haskell!</p>") (pubDate nil "Wed, 13 Jun 2012 11:25:35 +0000"))) ("Shayan Najd Javadipour: Haskell.Modules (aka Haskell-Name-Exts)" "<p>As previously suggested in <a href=\"http://cleantypecheck.wordpress.com/2012/05/03/inquiry/#comment-2\" title=\"comments\">comments</a> (by <a href=\"http://en.gravatar.com/ndmitchell\" title=\"ndmitchell\">ndmitchell</a> and others), we are now planning to develop a separate package for name resolution (and imports).</p>\n<p>The decision is not final now; we just started hacking on the code that <a href=\"http://www.augustsson.net/\" title=\"Lennart Augustsson\">Lennart Augustsson</a> provided. The code (Language.Haskell.Modules) is developed on top of Haskell-Src-Exts for the similar purpose. </p>\n<p>If there are any volunteers interested in hacking on Haskell.Modules, I’d be glad to share the joy <img src=\"http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif\" alt=\":)\" class=\"wp-smiley\" />   </p>\n<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/cleantypecheck.wordpress.com/348/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/cleantypecheck.wordpress.com/348/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godelicious/cleantypecheck.wordpress.com/348/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/delicious/cleantypecheck.wordpress.com/348/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gofacebook/cleantypecheck.wordpress.com/348/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/facebook/cleantypecheck.wordpress.com/348/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gotwitter/cleantypecheck.wordpress.com/348/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/twitter/cleantypecheck.wordpress.com/348/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gostumble/cleantypecheck.wordpress.com/348/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/stumble/cleantypecheck.wordpress.com/348/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godigg/cleantypecheck.wordpress.com/348/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/digg/cleantypecheck.wordpress.com/348/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/goreddit/cleantypecheck.wordpress.com/348/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/reddit/cleantypecheck.wordpress.com/348/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=cleantypecheck.wordpress.com&amp;blog=35584919&amp;post=348&amp;subd=cleantypecheck&amp;ref=&amp;feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" "http://cleantypecheck.wordpress.com/2012/06/12/haskell-modules-aka-haskell-name-exts-14/" (20439 45349) new 48 nil nil ((title nil "Shayan Najd Javadipour: Haskell.Modules (aka Haskell-Name-Exts)") (guid ((isPermaLink . "false")) "http://cleantypecheck.wordpress.com/?p=348") (link nil "http://cleantypecheck.wordpress.com/2012/06/12/haskell-modules-aka-haskell-name-exts-14/") (description nil "<p>As previously suggested in <a href=\"http://cleantypecheck.wordpress.com/2012/05/03/inquiry/#comment-2\" title=\"comments\">comments</a> (by <a href=\"http://en.gravatar.com/ndmitchell\" title=\"ndmitchell\">ndmitchell</a> and others), we are now planning to develop a separate package for name resolution (and imports).</p>\n<p>The decision is not final now; we just started hacking on the code that <a href=\"http://www.augustsson.net/\" title=\"Lennart Augustsson\">Lennart Augustsson</a> provided. The code (Language.Haskell.Modules) is developed on top of Haskell-Src-Exts for the similar purpose. </p>\n<p>If there are any volunteers interested in hacking on Haskell.Modules, I’d be glad to share the joy <img src=\"http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif\" alt=\":)\" class=\"wp-smiley\" />   </p>\n<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/cleantypecheck.wordpress.com/348/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/cleantypecheck.wordpress.com/348/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godelicious/cleantypecheck.wordpress.com/348/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/delicious/cleantypecheck.wordpress.com/348/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gofacebook/cleantypecheck.wordpress.com/348/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/facebook/cleantypecheck.wordpress.com/348/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gotwitter/cleantypecheck.wordpress.com/348/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/twitter/cleantypecheck.wordpress.com/348/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gostumble/cleantypecheck.wordpress.com/348/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/stumble/cleantypecheck.wordpress.com/348/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godigg/cleantypecheck.wordpress.com/348/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/digg/cleantypecheck.wordpress.com/348/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/goreddit/cleantypecheck.wordpress.com/348/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/reddit/cleantypecheck.wordpress.com/348/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=cleantypecheck.wordpress.com&amp;blog=35584919&amp;post=348&amp;subd=cleantypecheck&amp;ref=&amp;feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />") (pubDate nil "Tue, 12 Jun 2012 21:14:13 +0000"))) ("Edward Kmett: Where’s Waldo?" "<p>No, I don't mean like <a href=\"http://www.optipess.com/2012/05/28/lost-and-found/\">this</a>, but rather, If you spent any time trying to figure out xkcd's <a href=\"http://xkcd.com/1037/\">Umwelt</a> April Fool comic this year, you may be interested in the Haskell source code. They used all sorts of information about you, the browser you were using, the resolution of your screen, to the geocoding of the network address you came from, etc. to serve up a custom web comic.</p>\n<p>Today, davean posted to github the code for <a href=\"https://github.com/davean/waldo\">waldo</a>, the engine he wrote to drive that comic.</p>\n<p>Alas, he was not kind enough to actually supply the code for the umwelt comic strip itself, so you'll still be left wondering if the internet managed to find all of the Easter eggs. (Are they still Easter eggs when you release something a week before Easter?) You may find the list of links below useful if you want to get a feel for the different responses it gave people.</p>\n<p>[ <a href=\"http://www.webpronews.com/xkcd-wins-april-fools-day-with-amazing-changing-comic-gag-2012-04\">Article</a> | <a href=\"http://forums.xkcd.com/viewtopic.php?t=82442\">xkcd's Forum</a> | <a href=\"http://news.ycombinator.com/item?id=3784216\">Hacker News</a> | <a href=\"http://www.reddit.com/r/haskell/comments/roa2k/xkcds_april_1st_joke_this_year_was_written_in/\">/r/haskell</a> ]</p>\n<p><strong>[Update: Jun 10, 9:09pm]</strong> davean just posted a <a href=\"http://www.reddit.com/r/haskell/comments/uved7/waldo_the_haskell_powered_codebase_behind_xkcds/\">rather insightful post mortem</a> of the development of waldo that talks a bit about why xkcd uses Haskell internally.</p>" "http://comonad.com/reader/2012/wheres-waldo/" (20437 18093) new 49 nil nil ((title nil "Edward Kmett: Where’s Waldo?") (guid ((isPermaLink . "false")) "http://comonad.com/reader/?p=592") (link nil "http://comonad.com/reader/2012/wheres-waldo/") (description nil "<p>No, I don't mean like <a href=\"http://www.optipess.com/2012/05/28/lost-and-found/\">this</a>, but rather, If you spent any time trying to figure out xkcd's <a href=\"http://xkcd.com/1037/\">Umwelt</a> April Fool comic this year, you may be interested in the Haskell source code. They used all sorts of information about you, the browser you were using, the resolution of your screen, to the geocoding of the network address you came from, etc. to serve up a custom web comic.</p>\n<p>Today, davean posted to github the code for <a href=\"https://github.com/davean/waldo\">waldo</a>, the engine he wrote to drive that comic.</p>\n<p>Alas, he was not kind enough to actually supply the code for the umwelt comic strip itself, so you'll still be left wondering if the internet managed to find all of the Easter eggs. (Are they still Easter eggs when you release something a week before Easter?) You may find the list of links below useful if you want to get a feel for the different responses it gave people.</p>\n<p>[ <a href=\"http://www.webpronews.com/xkcd-wins-april-fools-day-with-amazing-changing-comic-gag-2012-04\">Article</a> | <a href=\"http://forums.xkcd.com/viewtopic.php?t=82442\">xkcd's Forum</a> | <a href=\"http://news.ycombinator.com/item?id=3784216\">Hacker News</a> | <a href=\"http://www.reddit.com/r/haskell/comments/roa2k/xkcds_april_1st_joke_this_year_was_written_in/\">/r/haskell</a> ]</p>\n<p><strong>[Update: Jun 10, 9:09pm]</strong> davean just posted a <a href=\"http://www.reddit.com/r/haskell/comments/uved7/waldo_the_haskell_powered_codebase_behind_xkcds/\">rather insightful post mortem</a> of the development of waldo that talks a bit about why xkcd uses Haskell internally.</p>") (pubDate nil "Mon, 11 Jun 2012 01:15:25 +0000"))) ("Christopher Done: Last.fm / scrobbling" "<p>Last.fm has served me well over the years. I don’t remember it ever being down. They went from free to paying for listening, but at a couple euros per month, I didn’t mind, at all. I’m a subscriber now. I didn’t mind paying for Spotify either.</p><p>But what bugs me about the services; Last.fm, Spotify, and Grooveshark, etc. is that the information is not mine to control. I can’t fix it, there’s no crowd-sourcing. Whether the data is about me, or about an artist, I can’t change it. If I’m offline, I can’t get at it.</p><p>In Spotify I asked them to correct the track titling of an album I liked to listen to as half of the track titles were in the wrong order, a year later it remains the same. Fine. BE LIKE THAT!</p><p>Since for as long as I can remember, Last.fm has confused various artists together, but notably Prodigy and The Prodigy. The Prodigy are an electronic/dance/techno outfit that I love, and Prodigy is a rapper I’ve never heard of. They haven’t solved this despite the five year old complaints about it. Fine. I ain’t even mad.</p><p>Grooveshark’s meta data is a joke, not worth criticizing.</p><p>Such discrepancies aren’t a huge deal, but they are a problem. And they make me realize more and more how much I value having control of my data. As a normal everyday user, I can only be satisfied with what I’m given, maybe I can complain, but it’s likely to be ignored.</p><p>But as a programmer, someone who has the know-how to scrape the data and import it into a database and create an alternative infrastructure, I almost have a moral duty to myself to fix it! It’s a principle!</p><p>So the first thing I did was use <a href=\"http://encukou.github.com/lastscrape-gui/\">a program</a> which scrapes from the public-access API about 50 tracks per second. I had 70k tracks to download, so this took some time, and it failed the first time, I had to patch the source to resume and then merge the output later.</p><p>Then I wrote a little Haskell script to rewrite that 8MB file into an SQL script, and imported into PostgreSQL. Lovely. I can make all sorts of charts and graphs and I can mash-up data from MusicBrainz, buuuut, wait…</p><p>Now, it’s all well and good with kendle mint cake having the past data, but what about new tracks? New scrobbles? Now I need some way to record new scrobbles into my personal database. I googled around looking for some simple scrobbling services but didn’t turn anything up. I had a look at the scrobble protocol, and it’s actually really simple. So I made <a href=\"https://github.com/chrisdone/scrobble\">this.</a> A library to purely handle taking “currently listening” notifications, and scrobbles.</p><p>Now all that remains is a few lines to insert into the database on scrobble. Another thing that would be nice is to also push the same data to Last.fm and Libre.fm, just to retain that social aspect (user compatibility) that those web sites provide.</p><p>But I am enticed at the prospect of extending the notion of an “open standard” — if scrobbling is an open standard, why not music profiles? Why tie ourselves down to one implementation?</p>" "http://chrisdone.com/posts/2012-06-11-lastfm.html" (20437 13568) new 50 nil nil ((title nil "Christopher Done: Last.fm / scrobbling") (guid ((isPermaLink . "true")) "http://chrisdone.com/posts/2012-06-11-lastfm.html") (link nil "http://chrisdone.com/posts/2012-06-11-lastfm.html") (description nil "<p>Last.fm has served me well over the years. I don’t remember it ever being down. They went from free to paying for listening, but at a couple euros per month, I didn’t mind, at all. I’m a subscriber now. I didn’t mind paying for Spotify either.</p><p>But what bugs me about the services; Last.fm, Spotify, and Grooveshark, etc. is that the information is not mine to control. I can’t fix it, there’s no crowd-sourcing. Whether the data is about me, or about an artist, I can’t change it. If I’m offline, I can’t get at it.</p><p>In Spotify I asked them to correct the track titling of an album I liked to listen to as half of the track titles were in the wrong order, a year later it remains the same. Fine. BE LIKE THAT!</p><p>Since for as long as I can remember, Last.fm has confused various artists together, but notably Prodigy and The Prodigy. The Prodigy are an electronic/dance/techno outfit that I love, and Prodigy is a rapper I’ve never heard of. They haven’t solved this despite the five year old complaints about it. Fine. I ain’t even mad.</p><p>Grooveshark’s meta data is a joke, not worth criticizing.</p><p>Such discrepancies aren’t a huge deal, but they are a problem. And they make me realize more and more how much I value having control of my data. As a normal everyday user, I can only be satisfied with what I’m given, maybe I can complain, but it’s likely to be ignored.</p><p>But as a programmer, someone who has the know-how to scrape the data and import it into a database and create an alternative infrastructure, I almost have a moral duty to myself to fix it! It’s a principle!</p><p>So the first thing I did was use <a href=\"http://encukou.github.com/lastscrape-gui/\">a program</a> which scrapes from the public-access API about 50 tracks per second. I had 70k tracks to download, so this took some time, and it failed the first time, I had to patch the source to resume and then merge the output later.</p><p>Then I wrote a little Haskell script to rewrite that 8MB file into an SQL script, and imported into PostgreSQL. Lovely. I can make all sorts of charts and graphs and I can mash-up data from MusicBrainz, buuuut, wait…</p><p>Now, it’s all well and good with kendle mint cake having the past data, but what about new tracks? New scrobbles? Now I need some way to record new scrobbles into my personal database. I googled around looking for some simple scrobbling services but didn’t turn anything up. I had a look at the scrobble protocol, and it’s actually really simple. So I made <a href=\"https://github.com/chrisdone/scrobble\">this.</a> A library to purely handle taking “currently listening” notifications, and scrobbles.</p><p>Now all that remains is a few lines to insert into the database on scrobble. Another thing that would be nice is to also push the same data to Last.fm and Libre.fm, just to retain that social aspect (user compatibility) that those web sites provide.</p><p>But I am enticed at the prospect of extending the notion of an “open standard” — if scrobbling is an open standard, why not music profiles? Why tie ourselves down to one implementation?</p>") (pubDate nil "Mon, 11 Jun 2012 00:00:00 +0000"))) ("Shayan Najd Javadipour: Design Decision" "<p>Since the final implementation is going to be <a href=\"http://en.wikipedia.org/wiki/Simply_typed_lambda_calculus#Alternative_syntaxes\" title=\"Bidirectional typechecking\">bidirectional</a>, we are going to have two functions for each syntactic construct, one for each direction. For example:</p>\n<blockquote><p>– | Typechecking literals<br />tcLit ::  Literal -&gt; Sigma -&gt; TCMonad () <br />– this type is just an example to show the difference between tiLit and tcLit<br />tcLit (Char char) s = …<br />…<br />– | type inference for literals<br />tiLit :: Literal -&gt; TCMonad (Sigma)</p>\n<p>– this type is just an example to show the difference between tiLit and tcLit</p>\n<p>tiLit (Char char) = …<br /> …</p>\n</blockquote>\n<p>Hopefully, with a good design, the code for these functions is going to be as close as possible to the corresponding typing rule.</p>\n<p>For the sake of modularity, we are trying to make the “side effects” of these functions relatively explicit, i.e., the TCMonad only (implicitly) contains substitutions and a counter for generating fresh variables. This   style is close to <a href=\"http://web.cecs.pdx.edu/~mpj/thih/TypingHaskellInHaskell.html#tth_sEc10\" title=\"TI Monad -- THiH\">TI monad of “Typing Haskell in Haskell”</a>:</p>\n<blockquote><p>“newtype TI a = TI (Subst -&gt; Int -&gt; (Subst, Int, a))”</p>\n</blockquote>\n<p>This makes more sense since typing judgments of some language constructs have a different format from others (different output/side effect). For example, <a href=\"http://cleantypecheck.files.wordpress.com/2012/06/3.jpg\" title=\"Typing Judgments for Expressions\">typing judgments of expressions</a> generate constraints but <a href=\"http://cleantypecheck.files.wordpress.com/2012/06/1.jpg\" title=\"Typing Judgments for Patterns \">typing judgments of patterns</a> have more side effects (e.g. discharging Q).<br />For example:</p>\n<blockquote><p>tcPat :: Pat -&gt; Sigma -&gt; TI (VarEnv,Q,Q,[TVar])<br />–these types are just examples to show the difference between tcPat &amp; tcExp  <br />tcExp :: Exp -&gt; Sigma -&gt; TI Q </p>\n</blockquote>\n<p>Later, we can use typeclasses and overloading to present a uniform interface.<br />For example:</p>\n<blockquote><p>class Typecheckable a where<br />         typecheck :: a -&gt; Sigma -&gt; TI ()</p>\n<p>instance Typecheckable Exp where typecheck = … –code using tcExp<br />instance Typecheckable Pat where typecheck =… –code using tcPat</p>\n</blockquote>\n<p>Any comments/suggestions?</p>\n<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/cleantypecheck.wordpress.com/235/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/cleantypecheck.wordpress.com/235/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godelicious/cleantypecheck.wordpress.com/235/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/delicious/cleantypecheck.wordpress.com/235/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gofacebook/cleantypecheck.wordpress.com/235/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/facebook/cleantypecheck.wordpress.com/235/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gotwitter/cleantypecheck.wordpress.com/235/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/twitter/cleantypecheck.wordpress.com/235/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gostumble/cleantypecheck.wordpress.com/235/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/stumble/cleantypecheck.wordpress.com/235/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godigg/cleantypecheck.wordpress.com/235/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/digg/cleantypecheck.wordpress.com/235/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/goreddit/cleantypecheck.wordpress.com/235/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/reddit/cleantypecheck.wordpress.com/235/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=cleantypecheck.wordpress.com&amp;blog=35584919&amp;post=235&amp;subd=cleantypecheck&amp;ref=&amp;feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" "http://cleantypecheck.wordpress.com/2012/06/10/design-decision/" (20436 63965) new 51 nil nil ((title nil "Shayan Najd Javadipour: Design Decision") (guid ((isPermaLink . "false")) "http://cleantypecheck.wordpress.com/?p=235") (link nil "http://cleantypecheck.wordpress.com/2012/06/10/design-decision/") (description nil "<p>Since the final implementation is going to be <a href=\"http://en.wikipedia.org/wiki/Simply_typed_lambda_calculus#Alternative_syntaxes\" title=\"Bidirectional typechecking\">bidirectional</a>, we are going to have two functions for each syntactic construct, one for each direction. For example:</p>\n<blockquote><p>– | Typechecking literals<br />tcLit ::  Literal -&gt; Sigma -&gt; TCMonad () <br />– this type is just an example to show the difference between tiLit and tcLit<br />tcLit (Char char) s = …<br />…<br />– | type inference for literals<br />tiLit :: Literal -&gt; TCMonad (Sigma)</p>\n<p>– this type is just an example to show the difference between tiLit and tcLit</p>\n<p>tiLit (Char char) = …<br /> …</p>\n</blockquote>\n<p>Hopefully, with a good design, the code for these functions is going to be as close as possible to the corresponding typing rule.</p>\n<p>For the sake of modularity, we are trying to make the “side effects” of these functions relatively explicit, i.e., the TCMonad only (implicitly) contains substitutions and a counter for generating fresh variables. This   style is close to <a href=\"http://web.cecs.pdx.edu/~mpj/thih/TypingHaskellInHaskell.html#tth_sEc10\" title=\"TI Monad -- THiH\">TI monad of “Typing Haskell in Haskell”</a>:</p>\n<blockquote><p>“newtype TI a = TI (Subst -&gt; Int -&gt; (Subst, Int, a))”</p>\n</blockquote>\n<p>This makes more sense since typing judgments of some language constructs have a different format from others (different output/side effect). For example, <a href=\"http://cleantypecheck.files.wordpress.com/2012/06/3.jpg\" title=\"Typing Judgments for Expressions\">typing judgments of expressions</a> generate constraints but <a href=\"http://cleantypecheck.files.wordpress.com/2012/06/1.jpg\" title=\"Typing Judgments for Patterns \">typing judgments of patterns</a> have more side effects (e.g. discharging Q).<br />For example:</p>\n<blockquote><p>tcPat :: Pat -&gt; Sigma -&gt; TI (VarEnv,Q,Q,[TVar])<br />–these types are just examples to show the difference between tcPat &amp; tcExp  <br />tcExp :: Exp -&gt; Sigma -&gt; TI Q </p>\n</blockquote>\n<p>Later, we can use typeclasses and overloading to present a uniform interface.<br />For example:</p>\n<blockquote><p>class Typecheckable a where<br />         typecheck :: a -&gt; Sigma -&gt; TI ()</p>\n<p>instance Typecheckable Exp where typecheck = … –code using tcExp<br />instance Typecheckable Pat where typecheck =… –code using tcPat</p>\n</blockquote>\n<p>Any comments/suggestions?</p>\n<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/cleantypecheck.wordpress.com/235/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/cleantypecheck.wordpress.com/235/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godelicious/cleantypecheck.wordpress.com/235/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/delicious/cleantypecheck.wordpress.com/235/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gofacebook/cleantypecheck.wordpress.com/235/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/facebook/cleantypecheck.wordpress.com/235/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gotwitter/cleantypecheck.wordpress.com/235/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/twitter/cleantypecheck.wordpress.com/235/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gostumble/cleantypecheck.wordpress.com/235/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/stumble/cleantypecheck.wordpress.com/235/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godigg/cleantypecheck.wordpress.com/235/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/digg/cleantypecheck.wordpress.com/235/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/goreddit/cleantypecheck.wordpress.com/235/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/reddit/cleantypecheck.wordpress.com/235/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=cleantypecheck.wordpress.com&amp;blog=35584919&amp;post=235&amp;subd=cleantypecheck&amp;ref=&amp;feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />") (pubDate nil "Sun, 10 Jun 2012 19:47:41 +0000"))) ("David Amos: CHAs V: More Hopf Algebra morphisms" "<br /><a href=\"http://haskellformaths.blogspot.co.uk/2012/04/chas-iv-hopf-algebra-morphisms.html\">Last time</a> we looked at the descending tree morphism between the combinatorial Hopf algebras <a href=\"http://haskellformaths.blogspot.co.uk/2012/03/chas-ii-hopf-algebra-ssym-of.html\">SSym</a> and <a href=\"http://haskellformaths.blogspot.co.uk/2012/03/combinatorial-hopf-algebras-i-hopf.html\">YSym</a> with fundamental bases consisting of (indexed by) permutations and binary trees respectively. We previously also looked at a Hopf algebra <a href=\"http://haskellformaths.blogspot.co.uk/2012/04/chas-iii-qsym-combinatorial-hopf.html\">QSym</a> with a basis consisting of compositions.<br /><br />There are also morphisms between SSym/YSym and QSym. However, before we look at these, we need to look at an alternative basis for QSym.<br /><br />When I introduced QSym, I defined a type QSymM for the basis, without explaining what the M stands for. It actually stands for \"monomial\" (but I'm not going to explain why quite yet). Now, of course it is possible to construct any number of alternative bases for QSym, by taking linear combinations of the QSymM basis elements. However, most of these alternative bases are not likely to be very mathematically useful. (By mathematically useful, I mean, for example, that it leads to a simple expression for the multiplication rule.) When looking at the relation between QSym and SSym/YSym, there is another basis for QSym that leads to a clearer picture of their relationship, called the fundamental basis.<br /><br />We will represent the fundamental basis by a new type:<br /><br /><pre>newtype QSymF = QSymF [Int] deriving (Eq)<br /><br />instance Ord QSymF where<br />    compare (QSymF xs) (QSymF ys) = compare (sum xs, xs) (sum ys, ys)<br /><br />instance Show QSymF where<br />    show (QSymF xs) = \"F \" ++ show xs<br /><br />qsymF :: [Int] -&gt; Vect Q QSymF<br />qsymF xs | all (&gt;0) xs = return (QSymF xs)<br />         | otherwise = error \"qsymF: not a composition\"<br /></pre><br />In a moment, I'll describe the relationship between the monomial and fundamental bases, but first, there's something I need to explain.<br /><br />If the monomial and fundamental bases are bases for the <i>same</i> Hopf algebra (QSym), how can they be different types? So I think what it comes down to is that if we have different types then we get to have different Show instances. So we will be able to choose whether to view an element of QSym in terms of the monomial or the fundamental basis.<br /><br />We could have achieved this in other ways, say by designating the monomial basis as the \"true\" basis, and then providing functions to input and output using the fundamental basis. Giving the fundamental basis its own type is more egalitarian: it puts the two bases on an equal footing.<br /><br />Okay then, so in order to make this all work, we need to define the relationship between the two bases, and provide functions to convert between them. Let's take a look.<br /><br />A (proper) refinement of a composition is any composition which can be obtained from the first composition by splitting one or more of the parts of the first composition.<br /><br /><pre>refinements (x:xs) = [y++ys | y &lt;- compositions x, ys &lt;- refinements xs]<br />refinements [] = [[]]<br /><br />&gt; refinements [1,3]<br />[[1,1,1,1],[1,1,2],[1,2,1],[1,3]]<br /></pre><br />Then the fundamental basis can be expressed in terms of the monomial basis, as follows:<br /><br /><pre>qsymFtoM :: (Eq k, Num k) =&gt; Vect k QSymF -&gt; Vect k QSymM<br />qsymFtoM = linear qsymFtoM' where<br />    qsymFtoM' (QSymF alpha) = sumv [return (QSymM beta) | beta &lt;- refinements alpha]<br /></pre><br />For example:<br /><br /><pre>&gt; qsymFtoM (qsymF [1,3])<br />M [1,1,1,1]+M [1,1,2]+M [1,2,1]+M [1,3]</pre><br />Conversely, elements of the monomial basis can be expressed as sums of elements of the fundamental basis, as follows:<br /><br /><pre>qsymMtoF :: (Eq k, Num k) =&gt; Vect k QSymM -&gt; Vect k QSymF<br />qsymMtoF = linear qsymMtoF' where<br />    qsymMtoF' (QSymM alpha) = sumv [(-1) ^ (length beta - length alpha) *&gt; return (QSymF beta) | beta &lt;- refinements alpha]<br /><br />&gt; qsymMtoF (qsymM [1,3])<br />F [1,1,1,1]-F [1,1,2]-F [1,2,1]+F [1,3]<br /></pre><br />So we can input elements of QSym using either the monomial or fundamental basis (using the qsymM and qsymF constructors). Shortly, we'll define Algebra and Coalgebra instances for QSymF, so that we can perform arithmetic in either basis. Finally, we can output in either basis, by using the conversion functions if necessary.<br /><br />How do we know that QSymF is a basis? How do we know that its elements are linearly independent, and span the space? In Vect Q QSymF, this is guaranteed by the free vector space construction. But what the question is really asking is, how do we know that the image of the \"basis\" QSymF in Vect Q QSymM (via qsymFtoM) is a basis?<br /><br />Well, it will be linearly independent if qsymFtoM is injective, and spanning if qsymFtoM is surjective. So we require that qsymFtoM is bijective. This follows if we can show that qsymFtoM and qsymMtoF are mutual inverses. Well, quickCheck seems to think so:<br /><br /><pre>&gt; quickCheck (\\x -&gt; x == (qsymMtoF . qsymFtoM) x)<br />+++ OK, passed 100 tests.<br />&gt; quickCheck (\\x -&gt; x == (qsymFtoM . qsymMtoF) x)<br />+++ OK, passed 100 tests.<br /></pre><br />(For the cognoscenti: The reason this works is that qsymMtoF' is the Mobius inversion of qsymFtoM' in the poset of compositions ordered by refinement.)<br /><br />Okay, so we have an alternative basis for QSym as a vector space. What do the multiplication and comultiplication look like relative to this new basis? Now, it is possible to define the algebra, coalgebra and Hopf algebra structures explicitly in terms of the QSymF basis, but I'm going to cheat, and just round-trip via QSymM:<br /><br /><pre>instance (Eq k, Num k) =&gt; Algebra k QSymF where<br />    unit x = x *&gt; return (QSymF [])<br />    mult = qsymMtoF . mult . (qsymFtoM `tf` qsymFtoM)<br /><br />instance (Eq k, Num k) =&gt; Coalgebra k QSymF where<br />    counit = unwrap . linear counit' where counit' (QSymF xs) = if null xs then 1 else 0<br />    comult = (qsymMtoF `tf` qsymMtoF) . comult . qsymFtoM<br /><br />instance (Eq k, Num k) =&gt; Bialgebra k QSymF where {}<br /><br />instance (Eq k, Num k) =&gt; HopfAlgebra k QSymF where<br />    antipode = qsymMtoF . antipode . qsymFtoM<br /></pre><br />(Recall that `tf` is the tensor product of linear maps.)<br /><br />It's kind of obvious from the definitions that the algebra, coalgebra and Hopf algebra laws will be satisfied. (It's obvious because we already know that these laws are satisfied in Vect Q QSymM, and the definitions for Vect Q QSymF are just the same, but under the change of basis.) However, for additional confidence, we can for example:<br /><br /><pre>&gt; quickCheck (prop_Algebra :: (Q, Vect Q QSymF, Vect Q QSymF, Vect Q QSymF) -&gt; Bool)<br />+++ OK, passed 100 tests.<br /></pre><br />Okay, so the reason for introducing the fundamental basis for QSym is that there is a Hopf algebra morphism from SSym to QSym, which is easiest to express in terms of their respective fundamental bases. Specifically, we can define a map between the bases, SSymF -&gt; QSymF, which lifts (using fmap, ie using the free vector space functor) to a map between the Hopf algebras.<br /><br />Given a permutation p of [1..n], a descent is an index i such that p(i) &gt; p(i+1). For example, the permutation [2,3,5,1,6,4] has descents from the 5 to the 1 and from the 6 to the 4. We can think of the descents as splitting the permutation into segments, each of which is strictly ascending. Thus 235164 splits into 235-16-4. If we count the lengths of these segments, we get a composition, which I call the descent composition. Here's the code:<br /><br /><pre>descentComposition [] = []<br />descentComposition xs = descComp 0 xs where<br />    descComp c (x1:x2:xs) = if x1 &lt; x2 then descComp (c+1) (x2:xs) else (c+1) : descComp 0 (x2:xs)<br />    descComp c [x] = [c+1]<br /><br />&gt; descentComposition [2,3,5,1,6,4]<br />[3,2,1]<br /></pre><br />We can lift this map between the bases to a map between the Hopf algebras.<br /><br /><pre>descentMap :: (Eq k, Num k) =&gt; Vect k SSymF -&gt; Vect k QSymF<br />descentMap = nf . fmap (\\(SSymF xs) -&gt; QSymF (descentComposition xs))<br /></pre><br />Now, it turns out that this is a Hopf algebra morphism. That is, it commutes with the algebra, coalgebra and Hopf algebra structures.<br /><br /><pre>&gt; quickCheck (prop_AlgebraMorphism descentMap)<br />+++ OK, passed 100 tests.<br />&gt; quickCheck (prop_CoalgebraMorphism descentMap)<br />+++ OK, passed 100 tests.<br />&gt; quickCheck (prop_HopfAlgebraMorphism descentMap)<br />+++ OK, passed 100 tests.<br /></pre><br />Why does this work? Well, let's work through an example, for comultiplication. (In the following I omit brackets and commas for brevity.) If we do the descent map before the comultiplication, we get:<br /><br /><pre>2341 (SSymF)<br />-&gt; (descentMap)<br />31 (QSymF)<br />-&gt; (qsymFtoM - sum of refinements)<br />31+211+121+1111 (QSymM)<br />-&gt; (comult - deconcatenations)<br />[]⊗31 + 3⊗1 + 31⊗[] +<br />[]⊗211 + 2⊗11 + 21⊗1 + 211⊗[] +<br />[]⊗121 + 1⊗21 + 12⊗1 + 121⊗[] +<br />[]⊗1111 + 1⊗111 + 11⊗11 + 111⊗1 + 1111⊗[]<br />(QSymM⊗QSymM)<br /></pre><br />(We convert to QSymM at the second step because it's in QSymM that we know how to comultiply. It is possible to give an explicit expression for the comultiplication in terms of the QSymF basis, but I wanted to keep things simple.)<br /><br />Conversely, if we do the comultiplication before the descent map:<br /><br /><pre>2341 (SSymF)<br />-&gt; (comult - flattened deconcatenations)<br />[]⊗2341 + 1⊗231 + 12⊗21 + 123⊗1 + 2341⊗[] (SSymF⊗SSymF)<br />-&gt; (descentMap⊗descentMap)<br />[]⊗31 + 1⊗21 + 2⊗11 + 3⊗1 + 31⊗[] (QSymF⊗QSymF)<br />-&gt; (qsymFtoM⊗qsymFtoM - sum of refinements)<br />[]⊗(31+211+121+1111) +<br />1⊗(21+111) +<br />(2+11)⊗11 +<br />(3+21+12+111)⊗1 +<br />(31+211+121+1111)⊗[]<br />(QSymM⊗QSymM)<br /></pre><br />The result comes out the same, whichever way round you go, as required. But why does it work? Well, you can imagine the inventor going through the following thought process:<br /><br /><ul><li>Comult in SSymF is by flattened deconcatenations (of permutations), and in QSymM is by deconcatenations (of compositions). If we split a permutation at a descent, the descents on either side are preserved. So we could try sending a permutation in SSymF to its descent composition in QSymM. For example, ssymF [2,3,4,1] -&gt; qsymM [3,1], which deconcatenates to [2,3,4]⊗[1] -&gt; [3]⊗[1].</li><li>However, a deconcatenation in SSymF might split a permutation partway through an ascending segment. For example, [2,3,4,1] -&gt; [2,3]⊗[4,1] (which flattens to [1,2]⊗[2,1]). Taking this to descent compositions would give [2]⊗[1,1]. This is not a deconcatenation of qsymM [3,1] - it is however a deconcatenation of [2,1,1], which is a one-step refinement of [3,1].</li><li>So we could try sending a permutation in SSymF to its descent composition in QSymM, and its one-step refinements. For example, ssymF [2,3,4,1] -&gt; qsymM [3,1] + qsymM [2,1,1] + qsymM [1,2,1].</li><li>But now that means that [2,3]⊗[4,1] (flattening omitted for clarity) -&gt; [2]⊗[1,1] + [1,1]⊗[1,1]. The second term is a deconcatenation of [1,1,1,1], a two-step refinement of [3,1].</li><li>It's pretty obvious that the way to make it all work out is to send a permutation in SSymF to its descent composition in QSymM, and all its proper refinements.</li><li>But this sum, of a composition and all its refinements (in QSymM) is just exactly how we defined the QSymF basis.</li></ul><br /><br />Exercise: Explain why descentMap commutes with mult.<br /><br />Exercise: Last time we looked at a descendingTreeMap : SSym -&gt; YSym. Show that the descentMap : SSym -&gt; QSym factors through the descendingTreeMap, and describe the other factor f : YSym -&gt; QSym.<br /><br /><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/5195188167565410449-3305778356435883146?l=haskellformaths.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>" "http://haskellformaths.blogspot.com/2012/06/chas-v-more-hopf-algebra-morphisms.html" (20436 56462) new 52 nil nil ((title nil "David Amos: CHAs V: More Hopf Algebra morphisms") (guid ((isPermaLink . "false")) "tag:blogger.com,1999:blog-5195188167565410449.post-3305778356435883146") (link nil "http://haskellformaths.blogspot.com/2012/06/chas-v-more-hopf-algebra-morphisms.html") (description nil "<br /><a href=\"http://haskellformaths.blogspot.co.uk/2012/04/chas-iv-hopf-algebra-morphisms.html\">Last time</a> we looked at the descending tree morphism between the combinatorial Hopf algebras <a href=\"http://haskellformaths.blogspot.co.uk/2012/03/chas-ii-hopf-algebra-ssym-of.html\">SSym</a> and <a href=\"http://haskellformaths.blogspot.co.uk/2012/03/combinatorial-hopf-algebras-i-hopf.html\">YSym</a> with fundamental bases consisting of (indexed by) permutations and binary trees respectively. We previously also looked at a Hopf algebra <a href=\"http://haskellformaths.blogspot.co.uk/2012/04/chas-iii-qsym-combinatorial-hopf.html\">QSym</a> with a basis consisting of compositions.<br /><br />There are also morphisms between SSym/YSym and QSym. However, before we look at these, we need to look at an alternative basis for QSym.<br /><br />When I introduced QSym, I defined a type QSymM for the basis, without explaining what the M stands for. It actually stands for \"monomial\" (but I'm not going to explain why quite yet). Now, of course it is possible to construct any number of alternative bases for QSym, by taking linear combinations of the QSymM basis elements. However, most of these alternative bases are not likely to be very mathematically useful. (By mathematically useful, I mean, for example, that it leads to a simple expression for the multiplication rule.) When looking at the relation between QSym and SSym/YSym, there is another basis for QSym that leads to a clearer picture of their relationship, called the fundamental basis.<br /><br />We will represent the fundamental basis by a new type:<br /><br /><pre>newtype QSymF = QSymF [Int] deriving (Eq)<br /><br />instance Ord QSymF where<br />    compare (QSymF xs) (QSymF ys) = compare (sum xs, xs) (sum ys, ys)<br /><br />instance Show QSymF where<br />    show (QSymF xs) = \"F \" ++ show xs<br /><br />qsymF :: [Int] -&gt; Vect Q QSymF<br />qsymF xs | all (&gt;0) xs = return (QSymF xs)<br />         | otherwise = error \"qsymF: not a composition\"<br /></pre><br />In a moment, I'll describe the relationship between the monomial and fundamental bases, but first, there's something I need to explain.<br /><br />If the monomial and fundamental bases are bases for the <i>same</i> Hopf algebra (QSym), how can they be different types? So I think what it comes down to is that if we have different types then we get to have different Show instances. So we will be able to choose whether to view an element of QSym in terms of the monomial or the fundamental basis.<br /><br />We could have achieved this in other ways, say by designating the monomial basis as the \"true\" basis, and then providing functions to input and output using the fundamental basis. Giving the fundamental basis its own type is more egalitarian: it puts the two bases on an equal footing.<br /><br />Okay then, so in order to make this all work, we need to define the relationship between the two bases, and provide functions to convert between them. Let's take a look.<br /><br />A (proper) refinement of a composition is any composition which can be obtained from the first composition by splitting one or more of the parts of the first composition.<br /><br /><pre>refinements (x:xs) = [y++ys | y &lt;- compositions x, ys &lt;- refinements xs]<br />refinements [] = [[]]<br /><br />&gt; refinements [1,3]<br />[[1,1,1,1],[1,1,2],[1,2,1],[1,3]]<br /></pre><br />Then the fundamental basis can be expressed in terms of the monomial basis, as follows:<br /><br /><pre>qsymFtoM :: (Eq k, Num k) =&gt; Vect k QSymF -&gt; Vect k QSymM<br />qsymFtoM = linear qsymFtoM' where<br />    qsymFtoM' (QSymF alpha) = sumv [return (QSymM beta) | beta &lt;- refinements alpha]<br /></pre><br />For example:<br /><br /><pre>&gt; qsymFtoM (qsymF [1,3])<br />M [1,1,1,1]+M [1,1,2]+M [1,2,1]+M [1,3]</pre><br />Conversely, elements of the monomial basis can be expressed as sums of elements of the fundamental basis, as follows:<br /><br /><pre>qsymMtoF :: (Eq k, Num k) =&gt; Vect k QSymM -&gt; Vect k QSymF<br />qsymMtoF = linear qsymMtoF' where<br />    qsymMtoF' (QSymM alpha) = sumv [(-1) ^ (length beta - length alpha) *&gt; return (QSymF beta) | beta &lt;- refinements alpha]<br /><br />&gt; qsymMtoF (qsymM [1,3])<br />F [1,1,1,1]-F [1,1,2]-F [1,2,1]+F [1,3]<br /></pre><br />So we can input elements of QSym using either the monomial or fundamental basis (using the qsymM and qsymF constructors). Shortly, we'll define Algebra and Coalgebra instances for QSymF, so that we can perform arithmetic in either basis. Finally, we can output in either basis, by using the conversion functions if necessary.<br /><br />How do we know that QSymF is a basis? How do we know that its elements are linearly independent, and span the space? In Vect Q QSymF, this is guaranteed by the free vector space construction. But what the question is really asking is, how do we know that the image of the \"basis\" QSymF in Vect Q QSymM (via qsymFtoM) is a basis?<br /><br />Well, it will be linearly independent if qsymFtoM is injective, and spanning if qsymFtoM is surjective. So we require that qsymFtoM is bijective. This follows if we can show that qsymFtoM and qsymMtoF are mutual inverses. Well, quickCheck seems to think so:<br /><br /><pre>&gt; quickCheck (\\x -&gt; x == (qsymMtoF . qsymFtoM) x)<br />+++ OK, passed 100 tests.<br />&gt; quickCheck (\\x -&gt; x == (qsymFtoM . qsymMtoF) x)<br />+++ OK, passed 100 tests.<br /></pre><br />(For the cognoscenti: The reason this works is that qsymMtoF' is the Mobius inversion of qsymFtoM' in the poset of compositions ordered by refinement.)<br /><br />Okay, so we have an alternative basis for QSym as a vector space. What do the multiplication and comultiplication look like relative to this new basis? Now, it is possible to define the algebra, coalgebra and Hopf algebra structures explicitly in terms of the QSymF basis, but I'm going to cheat, and just round-trip via QSymM:<br /><br /><pre>instance (Eq k, Num k) =&gt; Algebra k QSymF where<br />    unit x = x *&gt; return (QSymF [])<br />    mult = qsymMtoF . mult . (qsymFtoM `tf` qsymFtoM)<br /><br />instance (Eq k, Num k) =&gt; Coalgebra k QSymF where<br />    counit = unwrap . linear counit' where counit' (QSymF xs) = if null xs then 1 else 0<br />    comult = (qsymMtoF `tf` qsymMtoF) . comult . qsymFtoM<br /><br />instance (Eq k, Num k) =&gt; Bialgebra k QSymF where {}<br /><br />instance (Eq k, Num k) =&gt; HopfAlgebra k QSymF where<br />    antipode = qsymMtoF . antipode . qsymFtoM<br /></pre><br />(Recall that `tf` is the tensor product of linear maps.)<br /><br />It's kind of obvious from the definitions that the algebra, coalgebra and Hopf algebra laws will be satisfied. (It's obvious because we already know that these laws are satisfied in Vect Q QSymM, and the definitions for Vect Q QSymF are just the same, but under the change of basis.) However, for additional confidence, we can for example:<br /><br /><pre>&gt; quickCheck (prop_Algebra :: (Q, Vect Q QSymF, Vect Q QSymF, Vect Q QSymF) -&gt; Bool)<br />+++ OK, passed 100 tests.<br /></pre><br />Okay, so the reason for introducing the fundamental basis for QSym is that there is a Hopf algebra morphism from SSym to QSym, which is easiest to express in terms of their respective fundamental bases. Specifically, we can define a map between the bases, SSymF -&gt; QSymF, which lifts (using fmap, ie using the free vector space functor) to a map between the Hopf algebras.<br /><br />Given a permutation p of [1..n], a descent is an index i such that p(i) &gt; p(i+1). For example, the permutation [2,3,5,1,6,4] has descents from the 5 to the 1 and from the 6 to the 4. We can think of the descents as splitting the permutation into segments, each of which is strictly ascending. Thus 235164 splits into 235-16-4. If we count the lengths of these segments, we get a composition, which I call the descent composition. Here's the code:<br /><br /><pre>descentComposition [] = []<br />descentComposition xs = descComp 0 xs where<br />    descComp c (x1:x2:xs) = if x1 &lt; x2 then descComp (c+1) (x2:xs) else (c+1) : descComp 0 (x2:xs)<br />    descComp c [x] = [c+1]<br /><br />&gt; descentComposition [2,3,5,1,6,4]<br />[3,2,1]<br /></pre><br />We can lift this map between the bases to a map between the Hopf algebras.<br /><br /><pre>descentMap :: (Eq k, Num k) =&gt; Vect k SSymF -&gt; Vect k QSymF<br />descentMap = nf . fmap (\\(SSymF xs) -&gt; QSymF (descentComposition xs))<br /></pre><br />Now, it turns out that this is a Hopf algebra morphism. That is, it commutes with the algebra, coalgebra and Hopf algebra structures.<br /><br /><pre>&gt; quickCheck (prop_AlgebraMorphism descentMap)<br />+++ OK, passed 100 tests.<br />&gt; quickCheck (prop_CoalgebraMorphism descentMap)<br />+++ OK, passed 100 tests.<br />&gt; quickCheck (prop_HopfAlgebraMorphism descentMap)<br />+++ OK, passed 100 tests.<br /></pre><br />Why does this work? Well, let's work through an example, for comultiplication. (In the following I omit brackets and commas for brevity.) If we do the descent map before the comultiplication, we get:<br /><br /><pre>2341 (SSymF)<br />-&gt; (descentMap)<br />31 (QSymF)<br />-&gt; (qsymFtoM - sum of refinements)<br />31+211+121+1111 (QSymM)<br />-&gt; (comult - deconcatenations)<br />[]⊗31 + 3⊗1 + 31⊗[] +<br />[]⊗211 + 2⊗11 + 21⊗1 + 211⊗[] +<br />[]⊗121 + 1⊗21 + 12⊗1 + 121⊗[] +<br />[]⊗1111 + 1⊗111 + 11⊗11 + 111⊗1 + 1111⊗[]<br />(QSymM⊗QSymM)<br /></pre><br />(We convert to QSymM at the second step because it's in QSymM that we know how to comultiply. It is possible to give an explicit expression for the comultiplication in terms of the QSymF basis, but I wanted to keep things simple.)<br /><br />Conversely, if we do the comultiplication before the descent map:<br /><br /><pre>2341 (SSymF)<br />-&gt; (comult - flattened deconcatenations)<br />[]⊗2341 + 1⊗231 + 12⊗21 + 123⊗1 + 2341⊗[] (SSymF⊗SSymF)<br />-&gt; (descentMap⊗descentMap)<br />[]⊗31 + 1⊗21 + 2⊗11 + 3⊗1 + 31⊗[] (QSymF⊗QSymF)<br />-&gt; (qsymFtoM⊗qsymFtoM - sum of refinements)<br />[]⊗(31+211+121+1111) +<br />1⊗(21+111) +<br />(2+11)⊗11 +<br />(3+21+12+111)⊗1 +<br />(31+211+121+1111)⊗[]<br />(QSymM⊗QSymM)<br /></pre><br />The result comes out the same, whichever way round you go, as required. But why does it work? Well, you can imagine the inventor going through the following thought process:<br /><br /><ul><li>Comult in SSymF is by flattened deconcatenations (of permutations), and in QSymM is by deconcatenations (of compositions). If we split a permutation at a descent, the descents on either side are preserved. So we could try sending a permutation in SSymF to its descent composition in QSymM. For example, ssymF [2,3,4,1] -&gt; qsymM [3,1], which deconcatenates to [2,3,4]⊗[1] -&gt; [3]⊗[1].</li><li>However, a deconcatenation in SSymF might split a permutation partway through an ascending segment. For example, [2,3,4,1] -&gt; [2,3]⊗[4,1] (which flattens to [1,2]⊗[2,1]). Taking this to descent compositions would give [2]⊗[1,1]. This is not a deconcatenation of qsymM [3,1] - it is however a deconcatenation of [2,1,1], which is a one-step refinement of [3,1].</li><li>So we could try sending a permutation in SSymF to its descent composition in QSymM, and its one-step refinements. For example, ssymF [2,3,4,1] -&gt; qsymM [3,1] + qsymM [2,1,1] + qsymM [1,2,1].</li><li>But now that means that [2,3]⊗[4,1] (flattening omitted for clarity) -&gt; [2]⊗[1,1] + [1,1]⊗[1,1]. The second term is a deconcatenation of [1,1,1,1], a two-step refinement of [3,1].</li><li>It's pretty obvious that the way to make it all work out is to send a permutation in SSymF to its descent composition in QSymM, and all its proper refinements.</li><li>But this sum, of a composition and all its refinements (in QSymM) is just exactly how we defined the QSymF basis.</li></ul><br /><br />Exercise: Explain why descentMap commutes with mult.<br /><br />Exercise: Last time we looked at a descendingTreeMap : SSym -&gt; YSym. Show that the descentMap : SSym -&gt; QSym factors through the descendingTreeMap, and describe the other factor f : YSym -&gt; QSym.<br /><br /><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/5195188167565410449-3305778356435883146?l=haskellformaths.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>") (pubDate nil "Sun, 10 Jun 2012 17:42:38 +0000") (author nil "noreply@blogger.com (DavidA)"))) ("Twan van Laarhoven: Benchmark: unpacked values in containers" "<p>Inspired by <a href=\"http://www.haskell.org/pipermail/glasgow-haskell-users/2012-March/022079.html\">a discussion on the ghc mailing list</a>, I wondered how much performance can be gained by specializing and unboxing certain data types.\nIn particular, I looked at <tt class=\"complex\"><span class=\"conid\">Data.Map</span></tt>.\nSuppose that you have a map from ints to ints.\nFirst of all, you should be using <tt class=\"complex\"><span class=\"conid\">Data.IntMap</span></tt> instead, but that is besides the point.\n</p><p>If you know that the keys and values are always strict integers, then the data type could be specialized from\n</p><pre class=\"haskell\"><span class=\"keyword\">data</span> <span class=\"conid\">Map</span> <span class=\"varid\">k</span> <span class=\"varid\">a</span>\n<span class=\"keyglyph\">=</span> <span class=\"conid\">Bin</span> <span class=\"pragma\">{-# UNPACK #-}</span> <span class=\"varop\">!</span><span class=\"conid\">Size</span> <span class=\"varop\">!</span><span class=\"varid\">k</span> <span class=\"varid\">a</span> <span class=\"varop\">!</span>(<span class=\"conid\">Map</span> <span class=\"varid\">k</span> <span class=\"varid\">a</span>) <span class=\"varop\">!</span>(<span class=\"conid\">Map</span> <span class=\"varid\">k</span> <span class=\"varid\">a</span>)\n<span class=\"keyglyph\">|</span> <span class=\"conid\">Tip</span>\n</pre><p>to\n</p><pre class=\"haskell\"><span class=\"keyword\">data</span> <span class=\"conid\">MapIntInt</span>\n<span class=\"keyglyph\">=</span> <span class=\"conid\">Tip</span>\n<span class=\"keyglyph\">|</span> <span class=\"conid\">Bin</span> <span class=\"pragma\">{-# UNPACK #-}</span> <span class=\"varop\">!</span><span class=\"conid\">Size</span> <span class=\"pragma\">{-# UNPACK #-}</span> <span class=\"varop\">!</span><span class=\"conid\">Int</span> <span class=\"pragma\">{-# UNPACK #-}</span> <span class=\"varop\">!</span><span class=\"conid\">Int</span>\n<span class=\"varop\">!</span>(<span class=\"conid\">MapIntInt</span>) <span class=\"varop\">!</span>(<span class=\"conid\">MapIntInt</span>)\n</pre><p>It would be great if this could be generated automatically by the compiler. But as was pointed out, that is really hard to do, because the size of the constructors would change, depending on the type arguments. So generic functions become impossible. It would also require multiple different info tables for the garbage collector, among other problems.\n</p><p>So, it's probably easier to do this specialization manually.\nI was thinking of using template haskell, in combination with type families. This would allow you to write something like\n</p><pre class=\"haskell\"><span class=\"varid\">deriveSpecializedUnboxedType</span> <span class=\"listcon\">[</span><span class=\"varid\">d</span><span class=\"keyglyph\">|</span><span class=\"keyword\">type</span> <span class=\"conid\">UnboxedMapIntInt</span> <span class=\"keyglyph\">=</span> <span class=\"conid\">Map</span> <span class=\"varop\">!</span><span class=\"conid\">Int</span> <span class=\"varop\">!</span><span class=\"conid\">Int</span> <span class=\"varop\">|</span><span class=\"listcon\">]</span>\n</pre><p>but before going there, let's first see whether this is worth the effort at all.\n</p><p>So, I did the specialization by hand for <tt class=\"complex\"><span class=\"conid\">Map</span> <span class=\"conid\">Int</span> <span class=\"conid\">Int</span></tt>, and ran the containers benchmarks.\nHere is a representative part of the results,\n<br /><a href=\"http://twanvl.nl/files/bench-MapIntInt.html\"><img src=\"http://twanvl.nl/image/benchmark-MapIntInt.png\" style=\"margin: .1em 1em;\" /></a><br />\nclick for full the criterion report. The horribly hacky code is available <a href=\"https://github.com/twanvl/containers/blob/specialize/benchmarks/MapIntInt.hs\">on github</a>.\n</p><p>In this graph\n</p><ul><li> generic = generic <tt class=\"complex\"><span class=\"conid\">Map</span> <span class=\"conid\">Int</span> <span class=\"conid\">Int</span></tt>.</li>\n<li> unboxed = <tt><span class=\"conid\">Map</span></tt> with both key and value specialized to strict and unpacked <tt><span class=\"conid\">Int</span></tt>.</li>\n<li> gintmap = value generic <tt class=\"complex\"><span class=\"conid\">IntMap</span> <span class=\"conid\">Int</span></tt></li>\n<li> uintmap = <tt><span class=\"conid\">IntMap</span></tt> with values specialized to unpacked <tt><span class=\"conid\">Int</span></tt>.</li>\n</ul><p>As you can see, specializing and unboxing gives a modest performance improvement. There is probably also an improvement in memory usage, but this benchmark doesn't directly measure that.\nSwitching to a better data structure, i.e. patricia tries instead of balanced trees helps a lot more for some benchmarks, such as <tt><span class=\"varid\">delete</span></tt>, but very little for others such as <tt><span class=\"varid\">map</span></tt>.\n</p><p>Overall, it seems like specialization can definitely be worth it; in some cases improving performance by 40%. And it never has a negative impact, at least in this benchmark. Real life might be different though, especially if there are also Maps with other types of keys and values around.\n</p><p>Note also that this benchmark was compiled for a 32-bit architecture. On 64-bit, pointers and hence boxed values have more overhead.\n</p>" "http://twanvl.nl/blog/haskell/benchmarking-unpacked-containers" (20434 30116) new 53 nil nil ((title nil "Twan van Laarhoven: Benchmark: unpacked values in containers") (guid ((isPermaLink . "true")) "http://twanvl.nl/blog/haskell/benchmarking-unpacked-containers") (link nil "http://twanvl.nl/blog/haskell/benchmarking-unpacked-containers") (description nil "<p>Inspired by <a href=\"http://www.haskell.org/pipermail/glasgow-haskell-users/2012-March/022079.html\">a discussion on the ghc mailing list</a>, I wondered how much performance can be gained by specializing and unboxing certain data types.\nIn particular, I looked at <tt class=\"complex\"><span class=\"conid\">Data.Map</span></tt>.\nSuppose that you have a map from ints to ints.\nFirst of all, you should be using <tt class=\"complex\"><span class=\"conid\">Data.IntMap</span></tt> instead, but that is besides the point.\n</p><p>If you know that the keys and values are always strict integers, then the data type could be specialized from\n</p><pre class=\"haskell\"><span class=\"keyword\">data</span> <span class=\"conid\">Map</span> <span class=\"varid\">k</span> <span class=\"varid\">a</span>\n    <span class=\"keyglyph\">=</span> <span class=\"conid\">Bin</span> <span class=\"pragma\">{-# UNPACK #-}</span> <span class=\"varop\">!</span><span class=\"conid\">Size</span> <span class=\"varop\">!</span><span class=\"varid\">k</span> <span class=\"varid\">a</span> <span class=\"varop\">!</span>(<span class=\"conid\">Map</span> <span class=\"varid\">k</span> <span class=\"varid\">a</span>) <span class=\"varop\">!</span>(<span class=\"conid\">Map</span> <span class=\"varid\">k</span> <span class=\"varid\">a</span>)\n    <span class=\"keyglyph\">|</span> <span class=\"conid\">Tip</span>\n</pre><p>to\n</p><pre class=\"haskell\"><span class=\"keyword\">data</span> <span class=\"conid\">MapIntInt</span>\n    <span class=\"keyglyph\">=</span> <span class=\"conid\">Tip</span>\n    <span class=\"keyglyph\">|</span> <span class=\"conid\">Bin</span> <span class=\"pragma\">{-# UNPACK #-}</span> <span class=\"varop\">!</span><span class=\"conid\">Size</span> <span class=\"pragma\">{-# UNPACK #-}</span> <span class=\"varop\">!</span><span class=\"conid\">Int</span> <span class=\"pragma\">{-# UNPACK #-}</span> <span class=\"varop\">!</span><span class=\"conid\">Int</span>\n          <span class=\"varop\">!</span>(<span class=\"conid\">MapIntInt</span>) <span class=\"varop\">!</span>(<span class=\"conid\">MapIntInt</span>)\n</pre><p>It would be great if this could be generated automatically by the compiler. But as was pointed out, that is really hard to do, because the size of the constructors would change, depending on the type arguments. So generic functions become impossible. It would also require multiple different info tables for the garbage collector, among other problems.\n</p><p>So, it's probably easier to do this specialization manually.\nI was thinking of using template haskell, in combination with type families. This would allow you to write something like \n</p><pre class=\"haskell\"><span class=\"varid\">deriveSpecializedUnboxedType</span> <span class=\"listcon\">[</span><span class=\"varid\">d</span><span class=\"keyglyph\">|</span><span class=\"keyword\">type</span> <span class=\"conid\">UnboxedMapIntInt</span> <span class=\"keyglyph\">=</span> <span class=\"conid\">Map</span> <span class=\"varop\">!</span><span class=\"conid\">Int</span> <span class=\"varop\">!</span><span class=\"conid\">Int</span> <span class=\"varop\">|</span><span class=\"listcon\">]</span>\n</pre><p>but before going there, let's first see whether this is worth the effort at all.\n</p><p>So, I did the specialization by hand for <tt class=\"complex\"><span class=\"conid\">Map</span> <span class=\"conid\">Int</span> <span class=\"conid\">Int</span></tt>, and ran the containers benchmarks.\nHere is a representative part of the results,\n <br /><a href=\"http://twanvl.nl/files/bench-MapIntInt.html\"><img src=\"http://twanvl.nl/image/benchmark-MapIntInt.png\" style=\"margin: .1em 1em;\" /></a><br />\nclick for full the criterion report. The horribly hacky code is available <a href=\"https://github.com/twanvl/containers/blob/specialize/benchmarks/MapIntInt.hs\">on github</a>.\n</p><p>In this graph\n</p><ul><li> generic = generic <tt class=\"complex\"><span class=\"conid\">Map</span> <span class=\"conid\">Int</span> <span class=\"conid\">Int</span></tt>.</li>\n<li> unboxed = <tt><span class=\"conid\">Map</span></tt> with both key and value specialized to strict and unpacked <tt><span class=\"conid\">Int</span></tt>.</li>\n<li> gintmap = value generic <tt class=\"complex\"><span class=\"conid\">IntMap</span> <span class=\"conid\">Int</span></tt></li>\n<li> uintmap = <tt><span class=\"conid\">IntMap</span></tt> with values specialized to unpacked <tt><span class=\"conid\">Int</span></tt>.</li>\n</ul><p>As you can see, specializing and unboxing gives a modest performance improvement. There is probably also an improvement in memory usage, but this benchmark doesn't directly measure that.\nSwitching to a better data structure, i.e. patricia tries instead of balanced trees helps a lot more for some benchmarks, such as <tt><span class=\"varid\">delete</span></tt>, but very little for others such as <tt><span class=\"varid\">map</span></tt>.\n</p><p>Overall, it seems like specialization can definitely be worth it; in some cases improving performance by 40%. And it never has a negative impact, at least in this benchmark. Real life might be different though, especially if there are also Maps with other types of keys and values around.\n</p><p>Note also that this benchmark was compiled for a 32-bit architecture. On 64-bit, pointers and hence boxed values have more overhead.\n</p>") (pubDate nil "Fri, 08 Jun 2012 21:59:00 +0000"))) ("Computer Systems Design Laboratory at the University of Kansas: The Kansas University Rewrite Engine (KURE)" "<p>The <a href=\"http://www.ittc.ku.edu/csdl/fpg/Tools/KURE\">Kansas University Rewrite Engine (KURE)</a> is a Haskell-hosted DSL for strategic programming. We`ve just released the third version of KURE, which adds lenses for navigation and a variant set of combinators to make change detection easier.</p>\n<p>This post just overviews the basics, and gives a simple example of usage.</p>\n<h2 id=\"kure-basics\">KURE Basics</h2>\n<p>KURE is based around the following data type:</p>\n<pre><code>data Translate c m a b = Translate {apply :: c -&gt; a -&gt; m b}\ntranslate :: (c -&gt; a -&gt; m b) -&gt; Translate c m a b\ntranslate = Translate</code></pre>\n<p>There`s a lot of type parameters, but the essential idea is that Translate represents a transformation that can be applied to a value of type <code>a</code> in a context <code>c</code>, and produces a value of type <code>b</code> in the monad <code>m</code>. Actually, we require <code>m</code> to be a <code>MonadPlus</code>, as this allows us to encode notions of success and failure, which are integral to strategic programming. Specifically, <code>mzero</code> represents failure and <code>mplus</code> is a “catch” for both <code>mzero</code> and <code>fail</code>. To avoid clutter we`ll omit the class constraints, but just imagine that wherever you see an <code>m</code> there`s a <code>(MonadPlus m =&gt; ...)</code> to go with it.</p>\n<p>We also define a synonym for the special case when the result and argument type coincide:</p>\n<pre><code>type Rewrite c m a = Translate c m a a</code></pre>\n<p>Translate itself forms a monad (and an arrow, and a bunch of other structures besides), which provides us with a lot of combinators for free. Two key definitions are composition and bind:</p>\n<pre><code>(&gt;&gt;&gt;) :: Translate c m a b -&gt; Translate c m b d -&gt; Translate c m a d\nt1 &gt;&gt;&gt; t2 = translate $ \\ c -&gt; apply t1 c &gt;=&gt; apply t2 c\n(&gt;&gt;=) :: Translate c m a b -&gt; (b -&gt; Translate c m a d) -&gt; Translate c m a d\nt &gt;&gt;= f = translate $ \\ c a -&gt; do b &lt;- apply t c a\napply (f b) c a</code></pre>\n<p>Observe the difference: composition takes the result of the first translation as the argument to the second translation, whereas bind uses the result to <em>determine</em> the second translation, but then applies that second translation to the original argument.</p>\n<p>Another useful combinator is <code>&lt;+&gt;</code> (from the <code>ArrowPlus</code> class), which acts as a catch for <code>Translate</code>:</p>\n<pre><code>(&lt;+&gt;) :: Translate c m a b -&gt; Translate c m a b -&gt; Translate c m a b\nt1 &lt;+&gt; t2 = translate $ \\ c a -&gt; apply t1 c a `mplus` apply t2 c a</code></pre>\n<p>We can now write strategic programming code, such as the classic <code>try</code> combinator:</p>\n<pre><code>tryR :: Rewrite c m a -&gt; Rewrite c m a\ntryR r = r &lt;+&gt; idR</code></pre>\n<p>Where <code>idR</code> is the identity rewrite:</p>\n<pre><code>idR : Rewrite c m a\nidR = translate $ \\ _ -&gt; return</code></pre>\n<p>Finally, one combinator new to this version of KURE is sequential composition of rewrites that allows one rewrite to fail:</p>\n<pre><code>(&gt;+&gt;) :: Rewrite c m a -&gt; Rewrite c m a -&gt; Rewrite c m a</code></pre>\n<h2 id=\"example-arithmetic-expressions-with-fibonacci\">Example: Arithmetic Expressions with Fibonacci</h2>\n<p>Now let`s consider an example. Take a data type of arithmetic expressions augmented with a Fibonacci primitive:</p>\n<pre><code>data Arith = Lit Int | Add Arith Arith | Sub Arith Arith | Fib Arith</code></pre>\n<p>To keep things simple, we`ll work with an empty context, and use <code>Maybe</code> as our <code>MonadPlus</code>:</p>\n<pre><code>type RewriteA = Rewrite () Maybe Arith</code></pre>\n<p>Let`s start with some rewrites that perform basic arithmetic simplification:</p>\n<pre><code>addLitR :: RewriteA\naddLitR = do Add (Lit m) (Lit n) &lt;- idR\nreturn (Lit (m + n))\nsubLitR :: RewriteA\nsubLitR = do Sub (Lit m) (Lit n) &lt;- idR\nreturn (Lit (m - n))</code></pre>\n<p>We`re exploiting the fact that <code>Translate</code> is a monad to use do-notation – something we have found extremely convenient. If the pattern match fails, this will just trigger the fail method of the monad, which we can then catch as desired.</p>\n<p>Using <code>&gt;+&gt;</code>, we can combine these two rewrites into a single rewrite for arithmetic simplification:</p>\n<pre><code>arithR :: RewriteA\narithR = addLitR &gt;+&gt; subLitR</code></pre>\n<p>Next a more interesting rewrite, unfolding the definition of Fibonacci:</p>\n<pre><code>fibLitR :: RewriteA\nfibLitR = do Fib (Lit n) &lt;- idR\ncase n of\n0  -&gt;  return (Lit 0)\n1  -&gt;  return (Lit 1)\n_  -&gt;  return (Add (Fib (Sub (Lit n) (Lit 1)))\n(Fib (Sub (Lit n) (Lit 2)))\n)</code></pre>\n<h2 id=\"tree-traversals\">Tree Traversals</h2>\n<p>Thus far, we`ve only discussed rewrites that apply to the entire data structure we`re working with. But a key feature of KURE (and strategic programming) is the ability to traverse a structure applying rewrites to specific locations. For example, the <code>anyR</code> combinator applies a rewrite to each <em>immediate child</em> of a node, succeeding if any of those rewrites succeed:</p>\n<pre><code>anyR :: RewriteA -&gt; RewriteA</code></pre>\n<p>At first glance this might sound simple, but there are a number of issues. Most notably, what if the children have distinct types from each other and their parent? How should such a combinator be typed? This isn`t an issue in this simple Fibonacci example, as there is only one type (<code>Arith</code>), but in general you could have an AST with multiple mutually recursive non-terminals. KURE solves this by constructing a sum data type of all non-terminals in the AST, and having traversal combinators operate over this data type (using Associated Types to specify the sum type for each non-terminal). This is the most significant feature of KURE, but it`d take too long to explain the details here. You can read about it in either of the following papers:</p>\n<ul>\n<li><a href=\"http://www.ittc.ku.edu/csdl/fpg/node/16\">A Haskell Hosted DSL for Writing Transformation Systems</a></li>\n<li><a href=\"http://ittc.ku.edu/csdl/fpg/node/126\">Introducing the HERMIT Equational Reasoning Framework</a></li>\n</ul>\n<p>Using the <code>anyR</code> combinator (amongst others), KURE defines various traversal strategies (we just give the specialised types here):</p>\n<pre><code>anybuR :: RewriteA -&gt; RewriteA\nanybuR r = anyR (anybuR r) &gt;+&gt; r\ninnermostR :: RewriteA -&gt; RewriteA\ninnermostR r = anybuR (r &gt;&gt;&gt; tryR (innermostR r))</code></pre>\n<p><code>anybuR</code> traverses a tree in a bottom-up manner, applying the rewrite to every node, whereas <code>innermostR</code> performs a fixed-point traversal, continuing until no more rewrites can be successfully applied. For example, we can define an evaluator for <code>Arith</code> using this strategy:</p>\n<pre><code>evalR :: RewriteA\nevalR = innermostR (arithR &gt;+&gt; fibLitR)</code></pre>\n<h2 id=\"release\">Release</h2>\n<p>KURE 2.0.0 is now available <a href=\"http://hackage.haskell.org/package/kure-2.0.0\">on Hackage</a>.</p>\n<p>You can find this Fibonacci example, and several others, bundled with the source package. For a non-trivial example, KURE is being used as the underlying rewrite engine for the HERMIT tool. HERMIT hasn`t been released yet, but you can read about it in this paper:</p>\n<p><a href=\"http://ittc.ku.edu/csdl/fpg/node/126\">Introducing the HERMIT Equational Reasoning Framework</a></p>\n<p>The paper also describes how KURE uses lenses.</p>" "http://www.ittc.ku.edu/csdlblog/?p=124" (20434 20501) new 54 nil nil ((title nil "Computer Systems Design Laboratory at the University of Kansas: The Kansas University Rewrite Engine (KURE)") (guid ((isPermaLink . "true")) "http://www.ittc.ku.edu/csdlblog/?p=124") (link nil "http://www.ittc.ku.edu/csdlblog/?p=124") (description nil "<p>The <a href=\"http://www.ittc.ku.edu/csdl/fpg/Tools/KURE\">Kansas University Rewrite Engine (KURE)</a> is a Haskell-hosted DSL for strategic programming. We`ve just released the third version of KURE, which adds lenses for navigation and a variant set of combinators to make change detection easier.</p>\n<p>This post just overviews the basics, and gives a simple example of usage.</p>\n<h2 id=\"kure-basics\">KURE Basics</h2>\n<p>KURE is based around the following data type:</p>\n<pre><code>data Translate c m a b = Translate {apply :: c -&gt; a -&gt; m b}\n\ntranslate :: (c -&gt; a -&gt; m b) -&gt; Translate c m a b\ntranslate = Translate</code></pre>\n<p>There`s a lot of type parameters, but the essential idea is that Translate represents a transformation that can be applied to a value of type <code>a</code> in a context <code>c</code>, and produces a value of type <code>b</code> in the monad <code>m</code>. Actually, we require <code>m</code> to be a <code>MonadPlus</code>, as this allows us to encode notions of success and failure, which are integral to strategic programming. Specifically, <code>mzero</code> represents failure and <code>mplus</code> is a “catch” for both <code>mzero</code> and <code>fail</code>. To avoid clutter we`ll omit the class constraints, but just imagine that wherever you see an <code>m</code> there`s a <code>(MonadPlus m =&gt; ...)</code> to go with it.</p>\n<p>We also define a synonym for the special case when the result and argument type coincide:</p>\n<pre><code>type Rewrite c m a = Translate c m a a</code></pre>\n<p>Translate itself forms a monad (and an arrow, and a bunch of other structures besides), which provides us with a lot of combinators for free. Two key definitions are composition and bind:</p>\n<pre><code>(&gt;&gt;&gt;) :: Translate c m a b -&gt; Translate c m b d -&gt; Translate c m a d\nt1 &gt;&gt;&gt; t2 = translate $ \\ c -&gt; apply t1 c &gt;=&gt; apply t2 c\n\n(&gt;&gt;=) :: Translate c m a b -&gt; (b -&gt; Translate c m a d) -&gt; Translate c m a d\nt &gt;&gt;= f = translate $ \\ c a -&gt; do b &lt;- apply t c a\n                                  apply (f b) c a</code></pre>\n<p>Observe the difference: composition takes the result of the first translation as the argument to the second translation, whereas bind uses the result to <em>determine</em> the second translation, but then applies that second translation to the original argument.</p>\n<p>Another useful combinator is <code>&lt;+&gt;</code> (from the <code>ArrowPlus</code> class), which acts as a catch for <code>Translate</code>:</p>\n<pre><code>(&lt;+&gt;) :: Translate c m a b -&gt; Translate c m a b -&gt; Translate c m a b\nt1 &lt;+&gt; t2 = translate $ \\ c a -&gt; apply t1 c a `mplus` apply t2 c a</code></pre>\n<p>We can now write strategic programming code, such as the classic <code>try</code> combinator:</p>\n<pre><code>tryR :: Rewrite c m a -&gt; Rewrite c m a\ntryR r = r &lt;+&gt; idR</code></pre>\n<p>Where <code>idR</code> is the identity rewrite:</p>\n<pre><code>idR : Rewrite c m a\nidR = translate $ \\ _ -&gt; return</code></pre>\n<p>Finally, one combinator new to this version of KURE is sequential composition of rewrites that allows one rewrite to fail:</p>\n<pre><code>(&gt;+&gt;) :: Rewrite c m a -&gt; Rewrite c m a -&gt; Rewrite c m a</code></pre>\n<h2 id=\"example-arithmetic-expressions-with-fibonacci\">Example: Arithmetic Expressions with Fibonacci</h2>\n<p>Now let`s consider an example. Take a data type of arithmetic expressions augmented with a Fibonacci primitive:</p>\n<pre><code>data Arith = Lit Int | Add Arith Arith | Sub Arith Arith | Fib Arith</code></pre>\n<p>To keep things simple, we`ll work with an empty context, and use <code>Maybe</code> as our <code>MonadPlus</code>:</p>\n<pre><code>type RewriteA = Rewrite () Maybe Arith</code></pre>\n<p>Let`s start with some rewrites that perform basic arithmetic simplification:</p>\n<pre><code>addLitR :: RewriteA\naddLitR = do Add (Lit m) (Lit n) &lt;- idR\n             return (Lit (m + n))\n\nsubLitR :: RewriteA\nsubLitR = do Sub (Lit m) (Lit n) &lt;- idR\n             return (Lit (m - n))</code></pre>\n<p>We`re exploiting the fact that <code>Translate</code> is a monad to use do-notation – something we have found extremely convenient. If the pattern match fails, this will just trigger the fail method of the monad, which we can then catch as desired.</p>\n<p>Using <code>&gt;+&gt;</code>, we can combine these two rewrites into a single rewrite for arithmetic simplification:</p>\n<pre><code>arithR :: RewriteA\narithR = addLitR &gt;+&gt; subLitR</code></pre>\n<p>Next a more interesting rewrite, unfolding the definition of Fibonacci:</p>\n<pre><code>fibLitR :: RewriteA\nfibLitR = do Fib (Lit n) &lt;- idR\n             case n of\n               0  -&gt;  return (Lit 0)\n               1  -&gt;  return (Lit 1)\n               _  -&gt;  return (Add (Fib (Sub (Lit n) (Lit 1)))\n                                  (Fib (Sub (Lit n) (Lit 2)))\n                             )</code></pre>\n<h2 id=\"tree-traversals\">Tree Traversals</h2>\n<p>Thus far, we`ve only discussed rewrites that apply to the entire data structure we`re working with. But a key feature of KURE (and strategic programming) is the ability to traverse a structure applying rewrites to specific locations. For example, the <code>anyR</code> combinator applies a rewrite to each <em>immediate child</em> of a node, succeeding if any of those rewrites succeed:</p>\n<pre><code>anyR :: RewriteA -&gt; RewriteA</code></pre>\n<p>At first glance this might sound simple, but there are a number of issues. Most notably, what if the children have distinct types from each other and their parent? How should such a combinator be typed? This isn`t an issue in this simple Fibonacci example, as there is only one type (<code>Arith</code>), but in general you could have an AST with multiple mutually recursive non-terminals. KURE solves this by constructing a sum data type of all non-terminals in the AST, and having traversal combinators operate over this data type (using Associated Types to specify the sum type for each non-terminal). This is the most significant feature of KURE, but it`d take too long to explain the details here. You can read about it in either of the following papers:</p>\n<ul>\n<li><a href=\"http://www.ittc.ku.edu/csdl/fpg/node/16\">A Haskell Hosted DSL for Writing Transformation Systems</a></li>\n<li><a href=\"http://ittc.ku.edu/csdl/fpg/node/126\">Introducing the HERMIT Equational Reasoning Framework</a></li>\n</ul>\n<p>Using the <code>anyR</code> combinator (amongst others), KURE defines various traversal strategies (we just give the specialised types here):</p>\n<pre><code>anybuR :: RewriteA -&gt; RewriteA\nanybuR r = anyR (anybuR r) &gt;+&gt; r\n\ninnermostR :: RewriteA -&gt; RewriteA\ninnermostR r = anybuR (r &gt;&gt;&gt; tryR (innermostR r))</code></pre>\n<p><code>anybuR</code> traverses a tree in a bottom-up manner, applying the rewrite to every node, whereas <code>innermostR</code> performs a fixed-point traversal, continuing until no more rewrites can be successfully applied. For example, we can define an evaluator for <code>Arith</code> using this strategy:</p>\n<pre><code>evalR :: RewriteA\nevalR = innermostR (arithR &gt;+&gt; fibLitR)</code></pre>\n<h2 id=\"release\">Release</h2>\n<p>KURE 2.0.0 is now available <a href=\"http://hackage.haskell.org/package/kure-2.0.0\">on Hackage</a>.</p>\n<p>You can find this Fibonacci example, and several others, bundled with the source package. For a non-trivial example, KURE is being used as the underlying rewrite engine for the HERMIT tool. HERMIT hasn`t been released yet, but you can read about it in this paper:</p>\n<p><a href=\"http://ittc.ku.edu/csdl/fpg/node/126\">Introducing the HERMIT Equational Reasoning Framework</a></p>\n<p>The paper also describes how KURE uses lenses.</p>") (pubDate nil "Fri, 08 Jun 2012 19:18:45 +0000"))) ("Martin Sulzmann: Regular Expression Sub-Matching using Partial Derivatives" "Regular expression sub-matching is the problem of finding for each sub-part of a regular expression  a matching sub-string. Prior work applies Thompson and Glushkov NFA methods for the construction of the matching automata. We propose the novel use of derivatives and partial derivatives for regular expression sub-matching. Our benchmarking results show that the run-time performance is promising and that our approach can be applied in practice.  <p>Here's a link to the <a href=\"http://ww2.cs.mu.oz.au/~sulzmann/manuscript/reg-exp-partial-derivatives.pdf\">paper</a> and the <a href=\"http://code.google.com/p/xhaskell-library/\">implementation</a>. </p><p> This is the substantially revised and almost completely re-written (paper and implementation) version of our earlier <a href=\"http://sulzmann.blogspot.de/2010/04/regular-expression-matching-using.html\">draft</a>.</p><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/4642782805835050446-4284593404217447056?l=sulzmann.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>" "http://sulzmann.blogspot.com/2012/06/regular-expression-sub-matching-using.html" (20434 18445) new 55 nil nil ((title nil "Martin Sulzmann: Regular Expression Sub-Matching using Partial Derivatives") (guid ((isPermaLink . "false")) "tag:blogger.com,1999:blog-4642782805835050446.post-4284593404217447056") (link nil "http://sulzmann.blogspot.com/2012/06/regular-expression-sub-matching-using.html") (description nil "Regular expression sub-matching is the problem of finding for each sub-part of a regular expression  a matching sub-string. Prior work applies Thompson and Glushkov NFA methods for the construction of the matching automata. We propose the novel use of derivatives and partial derivatives for regular expression sub-matching. Our benchmarking results show that the run-time performance is promising and that our approach can be applied in practice.  <p>Here's a link to the <a href=\"http://ww2.cs.mu.oz.au/~sulzmann/manuscript/reg-exp-partial-derivatives.pdf\">paper</a> and the <a href=\"http://code.google.com/p/xhaskell-library/\">implementation</a>. </p><p> This is the substantially revised and almost completely re-written (paper and implementation) version of our earlier <a href=\"http://sulzmann.blogspot.de/2010/04/regular-expression-matching-using.html\">draft</a>.</p><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/4642782805835050446-4284593404217447056?l=sulzmann.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>") (pubDate nil "Fri, 08 Jun 2012 18:44:29 +0000") (author nil "noreply@blogger.com (Martin Sulzmann)"))) ("Jan Stolarek: Upgrading Haskell Platform on openSUSE" "<p style=\"text-align: justify;\">New version of <a href=\"http://hackage.haskell.org/platform/\">Haskell Platform</a> has been released just a few days ago. It ships with the latest stable version of GHC (7.4.1). <a href=\"http://www.haskell.org/ghc/docs/7.4.1/html/users_guide/release-7-4-1.html\">Here</a> you can find release notes describing changes made to the compiler. The list is long and I haven’t read all of it but among the most important changes are:</p>\n<ul style=\"text-align: justify;\">\n<li>the possibility of entering any top-level declarations in GHCi;</li>\n<li><code>Num</code> type class no longer has <code>Eq</code> and <code>Show</code> as its superclass;</li>\n<li>Data Parallel Haskell has been improved</li>\n</ul>\n<p style=\"text-align: justify;\">Three months ago I wrote about <a href=\"http://ics.p.lodz.pl/~stolarek/blog/2012/03/installing-ghc-on-opensuse-linux/\">installing Haskell Platform on openSUSE</a>. I recommended that GHC be installed from precompiled binaries and the platform be installed from sources, instead of using packages from repository. Now that the new version is out this post needs an addendum about updating the platform. If the Platform was installed from the repo using a package manager everything would be simple<sup><a title=\" Read this post, if you&amp;#8217;re wondering why I decided not to use the package repository. \" href=\"http://ics.p.lodz.pl/~stolarek/blog/2012/06/upgrading-haskell-platform-on-opensuse/#footnote_0_549\" id=\"identifier_0_549\" class=\"footnote-link footnote-identifier-link\">1</a></sup> . An update of packages would be enough, providing that they were updated by the maintainers of the repository (at the moment packages for openSUSE still contain older version of the platform). With manual installation this process is a bit more difficult.</p>\n<p style=\"text-align: justify;\">First step is to remove the old installation. I figured out that it would be good to first remove all the packages installed with cabal and then remove GHC. There’s a problem though. Cabal doesn’t have uninstallation feature. This means that each package has to be manually unregistered using ghc-pkg and then all the files belonging to that package have to be removed. After spending about 30 minutes trying to figure out why I can remove one package using</p>\n<div class=\"wp_syntax\"><div class=\"code\"><pre style=\"font-family: monospace;\" class=\"text\">ghc-pkg list | grep -v \"^/\" | sed -e \"s/[ {}]//g\" | head -n 1 | xargs ghc-pkg --force unregister</pre></div></div>\n<p style=\"text-align: justify;\">but can’t remove all the packages using</p>\n<div class=\"wp_syntax\"><div class=\"code\"><pre style=\"font-family: monospace;\" class=\"text\">ghc-pkg list | grep -v \"^/\" | sed -e \"s/[ {}]//g\" | xargs ghc-pkg --force unregister</pre></div></div>\n<p style=\"text-align: justify;\">I gave up and decided to simply remove all of GHC files. This wasn’t easy since they were scattered all over <code>/usr/local/</code><code>{bin,lib,share,doc}</code>, but in the end I managed to remove everything.</p>\n<p style=\"text-align: justify;\">I noticed that there is a lot of discussion in the community whether packages installed with cabal should go to <code>/usr/local</code> or to user’s home directory. Surprisingly to me it seems that most people follow the home directory approach. This approach doesn’t suit me completely. I have a separate home partition used only to store settings and email – which I’ve been told is a “complex partition setup” :-o  – and all the software is kept on <code>/</code> partition, with all programs not installed from the packages being placed in <code>/usr/local</code> (BTW. it would be nice to have a separate partition for that one directory). This approach certainly wouldn’t work in a multi-user environment and I guess it could be problematic if I developed many projects, each with different dependencies (<a href=\"http://corp.galois.com/blog/2010/12/20/cabal-dev-sandboxed-development-builds-for-haskell.html\">cabal-dev</a> aims to solve that problem). As a side note, it seems to me that with hundreds of packages available from Hackage and a management tool with rather limited capabilities (cabal can’t even automatically update installed packages!) Haskell community is in a place where Linux community was over ten years ago. The dependency hell, now gone from Linux, looms over Haskell world and if cabal won’t be enhanced I see this as a very huge problem hindering large Haskell projects. It seems that Yesod team is particularly concerned about this – see <a href=\"http://www.yesodweb.com/blog/2012/04/cabal-meta\">here</a> and <a href=\"http://www.yesodweb.com/blog/2012/03/cabal-nirvana\">here</a>.</p>\n<p style=\"text-align: justify;\">Anyway, I decided to place my new installation of the platform in <code>/usr/local</code>, but this time I was smarter by placing everything in a dedicated directory. Both GHC and the platform can be installed within a specific path. This is done by passing <code>--prefix=/some/path</code> to configure script. The only trick is that after installation of the platform <code>~/.cabal/config</code> file in the /root directory has to be edited to point to the directory in which installed packages are to be placed. Of course, you have to also add the /your/haskell/platform/directory/bin to the path, so that GHC executables are visible. Now, when the new platform comes out I can simply remove the directory with the platform and install the new version. I can also easily control the disk space used by the installation. This tends to be rather huge. GHC, Platform and packages required by EclipseFP use 1,8GB of disk space. I also noticed that binaries for programs written in Haskell are rather large. The biggest one I have, buildwrapper, is over 50MB. This is caused by the <a href=\"http://www.haskell.org/ghc/docs/7.4.1/html/users_guide/runtime-control.html\">inclusion of RTS (Run Time System) into the binary</a> but I wonder what else gets included (or is the RTS that large?).</p>\n<ol class=\"footnotes\"><li id=\"footnote_0_549\" class=\"footnote\"> Read <a href=\"http://ics.p.lodz.pl/~stolarek/blog/2012/03/installing-ghc-on-opensuse-linux/\">this post</a>, if you’re wondering why I decided not to use the package repository. </li></ol>" "http://ics.p.lodz.pl/~stolarek/blog/2012/06/upgrading-haskell-platform-on-opensuse/" (20431 11589) new 56 nil nil ((title nil "Jan Stolarek: Upgrading Haskell Platform on openSUSE") (guid ((isPermaLink . "false")) "http://ics.p.lodz.pl/~stolarek/blog/?p=549") (link nil "http://ics.p.lodz.pl/~stolarek/blog/2012/06/upgrading-haskell-platform-on-opensuse/") (description nil "<p style=\"text-align: justify;\">New version of <a href=\"http://hackage.haskell.org/platform/\">Haskell Platform</a> has been released just a few days ago. It ships with the latest stable version of GHC (7.4.1). <a href=\"http://www.haskell.org/ghc/docs/7.4.1/html/users_guide/release-7-4-1.html\">Here</a> you can find release notes describing changes made to the compiler. The list is long and I haven’t read all of it but among the most important changes are:</p>\n<ul style=\"text-align: justify;\">\n<li>the possibility of entering any top-level declarations in GHCi;</li>\n<li><code>Num</code> type class no longer has <code>Eq</code> and <code>Show</code> as its superclass;</li>\n<li>Data Parallel Haskell has been improved</li>\n</ul>\n<p style=\"text-align: justify;\">Three months ago I wrote about <a href=\"http://ics.p.lodz.pl/~stolarek/blog/2012/03/installing-ghc-on-opensuse-linux/\">installing Haskell Platform on openSUSE</a>. I recommended that GHC be installed from precompiled binaries and the platform be installed from sources, instead of using packages from repository. Now that the new version is out this post needs an addendum about updating the platform. If the Platform was installed from the repo using a package manager everything would be simple<sup><a title=\" Read this post, if you&amp;#8217;re wondering why I decided not to use the package repository. \" href=\"http://ics.p.lodz.pl/~stolarek/blog/2012/06/upgrading-haskell-platform-on-opensuse/#footnote_0_549\" id=\"identifier_0_549\" class=\"footnote-link footnote-identifier-link\">1</a></sup> . An update of packages would be enough, providing that they were updated by the maintainers of the repository (at the moment packages for openSUSE still contain older version of the platform). With manual installation this process is a bit more difficult.</p>\n<p style=\"text-align: justify;\">First step is to remove the old installation. I figured out that it would be good to first remove all the packages installed with cabal and then remove GHC. There’s a problem though. Cabal doesn’t have uninstallation feature. This means that each package has to be manually unregistered using ghc-pkg and then all the files belonging to that package have to be removed. After spending about 30 minutes trying to figure out why I can remove one package using</p>\n\n<div class=\"wp_syntax\"><div class=\"code\"><pre style=\"font-family: monospace;\" class=\"text\">ghc-pkg list | grep -v \"^/\" | sed -e \"s/[ {}]//g\" | head -n 1 | xargs ghc-pkg --force unregister</pre></div></div>\n\n<p style=\"text-align: justify;\">but can’t remove all the packages using</p>\n\n<div class=\"wp_syntax\"><div class=\"code\"><pre style=\"font-family: monospace;\" class=\"text\">ghc-pkg list | grep -v \"^/\" | sed -e \"s/[ {}]//g\" | xargs ghc-pkg --force unregister</pre></div></div>\n\n<p style=\"text-align: justify;\">I gave up and decided to simply remove all of GHC files. This wasn’t easy since they were scattered all over <code>/usr/local/</code><code>{bin,lib,share,doc}</code>, but in the end I managed to remove everything.</p>\n<p style=\"text-align: justify;\">I noticed that there is a lot of discussion in the community whether packages installed with cabal should go to <code>/usr/local</code> or to user’s home directory. Surprisingly to me it seems that most people follow the home directory approach. This approach doesn’t suit me completely. I have a separate home partition used only to store settings and email – which I’ve been told is a “complex partition setup” :-o  – and all the software is kept on <code>/</code> partition, with all programs not installed from the packages being placed in <code>/usr/local</code> (BTW. it would be nice to have a separate partition for that one directory). This approach certainly wouldn’t work in a multi-user environment and I guess it could be problematic if I developed many projects, each with different dependencies (<a href=\"http://corp.galois.com/blog/2010/12/20/cabal-dev-sandboxed-development-builds-for-haskell.html\">cabal-dev</a> aims to solve that problem). As a side note, it seems to me that with hundreds of packages available from Hackage and a management tool with rather limited capabilities (cabal can’t even automatically update installed packages!) Haskell community is in a place where Linux community was over ten years ago. The dependency hell, now gone from Linux, looms over Haskell world and if cabal won’t be enhanced I see this as a very huge problem hindering large Haskell projects. It seems that Yesod team is particularly concerned about this – see <a href=\"http://www.yesodweb.com/blog/2012/04/cabal-meta\">here</a> and <a href=\"http://www.yesodweb.com/blog/2012/03/cabal-nirvana\">here</a>.</p>\n<p style=\"text-align: justify;\">Anyway, I decided to place my new installation of the platform in <code>/usr/local</code>, but this time I was smarter by placing everything in a dedicated directory. Both GHC and the platform can be installed within a specific path. This is done by passing <code>--prefix=/some/path</code> to configure script. The only trick is that after installation of the platform <code>~/.cabal/config</code> file in the /root directory has to be edited to point to the directory in which installed packages are to be placed. Of course, you have to also add the /your/haskell/platform/directory/bin to the path, so that GHC executables are visible. Now, when the new platform comes out I can simply remove the directory with the platform and install the new version. I can also easily control the disk space used by the installation. This tends to be rather huge. GHC, Platform and packages required by EclipseFP use 1,8GB of disk space. I also noticed that binaries for programs written in Haskell are rather large. The biggest one I have, buildwrapper, is over 50MB. This is caused by the <a href=\"http://www.haskell.org/ghc/docs/7.4.1/html/users_guide/runtime-control.html\">inclusion of RTS (Run Time System) into the binary</a> but I wonder what else gets included (or is the RTS that large?).</p>\n<ol class=\"footnotes\"><li id=\"footnote_0_549\" class=\"footnote\"> Read <a href=\"http://ics.p.lodz.pl/~stolarek/blog/2012/03/installing-ghc-on-opensuse-linux/\">this post</a>, if you’re wondering why I decided not to use the package repository. </li></ol>") (pubDate nil "Wed, 06 Jun 2012 10:13:25 +0000"))) ("Paolo Capriotti: Continuation-based relative-time FRP" "<p>In a <a href=\"http://paolocapriotti.com/blog/2012/01/18/reinversion-of-control/\">previous post</a> I showed how it is possible to write asynchronous code in a direct style using the <code>ContT</code> monad. Here, I’ll extend the idea further and present an implementation of a very simple FRP library based on continuations.</p>\n<pre class=\"sourceCode literate haskell\"><code class=\"sourceCode haskell\"><span class=\"fu\">&gt;</span> <span class=\"ot\">{-# LANGUAGE DoRec, BangPatterns #-}</span>\n<span class=\"fu\">&gt;</span> <span class=\"kw\">import</span> <span class=\"dt\">Control.Applicative</span>\n<span class=\"fu\">&gt;</span> <span class=\"kw\">import</span> <span class=\"dt\">Control.Monad</span>\n<span class=\"fu\">&gt;</span> <span class=\"kw\">import</span> <span class=\"dt\">Control.Monad.IO.Class</span>\n<span class=\"fu\">&gt;</span> <span class=\"kw\">import</span> <span class=\"dt\">Data.IORef</span>\n<span class=\"fu\">&gt;</span> <span class=\"kw\">import</span> <span class=\"dt\">Data.Monoid</span>\n<span class=\"fu\">&gt;</span> <span class=\"kw\">import</span> <span class=\"dt\">Data.Void</span></code></pre>\n<h2 id=\"monadic-events\">Monadic events</h2>\n<p>Let’s start by defining a callback-based <code>Event</code> type:</p>\n<pre class=\"sourceCode literate haskell\"><code class=\"sourceCode haskell\"><span class=\"fu\">&gt;</span> <span class=\"kw\">newtype</span> <span class=\"dt\">Event</span> a <span class=\"fu\">=</span> <span class=\"dt\">Event</span> {<span class=\"ot\"> on ::</span> (a <span class=\"ot\">-&gt;</span> <span class=\"dt\">IO</span> ()) <span class=\"ot\">-&gt;</span> <span class=\"dt\">IO</span> <span class=\"dt\">Dispose</span> }</code></pre>\n<p>A value of type <code>Event a</code> represents a stream of values of type <code>a</code>, each occurring some time in the future. The <code>on</code> function connects a callback to an event, and returns an object of type <code>Dispose</code>, which can be used to disconnect from the event:</p>\n<pre class=\"sourceCode literate haskell\"><code class=\"sourceCode haskell\"><span class=\"fu\">&gt;</span> <span class=\"kw\">newtype</span> <span class=\"dt\">Dispose</span> <span class=\"fu\">=</span> <span class=\"dt\">Dispose</span> {<span class=\"ot\"> dispose ::</span> <span class=\"dt\">IO</span> () }\n<span class=\"fu\">&gt;</span>\n<span class=\"fu\">&gt;</span> <span class=\"kw\">instance</span> <span class=\"dt\">Monoid</span> <span class=\"dt\">Dispose</span> <span class=\"kw\">where</span>\n<span class=\"fu\">&gt;</span>   mempty <span class=\"fu\">=</span> <span class=\"dt\">Dispose</span> (<span class=\"fu\">return</span> ())\n<span class=\"fu\">&gt;</span>   mappend d1 d2 <span class=\"fu\">=</span> <span class=\"dt\">Dispose</span> <span class=\"fu\">$</span> <span class=\"kw\">do</span>\n<span class=\"fu\">&gt;</span>     dispose d1\n<span class=\"fu\">&gt;</span>     dispose d2</code></pre>\n<p>The interesting thing about this <code>Event</code> type is that, like the simpler variant we defined in the above post, it forms a monad:</p>\n<pre class=\"sourceCode literate haskell\"><code class=\"sourceCode haskell\"><span class=\"fu\">&gt;</span> <span class=\"kw\">instance</span> <span class=\"kw\">Monad</span> <span class=\"dt\">Event</span> <span class=\"kw\">where</span></code></pre>\n<p>First of all, given a value of type <code>a</code>, we can create an event occurring \"now\" and never again:</p>\n<pre class=\"sourceCode literate haskell\"><code class=\"sourceCode haskell\"><span class=\"fu\">&gt;</span>   <span class=\"fu\">return</span> x <span class=\"fu\">=</span> <span class=\"dt\">Event</span> <span class=\"fu\">$</span> \\k <span class=\"ot\">-&gt;</span> k x <span class=\"fu\">&gt;&gt;</span> <span class=\"fu\">return</span> mempty</code></pre>\n<p>Note that the notion of \"time\" for an <code>Event</code> is relative.</p>\n<p>All time-dependent notions about <code>Events</code> are formulated in terms of a particular \"zero\" time, but this origin of times is not explicitly specified.</p>\n<p>This makes sense, because, even though the definition of <code>Event</code> uses the <code>IO</code> monad, an <code>Event</code> object, in itself, is an immutable value, and can be reused multiple times, possibly with different starting times.</p>\n<pre class=\"sourceCode literate haskell\"><code class=\"sourceCode haskell\"><span class=\"fu\">&gt;</span>   e <span class=\"fu\">&gt;&gt;=</span> f <span class=\"fu\">=</span> <span class=\"dt\">Event</span> <span class=\"fu\">$</span> \\k <span class=\"ot\">-&gt;</span> <span class=\"kw\">do</span>\n<span class=\"fu\">&gt;</span>     dref <span class=\"ot\">&lt;-</span> newIORef mempty\n<span class=\"fu\">&gt;</span>     addD dref e <span class=\"fu\">$</span> \\x <span class=\"ot\">-&gt;</span>\n<span class=\"fu\">&gt;</span>       addD dref (f x) k\n<span class=\"fu\">&gt;</span>     <span class=\"fu\">return</span> <span class=\"fu\">.</span> <span class=\"dt\">Dispose</span> <span class=\"fu\">$</span>\n<span class=\"fu\">&gt;</span>       readIORef dref <span class=\"fu\">&gt;&gt;=</span> dispose\n<span class=\"fu\">&gt;</span>\n<span class=\"fu\">&gt;</span><span class=\"ot\"> addD ::</span> <span class=\"dt\">IORef</span> <span class=\"dt\">Dispose</span> <span class=\"ot\">-&gt;</span> <span class=\"dt\">Event</span> a <span class=\"ot\">-&gt;</span> (a <span class=\"ot\">-&gt;</span> <span class=\"dt\">IO</span> ()) <span class=\"ot\">-&gt;</span> <span class=\"dt\">IO</span> ()\n<span class=\"fu\">&gt;</span> addD d e act <span class=\"fu\">=</span> <span class=\"kw\">do</span>\n<span class=\"fu\">&gt;</span>   d' <span class=\"ot\">&lt;-</span> on e act\n<span class=\"fu\">&gt;</span>   modifyIORef d (<span class=\"ot\">`mappend`</span> d')</code></pre>\n<p>The definition of <code>&gt;&gt;=</code> is slightly more involved.</p>\n<p>We call the function <code>f</code> every time an event occurs, and we connect to the resulting event each time using the helper function <code>addD</code>, accumulating the corresponding <code>Dispose</code> object in an <code>IORef</code>.</p>\n<p>The resulting <code>Dispose</code> object is a function that reads the <code>IORef</code> accumulator and calls <code>dispose</code> on that.</p>\n<div class=\"figure\">\n<img src=\"http://pcapriotti.github.com/images/event_bind.png\" alt=\"Monadic bind\" /><p class=\"caption\">Monadic bind</p>\n</div>\n<p>As the diagram shows, the resulting event <code>e &gt;&gt;= f</code> includes occurrences of all the events originating from the occurrences of the initial event <code>e</code>.</p>\n<h2 id=\"event-union\">Event union</h2>\n<p>Classic FRP comes with a number of combinators to manipulate event streams. One of the most important is event union, which consists in merging two or more event streams into a single one.</p>\n<p>In our case, event union can be implemented very easily as an <code>Alternative</code> instance:</p>\n<pre class=\"sourceCode literate haskell\"><code class=\"sourceCode haskell\"><span class=\"fu\">&gt;</span> <span class=\"kw\">instance</span> <span class=\"kw\">Functor</span> <span class=\"dt\">Event</span> <span class=\"kw\">where</span>\n<span class=\"fu\">&gt;</span>   <span class=\"fu\">fmap</span> <span class=\"fu\">=</span> liftM\n<span class=\"fu\">&gt;</span>\n<span class=\"fu\">&gt;</span> <span class=\"kw\">instance</span> <span class=\"kw\">Applicative</span> <span class=\"dt\">Event</span> <span class=\"kw\">where</span>\n<span class=\"fu\">&gt;</span>   pure <span class=\"fu\">=</span> <span class=\"fu\">return</span>\n<span class=\"fu\">&gt;</span>   (<span class=\"fu\">&lt;*&gt;</span>) <span class=\"fu\">=</span> ap\n<span class=\"fu\">&gt;</span>\n<span class=\"fu\">&gt;</span> <span class=\"kw\">instance</span> <span class=\"dt\">Alternative</span> <span class=\"dt\">Event</span> <span class=\"kw\">where</span>\n<span class=\"fu\">&gt;</span>   empty <span class=\"fu\">=</span> <span class=\"dt\">Event</span> <span class=\"fu\">$</span> \\_ <span class=\"ot\">-&gt;</span> <span class=\"fu\">return</span> mempty\n<span class=\"fu\">&gt;</span>   e1 <span class=\"fu\">&lt;|&gt;</span> e2 <span class=\"fu\">=</span> <span class=\"dt\">Event</span> <span class=\"fu\">$</span> \\k <span class=\"ot\">-&gt;</span> <span class=\"kw\">do</span>\n<span class=\"fu\">&gt;</span>     d1 <span class=\"ot\">&lt;-</span> on e1 k\n<span class=\"fu\">&gt;</span>     d2 <span class=\"ot\">&lt;-</span> on e2 k\n<span class=\"fu\">&gt;</span>     <span class=\"fu\">return</span> <span class=\"fu\">$</span> d1 <span class=\"fu\">&lt;&gt;</span> d2</code></pre>\n<p>An empty <code>Event</code> never invokes its callback, and the union of two events is implemented by connecting a callback to both events simultaneously.</p>\n<h2 id=\"other-combinators\">Other combinators</h2>\n<p>We need an extra primitive combinator in terms of which all other FRP combinators can be implemented using the <code>Monad</code> and <code>Alternative</code> instances.</p>\n<pre class=\"sourceCode literate haskell\"><code class=\"sourceCode haskell\"><span class=\"fu\">&gt;</span><span class=\"ot\"> once ::</span> <span class=\"dt\">Event</span> a <span class=\"ot\">-&gt;</span> <span class=\"dt\">Event</span> a\n<span class=\"fu\">&gt;</span> once e <span class=\"fu\">=</span> <span class=\"dt\">Event</span> <span class=\"fu\">$</span> \\k <span class=\"ot\">-&gt;</span> <span class=\"kw\">do</span>\n<span class=\"fu\">&gt;</span>   rec d <span class=\"ot\">&lt;-</span> on e <span class=\"fu\">$</span> \\x <span class=\"ot\">-&gt;</span> <span class=\"kw\">do</span>\n<span class=\"fu\">&gt;</span>              dispose d\n<span class=\"fu\">&gt;</span>              k x\n<span class=\"fu\">&gt;</span>   <span class=\"fu\">return</span> d</code></pre>\n<p>The <code>once</code> combinator truncates an event stream at its first occurrence. It can be used to implement a number of different combinators by recursion.</p>\n<pre class=\"sourceCode literate haskell\"><code class=\"sourceCode haskell\"><span class=\"fu\">&gt;</span><span class=\"ot\"> accumE ::</span> a <span class=\"ot\">-&gt;</span> <span class=\"dt\">Event</span> (a <span class=\"ot\">-&gt;</span> a) <span class=\"ot\">-&gt;</span> <span class=\"dt\">Event</span> a\n<span class=\"fu\">&gt;</span> accumE x e <span class=\"fu\">=</span> <span class=\"kw\">do</span>\n<span class=\"fu\">&gt;</span>   f <span class=\"ot\">&lt;-</span> once e\n<span class=\"fu\">&gt;</span>   <span class=\"kw\">let</span> <span class=\"fu\">!</span>x' <span class=\"fu\">=</span> f x\n<span class=\"fu\">&gt;</span>   pure x' <span class=\"fu\">&lt;|&gt;</span> accumE x' e\n<span class=\"fu\">&gt;</span>\n<span class=\"fu\">&gt;</span><span class=\"ot\"> takeE ::</span> <span class=\"dt\">Int</span> <span class=\"ot\">-&gt;</span> <span class=\"dt\">Event</span> a <span class=\"ot\">-&gt;</span> <span class=\"dt\">Event</span> a\n<span class=\"fu\">&gt;</span> takeE <span class=\"dv\">0</span> _ <span class=\"fu\">=</span> empty\n<span class=\"fu\">&gt;</span> takeE <span class=\"dv\">1</span> e <span class=\"fu\">=</span> once e\n<span class=\"fu\">&gt;</span> takeE n e <span class=\"fu\">|</span> n <span class=\"fu\">&gt;</span> <span class=\"dv\">1</span> <span class=\"fu\">=</span> <span class=\"kw\">do</span>\n<span class=\"fu\">&gt;</span>   x <span class=\"ot\">&lt;-</span> once e\n<span class=\"fu\">&gt;</span>   pure x <span class=\"fu\">&lt;|&gt;</span> takeE (n <span class=\"fu\">-</span> <span class=\"dv\">1</span>) e\n<span class=\"fu\">&gt;</span> takeE _ _ <span class=\"fu\">=</span> <span class=\"fu\">error</span> <span class=\"st\">\"takeE: n must be non-negative\"</span>\n<span class=\"fu\">&gt;</span>\n<span class=\"fu\">&gt;</span><span class=\"ot\"> dropE ::</span> <span class=\"dt\">Int</span> <span class=\"ot\">-&gt;</span> <span class=\"dt\">Event</span> a <span class=\"ot\">-&gt;</span> <span class=\"dt\">Event</span> a\n<span class=\"fu\">&gt;</span> dropE n e <span class=\"fu\">=</span> replicateM_ n (once e) <span class=\"fu\">&gt;&gt;</span> e</code></pre>\n<h2 id=\"behaviors-and-side-effects\">Behaviors and side effects</h2>\n<p>We address behaviors and side effects the same way, using <code>IO</code> actions, and a <code>MonadIO</code> instance for <code>Event</code>:</p>\n<pre class=\"sourceCode literate haskell\"><code class=\"sourceCode haskell\"><span class=\"fu\">&gt;</span> <span class=\"kw\">instance</span> <span class=\"dt\">MonadIO</span> <span class=\"dt\">Event</span> <span class=\"kw\">where</span>\n<span class=\"fu\">&gt;</span>   liftIO m <span class=\"fu\">=</span> <span class=\"dt\">Event</span> <span class=\"fu\">$</span> \\k <span class=\"ot\">-&gt;</span> <span class=\"kw\">do</span>\n<span class=\"fu\">&gt;</span>     m <span class=\"fu\">&gt;&gt;=</span> k\n<span class=\"fu\">&gt;</span>     <span class=\"fu\">return</span> mempty\n<span class=\"fu\">&gt;</span>\n<span class=\"fu\">&gt;</span> <span class=\"kw\">newtype</span> <span class=\"dt\">Behavior</span> a <span class=\"fu\">=</span> <span class=\"dt\">Behavior</span> {<span class=\"ot\"> valueB ::</span> <span class=\"dt\">IO</span> a }\n<span class=\"fu\">&gt;</span>\n<span class=\"fu\">&gt;</span><span class=\"ot\"> getB ::</span> <span class=\"dt\">Behavior</span> a <span class=\"ot\">-&gt;</span> <span class=\"dt\">Event</span> a\n<span class=\"fu\">&gt;</span> getB <span class=\"fu\">=</span> liftIO <span class=\"fu\">.</span> valueB</code></pre>\n<p>Now we can implement something like the <code>apply</code> combinator in <a href=\"http://www.haskell.org/haskellwiki/Reactive-banana\">reactive-banana</a>:</p>\n<pre class=\"sourceCode literate haskell\"><code class=\"sourceCode haskell\"><span class=\"fu\">&gt;</span><span class=\"ot\"> apply ::</span> <span class=\"dt\">Behavior</span> (a <span class=\"ot\">-&gt;</span> b) <span class=\"ot\">-&gt;</span> <span class=\"dt\">Event</span> a <span class=\"ot\">-&gt;</span> <span class=\"dt\">Event</span> b\n<span class=\"fu\">&gt;</span> apply b e <span class=\"fu\">=</span> <span class=\"kw\">do</span>\n<span class=\"fu\">&gt;</span>   x <span class=\"ot\">&lt;-</span> e\n<span class=\"fu\">&gt;</span>   f <span class=\"ot\">&lt;-</span> getB b\n<span class=\"fu\">&gt;</span>   <span class=\"fu\">return</span> <span class=\"fu\">$</span> f x</code></pre>\n<p>Events can also perform arbitrary <code>IO</code> actions, which is necessary to actually connect an <code>Event</code> to user-visible effects:</p>\n<pre class=\"sourceCode literate haskell\"><code class=\"sourceCode haskell\"><span class=\"fu\">&gt;</span><span class=\"ot\"> log ::</span> <span class=\"kw\">Show</span> a <span class=\"ot\">=&gt;</span> <span class=\"dt\">Event</span> a <span class=\"ot\">-&gt;</span> <span class=\"dt\">Event</span> ()\n<span class=\"fu\">&gt;</span> <span class=\"fu\">log</span> e <span class=\"fu\">=</span> e <span class=\"fu\">&gt;&gt;=</span> liftIO <span class=\"fu\">.</span> <span class=\"fu\">print</span></code></pre>\n<h2 id=\"executing-event-descriptions\">Executing event descriptions</h2>\n<p>An entire GUI program can be expressed as an <code>Event</code> value, usually by combining a number of basic events using the <code>Alternative</code> instance.</p>\n<p>A complete program can be run with:</p>\n<pre class=\"sourceCode literate haskell\"><code class=\"sourceCode haskell\"><span class=\"fu\">&gt;</span><span class=\"ot\"> runEvent ::</span> <span class=\"dt\">Event</span> <span class=\"dt\">Void</span> <span class=\"ot\">-&gt;</span> <span class=\"dt\">IO</span> ()\n<span class=\"fu\">&gt;</span> runEvent e <span class=\"fu\">=</span> void <span class=\"fu\">$</span> on e absurd\n<span class=\"fu\">&gt;</span>\n<span class=\"fu\">&gt;</span><span class=\"ot\"> runEvent_ ::</span> <span class=\"dt\">Event</span> a <span class=\"ot\">-&gt;</span> <span class=\"dt\">IO</span> ()\n<span class=\"fu\">&gt;</span> runEvent_ <span class=\"fu\">=</span> runEvent <span class=\"fu\">.</span> (<span class=\"fu\">&gt;&gt;</span> empty)</code></pre>\n<h2 id=\"underlying-assumptions\">Underlying assumptions</h2>\n<p>For this simple system to work, events need to possess certain properties that guarantee that our implementations of the basic combinators make sense.</p>\n<p>First of all, callbacks must be invoked sequentially, in the order of occurrence of their respective events.</p>\n<p>Furthermore, we assume that callbacks for the same event (or simultaneous events) will be called in the order of connection.</p>\n<p>Many event-driven frameworks provide those guarantees directly. For those that do not, a driver can be written converting underlying events to <code>Event</code> values satisfying the required ordering properties.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>It’s not immediately clear whether this approach can scale to real-world GUI applications.</p>\n<p>Although the implementation presented here is quite simplistic, it could certainly be made more efficient by, for example, making <code>Dispose</code> stricter, or adding more information to <code>Event</code> to simplify some common special cases.</p>\n<p>This continuation-based API is a lot more powerful than the usual FRP combinator set. The <code>Event</code> type combines the functionalities of both the classic <code>Event</code> and <code>Behavior</code> types, and it offers a wider interface (<code>Monad</code> rather than only <code>Applicative</code>).</p>\n<p>On the other hand, it is a lot less safe, in a way, since it allows to freely mix <code>IO</code> actions with event descriptions, and doesn’t enforce a definite separation between the two. Libraries like reactive-banana do so by distinguishing beween \"network descriptions\" and events/behaviors.</p>\n<p>Finally, there is really no sharing of intermediate events, so expensive computations occurring, say, inside an <code>accumE</code> can end up being unnecessarily performed more than once.</p>\n<p>This is not just an implementation issue, but a consequence of the strict equality model that this FRP formulation employs. Even if two events are identical, they might not actually behave the same when they are used, because they are going to be \"activated\" at different times.</p>" "http://pcapriotti.github.com/blog/2012/06/04/continuation-based-relative-time-frp/" (20428 64472) new 57 nil nil ((title nil "Paolo Capriotti: Continuation-based relative-time FRP") (guid ((isPermaLink . "false")) "http://pcapriotti.github.com/blog/2012/06/04/continuation-based-relative-time-frp") (link nil "http://pcapriotti.github.com/blog/2012/06/04/continuation-based-relative-time-frp/") (description nil "<p>In a <a href=\"http://paolocapriotti.com/blog/2012/01/18/reinversion-of-control/\">previous post</a> I showed how it is possible to write asynchronous code in a direct style using the <code>ContT</code> monad. Here, I’ll extend the idea further and present an implementation of a very simple FRP library based on continuations.</p>\n<pre class=\"sourceCode literate haskell\"><code class=\"sourceCode haskell\"><span class=\"fu\">&gt;</span> <span class=\"ot\">{-# LANGUAGE DoRec, BangPatterns #-}</span>\n<span class=\"fu\">&gt;</span> <span class=\"kw\">import</span> <span class=\"dt\">Control.Applicative</span>\n<span class=\"fu\">&gt;</span> <span class=\"kw\">import</span> <span class=\"dt\">Control.Monad</span>\n<span class=\"fu\">&gt;</span> <span class=\"kw\">import</span> <span class=\"dt\">Control.Monad.IO.Class</span>\n<span class=\"fu\">&gt;</span> <span class=\"kw\">import</span> <span class=\"dt\">Data.IORef</span>\n<span class=\"fu\">&gt;</span> <span class=\"kw\">import</span> <span class=\"dt\">Data.Monoid</span>\n<span class=\"fu\">&gt;</span> <span class=\"kw\">import</span> <span class=\"dt\">Data.Void</span></code></pre>\n<h2 id=\"monadic-events\">Monadic events</h2>\n<p>Let’s start by defining a callback-based <code>Event</code> type:</p>\n<pre class=\"sourceCode literate haskell\"><code class=\"sourceCode haskell\"><span class=\"fu\">&gt;</span> <span class=\"kw\">newtype</span> <span class=\"dt\">Event</span> a <span class=\"fu\">=</span> <span class=\"dt\">Event</span> {<span class=\"ot\"> on ::</span> (a <span class=\"ot\">-&gt;</span> <span class=\"dt\">IO</span> ()) <span class=\"ot\">-&gt;</span> <span class=\"dt\">IO</span> <span class=\"dt\">Dispose</span> }</code></pre>\n<p>A value of type <code>Event a</code> represents a stream of values of type <code>a</code>, each occurring some time in the future. The <code>on</code> function connects a callback to an event, and returns an object of type <code>Dispose</code>, which can be used to disconnect from the event:</p>\n<pre class=\"sourceCode literate haskell\"><code class=\"sourceCode haskell\"><span class=\"fu\">&gt;</span> <span class=\"kw\">newtype</span> <span class=\"dt\">Dispose</span> <span class=\"fu\">=</span> <span class=\"dt\">Dispose</span> {<span class=\"ot\"> dispose ::</span> <span class=\"dt\">IO</span> () }\n<span class=\"fu\">&gt;</span> \n<span class=\"fu\">&gt;</span> <span class=\"kw\">instance</span> <span class=\"dt\">Monoid</span> <span class=\"dt\">Dispose</span> <span class=\"kw\">where</span>\n<span class=\"fu\">&gt;</span>   mempty <span class=\"fu\">=</span> <span class=\"dt\">Dispose</span> (<span class=\"fu\">return</span> ())\n<span class=\"fu\">&gt;</span>   mappend d1 d2 <span class=\"fu\">=</span> <span class=\"dt\">Dispose</span> <span class=\"fu\">$</span> <span class=\"kw\">do</span>\n<span class=\"fu\">&gt;</span>     dispose d1\n<span class=\"fu\">&gt;</span>     dispose d2</code></pre>\n<p>The interesting thing about this <code>Event</code> type is that, like the simpler variant we defined in the above post, it forms a monad:</p>\n<pre class=\"sourceCode literate haskell\"><code class=\"sourceCode haskell\"><span class=\"fu\">&gt;</span> <span class=\"kw\">instance</span> <span class=\"kw\">Monad</span> <span class=\"dt\">Event</span> <span class=\"kw\">where</span></code></pre>\n<p>First of all, given a value of type <code>a</code>, we can create an event occurring \"now\" and never again:</p>\n<pre class=\"sourceCode literate haskell\"><code class=\"sourceCode haskell\"><span class=\"fu\">&gt;</span>   <span class=\"fu\">return</span> x <span class=\"fu\">=</span> <span class=\"dt\">Event</span> <span class=\"fu\">$</span> \\k <span class=\"ot\">-&gt;</span> k x <span class=\"fu\">&gt;&gt;</span> <span class=\"fu\">return</span> mempty</code></pre>\n<p>Note that the notion of \"time\" for an <code>Event</code> is relative.</p>\n<p>All time-dependent notions about <code>Events</code> are formulated in terms of a particular \"zero\" time, but this origin of times is not explicitly specified.</p>\n<p>This makes sense, because, even though the definition of <code>Event</code> uses the <code>IO</code> monad, an <code>Event</code> object, in itself, is an immutable value, and can be reused multiple times, possibly with different starting times.</p>\n<pre class=\"sourceCode literate haskell\"><code class=\"sourceCode haskell\"><span class=\"fu\">&gt;</span>   e <span class=\"fu\">&gt;&gt;=</span> f <span class=\"fu\">=</span> <span class=\"dt\">Event</span> <span class=\"fu\">$</span> \\k <span class=\"ot\">-&gt;</span> <span class=\"kw\">do</span>\n<span class=\"fu\">&gt;</span>     dref <span class=\"ot\">&lt;-</span> newIORef mempty\n<span class=\"fu\">&gt;</span>     addD dref e <span class=\"fu\">$</span> \\x <span class=\"ot\">-&gt;</span>\n<span class=\"fu\">&gt;</span>       addD dref (f x) k\n<span class=\"fu\">&gt;</span>     <span class=\"fu\">return</span> <span class=\"fu\">.</span> <span class=\"dt\">Dispose</span> <span class=\"fu\">$</span>\n<span class=\"fu\">&gt;</span>       readIORef dref <span class=\"fu\">&gt;&gt;=</span> dispose\n<span class=\"fu\">&gt;</span> \n<span class=\"fu\">&gt;</span><span class=\"ot\"> addD ::</span> <span class=\"dt\">IORef</span> <span class=\"dt\">Dispose</span> <span class=\"ot\">-&gt;</span> <span class=\"dt\">Event</span> a <span class=\"ot\">-&gt;</span> (a <span class=\"ot\">-&gt;</span> <span class=\"dt\">IO</span> ()) <span class=\"ot\">-&gt;</span> <span class=\"dt\">IO</span> ()\n<span class=\"fu\">&gt;</span> addD d e act <span class=\"fu\">=</span> <span class=\"kw\">do</span>\n<span class=\"fu\">&gt;</span>   d' <span class=\"ot\">&lt;-</span> on e act\n<span class=\"fu\">&gt;</span>   modifyIORef d (<span class=\"ot\">`mappend`</span> d')</code></pre>\n<p>The definition of <code>&gt;&gt;=</code> is slightly more involved.</p>\n<p>We call the function <code>f</code> every time an event occurs, and we connect to the resulting event each time using the helper function <code>addD</code>, accumulating the corresponding <code>Dispose</code> object in an <code>IORef</code>.</p>\n<p>The resulting <code>Dispose</code> object is a function that reads the <code>IORef</code> accumulator and calls <code>dispose</code> on that.</p>\n<div class=\"figure\">\n<img src=\"http://pcapriotti.github.com/images/event_bind.png\" alt=\"Monadic bind\" /><p class=\"caption\">Monadic bind</p>\n</div>\n<p>As the diagram shows, the resulting event <code>e &gt;&gt;= f</code> includes occurrences of all the events originating from the occurrences of the initial event <code>e</code>.</p>\n<h2 id=\"event-union\">Event union</h2>\n<p>Classic FRP comes with a number of combinators to manipulate event streams. One of the most important is event union, which consists in merging two or more event streams into a single one.</p>\n<p>In our case, event union can be implemented very easily as an <code>Alternative</code> instance:</p>\n<pre class=\"sourceCode literate haskell\"><code class=\"sourceCode haskell\"><span class=\"fu\">&gt;</span> <span class=\"kw\">instance</span> <span class=\"kw\">Functor</span> <span class=\"dt\">Event</span> <span class=\"kw\">where</span>\n<span class=\"fu\">&gt;</span>   <span class=\"fu\">fmap</span> <span class=\"fu\">=</span> liftM\n<span class=\"fu\">&gt;</span> \n<span class=\"fu\">&gt;</span> <span class=\"kw\">instance</span> <span class=\"kw\">Applicative</span> <span class=\"dt\">Event</span> <span class=\"kw\">where</span>\n<span class=\"fu\">&gt;</span>   pure <span class=\"fu\">=</span> <span class=\"fu\">return</span>\n<span class=\"fu\">&gt;</span>   (<span class=\"fu\">&lt;*&gt;</span>) <span class=\"fu\">=</span> ap\n<span class=\"fu\">&gt;</span> \n<span class=\"fu\">&gt;</span> <span class=\"kw\">instance</span> <span class=\"dt\">Alternative</span> <span class=\"dt\">Event</span> <span class=\"kw\">where</span>\n<span class=\"fu\">&gt;</span>   empty <span class=\"fu\">=</span> <span class=\"dt\">Event</span> <span class=\"fu\">$</span> \\_ <span class=\"ot\">-&gt;</span> <span class=\"fu\">return</span> mempty\n<span class=\"fu\">&gt;</span>   e1 <span class=\"fu\">&lt;|&gt;</span> e2 <span class=\"fu\">=</span> <span class=\"dt\">Event</span> <span class=\"fu\">$</span> \\k <span class=\"ot\">-&gt;</span> <span class=\"kw\">do</span>\n<span class=\"fu\">&gt;</span>     d1 <span class=\"ot\">&lt;-</span> on e1 k\n<span class=\"fu\">&gt;</span>     d2 <span class=\"ot\">&lt;-</span> on e2 k\n<span class=\"fu\">&gt;</span>     <span class=\"fu\">return</span> <span class=\"fu\">$</span> d1 <span class=\"fu\">&lt;&gt;</span> d2</code></pre>\n<p>An empty <code>Event</code> never invokes its callback, and the union of two events is implemented by connecting a callback to both events simultaneously.</p>\n<h2 id=\"other-combinators\">Other combinators</h2>\n<p>We need an extra primitive combinator in terms of which all other FRP combinators can be implemented using the <code>Monad</code> and <code>Alternative</code> instances.</p>\n<pre class=\"sourceCode literate haskell\"><code class=\"sourceCode haskell\"><span class=\"fu\">&gt;</span><span class=\"ot\"> once ::</span> <span class=\"dt\">Event</span> a <span class=\"ot\">-&gt;</span> <span class=\"dt\">Event</span> a\n<span class=\"fu\">&gt;</span> once e <span class=\"fu\">=</span> <span class=\"dt\">Event</span> <span class=\"fu\">$</span> \\k <span class=\"ot\">-&gt;</span> <span class=\"kw\">do</span>\n<span class=\"fu\">&gt;</span>   rec d <span class=\"ot\">&lt;-</span> on e <span class=\"fu\">$</span> \\x <span class=\"ot\">-&gt;</span> <span class=\"kw\">do</span>\n<span class=\"fu\">&gt;</span>              dispose d\n<span class=\"fu\">&gt;</span>              k x\n<span class=\"fu\">&gt;</span>   <span class=\"fu\">return</span> d</code></pre>\n<p>The <code>once</code> combinator truncates an event stream at its first occurrence. It can be used to implement a number of different combinators by recursion.</p>\n<pre class=\"sourceCode literate haskell\"><code class=\"sourceCode haskell\"><span class=\"fu\">&gt;</span><span class=\"ot\"> accumE ::</span> a <span class=\"ot\">-&gt;</span> <span class=\"dt\">Event</span> (a <span class=\"ot\">-&gt;</span> a) <span class=\"ot\">-&gt;</span> <span class=\"dt\">Event</span> a\n<span class=\"fu\">&gt;</span> accumE x e <span class=\"fu\">=</span> <span class=\"kw\">do</span>\n<span class=\"fu\">&gt;</span>   f <span class=\"ot\">&lt;-</span> once e\n<span class=\"fu\">&gt;</span>   <span class=\"kw\">let</span> <span class=\"fu\">!</span>x' <span class=\"fu\">=</span> f x\n<span class=\"fu\">&gt;</span>   pure x' <span class=\"fu\">&lt;|&gt;</span> accumE x' e\n<span class=\"fu\">&gt;</span> \n<span class=\"fu\">&gt;</span><span class=\"ot\"> takeE ::</span> <span class=\"dt\">Int</span> <span class=\"ot\">-&gt;</span> <span class=\"dt\">Event</span> a <span class=\"ot\">-&gt;</span> <span class=\"dt\">Event</span> a\n<span class=\"fu\">&gt;</span> takeE <span class=\"dv\">0</span> _ <span class=\"fu\">=</span> empty\n<span class=\"fu\">&gt;</span> takeE <span class=\"dv\">1</span> e <span class=\"fu\">=</span> once e\n<span class=\"fu\">&gt;</span> takeE n e <span class=\"fu\">|</span> n <span class=\"fu\">&gt;</span> <span class=\"dv\">1</span> <span class=\"fu\">=</span> <span class=\"kw\">do</span>\n<span class=\"fu\">&gt;</span>   x <span class=\"ot\">&lt;-</span> once e\n<span class=\"fu\">&gt;</span>   pure x <span class=\"fu\">&lt;|&gt;</span> takeE (n <span class=\"fu\">-</span> <span class=\"dv\">1</span>) e\n<span class=\"fu\">&gt;</span> takeE _ _ <span class=\"fu\">=</span> <span class=\"fu\">error</span> <span class=\"st\">\"takeE: n must be non-negative\"</span>\n<span class=\"fu\">&gt;</span> \n<span class=\"fu\">&gt;</span><span class=\"ot\"> dropE ::</span> <span class=\"dt\">Int</span> <span class=\"ot\">-&gt;</span> <span class=\"dt\">Event</span> a <span class=\"ot\">-&gt;</span> <span class=\"dt\">Event</span> a\n<span class=\"fu\">&gt;</span> dropE n e <span class=\"fu\">=</span> replicateM_ n (once e) <span class=\"fu\">&gt;&gt;</span> e</code></pre>\n<h2 id=\"behaviors-and-side-effects\">Behaviors and side effects</h2>\n<p>We address behaviors and side effects the same way, using <code>IO</code> actions, and a <code>MonadIO</code> instance for <code>Event</code>:</p>\n<pre class=\"sourceCode literate haskell\"><code class=\"sourceCode haskell\"><span class=\"fu\">&gt;</span> <span class=\"kw\">instance</span> <span class=\"dt\">MonadIO</span> <span class=\"dt\">Event</span> <span class=\"kw\">where</span>\n<span class=\"fu\">&gt;</span>   liftIO m <span class=\"fu\">=</span> <span class=\"dt\">Event</span> <span class=\"fu\">$</span> \\k <span class=\"ot\">-&gt;</span> <span class=\"kw\">do</span>\n<span class=\"fu\">&gt;</span>     m <span class=\"fu\">&gt;&gt;=</span> k\n<span class=\"fu\">&gt;</span>     <span class=\"fu\">return</span> mempty\n<span class=\"fu\">&gt;</span> \n<span class=\"fu\">&gt;</span> <span class=\"kw\">newtype</span> <span class=\"dt\">Behavior</span> a <span class=\"fu\">=</span> <span class=\"dt\">Behavior</span> {<span class=\"ot\"> valueB ::</span> <span class=\"dt\">IO</span> a }\n<span class=\"fu\">&gt;</span> \n<span class=\"fu\">&gt;</span><span class=\"ot\"> getB ::</span> <span class=\"dt\">Behavior</span> a <span class=\"ot\">-&gt;</span> <span class=\"dt\">Event</span> a\n<span class=\"fu\">&gt;</span> getB <span class=\"fu\">=</span> liftIO <span class=\"fu\">.</span> valueB</code></pre>\n<p>Now we can implement something like the <code>apply</code> combinator in <a href=\"http://www.haskell.org/haskellwiki/Reactive-banana\">reactive-banana</a>:</p>\n<pre class=\"sourceCode literate haskell\"><code class=\"sourceCode haskell\"><span class=\"fu\">&gt;</span><span class=\"ot\"> apply ::</span> <span class=\"dt\">Behavior</span> (a <span class=\"ot\">-&gt;</span> b) <span class=\"ot\">-&gt;</span> <span class=\"dt\">Event</span> a <span class=\"ot\">-&gt;</span> <span class=\"dt\">Event</span> b\n<span class=\"fu\">&gt;</span> apply b e <span class=\"fu\">=</span> <span class=\"kw\">do</span>\n<span class=\"fu\">&gt;</span>   x <span class=\"ot\">&lt;-</span> e\n<span class=\"fu\">&gt;</span>   f <span class=\"ot\">&lt;-</span> getB b\n<span class=\"fu\">&gt;</span>   <span class=\"fu\">return</span> <span class=\"fu\">$</span> f x</code></pre>\n<p>Events can also perform arbitrary <code>IO</code> actions, which is necessary to actually connect an <code>Event</code> to user-visible effects:</p>\n<pre class=\"sourceCode literate haskell\"><code class=\"sourceCode haskell\"><span class=\"fu\">&gt;</span><span class=\"ot\"> log ::</span> <span class=\"kw\">Show</span> a <span class=\"ot\">=&gt;</span> <span class=\"dt\">Event</span> a <span class=\"ot\">-&gt;</span> <span class=\"dt\">Event</span> ()\n<span class=\"fu\">&gt;</span> <span class=\"fu\">log</span> e <span class=\"fu\">=</span> e <span class=\"fu\">&gt;&gt;=</span> liftIO <span class=\"fu\">.</span> <span class=\"fu\">print</span></code></pre>\n<h2 id=\"executing-event-descriptions\">Executing event descriptions</h2>\n<p>An entire GUI program can be expressed as an <code>Event</code> value, usually by combining a number of basic events using the <code>Alternative</code> instance.</p>\n<p>A complete program can be run with:</p>\n<pre class=\"sourceCode literate haskell\"><code class=\"sourceCode haskell\"><span class=\"fu\">&gt;</span><span class=\"ot\"> runEvent ::</span> <span class=\"dt\">Event</span> <span class=\"dt\">Void</span> <span class=\"ot\">-&gt;</span> <span class=\"dt\">IO</span> ()\n<span class=\"fu\">&gt;</span> runEvent e <span class=\"fu\">=</span> void <span class=\"fu\">$</span> on e absurd\n<span class=\"fu\">&gt;</span> \n<span class=\"fu\">&gt;</span><span class=\"ot\"> runEvent_ ::</span> <span class=\"dt\">Event</span> a <span class=\"ot\">-&gt;</span> <span class=\"dt\">IO</span> ()\n<span class=\"fu\">&gt;</span> runEvent_ <span class=\"fu\">=</span> runEvent <span class=\"fu\">.</span> (<span class=\"fu\">&gt;&gt;</span> empty)</code></pre>\n<h2 id=\"underlying-assumptions\">Underlying assumptions</h2>\n<p>For this simple system to work, events need to possess certain properties that guarantee that our implementations of the basic combinators make sense.</p>\n<p>First of all, callbacks must be invoked sequentially, in the order of occurrence of their respective events.</p>\n<p>Furthermore, we assume that callbacks for the same event (or simultaneous events) will be called in the order of connection.</p>\n<p>Many event-driven frameworks provide those guarantees directly. For those that do not, a driver can be written converting underlying events to <code>Event</code> values satisfying the required ordering properties.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>It’s not immediately clear whether this approach can scale to real-world GUI applications.</p>\n<p>Although the implementation presented here is quite simplistic, it could certainly be made more efficient by, for example, making <code>Dispose</code> stricter, or adding more information to <code>Event</code> to simplify some common special cases.</p>\n<p>This continuation-based API is a lot more powerful than the usual FRP combinator set. The <code>Event</code> type combines the functionalities of both the classic <code>Event</code> and <code>Behavior</code> types, and it offers a wider interface (<code>Monad</code> rather than only <code>Applicative</code>).</p>\n<p>On the other hand, it is a lot less safe, in a way, since it allows to freely mix <code>IO</code> actions with event descriptions, and doesn’t enforce a definite separation between the two. Libraries like reactive-banana do so by distinguishing beween \"network descriptions\" and events/behaviors.</p>\n<p>Finally, there is really no sharing of intermediate events, so expensive computations occurring, say, inside an <code>accumE</code> can end up being unnecessarily performed more than once.</p>\n<p>This is not just an implementation issue, but a consequence of the strict equality model that this FRP formulation employs. Even if two events are identical, they might not actually behave the same when they are used, because they are going to be \"activated\" at different times.</p>") (pubDate nil "Mon, 04 Jun 2012 18:18:00 +0000"))) ("Edward Amsden: Summer Research" "<p>I'll be working on two projects this summer. The first of these projects is my Master's thesis, \"Push-based Signal-function Functional Reactive Programming\" supervised by <a href=\"http://www.cs.rit.edu/~mtf\">Matthew Fluet</a>, materials for which will be moving to my domain. The second is a project on Subtle Gaze Direction for Video under the supervision of <a href=\"http://www.cs.rit.edu/~rjb/\">Reynold Bailey</a> which is counting as a co-op for me.</p><br />\n<h1>Master's Thesis</h1><p>Currently I have nearly completed the FRP system which I will describe in my master's thesis. Remaining work includes writing demonstration and testing programs, formalizing the semantics somewhat, writing my thesis, submitting a condensed version to a conference (The ICFP Student Research Competition and IFL are current considerations), and defense.</p><br />\n<h1>Subtle Gaze Direction for Video</h1><p>Currently the program for this project is capable of displaying a sequence of gaze direction queues in a video, using the MWM illusion. However, it does not yet have a way to integrate eye-tracking information to hide the illusion when the user's eye moves toward it. The program is currently quite poorly engineered, due to its ancestry, an NVidia® CUDA® video decoding demo. I am considering a re-write of the program to avoid these issues.</p><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/129107585769892414-7166678106353426537?l=blog.edwardamsden.com\" alt=\"\" height=\"1\" width=\"1\" /></div>" "http://blog.edwardamsden.com/2012/06/summer-research.html" (20428 61939) new 58 nil nil ((title nil "Edward Amsden: Summer Research") (guid ((isPermaLink . "false")) "tag:blogger.com,1999:blog-129107585769892414.post-7166678106353426537") (link nil "http://blog.edwardamsden.com/2012/06/summer-research.html") (description nil "<p>I'll be working on two projects this summer. The first of these projects is my Master's thesis, \"Push-based Signal-function Functional Reactive Programming\" supervised by <a href=\"http://www.cs.rit.edu/~mtf\">Matthew Fluet</a>, materials for which will be moving to my domain. The second is a project on Subtle Gaze Direction for Video under the supervision of <a href=\"http://www.cs.rit.edu/~rjb/\">Reynold Bailey</a> which is counting as a co-op for me.</p><br />\n<h1>Master's Thesis</h1><p>Currently I have nearly completed the FRP system which I will describe in my master's thesis. Remaining work includes writing demonstration and testing programs, formalizing the semantics somewhat, writing my thesis, submitting a condensed version to a conference (The ICFP Student Research Competition and IFL are current considerations), and defense.</p><br />\n<h1>Subtle Gaze Direction for Video</h1><p>Currently the program for this project is capable of displaying a sequence of gaze direction queues in a video, using the MWM illusion. However, it does not yet have a way to integrate eye-tracking information to hide the illusion when the user's eye moves toward it. The program is currently quite poorly engineered, due to its ancestry, an NVidia® CUDA® video decoding demo. I am considering a re-write of the program to avoid these issues.</p><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/129107585769892414-7166678106353426537?l=blog.edwardamsden.com\" alt=\"\" height=\"1\" width=\"1\" /></div>") (pubDate nil "Mon, 04 Jun 2012 17:35:47 +0000") (author nil "noreply@blogger.com (Edward Amsden)"))) ("Manuel M T Chakravarty: Being more clever about vectorising nested data parallelism" "<div class=\"posterous_autopost\"><p>Our new draft paper on <a href=\"http://www.cse.unsw.edu.au/~chak/papers/KCLLP12.html\">Vectorisation Avoidance</a> introduces a novel program analysis for nested data parallelism that lets us avoid vectorising purely scalar subcomputations. It includes a set of benchmark kernels that suggest that vectorisation avoidance improves runtimes over merely using array stream fusion.</p>      <p style=\"font-size: 10px;\">  <a href=\"http://posterous.com\">Posted via email</a>   from <a href=\"http://justtesting.org/being-more-clever-about-vectorising-nested-da\">Just Testing</a> | <a href=\"http://justtesting.org/being-more-clever-about-vectorising-nested-da#comment\"><span style=\"font-size: 11px;\">Comment »</span></a>  </p>  </div>" "http://tumblr.justtesting.org/post/24399176080" (20428 42930) new 59 nil nil ((title nil "Manuel M T Chakravarty: Being more clever about vectorising nested data parallelism") (guid ((isPermaLink . "true")) "http://tumblr.justtesting.org/post/24399176080") (link nil "http://tumblr.justtesting.org/post/24399176080") (description nil "<div class=\"posterous_autopost\"><p>Our new draft paper on <a href=\"http://www.cse.unsw.edu.au/~chak/papers/KCLLP12.html\">Vectorisation Avoidance</a> introduces a novel program analysis for nested data parallelism that lets us avoid vectorising purely scalar subcomputations. It includes a set of benchmark kernels that suggest that vectorisation avoidance improves runtimes over merely using array stream fusion.</p>      <p style=\"font-size: 10px;\">  <a href=\"http://posterous.com\">Posted via email</a>   from <a href=\"http://justtesting.org/being-more-clever-about-vectorising-nested-da\">Just Testing</a> | <a href=\"http://justtesting.org/being-more-clever-about-vectorising-nested-da#comment\"><span style=\"font-size: 11px;\">Comment »</span></a>  </p>  </div>") (pubDate nil "Mon, 04 Jun 2012 12:18:58 +0000"))) ("Manuel M T Chakravarty: Repa 3: more control over array representations with indexed types" "<div class=\"posterous_autopost\"><p>We have got a new draft paper on <a href=\"http://www.cse.unsw.edu.au/~chak/papers/LCKP12.html\">Guiding Parallel Array Fusion with Indexed Types</a>. It describes the design and use of the 3rd generation Repa API, which uses type indices to give the programmer control over the various parallel array representations. The result are clearer programs that the compiler can more easily optimise. The implementation of Repa 3 is ready for use on Hackage in the <a href=\"http://hackage.haskell.org/package/repa\">repa package</a>.</p>      <p style=\"font-size: 10px;\">  <a href=\"http://posterous.com\">Posted via email</a>   from <a href=\"http://justtesting.org/repa-3-more-control-over-array-representation\">Just Testing</a> | <a href=\"http://justtesting.org/repa-3-more-control-over-array-representation#comment\"><span style=\"font-size: 11px;\">Comment »</span></a>  </p>  </div>" "http://tumblr.justtesting.org/post/24398752358" (20428 41947) new 60 nil nil ((title nil "Manuel M T Chakravarty: Repa 3: more control over array representations with indexed types") (guid ((isPermaLink . "true")) "http://tumblr.justtesting.org/post/24398752358") (link nil "http://tumblr.justtesting.org/post/24398752358") (description nil "<div class=\"posterous_autopost\"><p>We have got a new draft paper on <a href=\"http://www.cse.unsw.edu.au/~chak/papers/LCKP12.html\">Guiding Parallel Array Fusion with Indexed Types</a>. It describes the design and use of the 3rd generation Repa API, which uses type indices to give the programmer control over the various parallel array representations. The result are clearer programs that the compiler can more easily optimise. The implementation of Repa 3 is ready for use on Hackage in the <a href=\"http://hackage.haskell.org/package/repa\">repa package</a>.</p>      <p style=\"font-size: 10px;\">  <a href=\"http://posterous.com\">Posted via email</a>   from <a href=\"http://justtesting.org/repa-3-more-control-over-array-representation\">Just Testing</a> | <a href=\"http://justtesting.org/repa-3-more-control-over-array-representation#comment\"><span style=\"font-size: 11px;\">Comment »</span></a>  </p>  </div>") (pubDate nil "Mon, 04 Jun 2012 12:02:35 +0000"))))