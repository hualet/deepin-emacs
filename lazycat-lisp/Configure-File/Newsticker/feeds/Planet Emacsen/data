;; -*- coding: utf-8 -*-
(("Planet Emacsen" nil nil (20485 11254 571885) feed 0 nil nil ((title nil "Planet Emacsen") (link ((rel . "self") (href . "http://planet.emacsen.org/atom.xml"))) (link ((href . "http://planet.emacsen.org/"))) (id nil "http://planet.emacsen.org/atom.xml") (updated nil "2010-04-08T15:01:25+00:00") (generator ((uri . "http://www.planetplanet.org/")) "http://intertwingly.net/code/venus/") (entry nil (title ((type . "html") (xml:lang . "en")) "Jason McBrayer: bbcode-mode.el: a simple emacs mode for editing bbcode") (link ((href . "http://www.carcosa.net/jason/blog/computing/2010-04-07-emacs-bbcode"))) (id nil "http://www.carcosa.net/jason/blog/computing/computing/2010-04-07-emacs-bbcode") (updated nil "2010-04-07T10:43:15+00:00") (content ((type . "html") (xml:lang . "en")) "<p>A couple of years ago, I looked for a bbcode mode for Emacs, and, not finding one, wrote a very simple derived-mode for it. For some reason, syntax highlighting only worked intermittently, which I didn't have time to put too much effort into trying to fix, and so I didn't actually release the code for public consumption. Recently, though, I saw on Planet Emacsen an explanation for why it wasn't working; I've tried to find that post to link to it and credit the author, but unfortunately, I can't.</p>\n\n<p>Anyway, having fixed the font-locking issue, I've released bbcode-mode.el <a href=\"http://bitbucket.org/jfm/emacs-bbcode/\">at bitbucket</a>. In the process of releasing it, I searched for other bbcode modes to make sure I wasn't taking a name that was in use. It turns out that in the meantime while I wasn't releasing my bbcode mode, Xah Lee released another, <a href=\"http://xahlee.org/emacs/xbbcode-mode.html\">xbbcode-mode</a>. The two modes are rather different in design, so depending on your tastes, you might reasonably prefer either one or the other.</p>\n\n<p>A side note: I wish bitbucket supported org-mode README files like github does.</p>") (author nil (name nil "Jason F. McBrayer") (uri nil "http://www.carcosa.net/jason/blog")) (source nil (title ((type . "html")) "Prosthetic Conscience") (subtitle ((type . "html")) "Jason McBrayer's weblog; occasional personal notes and commentary") (link ((rel . "self") (href . "http://www.carcosa.net/jason/blog/computing/index.rss2"))) (id nil "http://www.carcosa.net/jason/blog"))) (entry nil (title ((type . "html")) "Got Emacs?: April Emacs Pretest 23.1.95 available") (link ((href . "http://emacsworld.blogspot.com/2010/04/april-emacs-pretest-23195-available.html"))) (id nil "tag:blogger.com,1999:blog-3165518189103293420.post-3193084001832398081") (updated nil "2010-04-06T04:07:57+00:00") (content ((type . "html")) "<div>Another Pretest versions of Emacs can be found <a href=\"http://alpha.gnu.org/gnu/emacs/pretest/\" target=\"_blank\">here </a>and <a href=\"http://alpha.gnu.org/gnu/emacs/pretest/windows/\" target=\"_blank\">here</a>.  Thanks to Sean who <a href=\"http://permalink.gmane.org/gmane.emacs.windows/4587\" target=\"_blank\">posted it</a> on <a href=\"http://lists.gnu.org/pipermail/help-emacs-windows\" target=\"_blank\">Emacs Windows mailing list.</a><br /><br /></div><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/3165518189103293420-3193084001832398081?l=emacsworld.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>") (author nil (name nil "sivaram") (email nil "noreply@blogger.com") (uri nil "http://emacsworld.blogspot.com/")) (source nil (title ((type . "html")) "Got Emacs?") (subtitle ((type . "html")) "Postings on living in an Emacs world.  Posts will be mostly on using Emacs, related functions and tools.") (link ((rel . "self") (href . "http://www.blogger.com/feeds/3165518189103293420/posts/default"))) (id nil "tag:blogger.com,1999:blog-3165518189103293420"))) (entry nil (title ((type . "html")) "Emacs-fu: the zenburn color theme") (link ((href . "http://emacs-fu.blogspot.com/2010/04/zenburn-color-theme.html"))) (id nil "tag:blogger.com,1999:blog-3992530807750384868.post-6991806489664012099") (updated nil "2010-04-04T10:53:37+00:00") (content ((type . "html")) "<div id=\"outline-container-1\" class=\"outline-2\">\n<div id=\"text-1\" class=\"outline-text-2\">\n<div style=\"clear: both; text-align: center;\" class=\"separator\">\n<a style=\"clear: right; float: right; margin-bottom: 1em; margin-left: 1em;\" href=\"http://2.bp.blogspot.com/_kGFGcbwevHE/S7hudg01isI/AAAAAAAAAfw/-jq5xEoP9LA/s1600/zenburn.png\"><img src=\"http://2.bp.blogspot.com/_kGFGcbwevHE/S7hudg01isI/AAAAAAAAAfw/-jq5xEoP9LA/s320/zenburn.png\" border=\"0\" /></a></div>\nA popular way to customize emacs is changing its <i>color scheme</i>, as already\ndiscussed <a href=\"http://emacs-fu.blogspot.com/2009/03/color-theming.html\">color theming</a>. Until recently, I was using an evolved version of the\ncolor theme presented there, '<code>djcb-dark</code>'. It works for me but, admittedly,\nit's a bit ugly.<br />\n<br />\nBut recently, in a post to the <a href=\"http://emacs-fu.blogspot.com/2009/06/e-mail-with-wanderlust.html\">Wanderlust</a> mailing list, someone mentioned a\ncolor theme called <i>Zenburn</i>. <a href=\"http://slinky.imukuppi.org/zenburnpage/\">Zenburn</a> started its life as a color scheme for\n\n<code>vim</code>, around 2002. The explicit goal was to have a pleasant theme that is\nlight on the eyes, and allows you to stay 'in the zone' for long stretches of\ntime. People liked it, and version for many other programs were made,\n<a href=\"http://brockman.se/2003/zenburn/\">including emacs</a>.\n<br />\n<br />\nI've been using Zenburn for the last few weeks, and I really like it. I used\nto think that 'low-contrast' would mean that things are not really clear; but\nthe opposite seems true. Anyway, the screen shot says more than a thousand\nwords I suppose…\n<br />\n<br />\nZenburn-for-emacs (written by Daniel Brockman) can be found at the link\nabove. I've sent my updates to him of course, but as it may take a while for\nthe 'official' version to be updated, I've put my version on\nEmacswiki: <a href=\"http://www.emacswiki.org/emacs/ColorThemeZenburn\">ZenburnColorTheme</a>. The changes are the support for Wanderlust,\n<code>hi-line</code> (for <a href=\"http://emacs-fu.blogspot.com/2008/12/highlighting-current-line.html\">highlighting the current line</a>) , <code>magit</code> and <a href=\"http://emacs-fu.blogspot.com/2009/07/keeping-related-buffers-together-with.html\"><code>elscreen</code></a>; also,\nI made selected (eh, <i>transiently marked regions</i>) not loose their foreground\ncolor.\n\n<br />\n<br />\nNote, the theme is not yet part of the <code>color-theme</code> package, but does require\nit.\n</div>\n</div><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/3992530807750384868-6991806489664012099?l=emacs-fu.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>") (author nil (name nil "djcb") (email nil "noreply@blogger.com") (uri nil "http://emacs-fu.blogspot.com/search/label/new")) (source nil (title ((type . "html")) "emacs-fu") (subtitle ((type . "html")) "useful tricks for emacs") (link ((rel . "self") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/-/new"))) (id nil "tag:blogger.com,1999:blog-3992530807750384868"))) (entry nil (title ((type . "html") (xml:lang . "en")) "Thomas Kappler: Weekly Links #2") (link ((href . "http://jugglingbits.wordpress.com/2010/04/01/weekly-links-2/"))) (id nil "http://jugglingbits.wordpress.com/?p=316") (updated nil "2010-04-01T20:53:26+00:00") (content ((type . "html") (xml:lang . "en")) "<h3>Conrad Barski and James Webb: <a href=\"http://www.lisperati.com/casting-spels-emacs/html/casting-spels-emacs-1.html\">Casting SPELs in Emacs Lisp</a></h3>\n<p><a href=\"http://www.lisperati.com/casting-spels-emacs/html/casting-spels-emacs-1.html\"><img src=\"http://www.lisperati.com/casting-spels-emacs/images/emacs-on-toaster.jpg\" title=\"Emacs on toaster\" height=\"200\" width=\"168\" alt=\"\" class=\"alignright\" /></a>Conrad Barski’s awesome Lisp tutorial Casting SPELs is now also available in an Emacs Lisp version, edited by James Webb. Even if Emacs Lisp is certainly not the greatest Lisp dialect, it shouldn’t matter much for a beginner’s tutorial and it sure is nice to be able to evaluate everything right in your editor.</p>\n<div style=\"clear: both;\"></div>\n<h3>ars technica: <a href=\"http://arstechnica.com/staff/nate/2010/04/tentacular-tentacular.ars\">Tentacular, tentacular!</a></h3>\n<blockquote><p>Cthulhu plucked a manila folder from somewhere within the non-Euclidean geometry of his manbag and dropped it on my desk with a thud.</p></blockquote>\n<p>A geeky, hilarious choose-your-own-adventure story written by Cthulhu. What else could you want for your Easter weekend.</p>\n<br />Filed under: <a href=\"http://jugglingbits.wordpress.com/category/weekly-links/\">Weekly Links</a> Tagged: <a href=\"http://jugglingbits.wordpress.com/tag/emacs/\">emacs</a>, <a href=\"http://jugglingbits.wordpress.com/tag/lisp/\">lisp</a>, <a href=\"http://jugglingbits.wordpress.com/tag/programming/\">programming</a>, <a href=\"http://jugglingbits.wordpress.com/tag/weekly-links/\">Weekly Links</a> <a href=\"http://feeds.wordpress.com/1.0/gocomments/jugglingbits.wordpress.com/316/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/jugglingbits.wordpress.com/316/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godelicious/jugglingbits.wordpress.com/316/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/delicious/jugglingbits.wordpress.com/316/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gostumble/jugglingbits.wordpress.com/316/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/stumble/jugglingbits.wordpress.com/316/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godigg/jugglingbits.wordpress.com/316/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/digg/jugglingbits.wordpress.com/316/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/goreddit/jugglingbits.wordpress.com/316/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/reddit/jugglingbits.wordpress.com/316/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=jugglingbits.wordpress.com&amp;blog=6812373&amp;post=316&amp;subd=jugglingbits&amp;ref=&amp;feed=1\" alt=\"\" border=\"0\" />") (author nil (name nil "thomas11") (uri nil "http://jugglingbits.wordpress.com")) (source nil (title ((type . "html")) "Juggling Bits » emacs") (subtitle ((type . "html")) "thomas11's technical blog") (link ((rel . "self") (href . "http://jugglingbits.wordpress.com/tag/emacs/feed/"))) (id nil "http://jugglingbits.wordpress.com"))) (entry nil (title ((type . "html")) "Got Emacs?: Using org-mode to send HTML mail") (link ((href . "http://emacsworld.blogspot.com/2010/04/using-org-mode-to-send-html-mail.html"))) (id nil "tag:blogger.com,1999:blog-3165518189103293420.post-7786964848365802736") (updated nil "2010-04-01T18:02:44+00:00") (content ((type . "html")) "<div>From the <a href=\"http://lists.gnu.org/mailman/listinfo/emacs-orgmode\" target=\"_blank\">org-mode mailing list</a>, here's a <a href=\"http://permalink.gmane.org/gmane.emacs.orgmode/23564\" target=\"_blank\">way to post HTML mail </a>messages using <a href=\"http://orgmode.org/\" target=\"_blank\">org-mode</a>.  The link that works is <a href=\"http://github.com/eschulte/org-mime\" target=\"_blank\">this one</a>.  Apparently, one can still see the text part even if you set the <a href=\"http://www.gnus.org/\" target=\"_blank\">Gnus reader</a> to discourage HTML.  And in it's present form, it works only with Gnus and not any other Emacs <a href=\"http://en.wikipedia.org/wiki/MUA\" target=\"_blank\">MUA</a>s.<br /><br />Presumably, one would use this feature only when required, as HTML is not something that is recommended as mail text as there is no guarantee that mail clients would be able to render it or render it the way you'd initially formatted the HTML.<br /><br />Stick to plain text; Besides, if you're going all flashy in getting your point across, you've got a bigger problem than using HTML to say it.<br /></div><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/3165518189103293420-7786964848365802736?l=emacsworld.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>") (author nil (name nil "sivaram") (email nil "noreply@blogger.com") (uri nil "http://emacsworld.blogspot.com/")) (source nil (title ((type . "html")) "Got Emacs?") (subtitle ((type . "html")) "Postings on living in an Emacs world.  Posts will be mostly on using Emacs, related functions and tools.") (link ((rel . "self") (href . "http://www.blogger.com/feeds/3165518189103293420/posts/default"))) (id nil "tag:blogger.com,1999:blog-3165518189103293420"))) (entry nil (title ((type . "html")) "Yoni Rabkin Katzenell: Be cool: recycoolbits") (link ((href . "http://yrk.livejournal.com/275427.html"))) (id nil "urn:lj:livejournal.com:atom1:yrk:275427") (updated nil "2010-04-01T05:47:51+00:00") (content ((type . "html")) "I'd like to emphatically promote the site <a href=\"http://yrk.livejournal.com/data/happyaprilsfools2010.itsatoaster.com\">www.recycoolbits.com</a>. If you are like me you probably have hundreds, or maybe thousands of old PDFs, ODF files, TXT files, JPEGs, and perhaps even .o files from compilations. All of these files can now be sent to recycling with <a href=\"http://yrk.livejournal.com/data/happyaprilsfools2010.itsatoaster.com\">www.recycoolbits.com</a>.<br /><br />Bytes are shredded and ground into small pieces or crushed into bales. These pieces or bales are melted in a bit-smelter to produce molten (random) bits. The molten bits are pured into word or double word molds and shipped back to the Internet. <a href=\"http://yrk.livejournal.com/data/happyaprilsfools2010.itsatoaster.com\">www.recycoolbits.com</a> use an eco-friendly recycling technique to extract up to 80% of the original bits from your old documents for re-use.<br /><br />Help us create a more sustainable Internet with <a href=\"http://yrk.livejournal.com/data/happyaprilsfools2010.itsatoaster.com\">www.recycoolbits.com</a>.") (author nil (name nil "yrk") (uri nil "http://yrk.livejournal.com/")) (source nil (title ((type . "html")) "Talk is talk, kill is kill") (subtitle ((type . "html")) "The online journal of yrk") (link ((rel . "self") (href . "http://yrk.livejournal.com/data/atom"))) (id nil "urn:lj:livejournal.com:atom1:yrk"))) (entry nil (title ((type . "html")) "Johan Andersson: Ecukes - Cucumber for Emacs") (link ((href . "http://blog.tuxicity.se/cucumber/elisp/emacs/testing/2010/04/01/ecukes-cucumber-for-emacs.html"))) (id nil "http://blog.tuxicity.se/cucumber/elisp/emacs/testing/2010/04/01/ecukes-cucumber-for-emacs") (updated nil "2010-04-01T00:00:00+00:00") (content ((type . "html")) "<p>I just finished the first release of a project of mine called\n<a href=\"http://ecukes.info\">Ecukes</a>. Ecukes is a package for Emacs that makes\nit possible to write Cucumber like tests for Emacs packages.</p>\n\n<p>This release includes the most basic parts of Cucumber and I would\nconsider it usable, but still under development.</p>\n\n<p>To give you an example of what you can do with Ecukes, check out this example:</p>\n\n<div class=\"highlight\"><pre><code class=\"gherkin\"><span class=\"nc\">Feature:</span><span class=\"no\"> Work with text</span><span class=\"nb\"></span>\n<span class=\"nb\">  In order to work with text</span>\n<span class=\"nb\">  As an Emacs user</span>\n<span class=\"nb\">  I want to do freaky stuff with it</span>\n  \n  <span class=\"nc\">Background:</span><span class=\"no\"></span>\n<span class=\"k\">    Given </span>I am in the buffer <span class=\"s\">\"*Freaky Stuff*\"</span>\n    <span class=\"k\">And </span>the buffer is empty\n\n  <span class=\"nc\">Scenario:</span><span class=\"no\"> Transpose words</span>\n<span class=\"k\">    When </span>I insert <span class=\"s\">\"word1 word2\"</span>\n    <span class=\"k\">And </span>I go to point <span class=\"s\">\"6\"</span>\n    <span class=\"k\">And </span>I press <span class=\"s\">\"M-t\"</span>\n    <span class=\"k\">Then </span>I should see <span class=\"s\">\"word2 word1\"</span>\n\n  <span class=\"c\"># ...</span>\n</code></pre>\n</div>\n\n\n<p>Each step needs to be translated with a step definition. These are the\nsteps for the feature above. All these steps are however already in\n<a href=\"http://github.com/rejeep/espuds\">Espuds</a>, which is a collection of\ncommonly used step definitions.</p>\n\n<div class=\"highlight\"><pre><code class=\"scheme\"><span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"ss\">'edmacro</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"nf\">When</span> <span class=\"s\">\"^I press \\\"\\\\(.+\\\\)\\\"$\"</span>\n      <span class=\"p\">(</span><span class=\"k\">lambda </span><span class=\"p\">(</span><span class=\"nf\">keybinding</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"nf\">execute-kbd-macro</span> <span class=\"p\">(</span><span class=\"nf\">edmacro-parse-keys</span> <span class=\"nv\">keybinding</span><span class=\"p\">))))</span>\n\n<span class=\"p\">(</span><span class=\"nf\">Given</span> <span class=\"s\">\"I am in the buffer \\\"\\\\(.+\\\\)\\\"\"</span>\n       <span class=\"p\">(</span><span class=\"k\">lambda </span><span class=\"p\">(</span><span class=\"nf\">buffer</span><span class=\"p\">)</span>\n         <span class=\"p\">(</span><span class=\"nf\">switch-to-buffer</span> <span class=\"p\">(</span><span class=\"nf\">get-buffer-create</span> <span class=\"nv\">buffer</span><span class=\"p\">))))</span>\n\n<span class=\"p\">(</span><span class=\"nf\">And</span> <span class=\"s\">\"the buffer is empty\"</span>\n     <span class=\"p\">(</span><span class=\"k\">lambda </span><span class=\"p\">()</span>\n       <span class=\"p\">(</span><span class=\"nf\">erase-buffer</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"nf\">When</span> <span class=\"s\">\"I insert \\\"\\\\(.+\\\\)\\\"\"</span>\n      <span class=\"p\">(</span><span class=\"k\">lambda </span><span class=\"p\">(</span><span class=\"nf\">contents</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"nf\">insert</span> <span class=\"nv\">contents</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"nf\">And</span> <span class=\"s\">\"I go to point \\\"\\\\(.+\\\\)\\\"\"</span>\n     <span class=\"p\">(</span><span class=\"k\">lambda </span><span class=\"p\">(</span><span class=\"nf\">point</span><span class=\"p\">)</span>\n       <span class=\"p\">(</span><span class=\"nf\">goto-char</span> <span class=\"p\">(</span><span class=\"nf\">string-to-number</span> <span class=\"nv\">point</span><span class=\"p\">))))</span>\n\n<span class=\"p\">(</span><span class=\"nf\">Then</span> <span class=\"s\">\"I should see \\\"\\\\(.+\\\\)\\\"\"</span>\n      <span class=\"p\">(</span><span class=\"k\">lambda </span><span class=\"p\">(</span><span class=\"nf\">should-see</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">((</span><span class=\"nf\">actual</span> <span class=\"p\">(</span><span class=\"nf\">buffer-substring-no-properties</span> <span class=\"p\">(</span><span class=\"nf\">point-min</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">point-max</span><span class=\"p\">)))</span>\n              <span class=\"p\">(</span><span class=\"nf\">expected</span> <span class=\"nv\">should-see</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"nf\">assert</span>\n           <span class=\"p\">(</span><span class=\"nf\">search</span> <span class=\"nv\">expected</span> <span class=\"nv\">actual</span><span class=\"p\">)</span> <span class=\"nv\">nil</span>\n           <span class=\"p\">(</span><span class=\"nf\">concat</span> <span class=\"s\">\"Expected \\\"\"</span> <span class=\"nv\">actual</span> <span class=\"s\">\"\\\" to include \\\"\"</span> <span class=\"nv\">expected</span> <span class=\"s\">\"\\\"\"</span><span class=\"p\">)))))</span>\n</code></pre>\n</div>\n\n\n<p>This is how running the feature looks like:\n<img src=\"http://blog.tuxicity.se/images/ecukes.png\" class=\"screenshot\" /></p>\n\n<p>Check out <a href=\"http://ecukes.info\">Ecukes website</a> and the\n<a href=\"http://github.com/rejeep/ecukes\">source code</a>.</p>\n\n<p>You might also want to check out two Emacs packages of mine that are tested with Ecukes:</p>\n\n<ul>\n<li>Drag Stuff - <a href=\"http://github.com/rejeep/drag-stuff\">http://github.com/rejeep/drag-stuff</a></li>\n<li>Wrap Region - <a href=\"http://github.com/rejeep/wrap-region\">http://github.com/rejeep/wrap-region</a></li>\n</ul>") (author nil (name nil "Johan Andersson") (uri nil "http://blog.tuxicity.se/")) (source nil (title ((type . "html")) "Tuxicity - Emacs") (link ((rel . "self") (href . "http://blog.tuxicity.se/atom-emacs.xml"))) (id nil "http://blog.tuxicity.se/"))) (entry nil (title ((type . "html")) "Flickr tag 'emacs': E-Mac") (link ((href . "http://www.flickr.com/photos/ccxxii/4480316234/"))) (id nil "tag:flickr.com,2004:/photo/4480316234") (updated nil "2010-03-31T22:46:14+00:00") (content ((type . "html")) "<p><a href=\"http://www.flickr.com/people/ccxxii/\">Imposcillator</a> posted a photo:</p>\n	\n<p><a href=\"http://www.flickr.com/photos/ccxxii/4480316234/\" title=\"E-Mac\"><img src=\"http://farm5.static.flickr.com/4006/4480316234_671047aff2_m.jpg\" alt=\"E-Mac\" height=\"150\" width=\"240\" /></a></p>\n\n<p>Emacs + Mac + minimalism = &lt;3.</p>") (author nil (name nil "Imposcillator") (email nil "nobody@flickr.com") (uri nil "http://www.flickr.com/photos/tags/emacs/")) (source nil (title ((type . "html")) "Recent Uploads tagged emacs") (link ((rel . "self") (href . "http://api.flickr.com/services/feeds/photos_public.gne?tags=emacs&lang=en-us&format=rss_200"))) (id nil "http://www.flickr.com/photos/tags/emacs/"))) (entry nil (title ((type . "html") (xml:lang . "en")) "sachachua: Dusting off my Emacs config files") (link ((href . "http://sachachua.com/wp/2010/03/dusting-off-my-emacs-config-files/"))) (id nil "http://sachachua.com/wp/2010/03/dusting-off-my-emacs-config-files/") (updated nil "2010-03-31T12:00:00+00:00") (content ((type . "html") (xml:lang . "en")) "<p>In June 2009, I <a href=\"http://sachachua.com/wp/2009/06/changing-hats/\">switched hats</a> and started facilitating workshops instead of developing Drupal code. Organizing resources and learning more about consulting kept me in a mostly-Windows environment with little reason to delve into the mysteries of the Emacs text editor, although I occasionally used Emacs to <a href=\"http://sachachua.com/wp/2009/11/automating-tedious-wiki-editing-tasks-with-emacs-and-w3m\">automate repetitive editing tasks</a>.</p>\n<p>Even though I haven’t played around with Emacs for a while, the text editor—and the community around it—hasn’t let go of me yet. My Emacs-related posts remain among the most popular on my blog, and people often write to me to ask questions or thank me for inspiration. I still keep <a href=\"http://planet.emacsen.org\">Planet Emacsen</a> in my feed reader, and I occasionally drop by the <a href=\"http://emacswiki.org\">Emacs Wiki</a>.</p>\n<p>I miss working on Wicked Cool Emacs. I’ve turned it over to <a href=\"http://twitter.com/IEURE\">Ian Eure</a>, whom I assume is persistently plugging away at it (although he might also have gotten distracted by real life as well–totally understandable). Now that I’m no longer distracted by the fun of tweaking Drupal (almost as flexible as Emacs, thanks to its hook system), Emacs calls.</p>\n<p>I miss geeking out in #emacs on irc.freenode.net, helping people with questions on mailing lists, and playing with ideas that can be translated into code.</p>\n<p>So I’m dusting off my configuration files and my notes, writing an org-toodledo module that pulls in my tasks from the web-based Toodledo task management system I’ve been using, and developing a rudimentary synchronization system that will help me make the transition.</p>\n<p>(message “Hello, world!”)</p>\n<p>Post from: <a href=\"http://sachachua.com/wp\">sacha chua :: enterprise 2.0 consultant, storyteller, geek</a>.\nCheck out my blog for tips on <a href=\"http://sachachua.com/wp/category/va\">managing virtual assistants</a>, <a href=\"http://sachachua.com/wp/category/drupal\">Drupal</a>, and other topics!<br /><br /><a href=\"http://sachachua.com/wp/2010/03/dusting-off-my-emacs-config-files/\">Dusting off my Emacs config files</a></p>") (author nil (name nil "Sacha Chua") (uri nil "http://sachachua.com/wp")) (source nil (title ((type . "html")) "sacha chua :: enterprise 2.0 consultant, storyteller, geek » emacs") (subtitle ((type . "html")) "I help organizations and people learn how to connect and collaborate more effectively using Web 2.0 tools.") (link ((rel . "self") (href . "http://feeds.feedburner.com/pimpmyemacs"))) (id nil "http://sachachua.com/wp"))) (entry nil (title ((type . "html") (xml:lang . "en")) "Alex Bennée: Learning to love the snake") (link ((href . "http://www.bennee.com/~alex/blog/2010/03/31/learning-to-love-the-snake/"))) (id nil "http://www.bennee.com/~alex/blog/?p=1813") (updated nil "2010-03-31T09:47:38+00:00") (content ((type . "html") (xml:lang . "en")) "<p>Yesterday I finished of what is hopefully the last testing release of the product I’m responsible for, assuming no major problems it will go gold soon. This means I can start on doing some new development work. The thing I’m working on next will be done in a scripting language as basically the task of ensuring configurations are correct and properly setup is a) not performance critical and b) a hell of a lot easier than wrangling strings in C.</p>\n<p>\nWhile most of the scripting stuff on the product is written in perl I’ve been contemplating doing something a bit more major with <a href=\"http://en.wikipedia.org/wiki/Python_(programming_language)\">Python</a>. While the perl I write (<a href=\"http://github.com/stsquad/ps3enc/blob/master/ps3enc.pl\">example</a>) probably looks more like C with extra punction marks compared to the code of a seasoned perl wrangler I still occasionaly get tripped up by it. In contrast my experience with Python so far has been much more pleasent, no doubt helped by the ability to experiment in an <a href=\"http://ipython.scipy.org/moin/\">interactive python shell</a>. So far it’s behaviour has been unsurprising. We shall see how I feel about it after this piece of work <img src=\"http://www.bennee.com/~alex/blog/wp-includes/images/smilies/icon_smile.gif\" alt=\":-)\" class=\"wp-smiley\" /> </p>\n<p>\nOf course the first thing to do before starting out on this course is to see if my editor is configured and ready. I’ve immediately walked into the <em>python.el</em> and <em>python-mode.el</em> <a href=\"http://www.emacswiki.org/emacs/PythonMode\">schism</a>. I’m going with <em>python-mode.el</em> for the time being but at the moment I’m not doing much more than run iPython as a inferior shell within Emacs.</p>") (author nil (name nil "Alex") (uri nil "http://www.bennee.com/~alex/blog")) (source nil (title ((type . "html")) "Alex's Adventures on the Infobahn » emacs") (subtitle ((type . "html")) "the wanderings of a supposed digital native") (link ((rel . "self") (href . "http://www.bennee.com/~alex/blog/feed/?tag=emacs"))) (id nil "http://www.bennee.com/~alex/blog"))) (entry nil (title ((type . "html") (xml:lang . "en-us")) "Chris Ball: An e-mail counting t-shirt") (link ((href . "http://blog.printf.net/articles/2010/03/30/email-counting-tshirt"))) (id nil "urn:uuid:ce2f5b57-2da8-478e-b42f-59f11b5b24ac") (updated nil "2010-03-30T13:10:00+00:00") (content ((type . "html")) "I've been wanting to get into electronics for a while now (it seems like a sensible thing for someone who works for a <a href=\"http://laptop.org\">laptop manufacturer</a> to do) but haven't known where to start.  Back in January, the fine people at <a href=\"http://sparkfun.com/\">Sparkfun Electronics</a> helped out with that by running a <a href=\"http://www.sparkfun.com/commerce/news.php?id=305\">Free Day</a> where they gave away electronics worth USD $100k:  $100 free, to 1000 people.  I was lucky to be one of the 1000 people, which put some electronics ideas within my reach that I otherwise would have found it hard to justify spending money on.\n<br /><br />\nAnd, here's the result — <a href=\"http://madprime.org/\">Madeleine</a> and I made a t-shirt together that displays how much unread e-mail I have using an <a href=\"http://www.sparkfun.com/commerce/product_info.php?products_id=9266\">Arduino Lilypad</a> and <a href=\"http://www.sparkfun.com/commerce/product_info.php?products_id=9358\">Bluetooth dongle</a>, and an Android phone to send the number of unread mails to the shirt.  Here's an image of the center of the shirt, and a video showing it in action:\n<br /><br />\n<div align=\"center\">\n <img src=\"http://chris.printf.net/lilypad-closeup.jpg\" />\n <br /><br />\n &lt;object height=\"324\" width=\"528\"&gt;&lt;param name=\"movie\" value=\"http://www.youtube.com/v/0X-hPEZWWo8&amp;amp;ap=%2526fmt%3D22&amp;amp;rel=0\"&gt;&lt;param name=\"allowFullScreen\" value=\"true\"&gt;&lt;param name=\"allowscriptaccess\" value=\"always\"&gt;&lt;embed allowfullscreen=\"true\" allowscriptaccess=\"always\" height=\"324\" src=\"http://www.youtube.com/v/0X-hPEZWWo8&amp;amp;ap=%2526fmt%3D22&amp;amp;rel=0\" type=\"application/x-shockwave-flash\" width=\"528\"&gt;&lt;/embed&gt;&lt;/object&gt;\n</div><p>\n\n</p><div align=\"center\">\n <i>Lilypad t-shirt (<a href=\"http://www.youtube.com/watch?v=0X-hPEZWWo8\">youtube</a>, <a href=\"http://chris.printf.net/lilypad.ogv\">download in Ogg Theora</a>)\n </i> \n</div>\n\n<br />\nI've uploaded the source code that runs on the Lilypad and the python script that I'm running on the Android phone <a href=\"http://github.com/cjb/lilypad-email-shirt\">to my github account</a>.") (author nil (name nil "Chris Ball") (uri nil "http://blog.printf.net")) (source nil (title ((type . "html")) "Chris Ball") (link ((rel . "self") (href . "http://blog.printf.net/xml/rss20/feed.xml"))) (id nil "http://blog.printf.net"))) (entry nil (title ((type . "html") (xml:lang . "en-US")) "Phil Hagelberg: in which the maintainer's perspective is considered") (link ((href . "http://technomancy.us/135"))) (id nil "tag:technomancy.us,2007:in%20which%20the%20maintainer's%20perspective%20is%20considered") (updated nil "2010-03-29T19:58:00+00:00") (content ((type . "html") (xml:lang . "en-US")) "<p>In the past few months I've had a number of contributions pour in\n  for some of my projects. It's been really exciting to see this\n  level of community involvement, and I try to do everything I can\n  to encourage users to get involved in development. But I don't\n  have a lot of free time these days—with two small kids I'm\n  lucky to have a few hours a week to address incoming patches, much\n  less work on new features.</p>\n\n<img src=\"http://technomancy.us/i/github-inbox.png\" alt=\"github inbox (dramatization)\" title=\"(dramatization)\" />\n\n<p>There are a few things that could streamline the process a bit,\n  so I thought I'd take some time to explain how these projects look\n  from the maintainer's side and the things that contributors could\n  do to make their patches easy to apply.</p>\n\n<h4>Coordinating</h4>\n\n<p>For simple stuff it's great just to get patches out of the\n  blue. For more involved work, however, it's important to\n  communicate so that parallel feature work doesn't interfere. For\n  my projects, there are few enough people working on them that\n  usually mentioning it on the mailing list is plenty. Larger\n  projects will often track in-progress features using a ticket\n  system, so in that case you'll probably want to do both. Then\n  you can fork/checkout the project and get started.</p>\n\n<h4>Branches</h4>\n\n<p>The first thing to remember is to keep all your work in topic\n  branches. Most people just commit directly to the master branch,\n  but then it's trickier for them to keep in sync with\n  upstream. Every time you pull in the latest changes it causes a\n  merge commit. This needlessly clutters up the history and makes it\n  difficult for maintainers to find the exact changes they are\n  looking for. It gets worse if there are multiple unrelated\n  features committed directly to master. Even once your changes are\n  merged, it's likely that pulling changes after that point will\n  still result in merge commits rather than fast-forwards simply\n  because the same set of changes were applied in a different\n  order. So keeping your work in a separate branch per feature/fix\n  allows the master history to be kept clean.</p>\n\n<p>When it's time for a maintainer to merge your branch, they have a\n  choice to either rebase it on top of the current master and then\n  commit it, maintaining a linear history, or merge it in to master\n  with a single merge commit. The latter is usually done in the case\n  of longer-lived branches where you want to be able to group\n  together a whole series of commits under a single feature. It's a\n  bit silly/noisy to leave a merge commit lying around from merging\n  a branch with only one or two commits.</p>\n\n<h4>Cleanliness</h4>\n\n<p>I'm a little more picky about the silly little things than most\n  maintainers; I prefer my projects to be free of trailing\n  whitespace and to use 80-column width, standard indentation, and\n  no tabs. It's easy enough to enforce this in Emacs:</p>\n\n<pre class=\"code\">(setq whitespace-style '(trailing lines space-before-tab\n                          indentation space-after-tab)\n      whitespace-line-column 80)\n\n  <span class=\"comment-delimiter\">;; </span><span class=\"comment\">add hooks for every major mode you use\n</span>(add-hook 'clojure-mode-hook (<span class=\"keyword\">lambda</span> () (whitespace-mode 1)))</pre>\n\n<p>In an ideal world, projects would have great test coverage and\n  bugfix patches would always include first a test that fails in\n  order to highlight the problem the patch addresses, then the\n  implementation that causes the test to pass. Many of my projects\n  unfortunately fall into the tricky-to-test zone either by way of\n  complex asynchronous I/O or UI-heavy pieces of code, making this\n  ideal difficult to achieve. In any case, it gives maintainers much\n  more confidence when applying a patch if they can use tests to\n  verify it's behaving as intended. It just takes a big burden off\n  the person performing the merge if they only have to manually\n  verify that the test passes and makes sense rather than checking\n  by hand that the implementation is behaving as expected.</p>\n\n<p>I've found that in Clojure it's good to aim for function bodies\n  of ten lines or less, modulo exception handling and\n  logging. Naturally there will be places where this isn't\n  practical, but it's good to keep this in mind and carefully\n  examine longer functions to see if there would be a cleaner way to\n  break things up. It should go without saying that using pure\n  functions as much as possible and consolidating all I/O and\n  mutation into a few places will also help a great deal to make\n  things easier to read.</p>\n\n<h4>Sending it off</h4>\n\n<p>Personally I find it easiest to work with changes that are\n  published to a remote git repository. Generally this means people\n  create forks on Github, but there's no reason other options\n  like <a href=\"http://gitorious.org\">Gitorious</a> or even a\n  self-hosted git repo wouldn't work. Github pull requests work\n  well, although please do <em>not</em> send them without a message\n  explaining what the changes do. Github has a \"feature\" whereby you\n  can send pull requests to everyone with a fork of a project; this\n  is a terrible, terrible thing that you should never use. Most of\n  the people on that list forked the project months and months ago\n  and forgot about it, so please don't spam them.</p>\n\n<p>Some people prefer to just mail patches or attach patches to bug\n  tracker tickets. It's easy to generate these patches by\n  running <kbd>git format-patch master</kbd> from your topic\n  branch.</p>\n\n<p>And it's an unfortunate fact of life that some projects require\n  copyright assignment before they can accept nontrivial patches, so\n  check for that first. In some cases a paper form is even required,\n  which can bring a further unexpected delay into the picture.</p>\n\n<h4>Commit Access</h4>\n\n<p>In some cases I know I'm just not able to give a project the\n  attention it deserves and I volunteer certain contributors for the\n  post of maintainer. Sometimes this is because I just can't give a\n  project the attention it needs to keep up with incoming patches,\n  and sometimes (as with Hugo Duncan and his excellent work\n  on <a href=\"http://github.com/technomancy/swank-clojure/tree/swank-break\">swank-clojure\n  break</a>) it's because I just don't want to be a bottleneck\n  keeping their awesome work from getting in.</p>\n\n<p>In these cases I like to ask that changes don't get merged to\n  master until they've been reviewed by at least one person other\n  than the author. If you're a committer that's applying patches\n  someone else sent in, then you're doing the review, otherwise just\n  try to get some help from IRC or the project's mailing list to\n  review your patch before it makes it to master.</p>\n\n<p>All that said, keep the patches coming! I love getting them.</p>") (author nil (name nil "Phil Hagelberg") (uri nil "http://technomancy.us/")) (source nil (title ((type . "html")) "Technomancy") (link ((rel . "self") (href . "http://technomancy.us/feed/atom"))) (id nil "tag:technomancy.us,2007:blog/"))) (entry nil (title ((type . "html") (xml:lang . "en")) "Anupam Sengupta: Converting from TaskPaper to Emacs Org-Mode") (link ((href . "http://slashusr.wordpress.com/2010/03/30/converting-from-taskpaper-to-emacs-org-mode/"))) (id nil "http://slashusr.wordpress.com/2010/03/30/converting-from-taskpaper-to-emacs-org-mode/") (updated nil "2010-03-29T19:05:19+00:00") (content ((type . "html") (xml:lang . "en")) "<p><span style=\"font-size: 13pt;\"><strong>Why TaskPaper and Org-Mode?<br />\n</strong></span><span style=\"text-decoration: underline;\"><a href=\"http://www.hogbaysoftware.com/products/taskpaper\"></a></span></p>\n<p><span style=\"text-decoration: underline;\"><a href=\"http://www.hogbaysoftware.com/products/taskpaper\">TaskPaper</a></span> is a simple and elegant task management software for the OSX platform. It combines the simplicity of a text micro-format to mark the tasks, and the elegance of a Mac UI. It also provides a quick launch time and a nice system-wide quick entry window that is accessible with a single shortcut key.</p>\n<p><img src=\"http://slashusr.files.wordpress.com/2010/03/tasks.png?w=345&amp;h=356\" alt=\"tasks.png\" height=\"356\" width=\"345\" /></p>\n<p><img src=\"http://slashusr.files.wordpress.com/2010/03/taskpapercapturewindow.png?w=396&amp;h=110\" alt=\"taskpapercapturewindow.png\" height=\"110\" width=\"396\" /></p>\n<p>I have been a heavy user of Emacs’ <span style=\"text-decoration: underline;\"><a href=\"http://orgmode.org/\">Org-Mode</a></span> for some years now, and love the power and flexibility it offers for tracking not just outlines and tasks, but any text based item, including notes and calendar entries. In fact Org-Mode has become one of the primary software that I use regularly, every day.</p>\n<p>So where does the link between TaskPaper and Org-Mode come in? Both are text based, and have their own light-weight formats to define outlines and tasks. The underlying files are plain text with the meaning readable even when not viewed by the appropriate software. Org-Mode is obviously much more feature rich than TaskPaper, which by design keeps things simple.</p>\n<p>However, there is one big difference that has led me to looking at integration: Org-Mode is Emacs based and hence takes <strong>ages</strong> to launch. TaskPaper on the other hand launches in under a second, and also offers a nice quick entry form that is available system-wide via a a global short-cut key.</p>\n<p>Emacs aficionados will protest now – after all – Emacs is <strong>meant</strong> to be launched and never shutdown! This is true, but in my usage patterns, Emacs does get closed once in a while and having to launch it just to make a few quick Org-Mode entries (even with the excellent remember mode) becomes a pain.</p>\n<p>My usage has now become more of the following:</p>\n<ol style=\"\">\n<li>Use TaskPaper as an initial <strong>capture mechanism</strong> (sort of as a pre-Inbox store). I make heavy use of the quick entry window here</li>\n<li>Use a script to collect the TaskPaper entries and reformat them into a Org-Mode compatible file</li>\n<li>Append the converted entries into my primary Org-Mode Inbox whenever I have Emacs open</li>\n</ol>\n<p>This (for me) provides best of both worlds – quick and ubiquitous data capture, and the power and flexibility of Org-Mode.<br />\n<span style=\"font-size: 13pt;\"><strong> </strong></span></p>\n<p><span style=\"font-size: 13pt;\"><strong>The Ruby Conversion Script<br />\n</strong></span></p>\n<p>Without further ado, the script to convert from TaskPaper to Org-mode is:</p>\n<pre>#!/usr/bin/env ruby\n#\n# Converts Taskpaper files to Emacs org-mode files.\n#\n# Author: Anupam Sengupta, 2010\n#\n# Distributed under the BSD license (<a href=\"http://www.opensource.org/licenses/bsd-license.php\">http://www.opensource.org/licenses/bsd-license.php</a>)\n#\n# Usage: From the command line, enter the command:\n#\n#  ./tpaper2org.rb &lt;taskpaperfilename&gt;\n#\n# The output is on STDOUT, which can be redirected to an Org-mode file.\n# Whether the generated org-mode file should use odd-level prefix stars\n# See <a href=\"http://orgmode.org/manual/Clean-view.html\">http://orgmode.org/manual/Clean-view.html</a> for details.\nORG_USES_ODD_LEVELS = false\n\nLINE_PATTERN = /^(\\t*)          # Leading tabs\n               -                # Followed by a dash (the taskpaper task identifier)\n               (.*?)            # The task description\n               ((@\\w+\\s*)*)     # The tags, if any\n               $/x\n\nall_tags = Hash.new(0)\n\nShiftlvl = ORG_USES_ODD_LEVELS ? 2 : 1 # Determine the number of stars to use in Org-mode entries\n\nwhile (line = gets()):\n  line.chomp!\n   md = LINE_PATTERN.match(line)          # Match and extract each line\n  if md then                                                # ................ A Task line\n    tags = md[3].split(/ +/).reject {|tag| “@done” == tag } # get the tags, except @done tags\n    tags = [‘’, tags, ‘’].flatten unless tags.empty?\n    puts ‘*’ * (1 + Shiftlvl * (md[1].length + 1)) + (line =~ /@done/ ? “ DONE” : “ TODO”) + md[2] + tags.join(‘:’)\n    tags.each { |tag| all_tags[tag] += 1} if tags # Keep a list of all tags\n  elsif line =~/:$/                               # ................ A project line\n    print “* “\n    puts line.chomp(“:”)\n  else                          # ................ Any other line\n    puts line\n  end\nend\n\n# Lets do a summary of the tags used.\nputs &lt;&lt;END\n# The tags used till now.\n#+TAGS:#{all_tags.keys.sort.join(‘ ‘)}\nEND</pre>\n<p>Note that Org-mode supports multiple prefix styles with ‘*’. In particular, the odd-levels versus the odd-even levels is interesting and useful. The script has a ‘ORG_USES_ODD_LEVELS’ global variable that can be set to true if this is the desired export format.</p>\n<p>In addition, the script also adds the tags used in the TaskPaper file as a ‘#+TAGS’ entry in the exported org-mode file. You can comment this if this is not required.<br />\n<span style=\"font-size: 13pt;\"><strong> </strong></span></p>\n<p><span style=\"font-size: 13pt;\"><strong>The TaskPaper format<br />\n</strong></span></p>\n<p>The TaskPaper format is simple, and the file (which by default ends with the extension ‘.taskpaper’) is essentially a plain text file that can be opened and edited in any text editor.</p>\n<p>The format can be summarized as (<em>from the TaskPaper User’s Guide</em>):</p>\n<p>A project is a line ending with a colon:</p>\n<pre>      A Project:\n</pre>\n<p>A task is a line starting with a dash followed by a space:</p>\n<pre>    - My First Task</pre>\n<p>A Note is any line that is NOT a project or a task (i.e., does not start with a dash or end with a colon):</p>\n<pre>    Notes for a task</pre>\n<p>A tag is any word prefixed with the @ symbol. The tag can optionally have a value in parentheses after the tag name:</p>\n<pre>      - My First Task @atag @another_tag(1)</pre>\n<p>Outlining is done by indenting the tasks with tabs:</p>\n<pre>     - My First Task @atag\n         - My sub-level task</pre>\n<p><span style=\"font-size: 13pt;\"><strong>Usage<br />\n</strong></span></p>\n<p>Using the script is simple. Assuming that TaskPaper’s file is named tasks.taskpaper, from the OS X terminal, run the following command:</p>\n<pre>        $ tpaper2org.rb tasks.taskpaper &gt;&gt; tinbox.org</pre>\n<p>Where tinbox.org is the destination org-mode file.</p>\n<p>This shell command can be put into a cron job or invoked from within Emacs to pull in the tasks as required. You may also want to delete the TaskPaper file (or empty its contents) after this is done, to prevent duplicate entries being imported the next time the Ruby Script is run.<br />\n<span style=\"font-size: 13pt;\"><strong> </strong></span></p>\n<p><span style=\"font-size: 13pt;\"><strong>Links<br />\n</strong></span><span style=\"text-decoration: underline;\"><a href=\"http://coderepos.org/share/browser/lang/elisp/taskpaper/trunk/taskpaper.el\"></a></span></p>\n<p><span style=\"text-decoration: underline;\"><a href=\"http://coderepos.org/share/browser/lang/elisp/taskpaper/trunk/taskpaper.el\">taskpaper.el</a></span> is an Emacs mode for emulating the TaskPaper interface with support for projects and tasks. The tags support seems to be missing.<br />\n<span style=\"text-decoration: underline;\"><a href=\"http://www.mail-archive.com/emacs-orgmode@gnu.org/msg06126.html\"></a></span></p>\n<p><span style=\"text-decoration: underline;\"><a href=\"http://www.mail-archive.com/emacs-orgmode@gnu.org/msg06126.html\">Discussion</a></span> on the Org-Mode mailing list about Taskpaper and Org-Mode.</p>\n<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/slashusr.wordpress.com/122/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/slashusr.wordpress.com/122/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godelicious/slashusr.wordpress.com/122/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/delicious/slashusr.wordpress.com/122/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gostumble/slashusr.wordpress.com/122/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/stumble/slashusr.wordpress.com/122/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godigg/slashusr.wordpress.com/122/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/digg/slashusr.wordpress.com/122/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/goreddit/slashusr.wordpress.com/122/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/reddit/slashusr.wordpress.com/122/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=slashusr.wordpress.com&amp;blog=8359132&amp;post=122&amp;subd=slashusr&amp;ref=&amp;feed=1\" alt=\"\" border=\"0\" />") (author nil (name nil "evolve75") (uri nil "http://slashusr.wordpress.com")) (source nil (title ((type . "html")) "/usr » Emacs") (subtitle ((type . "html")) "Tech Rants, Tips, Emacs &amp; the Kitchen Sink") (link ((rel . "self") (href . "http://slashusr.wordpress.com/tag/emacs/feed/atom/"))) (id nil "http://slashusr.wordpress.com/feed/atom/"))) (entry nil (title ((type . "html")) "Flickr tag 'emacs': Emacs pinky") (link ((href . "http://www.flickr.com/photos/gabrielsaldana/4468068807/"))) (id nil "tag:flickr.com,2004:/photo/4468068807") (updated nil "2010-03-28T02:14:39+00:00") (content ((type . "html")) "<p><a href=\"http://www.flickr.com/people/gabrielsaldana/\">gabrielsaldana</a> posted a photo:</p>\n	\n<p><a href=\"http://www.flickr.com/photos/gabrielsaldana/4468068807/\" title=\"Emacs pinky\"><img src=\"http://farm3.static.flickr.com/2760/4468068807_f6e6bbe8dd_m.jpg\" alt=\"Emacs pinky\" height=\"160\" width=\"240\" /></a></p>\n\n<p>A genuine emacs pinky curved to reach the control key. Ergonomics.</p>") (author nil (name nil "gabrielsaldana") (email nil "nobody@flickr.com") (uri nil "http://www.flickr.com/photos/tags/emacs/")) (source nil (title ((type . "html")) "Recent Uploads tagged emacs") (link ((rel . "self") (href . "http://api.flickr.com/services/feeds/photos_public.gne?tags=emacs&lang=en-us&format=rss_200"))) (id nil "http://www.flickr.com/photos/tags/emacs/"))) (entry nil (title ((type . "html") (xml:lang . "en")) "sachachua: Automation") (link ((href . "http://sachachua.com/wp/2010/03/automation/"))) (id nil "http://sachachua.com/wp/2010/03/automation/") (updated nil "2010-03-27T13:00:00+00:00") (content ((type . "html") (xml:lang . "en")) "<p>A repetitive task is an excuse to learn more about automation tools. My text automation tool of choice is <a href=\"http://en.wikipedia.org/wiki/Emacs\">Emacs</a>, a ridiculously programmable text editor. When it comes to numbers, I can do a lot with equations, pivot tables / data pilot, and judicious use of macros. For general automation on Windows, there’s <a href=\"http://autohotkey.com\">AutoHotkey</a>.</p>\n<p>My threshold for automation is lower than most people’s. When faced with a repetitive task that will take me an afternoon to do, I’ll spend maybe half an hour understanding the task, an hour figuring out how to do it using the tools, and another half hour to an hour completing it with automation’s help. I spend the extra time learning more about the automation tools or sharing what I’ve done.</p>\n<p>Even if the time savings are probably not going to be significant, if the task is sufficiently repetitive, I’ll go for the intellectual thrill of automating it. Bonus: if I have to do the task again (which occasionally happens), I have my process all ready to go.</p>\n<p>What would it take for people to learn how to automate more things? How do I do it? How did I pick up this habit?</p>\n<p>Part of it is knowing the capabilities of a tool. I know that I can simulate mouse clicks and keypresses, so when I catch myself repeating certain motions, I think about how I can automate that.</p>\n<p>Part of it is being able to abstract the steps in a procedure. I can figure out what can be easily automated and what needs manual intervention. If I can automate 80% of something, that’s usually enough.</p>\n<p>Part of it is being able to program and not being afraid of geeky interfaces.</p>\n<p>Part of it is asking if the time-intensive parts of the procedure are really necessary. (Sometimes they’re not.)</p>\n<p>I like automation. I <a href=\"http://sachachua.com/wp/2008/12/why-automation-matters-to-me/\">wish more people were comfortable doing it</a>.</p>\n<p>Want to get started? The best way is probably to pick a tool depending on what you spend most of your time doing, learning lots about your tool, and doing little experiments. For Emacs, it might be learning how to use keyboard macros, then using Lisp. For Excel, learn different functions (I use CONCATENATE and IF a lot). For AutoHotkey, try using it for abbreviations, then expand.</p>\n<p>Have fun and save time!</p>\n<p>Post from: <a href=\"http://sachachua.com/wp\">sacha chua :: enterprise 2.0 consultant, storyteller, geek</a>.\nCheck out my blog for tips on <a href=\"http://sachachua.com/wp/category/va\">managing virtual assistants</a>, <a href=\"http://sachachua.com/wp/category/drupal\">Drupal</a>, and other topics!<br /><br /><a href=\"http://sachachua.com/wp/2010/03/automation/\">Automation</a></p>") (author nil (name nil "Sacha Chua") (uri nil "http://sachachua.com/wp")) (source nil (title ((type . "html")) "sacha chua :: enterprise 2.0 consultant, storyteller, geek » emacs") (subtitle ((type . "html")) "I help organizations and people learn how to connect and collaborate more effectively using Web 2.0 tools.") (link ((rel . "self") (href . "http://feeds.feedburner.com/pimpmyemacs"))) (id nil "http://sachachua.com/wp"))) (entry nil (title ((type . "html")) "Yoni Rabkin Katzenell: A new Emms release grows near-ish") (link ((href . "http://yrk.livejournal.com/275181.html"))) (id nil "urn:lj:livejournal.com:atom1:yrk:275181") (updated nil "2010-03-27T10:38:23+00:00") (content ((type . "html")) "I've just finished pushing a handful of patches to the <a href=\"http://savannah.gnu.org/git/?group=emms\">Emms GNU git repository</a>. These patches mostly shuffle stable Emms extensions to the <i>emms-all</i> setup level and add the appropriate documentation to the manual.<br /><br />As a result <i>emms-lastfm-client</i> (such as it is) is properly documented in the Emms manual.") (author nil (name nil "yrk") (uri nil "http://yrk.livejournal.com/")) (source nil (title ((type . "html")) "Talk is talk, kill is kill") (subtitle ((type . "html")) "The online journal of yrk") (link ((rel . "self") (href . "http://yrk.livejournal.com/data/atom"))) (id nil "urn:lj:livejournal.com:atom1:yrk"))) (entry nil (title ((type . "html") (xml:lang . "en-us")) "@emacs: emacs: RT @patrickdlogan: RT @deliciouspb: What Emacs Commands Do You Use Most? :  http://bit.ly/cGEJWr [ someone notes \"self-insert\" of course ...") (link ((href . "http://twitter.com/emacs/statuses/11130479745"))) (id nil "http://twitter.com/emacs/statuses/11130479745") (updated nil "2010-03-27T05:23:50+00:00") (content ((type . "html")) "emacs: RT @patrickdlogan: RT @deliciouspb: What Emacs Commands Do You Use Most? :  http://bit.ly/cGEJWr [ someone notes \"self-insert\" of course ...") (author nil (name nil "@emacs") (uri nil "http://twitter.com/emacs")) (source nil (title ((type . "html")) "Twitter / emacs") (subtitle ((type . "html")) "Twitter updates from emacs / emacs.") (link ((rel . "self") (href . "http://twitter.com/statuses/user_timeline/9492852.rss"))) (id nil "http://twitter.com/emacs"))) (entry nil (title ((type . "html") (xml:lang . "en")) "Tim Bielawa: Zone out completely") (link ((href . "http://blog.peopleareducks.com/2010/03/26/zone-out-completely/"))) (id nil "http://blog.peopleareducks.com/?p=128") (updated nil "2010-03-27T01:00:48+00:00") (content ((type . "html") (xml:lang . "en")) "<p>While searching for modes which would help me edit <a href=\"http://www.bind9.net/\">bind9</a> configuration files I came across <a href=\"https://lists.isc.org/pipermail/bind-users/2008-September/073061.html\">this mailing list post</a>. It mentions <code>zone-mode</code> which ended up being great for editing the actual zone files A+. It also tipped me off to another emacs Easter Egg, <code>M-x zone</code>. Described thus:</p>\n\n<div class=\"wp_syntax\"><div class=\"code\"><pre style=\"font-family: monospace;\" class=\"listp\">zone is an interactive compiled Lisp function.\nIt is bound to &lt;menu-bar&gt; &lt;tools&gt; &lt;games&gt; &lt;zone&gt;.\n(zone)\nZone out, completely.</pre></div></div>\n\n<p>It’s basically an emacs screensaver/psychedelic ascii mode using your focused buffer for content. It obfuscates the buffer in ways which involves wrapping your code around the screen or swapping characters around, and even just turning it all into curly braces and wiggling. Press a key to undo it all. Might be a neat trick to play on a friend, but I see no other usage for this mode.</p>") (author nil (name nil "tbielawa") (uri nil "http://blog.peopleareducks.com")) (source nil (title ((type . "html")) "Technitribe » Emacs") (subtitle ((type . "html")) "not at all like a diatribe") (link ((rel . "self") (href . "http://blog.peopleareducks.com/category/emacs/feed/"))) (id nil "http://blog.peopleareducks.com"))) (entry nil (title ((type . "html")) "Justin Heyes-Jones: Making emacs growl") (link ((href . "http://justinsboringpage.blogspot.com/2009/09/making-emacs-growl.html"))) (id nil "tag:blogger.com,1999:blog-4777243148323391813.post-2647983504768597886") (updated nil "2010-03-26T20:02:26+00:00") (content ((type . "html")) "<a href=\"http://www.flickr.com/photos/tambako/494118044/\" title=\"Roaring lion by Tambako the Jaguar, on Flickr\"><img src=\"http://farm1.static.flickr.com/193/494118044_a0439df4c9.jpg\" alt=\"Roaring lion\" height=\"375\" width=\"500\" /></a><br /><span style=\"font-family: arial;\"><br />I've always wished emacs could notify me of it's doings. For example the message function just pops up text in the minibuffer and is easy to miss, and impossible to see when the window is not in focus. So I was pleased when looking through the </span><a style=\"font-family: arial;\" href=\"http://www.emacswiki.org/cgi-bin/emacs/twit.el\">twit.el</a><span style=\"font-family: arial;\"> code to find out about todochiku, and emacs interface to Growl.</span><br /><br /><span style=\"font-family: arial;\">Download </span><a style=\"font-family: arial;\" href=\"http://www.growlforwindows.com/gfw/\">Growl for windows</a><span style=\"font-family: arial;\"> and set it up. Send yourself a test growl at the command prompt like this: </span><br /><br /><span style=\"\"><span style=\"font-weight: bold;\">\"C:/Progra~1/Growlf~1/growlnotify.exe\" /T:\"title\" \"message\"</span></span><br /><br /><span style=\"font-family: arial;\">Once that's working you can send notifications from emacs. </span><a style=\"font-family: arial;\" href=\"http://www.emacswiki.org/emacs/ToDoChiKu\">todochiku</a><span style=\"font-family: arial;\"> is an emacs package for sending notifications to growl, snarl or whatever you have. In our case we have growl. Unfortunately the windows default is to use snarl, and there's no support for growl. I've made a few modifications to the original to get that working and uploaded the new file here. </span>(Ideally I should make it so it searches both for windows and for growl or snarl being installed but for now the choice is made manually)<br /><br /><a style=\"font-family: arial;\" href=\"http://www.heyes-jones.com/todochiku.el\">heyes-jones.com/todochiku.el</a><br /><br />Download the elisp file into a directory in your emacs load-path (or add it) and add the (require 'todochiku) command to your .emacs file. Reload emacs, or just hit <span style=\"font-weight: bold;\">C-x e</span> after the (require command in your .emacs)<br /><br /><div>You will need (require 'cl) somewhere before this is loaded (.emacs perhaps)</div><div><br /><span style=\"font-family: arial;\">Customize the variables for the program using M-x customize-group todochiku</span><br /><br /><span style=\"font-family: arial;\">You'll need to set the `todochiku command' to </span>something like this:<br /><br /><span style=\"font-weight: bold; font-family: courier new;\">C:/Progra~1/Growlf~1/growlnotify.exe</span><br /><br />Use \"Dir /x *\" in a folder to find out what the 8 character name is.<br /><br />If you want icons that come with todochiku then download them from the todochiku wiki page and point to them with the variable `todochiku icons directory'. For example mine is set to:<br /><br /><span style=\"font-weight: bold; font-family: courier new;\">~/localemacs/todochiku-icons</span><br /><br />Finally you can do a growl... try this<br /><br /><span style=\"font-weight: bold; font-family: courier new;\">(growl \"Emacs\" \"Hello\")</span><br /><br /><a style=\"font-family: arial;\" href=\"http://3.bp.blogspot.com/_nkGbjVeC3i4/SqnEPAOrP1I/AAAAAAAADFM/lxhiNQtcxfg/s1600-h/growl.png\"><img src=\"http://3.bp.blogspot.com/_nkGbjVeC3i4/SqnEPAOrP1I/AAAAAAAADFM/lxhiNQtcxfg/s320/growl.png\" alt=\"\" style=\"cursor: pointer; width: 304px; height: 320px;\" border=\"0\" id=\"BLOGGER_PHOTO_ID_5380046991909404498\" /></a><br /><br />There's also `todochiku-message' which let's you specify an icon. This can be an image filename, and url, or an icon symbol from the built in list of icons you can find by the variable `todochiku-icons'.<br /><br /><span style=\"font-weight: bold;\"><span style=\"font-family: courier new;\">(todochiku-message \"Emacs\" \"You're growlingnow\" 'social)</span><br /><br /><span style=\"font-family: courier new;\">(todochiku-message \"Emacs\" \"You're growlingnow\" \"http://www.growlforwindows.com/gfw/images/downloadlatest.gif\")</span><br /><br /><span style=\"font-family: courier new;\">(todochiku-message \"Emacs\" \"You're growlingnow\" </span><br /><span style=\"font-family: courier new;\">\"c:/cygwin/home/Justin/localemacs/todochiku-icons/binary.png\")</span><br /></span><br />There's a command `todochiku-in' which will send you a notification from emacs in a set number of minutes.<span style=\"font-weight: bold;\"><span style=\"font-weight: bold;\"><br /><br /><span style=\"font-family: courier new;\">(todochiku-in \"hello\" 3)</span></span><br /><br /></span>If you use twit.el you should find that todochiku automatically notifying you of tweets if you have called `show-recent-tweets'.<br /><br />It's very simple to use todochiku and growl so you should find all kinds of applications for this. Have fun!<span style=\"font-weight: bold;\"><span style=\"font-weight: bold;\"><span style=\"font-weight: bold;\"><br /><br /><br /></span></span><br /></span></div><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/4777243148323391813-2647983504768597886?l=justinsboringpage.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>") (author nil (name nil "Justin") (email nil "noreply@blogger.com") (uri nil "http://justinsboringpage.blogspot.com/search/label/emacs")) (source nil (title ((type . "html")) "justinhj's coding blog") (subtitle ((type . "html")) "Programming related tips and comments. Lots of emacs, C++, some game AI, common lisp, python, java, c#, sql and whatever else I'm working on.") (link ((rel . "self") (href . "http://www.blogger.com/feeds/4777243148323391813/posts/default/-/emacs"))) (id nil "tag:blogger.com,1999:blog-4777243148323391813"))) (entry nil (title ((type . "html")) "David's World: Playing the Lemonade Game: Metacognition in Game Simulations.") (link ((href . "http://www.davids-world.com/archives/2010/03/playing_the_lem.html"))) (id nil "tag:www.davids-world.com,2010://1.256") (updated nil "2010-03-26T15:38:58+00:00") (content ((type . "html") (xml:lang . "en")) "<span style=\"display: inline;\" class=\"mt-enclosure mt-enclosure-image\"><img src=\"http://www.davids-world.com/archives/2010/03/26/lemstand.jpg\" style=\"float: right; margin: 0 0 20px 20px;\" height=\"197\" width=\"218\" alt=\"lemstand.jpg\" class=\"mt-image-right\" /></span>\nA few details about our work on the Lemonade Stand Game leading up to our entry in the <a href=\"http://www.davids-world.com/\">Lemonade</a> competition at the end of 2009 can be found in our latest paper, presented at this weeks <a href=\"http://brimsconference.org/\">Behavior Representation in Modeling &amp; Simulation</a> conference.  The competition was a tournament between agents, playing out many strategies that all tries to succeed to win lemonade market share on the beaches of a fantasy island.\n\n&lt;quote&gt;Abstract: The Lemonade Game is a three-player game in which players have to pick locations on a circular board, which are as far away as possible from those chosen independently by other players. Players may observe other player's moves and infer their strategies. The game was studied using a competition of cognitively motivated agents, which inherit properties of adaptivity and stochasticity from human memory and decision-making, and simplistic, yet effective agents implementing fixed strategies. We argue that metacognition is the unique attribute that allows sophisticated agents to adapt to unforeseen conditions, cooperators and competitors.\n&lt;/quote&gt;\n\nD. Reitter, I. Juvina, A. Stocco, and C. Lebiere. <a href=\"http://www.david-reitter.com/compling/papers/reitter2010lemonade.pdf\">Resistance is futile: Winning lemonade market share through metacognitive reasoning in a three-agent cooperative game.</a> In <em>Proceedings of the 19th Behavior Representation in Modeling &amp; Simulation</em> (BRIMS), Charleston, SC, 2010.\n\n\nMetacognition was also explored in my cognitive model submitted to the <a href=\"http://www.hss.cmu.edu/departments/sds/ddmlab/modeldsf/index.html\">Dynamic Stocks&amp;Flows Competition</a> last year.  There, the model did just what I think human participants in a psychological experiment did: try different strategies to solve a problem, and pick the one that performed best most recently.  Weighing recency and frequency of experiences or pieces of knowledge is a common theme in such models; more research is needed to find out how exactly people combine their experiences to make (mostly) good decisions.  The model won the first prize in the challenge.  Still, the model does not explain enough of the variance observed in the empirical data.  A look back to determine <a href=\"http://www.davids-world.com/\">what we have learned from the DSF challenge</a> was presented in a panel discussion at this year's  <a href=\"http://brimsconference.org/\">Behavior Representation in Modeling &amp; Simulation</a> conference.") (author nil (name nil "David Reitter") (uri nil "http://www.davids-world.com/")) (source nil (title ((type . "html")) "David's World") (subtitle ((type . "html")) "... looms large and daunting.") (link ((rel . "self") (href . "http://www.davids-world.com/atom.xml"))) (id nil "tag:www.davids-world.com,2010://1"))) (entry nil (title ((type . "html")) "Johan Andersson: Rename File and Buffer in Emacs") (link ((href . "http://blog.tuxicity.se/elisp/emacs/2010/03/26/rename-file-and-buffer-in-emacs.html"))) (id nil "http://blog.tuxicity.se/elisp/emacs/2010/03/26/rename-file-and-buffer-in-emacs") (updated nil "2010-03-26T00:00:00+00:00") (content ((type . "html")) "<p>In the past, when I was in a file that I wanted to rename, I either\nopened up a console or dired to rename it. I never thought about\ncreating a function to make it simpler. But then I came across\n<a href=\"http://sites.google.com/site/steveyegge2/my-dot-emacs-file\">Steve Yegge's Emacs conf</a>\nand found a function that did just that.</p>\n\n<p>The function below is based on the one in Steve Yegge's Emacs conf. But\nthere are a few improvements to it:</p>\n\n<ol>\n<li>File and directory completion</li>\n<li>Can move file to other directory</li>\n<li>Handles the case if Emacs is visiting a file and that file is removed</li>\n</ol>\n\n\n<div class=\"highlight\"><pre><code class=\"scheme\"><span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">rename-file-and-buffer</span> <span class=\"p\">()</span>\n  <span class=\"s\">\"Renames current buffer and file it is visiting.\"</span>\n  <span class=\"p\">(</span><span class=\"nf\">interactive</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">((</span><span class=\"nf\">name</span> <span class=\"p\">(</span><span class=\"nf\">buffer-name</span><span class=\"p\">))</span>\n        <span class=\"p\">(</span><span class=\"nf\">filename</span> <span class=\"p\">(</span><span class=\"nf\">buffer-file-name</span><span class=\"p\">)))</span>\n    <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nb\">not </span><span class=\"p\">(</span><span class=\"k\">and </span><span class=\"nv\">filename</span> <span class=\"p\">(</span><span class=\"nf\">file-exists-p</span> <span class=\"nv\">filename</span><span class=\"p\">)))</span>\n        <span class=\"p\">(</span><span class=\"nf\">message</span> <span class=\"s\">\"Buffer '%s' is not visiting a file!\"</span> <span class=\"nv\">name</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">((</span><span class=\"nf\">new-name</span> <span class=\"p\">(</span><span class=\"nf\">read-file-name</span> <span class=\"s\">\"New name: \"</span> <span class=\"nv\">filename</span><span class=\"p\">)))</span>\n        <span class=\"p\">(</span><span class=\"k\">cond </span><span class=\"p\">((</span><span class=\"nf\">get-buffer</span> <span class=\"nv\">new-name</span><span class=\"p\">)</span>\n               <span class=\"p\">(</span><span class=\"nf\">message</span> <span class=\"s\">\"A buffer named '%s' already exists!\"</span> <span class=\"nv\">new-name</span><span class=\"p\">))</span>\n              <span class=\"p\">(</span><span class=\"nf\">t</span>\n               <span class=\"p\">(</span><span class=\"nf\">rename-file</span> <span class=\"nv\">name</span> <span class=\"nv\">new-name</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n               <span class=\"p\">(</span><span class=\"nf\">rename-buffer</span> <span class=\"nv\">new-name</span><span class=\"p\">)</span>\n               <span class=\"p\">(</span><span class=\"nf\">set-visited-file-name</span> <span class=\"nv\">new-name</span><span class=\"p\">)</span>\n               <span class=\"p\">(</span><span class=\"nf\">set-buffer-modified-p</span> <span class=\"nv\">nil</span><span class=\"p\">)))))))</span>\n</code></pre>\n</div>\n\n\n<p>I bound <strong>C-c r</strong> to the function:</p>\n\n<div class=\"highlight\"><pre><code class=\"scheme\"><span class=\"p\">(</span><span class=\"nf\">global-set-key</span> <span class=\"p\">(</span><span class=\"nf\">kbd</span> <span class=\"s\">\"C-c r\"</span><span class=\"p\">)</span> <span class=\"ss\">'rename-file-and-buffer</span><span class=\"p\">)</span>\n</code></pre>\n</div>") (author nil (name nil "Johan Andersson") (uri nil "http://blog.tuxicity.se/")) (source nil (title ((type . "html")) "Tuxicity - Emacs") (link ((rel . "self") (href . "http://blog.tuxicity.se/atom-emacs.xml"))) (id nil "http://blog.tuxicity.se/"))) (entry nil (title ((type . "html")) "Alex Schroeder: Show Only rcirc Buffers") (link ((href . "http://www.emacswiki.org/alex/2010-03-25_Show_Only_rcirc_Buffers"))) (id nil "http://www.emacswiki.org/alex/2010-03-25_Show_Only_rcirc_Buffers") (updated nil "2010-03-25T16:07:50+00:00") (content ((type . "html")) "<p>The following function will replace whatever you are looking at with all your <a href=\"http://www.emacswiki.org/emacs?rcirc\" class=\"near\" title=\"EmacsWiki\">rcirc</a> targets (channels and query buffers). It turns out that with 13 channels I’m already reaching a limit on this display. Bummer!</p><pre class=\"real\">(defun rcirc-only ()\n  (interactive)\n  (let (channels)\n    (dolist (buf (buffer-list))\n      (with-current-buffer buf\n	(when (and (eq major-mode 'rcirc-mode)\n		   rcirc-target)\n	  (setq channels (cons buf channels)))))\n    (delete-other-windows)\n    (let ((win (selected-window))\n	  (size (/ (window-height) (length channels))))\n      (dolist (buf channels)\n	(split-window-vertically (- (window-height) size))\n	(window--display-buffer-2 buf (selected-window)))\n      (delete-window win)))\n  (balance-windows))</pre><p>As I said. Useless. Every window is about three lines high. Gaaah! <img src=\"http://www.emacswiki.org/pics/evil.png\" alt=\"&gt;{\" class=\"smiley\" /></p><p>Tags: <a href=\"http://www.emacswiki.org/alex?action=tag;id=Emacs\" class=\"outside tag\" rel=\"tag\" title=\"Tag\">Emacs</a> <a href=\"http://www.emacswiki.org/alex?action=journal;full=1;search=tag:Emacs\" class=\"feed tag\" rel=\"feed\" title=\"Feed für diesen Tag\"><img src=\"http://www.emacswiki.org/alex/pics/rss.png\" /></a> <a href=\"http://www.emacswiki.org/alex?action=tag;id=IRC\" class=\"outside tag\" rel=\"tag\" title=\"Tag\">IRC</a> <a href=\"http://www.emacswiki.org/alex?action=journal;full=1;search=tag:IRC\" class=\"feed tag\" rel=\"feed\" title=\"Feed für diesen Tag\"><img src=\"http://www.emacswiki.org/alex/pics/rss.png\" /></a></p>") (author nil (name nil "Alex Schroeder") (uri nil "http://www.emacswiki.org/alex/RecentChanges")) (source nil (title ((type . "html")) "Alex Schroeder: RecentChanges") (subtitle ((type . "html")) "The Homepage of Alex Schroeder.") (link ((rel . "self") (href . "http://www.emacswiki.org/cgi-bin/alex?action=journal;search=tag%3Aemacs;rsslimit=2;full=1"))) (id nil "http://www.emacswiki.org/alex/RecentChanges") (rights ((type . "html")) "Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation."))) (entry nil (title ((type . "html") (xml:lang . "en")) "Da Zhang: Let Emacs be your file processing engine, and use shell to drive it for batch processing!") (link ((href . "http://zhangda.wordpress.com/2010/03/24/let-emacs-be-your-file-processing-engine-and-use-shell-to-drive-it-for-batch-processing-2/"))) (id nil "http://zhangda.wordpress.com/2010/03/24/let-emacs-be-your-file-processing-engine-and-use-shell-to-drive-it-for-batch-processing-2/") (updated nil "2010-03-24T18:00:43+00:00") (content ((type . "html") (xml:lang . "en")) "<p>Emacs has so many wonderful text processing functions that are not available elsewhere, such as align-regexp. Therefore, it will be very attractive to write an elisp script, and use shell to call Emacs to apply the script to many files.</p>\n<p>I have some examples for this implementation:</p>\n<p>In ~/my_elisp.el</p>\n<p>;; my_elisp.el starts here</p>\n<p>;; define the function for text processing<br />\n(defun format-rpt ()<br />\n“A function to format the OCR-processed reports for further excel import.”<br />\n(interactive)<br />\n;; align the table of data–&gt; aligned and make the numbers comma separated<br />\n(goto-char (point-min))<br />\n(re-search-forward “land-mark-regexp-pattern” nil t) ;; find the land mark in the file to start the alignment<br />\n(beginning-of-line)<br />\n(let ((beg (point))) (align-regexp beg (point-max) “\\\\(\\\\s-*\\\\)  ” 1 1 nil)) ;; align the first time<br />\n(while (re-search-forward ” \\\\{2,\\\\}\\\\b” nil t) ;; add comma for excel importing “comma separated file”<br />\n(insert “,”))<br />\n(goto-char (point-min))<br />\n(re-search-forward “land-mark-regexp-pattern” nil t) ;; find the land mark in the file to start the alignment<br />\n(beginning-of-line)<br />\n(let ((beg (point))) (align-regexp beg (point-max) “\\\\(\\\\s-*\\\\),” 1 4 nil)) ;; align the second time<br />\n(write-file “./save_to.txt” nil) ;; save file<br />\n)</p>\n<p>(format-rpt) ;; call the function for text processing</p>\n<p>;; my_elisp.el ends here</p>\n<p>Then in bash (I used cygwin), use find to drive the Emacs:</p>\n<p>find . -name “ocr.txt” -printf ‘%h\\n’| while read dir; do (cd “$dir”; emacs –no-site-file -nw –batch ocr.txt -l ~/my_lisp) done</p>\n<p>This special find calling pattern can deal with the spaces in path in Windows OS, and make it easy for cygwin.</p>\n<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/zhangda.wordpress.com/167/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/zhangda.wordpress.com/167/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godelicious/zhangda.wordpress.com/167/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/delicious/zhangda.wordpress.com/167/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gostumble/zhangda.wordpress.com/167/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/stumble/zhangda.wordpress.com/167/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godigg/zhangda.wordpress.com/167/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/digg/zhangda.wordpress.com/167/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/goreddit/zhangda.wordpress.com/167/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/reddit/zhangda.wordpress.com/167/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=zhangda.wordpress.com&amp;blog=7259137&amp;post=167&amp;subd=zhangda&amp;ref=&amp;feed=1\" alt=\"\" border=\"0\" />") (author nil (name nil "zhangda") (uri nil "http://zhangda.wordpress.com")) (source nil (title ((type . "html")) "Da's recipes on Emacs, IT, and more") (subtitle ((type . "html")) "Da Zhang's web notes") (link ((rel . "self") (href . "http://zhangda.wordpress.com/feed/"))) (id nil "http://zhangda.wordpress.com"))) (entry nil (title ((type . "html")) "Emacs-fu: showing the buffer position in the mode-line") (link ((href . "http://emacs-fu.blogspot.com/2010/03/showing-buffer-position-in-mode-line.html"))) (id nil "tag:blogger.com,1999:blog-3992530807750384868.post-2461533492060024024") (updated nil "2010-03-20T11:35:50+00:00") (content ((type . "html")) "<div id=\"outline-container-1\" class=\"outline-2\">\n<div id=\"text-1\" class=\"outline-text-2\">\nI do quite a bit of <a href=\"http://emacs-fu.blogspot.com/2009/12/scrolling.html\">scrolling</a> in emacs, but I hardly ever use the scroll bar\nfor that. The main reason for still having the scroll bar is that it gives me\nsome indication where I am in the buffer. Of course, there is some information\nin the mode-line, and you can get some more with <code>size-indication-mode</code>, but\nit's not as immediately obvious as the scroll bar.\n<br />\nBut recently, I discovered Lennart Borgman's <a href=\"http://www.emacswiki.org/emacs/SmlModeLine\"><code>sml-modeline</code></a>, which\ncombines all of the scroll bar information into a nice visual indication on\nthe modeline, and I have been happily using it, and got rid of my scroll bar.\n<br />\nPut you <code>sml-modeline</code> in your <code>load-path</code>, and the following fragment in your\n<code>.emacs</code> should do the trick:\n<br />\n<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">if</span> (<span class=\"org-keyword\">require</span> '<span class=\"org-constant\">sml-modeline</span> nil 'noerror)    <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">use sml-modeline if available\n</span>  (<span class=\"org-keyword\">progn</span> \n    (sml-modeline-mode 1)                   <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">show buffer pos in the mode line\n</span>    (scroll-bar-mode -1))                   <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">turn off the scrollbar\n</span>  (scroll-bar-mode 1)                       <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">otherwise, show a scrollbar...\n</span>  (set-scroll-bar-mode 'right))             <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">... on the right\n</span></pre>\n<div style=\"clear: both; text-align: center;\" class=\"separator\">\n</div>\n<div style=\"clear: both; text-align: center;\" class=\"separator\">\n<a style=\"clear: right; float: right; margin-bottom: 1em; margin-left: 1em;\" href=\"http://2.bp.blogspot.com/_kGFGcbwevHE/S6SyadxiEGI/AAAAAAAAAfQ/BkUJ-ujYICU/s1600-h/bufpos.png\"><img src=\"http://2.bp.blogspot.com/_kGFGcbwevHE/S6SyadxiEGI/AAAAAAAAAfQ/BkUJ-ujYICU/s320/bufpos.png\" border=\"0\" /></a></div>\n<br />\nNote, there is a older version available in Emacswiki which has some problems\n(such as conflicting with the <a href=\"http://www.smlnj.org/doc/Emacs/sml-mode.html\">Standard ML editing mode</a> for emacs); thus, for\nnow it's better to us the <a href=\"http://bazaar.launchpad.net/%7Enxhtml/nxhtml/main/annotate/head%3A/util/sml-modeline.el\">Launchpad version</a>; the instructions above apply to\nthat version.\n</div>\n</div><div class=\"blogger-post-footer\"><img src=\"https://blogger.googleusercontent.com/tracker/3992530807750384868-2461533492060024024?l=emacs-fu.blogspot.com\" alt=\"\" height=\"1\" width=\"1\" /></div>") (author nil (name nil "djcb") (email nil "noreply@blogger.com") (uri nil "http://emacs-fu.blogspot.com/search/label/new")) (source nil (title ((type . "html")) "emacs-fu") (subtitle ((type . "html")) "useful tricks for emacs") (link ((rel . "self") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/-/new"))) (id nil "tag:blogger.com,1999:blog-3992530807750384868"))) (entry nil (title ((type . "html")) "Oleksandr Gavenko: Switching from Gnu Emacs 22.x to 23.1 on Windows.") (link ((href . "http://brain-break.blogspot.com/2009/08/when-moving-from-gnu-emacs-22.html"))) (id nil "tag:blogger.com,1999:blog-4276477044725324295.post-7322471397666404647") (updated nil "2010-03-19T21:39:39+00:00") (content ((type . "html")) "When moving from GNU Emacs 22.x to GNU Emacs 23.1 I get only two trubles.\n\n\nFirstly I get error message:\nerror: The directory e:/home/.emacs.d/server is unsafe\n\nwhen run (server-start).\nProblem placed in function server-ensure-safe-dir:\n    (unless (and (eq t (car attrs)) (eql (nth 2 attrs) (user-uid))\n                 (or (eq system-type 'windows-nt)\n                     (zerop (logand ?\\077 (") (author nil (name nil "gavenkoa") (email nil "noreply@blogger.com") (uri nil "http://brain-break.blogspot.com/search/label/emacs")) (source nil (title ((type . "html")) "Brain break (en).") (subtitle ((type . "html")) "it/security/free/math/sci/music\n<p>\nEnglish version of  <a href=\"http://brain-break-ru.blogspot.com\">brain-break-ru.blogspot.com</a>. Enjoy!</p>") (link ((rel . "self") (href . "http://www.blogger.com/feeds/4276477044725324295/posts/default/-/emacs"))) (id nil "tag:blogger.com,1999:blog-4276477044725324295"))) (entry nil (title ((type . "html") (xml:lang . "en")) "Gábor Török: Unit testing Emacs Lisp code with ElUnit") (link ((href . "http://20y.hu/20100317/unit-testing-emacs-lisp-code-with-elunit.html"))) (id nil "http://20y.hu/?p=2417") (updated nil "2010-03-17T15:02:59+00:00") (content ((type . "html") (xml:lang . "en")) "<p><i>ElUnit</i> is a unit test framework for Emacs Lisp. You can define your test suites and see how they run against your code. It’s a great toolkit for <a href=\"http://www.flickr.com/photos/nyuhuhuu/4431466615/\">test-driven development in Emacs Lisp</a> as well. Running your tests manually after each changes may make you bored, though. Fortunately, you are using an extensible editor. In my scenario, I taught Emacs to automatically run corresponding test suites whenever I save the file I’m editing. As for the file topology, I put my tests under sub-directory <code>tests/</code>, and call them in scheme <code>my-file-test.el</code>. On the very beginning of each code file, I place a magic comment to specify <a href=\"http://www.gnu.org/software/emacs/manual/html_node/emacs/Specifying-File-Variables.html\">file variable</a> <code>elunit-default-suite</code> that holds the name of the test suite I want to run.</p>\n<pre>;; -*- elunit-default-suite: \"my-demo-suite\" -*-</pre>\n<p>The following snippet does the rest of the job: <a href=\"http://gist.github.com/335296#file_my_elunit.el\">my_elunit.el</a></p>") (author nil (name nil "Török Gábor") (uri nil "http://20y.hu")) (source nil (title ((type . "html")) "Egy beteg srác naplója » planet_emacsen") (subtitle ((type . "html")) "Török Gábor blogja") (link ((rel . "self") (href . "http://20y.hu/tag/planet_emacsen/feed"))) (id nil "http://20y.hu"))) (entry nil (title ((type . "html") (xml:lang . "en")) "Alex Bennée: Adding Google Juice to mutt") (link ((href . "http://www.bennee.com/~alex/blog/2010/03/17/adding-google-juice-to-mutt/"))) (id nil "http://www.bennee.com/~alex/blog/?p=1789") (updated nil "2010-03-17T07:35:42+00:00") (content ((type . "html") (xml:lang . "en")) "<p>As I’ve been mailing out invites I discovered a minor problem with my data.</p>\n<p>\nMy main email client is the fantastically functional <a href=\"http://www.mutt.org\">mutt</a>. It’s terminal based but incredibly flexible. When it comes to mass sorting/searching your email it leaves GUI based clients standing. However now I’m a roving around with a Google Phone the majority of my contact data is <a href=\"http://en.wikipedia.org/wiki/Gmail\">in the cloud</a>. While I have a small address file used by mutt it only has a few oft-mailed addresses in it.</p>\n<p>\nLuckily thanks to <a href=\"http://code.google.com/apis/gdata/\">Google’s data APIs</a> <b>your information</b> is only a few <a href=\"http://en.wikipedia.org/wiki/Representational_State_Transfer#RESTful_web_services\">RESTful</a> requests away. The <a href=\"http://code.google.com/p/goobook/\">goobook</a> program provides a handy mutt compatible address book interface to this cloud data.</p>\n<p>\nThere is one wrinkle however. The <a href=\"http://code.google.com/p/goobook/source/browse/trunk/README.txt#59\">configuration</a> of the script involves putting some rather valuable login details in a plain text file on your home partition. While I like to think my machines are pretty secure and maintained you can always do more. Good security is defence in depth. A <a href=\"http://groups.google.com/group/goobook/browse_thread/thread/f632e3d5c4fcaf25\">quick patch later</a> and I can store those details in an <a href=\"http://en.wikipedia.org/wiki/GNU_Privacy_Guard\">GPG</a> encrypted file that can be decrypted on the fly when required.</p>\n<p>\nThe final piece of the puzzle is creating these encrypted config files in the first place. Although you can do this by hand from the command line I find the best method is using <a href=\"http://www.emacswiki.org/emacs/EasyPG\">EasyPG</a> (now part of Emacs 23). This will automatically cause any files with a .gpg extension to be encrypted. You can control the Emacs mode selection and default encryption key to use by using <a href=\"http://www.gnu.org/software/emacs/manual/html_node/emacs/Specifying-File-Variables.html#Specifying-File-Variables\">file variables</a> in the header comments of the file.</p>\n<p>\nIt’s not all perfect though, when enabling EasyPG I had to do the following:</p>\n<p></p><pre style=\"color: #f5deb3; background-color: #2f4f4f; font-size: 8pt;\">(<span style=\"color: #fa8072;\">if</span> (maybe-load-library <span style=\"color: #ffa07a;\">\"</span><span style=\"color: #cdad00; font-weight: bold; text-decoration: underline;\">epa</span><span style=\"color: #ffa07a;\">-file\"</span>)\n    (<span style=\"color: #fa8072;\">progn</span>\n      (setenv <span style=\"color: #ffa07a;\">\"GPG_AGENT_INFO\"</span> nil) <span style=\"color: #add8e6;\">; </span><span style=\"color: #add8e6;\">gpg-agent confuses epa when getting passphrase\n</span>      (epa-file-enable)))\n</pre>\n<p>The problem seems to be that when GPG agent runs in terminal mode it confuses Emacs/EasyPG. By suppressing the GPG_AGENT_INFO environment variable EasyPG will fall back to requesting your passphrase in the mode line. While it takes care to flush the value as soon as possible it does open a small window of attack if an attacker can cause emacs to crash and dump core.</p>") (author nil (name nil "Alex") (uri nil "http://www.bennee.com/~alex/blog")) (source nil (title ((type . "html")) "Alex's Adventures on the Infobahn » emacs") (subtitle ((type . "html")) "the wanderings of a supposed digital native") (link ((rel . "self") (href . "http://www.bennee.com/~alex/blog/feed/?tag=emacs"))) (id nil "http://www.bennee.com/~alex/blog"))) (entry nil (title ((type . "html") (xml:lang . "en")) "Da Zhang: mintty parameters") (link ((href . "http://zhangda.wordpress.com/2010/03/16/mintty-parameters/"))) (id nil "http://zhangda.wordpress.com/2010/03/16/mintty-parameters/") (updated nil "2010-03-16T19:58:10+00:00") (content ((type . "html") (xml:lang . "en")) "<p>When starting Mintty, it’s better to include the following parameters:<br />\n-e /bin/bash –login</p>\n<p>Otherwise Mintty will use the path of windows: system PATH first, user PATH second, then cygwin path ==&gt; this will cause Windows versions of cygwin commands such as FIND to be executed. </p>\n<p>Other tip: /cygwin/etc/profile and ~/.bashrc are the common two files controlling the behavior of bash shells.</p>\n<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/zhangda.wordpress.com/158/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/zhangda.wordpress.com/158/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godelicious/zhangda.wordpress.com/158/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/delicious/zhangda.wordpress.com/158/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gostumble/zhangda.wordpress.com/158/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/stumble/zhangda.wordpress.com/158/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godigg/zhangda.wordpress.com/158/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/digg/zhangda.wordpress.com/158/\" alt=\"\" border=\"0\" /></a> <a href=\"http://feeds.wordpress.com/1.0/goreddit/zhangda.wordpress.com/158/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/reddit/zhangda.wordpress.com/158/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=zhangda.wordpress.com&amp;blog=7259137&amp;post=158&amp;subd=zhangda&amp;ref=&amp;feed=1\" alt=\"\" border=\"0\" />") (author nil (name nil "zhangda") (uri nil "http://zhangda.wordpress.com")) (source nil (title ((type . "html")) "Da's recipes on Emacs, IT, and more") (subtitle ((type . "html")) "Da Zhang's web notes") (link ((rel . "self") (href . "http://zhangda.wordpress.com/feed/"))) (id nil "http://zhangda.wordpress.com"))) (entry nil (title ((type . "html")) "John Sullivan: GNU Hackers Meeting and LibrePlanet, Cambridge, MA, March 18th - 21st") (link ((href . "http://feedproxy.google.com/~r/wjsullivan/~3/_EMEk0EalKU/266877.html"))) (id nil "http://johnsu01.livejournal.com/266877.html") (updated nil "2010-03-15T15:29:23+00:00") (content ((type . "html")) "<p>\nI'm excited about the <a href=\"http://groups.fsf.org/wiki/LibrePlanet2010/GNUHackersMeeting\" target=\"_blank\" rel=\"nofollow\">GNU Hackers Meeting</a> in a few days.\n</p> <p>\nWe're going to meet for some curry on Thursday night with the people in town so far, then the bulk of the meeting will be on Friday. Things on the agenda so far include lightning talks from several of the people attending about the GNU projects they are working on, a discussion about the problems with Software as a Service and what GNU can do about it -- with a focus on the creation of a new GNU network services team, and longer presentations like David Sugar on Replacing Skype, Matt Lee on GNU FM (the software that runs last.fm replacement <a href=\"http://libre.fm\" target=\"_blank\" rel=\"nofollow\">libre.fm</a>), and Michael Flickinger on <a href=\"http://sv.gnu.org\" target=\"_blank\" rel=\"nofollow\">Savannah</a>.\n</p> <p>\nThis is the first US edition of the <a href=\"http://gnu.org/ghm\" target=\"_blank\" rel=\"nofollow\">GNU Hackers Meeting</a> -- there have already been a few in Europe. One cool thing about this one is the range of contributors we have represented. We have people from the origin of the project, including RMS, John Gilmore, and Rob Savoye -- plus new contributors like Steven DuBois of <a href=\"http://groups.fsf.org/wiki/Group:GNU_Generation\" target=\"_blank\" rel=\"nofollow\">GNU Generation</a> (the awesome project started last year by FSF intern Max Shinn for high schoolers interested in GNU).\n</p> <p>\nAfter Friday, the Meeting segues into the rest of the <a href=\"http://libreplanet.org\" target=\"_blank\" rel=\"nofollow\">LibrePlanet</a> conference, which promises to be awesome as well. The Women in Free Software track is particularly important to me because I think it's progress in one of the most critical steps we need to take to really make the free software movement work for everyone. As one of the conference organizers I'm sure I'm going to be bouncing around a lot during the days, but I'm definitely going to make a point to catch as much as I can of all of the presentations in that track -- I'm especially interested in hearing Karen Sandler of the <a href=\"http://softwarefreedom.org\" target=\"_blank\" rel=\"nofollow\">Software Freedom Law Center</a>, and the panel on Sunday with Chris Ball, Hanna Wallach, Erinn Clark and Denise Paolucci.\n</p> <p>\nIt's not too late to register for either the GHM (if you're a GNU maintainer or significant contributor), or the LibrePlanet conference -- just follow the instructions on the wiki. Drop me a line if you're reading this and will be there.\n</p><div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/wjsullivan?a=_EMEk0EalKU:kUK1urDOB84:yIl2AUoC8zA\" target=\"_blank\" rel=\"nofollow\"><img src=\"http://feeds.feedburner.com/~ff/wjsullivan?d=yIl2AUoC8zA\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/wjsullivan?a=_EMEk0EalKU:kUK1urDOB84:dnMXMwOfBR0\" target=\"_blank\" rel=\"nofollow\"><img src=\"http://feeds.feedburner.com/~ff/wjsullivan?d=dnMXMwOfBR0\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/wjsullivan?a=_EMEk0EalKU:kUK1urDOB84:7Q72WNTAKBA\" target=\"_blank\" rel=\"nofollow\"><img src=\"http://feeds.feedburner.com/~ff/wjsullivan?d=7Q72WNTAKBA\" border=\"0\" /></a>\n</div>") (author nil (name nil "John Sullivan") (uri nil "http://pipes.yahoo.com/pipes/pipe.info?_id=FiExI4MS3RG8VVYcM1rX_Q")) (source nil (title ((type . "html")) "John Sullivan's Emacs blog posts") (subtitle ((type . "html")) "Pipes Output") (link ((rel . "self") (href . "http://pipes.yahoo.com/pipes/pipe.run?_id=FiExI4MS3RG8VVYcM1rX_Q&_render=rss"))) (id nil "http://pipes.yahoo.com/pipes/pipe.info?_id=FiExI4MS3RG8VVYcM1rX_Q"))) (entry nil (title ((type . "html")) "Oleksandr Gavenko: Sort and uniquify lines in Emacs.") (link ((href . "http://brain-break.blogspot.com/2009/10/sort-and-uniquify-lines-in-emacs.html"))) (id nil "tag:blogger.com,1999:blog-4276477044725324295.post-8117858213983670327") (updated nil "2010-03-14T21:19:34+00:00") (content ((type . "html")) "For only sort lines exist built-in func: C-x sort-lines.\n\nSort and uniquify lines:\n\nselect region\nC-u M-| sort -u RET\n\n\nWith transient-mark-mode and delete-selection-mode enabled:\n\nselect region\nM-| sort -u RET\n\nto replace selection with sorted and uniquified lines.") (author nil (name nil "gavenkoa") (email nil "noreply@blogger.com") (uri nil "http://brain-break.blogspot.com/search/label/emacs")) (source nil (title ((type . "html")) "Brain break (en).") (subtitle ((type . "html")) "it/security/free/math/sci/music\n<p>\nEnglish version of  <a href=\"http://brain-break-ru.blogspot.com\">brain-break-ru.blogspot.com</a>. Enjoy!</p>") (link ((rel . "self") (href . "http://www.blogger.com/feeds/4276477044725324295/posts/default/-/emacs"))) (id nil "tag:blogger.com,1999:blog-4276477044725324295"))))) ("Johan Andersson: Introducing Ruby Tools" "<p>I just released a minor mode for Emacs, called\n<a href=\"https://github.com/rejeep/ruby-tools\">ruby-tools</a>, which is a\ncollection of handy functions for <strong>ruby-mode</strong>.</p>\n<p>Check out the <a href=\"https://github.com/rejeep/ruby-tools#readme\">README</a>\nfor more information.</p>" "http://tuxicity.se/emacs/elisp/ruby/2012/04/18/introducing-ruby-tools.html" (20366 26224) obsolete 3 nil nil ((title ((type . "html")) "Johan Andersson: Introducing Ruby Tools") (link ((href . "http://tuxicity.se/emacs/elisp/ruby/2012/04/18/introducing-ruby-tools.html"))) (id nil "http://tuxicity.se/emacs/elisp/ruby/2012/04/18/introducing-ruby-tools") (updated nil "2012-04-18T07:00:00+00:00") (content ((type . "html")) "<p>I just released a minor mode for Emacs, called\n<a href=\"https://github.com/rejeep/ruby-tools\">ruby-tools</a>, which is a\ncollection of handy functions for <strong>ruby-mode</strong>.</p>\n\n<p>Check out the <a href=\"https://github.com/rejeep/ruby-tools#readme\">README</a>\nfor more information.</p>") (author nil (name nil "Johan Andersson") (uri nil "http://tuxicity.se/")) (source nil (title ((type . "html")) "Tuxicity - Emacs") (link ((rel . "self") (href . "http://feeds.feedburner.com/tuxicity-emacs"))) (id nil "http://tuxicity.se/")))) ("Aaron Hawley: Prius saves gas money? (follow-up)" "<p>Toyota makes the Prius -- a popular hybrid car that gets around 50 miles to the gallon (21 km/L, 4.7L/100km).  Presumably, these vehicles save you money at the fuel pump.  However, their sticker price is seemingly high.  One way to check the economic argument is to compare its total cost with a similar but non-hybrid conventional car and see when driving a hybrid starts saving you money.  A convenient and fair comparison is the Corolla also made by Toyota.</p>\n<p>Almost 5 years ago, <a href=\"http://www.bfccomputing.com/2007/10/29/prius-or-corolla/\" rel=\"nofollow\">Bill McGonigle compared a Prius with a Corolla</a> and found that only after driving 280613 miles (451603 km) will you start saving money.  <a href=\"http://aaronhawley.livejournal.com/2790.html\">I confirmed his math with some simple Lisp programming</a>.  Has this result changed?</p>\n<p>Five years later, the price of gas is up to 4 dollars (US) from 3 dollars but the price point for a Prius is higher.  You still need to drive 229354 (369109 km) miles before you start saving gas money.  That's 60000 miles (96560 km) less than 5 years ago.  Here's the arithmetic in the Emacs Lisp programming language.</p>\n<pre>(let ((gas-price 4.0)         ;; dollars/gallon\n(prius-price 24000.0)   ;; US dollars\n(corolla-price 16130.0) ;; US dollars\n(prius-mileage 48.0)    ;; miles/gallon\n(corolla-mileage 34.0)) ;; miles/gallon\n(/\n(* prius-mileage corolla-mileage\n(/ (- prius-price corolla-price) gas-price))\n(- prius-mileage corolla-mileage)))\n</pre>\n<p>Toyota has introduced a new <em>c model</em> of the Prius this year.  A smaller-sized version, it is tuned to get better mileage in the city -- better than it does for highway driving.  It's also 15% cheaper than the regular Prius.  If you compared a city-driving Corolla with the Prius c you'd only have to drive 38802 miles (62446 km).  That's pretty good, but is it a fair comparison?  Here's that arithmetic before I answer that question.</p>\n<pre>(let ((gas-price 4.0)         ;; dollars/gallon\n(priusc-price 18950.0)  ;; US dollars\n(corolla-price 16130.0) ;; US dollars\n(priusc-mileage 53.0)   ;; miles/gallon\n(corolla-mileage 27.0)) ;; miles/gallon\n(/\n(* priusc-mileage corolla-mileage\n(/ (- priusc-price corolla-price) gas-price))\n(- priusc-mileage corolla-mileage)))\n</pre>\n<p>Average drivers don't earn 15000 miles (24140 km) a year in the city.  Most of those miles are at a highway's pace.  Further, the smaller Prius c is more comparable to the Toyota Yaris than a Corolla.  Comparing the lower sticker price and highway mileage of a Yaris with the Prius c driven on the highway requires driving 264112 miles (425047 km).  Here's the arithmetic.</p>\n<pre>(let ((gas-price 4.0)         ;; dollars/gallon\n(priusc-price 18950.0)  ;; US dollars\n(yaris-price 14115.0)   ;; US dollars\n(priusc-mileage 46.0)   ;; miles/gallon\n(yaris-mileage 38.0))   ;; miles/gallon\n(/\n(* priusc-mileage yaris-mileage\n(/ (- priusc-price yaris-price) gas-price))\n(- priusc-mileage yaris-mileage)))\n</pre>\n<p>After 5 years, the hybrid car still isn't economical unless a typical owner drives one for 15 years.  According to Consumer Reports, <a href=\"http://news.consumerreports.org/cars/2011/02/200000-mile-toyota-prius-still-performs.html\" rel=\"nofollow\">Toyota's reputation for reliability is extending to the Prius</a>, where a Prius is able to maintain its efficiency and the batteries have held up after 10 years.  However, the average Prius owner probably doesn't hold on to the car this long.</p>\n<p>More likely, consumers purchase hybrid vehicles because of their reduced environmental impact.  It's <a href=\"http://science.howstuffworks.com/science-vs-myth/everyday-myths/does-hybrid-car-production-waste-offset-hybrid-benefits1.htm\" rel=\"nofollow\">estimated that just producing a car can be 10 to 20% of a vehicle's lifetime emissions</a>.  Presumably, the energy to make a Prius is greater than a conventional car since it has two engines (combustion and electrical) and additional battery.  However, Toyota doesn't release the estimated emissions from manufacturing a Prius.</p>\n<p>The city-optimized Prius c is a triple threat in metropolitan areas for its lower price, better efficiency and reduce impact on smog.  However, these places typically have mass transit.  The best way to save money is commute by walking, biking, car pooling or taking the bus or train.  These options are better for the environment as well.</p>" "http://aaronhawley.livejournal.com/29976.html" (20365 61216) obsolete 4 nil nil ((title ((type . "html")) "Aaron Hawley: Prius saves gas money? (follow-up)") (link ((href . "http://aaronhawley.livejournal.com/29976.html"))) (id nil "urn:lj:livejournal.com:atom1:aaronhawley:29976") (updated nil "2012-04-17T22:30:56+00:00") (content ((type . "html")) "<p>Toyota makes the Prius -- a popular hybrid car that gets around 50 miles to the gallon (21 km/L, 4.7L/100km).  Presumably, these vehicles save you money at the fuel pump.  However, their sticker price is seemingly high.  One way to check the economic argument is to compare its total cost with a similar but non-hybrid conventional car and see when driving a hybrid starts saving you money.  A convenient and fair comparison is the Corolla also made by Toyota.</p>\n\n<p>Almost 5 years ago, <a href=\"http://www.bfccomputing.com/2007/10/29/prius-or-corolla/\" rel=\"nofollow\">Bill McGonigle compared a Prius with a Corolla</a> and found that only after driving 280613 miles (451603 km) will you start saving money.  <a href=\"http://aaronhawley.livejournal.com/2790.html\">I confirmed his math with some simple Lisp programming</a>.  Has this result changed?</p>\n\n<p>Five years later, the price of gas is up to 4 dollars (US) from 3 dollars but the price point for a Prius is higher.  You still need to drive 229354 (369109 km) miles before you start saving gas money.  That's 60000 miles (96560 km) less than 5 years ago.  Here's the arithmetic in the Emacs Lisp programming language.</p>\n\n<pre>(let ((gas-price 4.0)         ;; dollars/gallon\n      (prius-price 24000.0)   ;; US dollars\n      (corolla-price 16130.0) ;; US dollars\n      (prius-mileage 48.0)    ;; miles/gallon\n      (corolla-mileage 34.0)) ;; miles/gallon\n  (/\n   (* prius-mileage corolla-mileage\n      (/ (- prius-price corolla-price) gas-price))\n   (- prius-mileage corolla-mileage)))\n</pre>\n\n<p>Toyota has introduced a new <em>c model</em> of the Prius this year.  A smaller-sized version, it is tuned to get better mileage in the city -- better than it does for highway driving.  It's also 15% cheaper than the regular Prius.  If you compared a city-driving Corolla with the Prius c you'd only have to drive 38802 miles (62446 km).  That's pretty good, but is it a fair comparison?  Here's that arithmetic before I answer that question.</p>\n\n<pre>(let ((gas-price 4.0)         ;; dollars/gallon\n      (priusc-price 18950.0)  ;; US dollars\n      (corolla-price 16130.0) ;; US dollars\n      (priusc-mileage 53.0)   ;; miles/gallon\n      (corolla-mileage 27.0)) ;; miles/gallon\n  (/\n   (* priusc-mileage corolla-mileage\n      (/ (- priusc-price corolla-price) gas-price))\n   (- priusc-mileage corolla-mileage)))\n</pre>\n\n<p>Average drivers don't earn 15000 miles (24140 km) a year in the city.  Most of those miles are at a highway's pace.  Further, the smaller Prius c is more comparable to the Toyota Yaris than a Corolla.  Comparing the lower sticker price and highway mileage of a Yaris with the Prius c driven on the highway requires driving 264112 miles (425047 km).  Here's the arithmetic.</p>\n\n<pre>(let ((gas-price 4.0)         ;; dollars/gallon\n      (priusc-price 18950.0)  ;; US dollars\n      (yaris-price 14115.0)   ;; US dollars\n      (priusc-mileage 46.0)   ;; miles/gallon\n      (yaris-mileage 38.0))   ;; miles/gallon\n  (/\n   (* priusc-mileage yaris-mileage\n      (/ (- priusc-price yaris-price) gas-price))\n   (- priusc-mileage yaris-mileage)))\n</pre>\n\n<p>After 5 years, the hybrid car still isn't economical unless a typical owner drives one for 15 years.  According to Consumer Reports, <a href=\"http://news.consumerreports.org/cars/2011/02/200000-mile-toyota-prius-still-performs.html\" rel=\"nofollow\">Toyota's reputation for reliability is extending to the Prius</a>, where a Prius is able to maintain its efficiency and the batteries have held up after 10 years.  However, the average Prius owner probably doesn't hold on to the car this long.</p>\n\n<p>More likely, consumers purchase hybrid vehicles because of their reduced environmental impact.  It's <a href=\"http://science.howstuffworks.com/science-vs-myth/everyday-myths/does-hybrid-car-production-waste-offset-hybrid-benefits1.htm\" rel=\"nofollow\">estimated that just producing a car can be 10 to 20% of a vehicle's lifetime emissions</a>.  Presumably, the energy to make a Prius is greater than a conventional car since it has two engines (combustion and electrical) and additional battery.  However, Toyota doesn't release the estimated emissions from manufacturing a Prius.</p>\n\n<p>The city-optimized Prius c is a triple threat in metropolitan areas for its lower price, better efficiency and reduce impact on smog.  However, these places typically have mass transit.  The best way to save money is commute by walking, biking, car pooling or taking the bus or train.  These options are better for the environment as well.</p>") (author nil (name nil "Aaron S. Hawley") (uri nil "http://aaronhawley.livejournal.com/")) (source nil (title ((type . "html")) "refusal computing") (subtitle ((type . "html")) "Aaron S. Hawley") (link ((rel . "self") (href . "http://aaronhawley.livejournal.com/data/atom"))) (id nil "urn:lj:livejournal.com:atom1:aaronhawley")))) ("Irreal: The Emacs clean-buffer-list Command" "<p>Some time ago, I enabled <code>save-desktop-mode</code> in Emacs and I’ve been really happy with it. I generally never close Emacs but sometimes I need to restart it for one reason or another or an OS upgrade requires me to reboot. Since I have a number of buffers that are always open, restarting Emacs was a pain before I started saving the sessions. Now when I restart Emacs, everything is just like it was before the restart. A downside of <code>save-desktop-mode</code> is that the buffer list grows and grows. Every once in a while I run <code>ibuffer</code> to get a list of active buffers and cull the list. </p>\n<p> Today, I discovered the <code>clean-buffer-list</code> command that automates the process. The idea is that buffers that haven’t been displayed recently are closed. The meaning of “recently” is, of course, configurable along with other attributes of the process. This is the command that the so-called <a href=\"http://www.emacswiki.org/emacs/MidnightMode\">Midnight Mode</a> uses. My machines are usually asleep at midnight so in order for me to use automatic cleaning I’d have to schedule it for when I’m on the machine and I don’t want to do that. </p>\n<p> Happily, I can just run <code>clean-buffer-list</code> when I notice that the number of buffers is getting over large and have the list culled automatically for me. Another win for Emacs. </p>" "http://irreal.org/blog/?p=765" (20365 54854) obsolete 5 nil nil ((title ((type . "html") (xml:lang . "en")) "Irreal: The Emacs clean-buffer-list Command") (link ((href . "http://irreal.org/blog/?p=765"))) (id nil "http://irreal.org/blog/?p=765") (updated nil "2012-04-17T20:44:54+00:00") (content ((type . "html") (xml:lang . "en")) "<p>Some time ago, I enabled <code>save-desktop-mode</code> in Emacs and I’ve been really happy with it. I generally never close Emacs but sometimes I need to restart it for one reason or another or an OS upgrade requires me to reboot. Since I have a number of buffers that are always open, restarting Emacs was a pain before I started saving the sessions. Now when I restart Emacs, everything is just like it was before the restart. A downside of <code>save-desktop-mode</code> is that the buffer list grows and grows. Every once in a while I run <code>ibuffer</code> to get a list of active buffers and cull the list. </p>\n<p> Today, I discovered the <code>clean-buffer-list</code> command that automates the process. The idea is that buffers that haven’t been displayed recently are closed. The meaning of “recently” is, of course, configurable along with other attributes of the process. This is the command that the so-called <a href=\"http://www.emacswiki.org/emacs/MidnightMode\">Midnight Mode</a> uses. My machines are usually asleep at midnight so in order for me to use automatic cleaning I’d have to schedule it for when I’m on the machine and I don’t want to do that. </p>\n<p> Happily, I can just run <code>clean-buffer-list</code> when I notice that the number of buffers is getting over large and have the list culled automatically for me. Another win for Emacs. </p>") (author nil (name nil "jcs") (uri nil "http://irreal.org/blog")) (source nil (title ((type . "html")) "Irreal » Emacs") (subtitle ((type . "html")) "The minds had long ago come up with a proper name for it; they called it the Irreal, but they thought of it as Infinite Fun. That was what they really knew it as. The Land of Infinite Fun. --Iain M. Banks, Excession") (link ((rel . "self") (href . "http://irreal.org/blog/?tag=emacs&feed=rss2"))) (id nil "http://irreal.org/blog")))) ("Julien Danjou: First release of PyMuninCli" "<p>Today I release a <a href=\"http://python.org\">Python</a> client library to query\n<a href=\"http://munin-monitoring.org/\">Munin</a> servers.</p>\n<p>I wrote it as part of some experiments I did a few weeks ago. I discovered\nthere was no client library to query a Munin server. There's\n<a href=\"http://aouyar.github.com/PyMunin/\">PyMunin</a> or\n<a href=\"http://samuelks.com/python-munin/\">python-munin</a> which help developing\nMunin plugins, but nothing to access the <em>munin-node</em> and retrieve its data.</p>\n<p>So I decided to write a quick and simple one, and it's released under the\nname of <a href=\"http://julien.danjou.info/software/pymunincli/\">PyMuninCli</a>,\nproviding the <em>munin.client</em> Python module.</p>" "http://julien.danjou.info/blog/2012/pymunincli-0.1" (20365 20120) obsolete 6 nil nil ((title ((type . "html")) "Julien Danjou: First release of PyMuninCli") (link ((href . "http://julien.danjou.info/blog/2012/pymunincli-0.1"))) (id nil "http://julien.danjou.info/blog/2012/pymunincli-0.1") (updated nil "2012-04-17T11:06:00+00:00") (content ((type . "html")) "<p>Today I release a <a href=\"http://python.org\">Python</a> client library to query\n<a href=\"http://munin-monitoring.org/\">Munin</a> servers.</p>\n<p>I wrote it as part of some experiments I did a few weeks ago. I discovered\nthere was no client library to query a Munin server. There's\n<a href=\"http://aouyar.github.com/PyMunin/\">PyMunin</a> or\n<a href=\"http://samuelks.com/python-munin/\">python-munin</a> which help developing\nMunin plugins, but nothing to access the <em>munin-node</em> and retrieve its data.</p>\n<p>So I decided to write a quick and simple one, and it's released under the\nname of <a href=\"http://julien.danjou.info/software/pymunincli/\">PyMuninCli</a>,\nproviding the <em>munin.client</em> Python module.</p>") (author nil (name nil "Julien Danjou") (uri nil "http://julien.danjou.info/blog/")) (source nil (title ((type . "html")) "jd:/dev/blog") (link ((rel . "self") (href . "http://julien.danjou.info/blog/index.xml"))) (id nil "http://julien.danjou.info/blog/index.xml")))) ("Flickr tag 'emacs': emacsweather" "<p><a href=\"http://www.flickr.com/people/twzh_ly01/\">koffeecup</a> posted a photo:</p>\n<p><a href=\"http://www.flickr.com/photos/twzh_ly01/6931960358/\" title=\"emacsweather\"><img alt=\"emacsweather\" height=\"135\" src=\"http://farm8.staticflickr.com/7256/6931960358_fc2688d643_m.jpg\" width=\"240\" /></a></p>" "http://www.flickr.com/photos/twzh_ly01/6931960358/" (20362 1296) obsolete 7 nil nil ((title ((type . "html")) "Flickr tag 'emacs': emacsweather") (link ((href . "http://www.flickr.com/photos/twzh_ly01/6931960358/"))) (id nil "tag:flickr.com,2004:/photo/6931960358") (updated nil "2012-04-14T23:15:28+00:00") (content ((type . "html")) "<p><a href=\"http://www.flickr.com/people/twzh_ly01/\">koffeecup</a> posted a photo:</p>\n	\n<p><a href=\"http://www.flickr.com/photos/twzh_ly01/6931960358/\" title=\"emacsweather\"><img alt=\"emacsweather\" height=\"135\" src=\"http://farm8.staticflickr.com/7256/6931960358_fc2688d643_m.jpg\" width=\"240\" /></a></p>") (author nil (name nil "koffeecup") (email nil "nobody@flickr.com") (uri nil "http://www.flickr.com/photos/tags/emacs/")) (source nil (title ((type . "html")) "Recent Uploads tagged emacs") (link ((rel . "self") (href . "http://api.flickr.com/services/feeds/photos_public.gne?tags=emacs&lang=en-us&format=rss_200"))) (id nil "http://www.flickr.com/photos/tags/emacs/")))) ("Irreal: Elisp Input With History And Completion" "<p>Xah Lee has a nice post up dealing with <a href=\"http://xahlee.blogspot.com/2012/04/emacs-lisp-getting-user-input-with.html\">getting user input with completion and history in Emacs</a>. I usually just use interactive with “s” or possibly “f” or “F” but Lee shows us a better way. </p>\n<p> Did you know that there are functions specifically for reading path names and regular expressions? I didn’t but I can already see how they can be useful especially given the completion functionality. In particular, the <code>read-regexp</code> function is useful because the user can enter the regular expression without worrying about double escaping everything: </p>\n<pre class=\"src src-emacs-lisp\">^\\(ab*\\.xxx\\)$ → ^\\\\(ab*\\\\.xxx\\\\)$\n</pre>" "http://irreal.org/blog/?p=761" (20359 42176) obsolete 8 nil nil ((title ((type . "html") (xml:lang . "en")) "Irreal: Elisp Input With History And Completion") (link ((href . "http://irreal.org/blog/?p=761"))) (id nil "http://irreal.org/blog/?p=761") (updated nil "2012-04-13T04:00:00+00:00") (content ((type . "html") (xml:lang . "en")) "<p>Xah Lee has a nice post up dealing with <a href=\"http://xahlee.blogspot.com/2012/04/emacs-lisp-getting-user-input-with.html\">getting user input with completion and history in Emacs</a>. I usually just use interactive with “s” or possibly “f” or “F” but Lee shows us a better way. </p>\n<p> Did you know that there are functions specifically for reading path names and regular expressions? I didn’t but I can already see how they can be useful especially given the completion functionality. In particular, the <code>read-regexp</code> function is useful because the user can enter the regular expression without worrying about double escaping everything: </p>\n<pre class=\"src src-emacs-lisp\">^\\(ab*\\.xxx\\)$ → ^\\\\(ab*\\\\.xxx\\\\)$\n</pre>") (author nil (name nil "jcs") (uri nil "http://irreal.org/blog")) (source nil (title ((type . "html")) "Irreal » Emacs") (subtitle ((type . "html")) "The minds had long ago come up with a proper name for it; they called it the Irreal, but they thought of it as Infinite Fun. That was what they really knew it as. The Land of Infinite Fun. --Iain M. Banks, Excession") (link ((rel . "self") (href . "http://irreal.org/blog/?tag=emacs&feed=rss2"))) (id nil "http://irreal.org/blog")))) ("Got Emacs?: Getting ppt figures into LaTeX" "<div dir=\"ltr\" style=\"text-align: left;\">This might be of interest to folks who work with ppts and LaTeX.  There are some interesting methods discussed in <a href=\"https://groups.google.com/forum/?fromgroups#!topic/comp.text.tex/_jZuo9cqkNY\" target=\"_blank\">this thread</a>, apart from the usual PDF export and cropping edit cycle in <a href=\"https://groups.google.com/forum/?fromgroups#!forum/comp.text.tex\">comp.text.tex</a>.  Might be worth checking out.<div><br />\n</div><div><br />\n</div><div>*Hell, the new forum interface of google groups is a total UI bork.  I so want to swear till the air is blue.  Just look at it and weep.  Me, I'm going back to my <a href=\"http://www.gnus.org/\" target=\"_blank\">gnus cave</a>.</div></div><div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/3165518189103293420-5600538125571880842?l=emacsworld.blogspot.com\" width=\"1\" /></div>\n<p><a href=\"http://feedads.g.doubleclick.net/~a/n67Mp5rg_2qj9Pnjfd4KYGRGhUk/0/da\"><img border=\"0\" ismap=\"true\" src=\"http://feedads.g.doubleclick.net/~a/n67Mp5rg_2qj9Pnjfd4KYGRGhUk/0/di\" /></a><br />\n<a href=\"http://feedads.g.doubleclick.net/~a/n67Mp5rg_2qj9Pnjfd4KYGRGhUk/1/da\"><img border=\"0\" ismap=\"true\" src=\"http://feedads.g.doubleclick.net/~a/n67Mp5rg_2qj9Pnjfd4KYGRGhUk/1/di\" /></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/GotEmacs?a=lzuufh4xqfg:LLQlQUVsTzQ:yIl2AUoC8zA\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/GotEmacs?d=yIl2AUoC8zA\" /></a> <a href=\"http://feeds.feedburner.com/~ff/GotEmacs?a=lzuufh4xqfg:LLQlQUVsTzQ:qj6IDK7rITs\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/GotEmacs?d=qj6IDK7rITs\" /></a> <a href=\"http://feeds.feedburner.com/~ff/GotEmacs?a=lzuufh4xqfg:LLQlQUVsTzQ:gIN9vFwOqvQ\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/GotEmacs?i=lzuufh4xqfg:LLQlQUVsTzQ:gIN9vFwOqvQ\" /></a>\n</div><img height=\"1\" src=\"http://feeds.feedburner.com/~r/GotEmacs/~4/lzuufh4xqfg\" width=\"1\" />" "http://feedproxy.google.com/~r/GotEmacs/~3/lzuufh4xqfg/getting-ppt-figures-into-latex.html" (20357 41394) obsolete 9 nil nil ((title ((type . "html")) "Got Emacs?: Getting ppt figures into LaTeX") (link ((href . "http://feedproxy.google.com/~r/GotEmacs/~3/lzuufh4xqfg/getting-ppt-figures-into-latex.html"))) (id nil "tag:blogger.com,1999:blog-3165518189103293420.post-5600538125571880842") (updated nil "2012-04-11T15:22:26+00:00") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\">This might be of interest to folks who work with ppts and LaTeX.  There are some interesting methods discussed in <a href=\"https://groups.google.com/forum/?fromgroups#!topic/comp.text.tex/_jZuo9cqkNY\" target=\"_blank\">this thread</a>, apart from the usual PDF export and cropping edit cycle in <a href=\"https://groups.google.com/forum/?fromgroups#!forum/comp.text.tex\">comp.text.tex</a>.  Might be worth checking out.<div><br />\n</div><div><br />\n</div><div>*Hell, the new forum interface of google groups is a total UI bork.  I so want to swear till the air is blue.  Just look at it and weep.  Me, I'm going back to my <a href=\"http://www.gnus.org/\" target=\"_blank\">gnus cave</a>.</div></div><div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/3165518189103293420-5600538125571880842?l=emacsworld.blogspot.com\" width=\"1\" /></div>\n<p><a href=\"http://feedads.g.doubleclick.net/~a/n67Mp5rg_2qj9Pnjfd4KYGRGhUk/0/da\"><img border=\"0\" ismap=\"true\" src=\"http://feedads.g.doubleclick.net/~a/n67Mp5rg_2qj9Pnjfd4KYGRGhUk/0/di\" /></a><br />\n<a href=\"http://feedads.g.doubleclick.net/~a/n67Mp5rg_2qj9Pnjfd4KYGRGhUk/1/da\"><img border=\"0\" ismap=\"true\" src=\"http://feedads.g.doubleclick.net/~a/n67Mp5rg_2qj9Pnjfd4KYGRGhUk/1/di\" /></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/GotEmacs?a=lzuufh4xqfg:LLQlQUVsTzQ:yIl2AUoC8zA\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/GotEmacs?d=yIl2AUoC8zA\" /></a> <a href=\"http://feeds.feedburner.com/~ff/GotEmacs?a=lzuufh4xqfg:LLQlQUVsTzQ:qj6IDK7rITs\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/GotEmacs?d=qj6IDK7rITs\" /></a> <a href=\"http://feeds.feedburner.com/~ff/GotEmacs?a=lzuufh4xqfg:LLQlQUVsTzQ:gIN9vFwOqvQ\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/GotEmacs?i=lzuufh4xqfg:LLQlQUVsTzQ:gIN9vFwOqvQ\" /></a>\n</div><img height=\"1\" src=\"http://feeds.feedburner.com/~r/GotEmacs/~4/lzuufh4xqfg\" width=\"1\" />") (author nil (name nil "sivaram") (email nil "noreply@blogger.com") (uri nil "http://emacsworld.blogspot.com/")) (source nil (title ((type . "html")) "Got Emacs?") (subtitle ((type . "html")) "Postings on living in an Emacs world.  Posts will be mostly on using Emacs, related functions and tools.") (link ((rel . "self") (href . "http://feeds.feedburner.com/GotEmacs"))) (id nil "tag:blogger.com,1999:blog-3165518189103293420")))) ("Yann Hodique: A Community-based approach to Emacs packages Continuous Integration" "<div class=\"level1\">\n<p></p>\n<div class=\"styler styler-float-left\">\n<p>\n<span class=\"vcard\"><img alt=\"yann.hodique@gmail.com\" class=\"media photo fn\" height=\"40\" src=\"http://www.hodique.info/lib/exe/fetch.php?hash=15d77b&amp;cache=recache&amp;media=http%3A%2F%2Fwww.gravatar.com%2Favatar.php%3Fgravatar_id%3Dd9b955e7af49b0cbfd68c15947b25012%26default%3Dhttp%253A%252F%252Fwww.hodique.info%252Flib%252Fexe%252Ffetch.php%253Fhash%253Dd44619%2526cache%253Drecache%2526media%253Dhttp%25253A%25252F%25252Fwww.hodique.info%25252F%25252Flib%25252Fplugins%25252Favatar%25252Fmonsterid.php%25253Fseed%25253Dd9b955e7af49b0cbfd68c15947b25012%252526size%25253D40%252526.png%26size%3D40%26rating%3DR%26.jpg\" title=\"yann.hodique@gmail.com\" width=\"40\" /></span>\n</p>\n</div>\n<p>\n</p><p>\nIn this post, I'd like to discuss some of my thoughts about the current state\nof Emacs packages development, and in particular those related to proper\nbuilding/testing.\n</p>\n</div>\n<h2 class=\"sectionedit2\"><a id=\"the_problems\" name=\"the_problems\">The problems</a></h2>\n<div class=\"level2\">\n<p>\nHistorically, Emacs packages have had a self-centered, optimistic view of the\nworld : not only did many packages reinvent the same wheel again and again to\navoid depending on other non-official packages (just because there was no good\nuser story for installing them), but most of them didn't have formal tests, let\nalone automated ones.\n</p>\n<p>\nI think that's vowed to change somewhat, with the recent introduction of the\npackage management facility (<a class=\"urlextern\" href=\"http://repo.or.cz/w/emacs.git/blob_plain/HEAD:/lisp/emacs-lisp/package.el\" rel=\"nofollow\" title=\"http://repo.or.cz/w/emacs.git/blob_plain/HEAD:/lisp/emacs-lisp/package.el\">package.el</a> in Emacs 24) and the associated\ninfrastructure (<a class=\"urlextern\" href=\"http://elpa.gnu.org/\" rel=\"nofollow\" title=\"http://elpa.gnu.org/\">GNU Elpa</a>, <a class=\"urlextern\" href=\"http://marmalade-repo.org/\" rel=\"nofollow\" title=\"http://marmalade-repo.org/\">Marmalade</a>, <a class=\"urlextern\" href=\"http://melpa.milkbox.net/\" rel=\"nofollow\" title=\"http://melpa.milkbox.net/\">Melpa</a>). This opens the door to actually\nuseful libraries outside of Emacs core. Not that everything is perfect there\n(in particular, the complete lack of proper namespaces is a still big\nobstacle), but we're slowly going there.\n</p>\n<p>\nAnyway, with packages being (hopefully) less and less self-contained comes\na big concern about reliability/reproducibility, the central question being\n“how do I make sure my package works”. This is partially adressed by the (also\nquite recent) introduction of an <a class=\"urlextern\" href=\"http://www.emacswiki.org/emacs/ErtTestLibrary\" rel=\"nofollow\" title=\"http://www.emacswiki.org/emacs/ErtTestLibrary\">official test framework</a> in Emacs core.\nBut now, it's pretty clear that we need some better way of running tests under\nvarious conditions.\n</p>\n<p>\nTo take an example, as a maintainer of <a class=\"urlextern\" href=\"http://magit.github.com/magit/\" rel=\"nofollow\" title=\"http://magit.github.com/magit/\">Magit</a>, I'd like to make sure that the\ncode runs as expected with:\n</p>\n<ul>\n<li class=\"level1\"><div class=\"li\"> any <acronym title=\"Operating System\">OS</acronym> around</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> at least Emacs 23.x and Emacs 24.x</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> all git versions since something like 1.6.x</div>\n</li>\n</ul>\n<p>\nIdeally, all combinations should be tested, but I'd be quite happy already to\nhave a good subset.  Now of course, having systems covering all this is just\nnot realistic for me. I can afford running a couple of VMs from time to time,\ncovering some of the possibilities, but maintaining the whole thing is much\nmore work that I'm willing to do (not even considering the price).\n</p>\n<p>\nAlso, quite frankly, the activity of the vast majority of Emacs packages\ndevelopment doesn't justify such a continuous integration infrastructure.\nIt's nice to have tests run automatically when code changes, but having test\nslaves sitting there the whole day waiting for a commit is not.\n</p>\n<p>\nWe have 2 separate problems with (in my opinion) a common solution:\n</p>\n<ul>\n<li class=\"level1\"><div class=\"li\"> few package developers can afford doing proper testing for their packages (especially when those packages get complex)</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> virtually no projects are active enough that the cost of a complete setup would make any sense.</div>\n</li>\n</ul>\n<p>\nThis calls for mutualization.\n</p>\n</div>\n<h2 class=\"sectionedit3\"><a id=\"a_proposed_solution\" name=\"a_proposed_solution\">A proposed solution</a></h2>\n<div class=\"level2\">\n<p>\nIt's pretty clear there is an Emacs community (arguably several of them :)),\nwith people caring about the overall quality of the packages they're using.\nStructures like <a class=\"urlextern\" href=\"http://marmalade-repo.org/\" rel=\"nofollow\" title=\"http://marmalade-repo.org/\">Marmalade</a>, or even the <a class=\"urlextern\" href=\"http://www.emacswiki.org\" rel=\"nofollow\" title=\"http://www.emacswiki.org\">EmacsWiki</a> would not have taken off.\n</p>\n<p>\nIt's also very clear that some members wouldn't mind giving some CPU cycles to\nrun tests, as long as they don't have to think about it too much (hey, we're\n<strong>lazy</strong> persons, right? :)). The only think that's not clear is how many would\nvolunteer, and the level of involvement they'd accept. That's what I'd like to\ndiscover :)\n</p>\n<p>\nNow the good thing is that in this community, the main requirements are\nfulfilled in each and every machine: have an <acronym title=\"Operating System\">OS</acronym>, have Emacs installed (and\ngenerally several versions of it). So basically, my point is that we have\na large pool of potential build/test slaves waiting to be used.  Again, this is\nEmacs… most of the packages are built and tested in a matter of seconds, with\nvery few resources consumed in the process.\n</p>\n<p>\nAs an example, my main computer, running Ubuntu Oneiric 64 bits is running on\naverage 10-12 hours a day. I also have a OSX Lion virtual machine that's\nrunning about 6 hours a day. Both have development versions of Emacs 24\ninstalled, and the Ubuntu one also has Emacs 23.3.1. I can definitely run 50\nbuild jobs per day (and probably much more) on each machine without even\nnoticing. Actually I'm using them right now as test slaves in my current\nimplementation, and can't tell when jobs are triggered.\nIt'd would also be very easy for me to setup some <a class=\"urlextern\" href=\"http://lxc.teegra.net/\" rel=\"nofollow\" title=\"http://lxc.teegra.net/\">LXC containers</a> to serve multiple <acronym title=\"Operating System\">OS</acronym> versions, or maybe even to leverage <a class=\"urlextern\" href=\"http://pypi.python.org/pypi/virtualenv\" rel=\"nofollow\" title=\"http://pypi.python.org/pypi/virtualenv\">virtualenv</a> to compose environments with the proper application versions. One can go quite far with few resources.\n</p>\n<p>\nSo… my idea is to put in relation those projects needing resources, and those\nresources waiting to be used. To accomplish that, we need several things:\n</p>\n<ul>\n<li class=\"level1\"><div class=\"li\"> a way for projects to describe what they seek (Emacs 23 on Windows XP)</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> a <em>simple</em> way for slave owners to describe what they can offer (Emacs 24 on Debian Squeeze)</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> a central place in order to dispatch and monitor the jobs</div>\n</li>\n</ul>\n<p>\nNote that in that scenario, it's very important to <em>not</em> require build slaves\nto be available all the time. That would raise a lot the entry barrier, and is\nnot compatible with a communitary approach. Instead, I'd prefer to rely on many\nslaves being sporadically available to cover the “continuous” aspects of\ncontinuous integration.\n</p>\n<p>\nI have implemented something just like this on top of <a class=\"urlextern\" href=\"http://trac.buildbot.net/\" rel=\"nofollow\" title=\"http://trac.buildbot.net/\">Buildbot</a> (for no\nparticular reason, except that it sounded fun).  Before I go into details, you\nmight want to have a quick look there to see how it looks for Magit:\n<a class=\"urlextern\" href=\"http://dev.hodique.info/buildbot/waterfall?category=magit\" rel=\"nofollow\" title=\"http://dev.hodique.info/buildbot/waterfall?category=magit\">http://dev.hodique.info/buildbot/waterfall?category=magit</a>\n</p>\n</div>\n<h2 class=\"sectionedit4\"><a id=\"details_of_the_current_implementation\" name=\"details_of_the_current_implementation\">Details of the current implementation</a></h2>\n<div class=\"level2\">\n<p>\nMy current implementation relies on:\n</p>\n<ul>\n<li class=\"level1\"><div class=\"li\"> a heavily customized buildbot configuration (but it's only configuration, runs on regular buildbot) that separates slaves definition from the rest, for ease of management. That configuration is mirrored here: <a class=\"urlextern\" href=\"https://github.com/sigma/emacs-ci\" rel=\"nofollow\" title=\"https://github.com/sigma/emacs-ci\">https://github.com/sigma/emacs-ci</a></div>\n</li>\n<li class=\"level1\"><div class=\"li\"> a <a class=\"urlextern\" href=\"https://github.com/sitaramc/gitolite\" rel=\"nofollow\" title=\"https://github.com/sitaramc/gitolite\">gitolite</a> server that hosts both the buildbot master configuration, and the definitions for slaves (one repository per slave).</div>\n</li>\n</ul>\n<p>\nThe idea here is that contrary to regular buildbot instances, the jobs to run\nand the slaves on which to run them are administered completely separately:\n</p>\n<ul>\n<li class=\"level1\"><div class=\"li\"> the buildbot admins maintain the list of projects, their requirements, and the build steps to run.</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> each slave admin maintains the description of what his slave is able to do.</div>\n</li>\n</ul>\n<p>\nFor now, each time something is modified on either side, buildbot tries to\nreconfigure itself, by recomputing which combinations can be accomodated for\neach project, and the list of available slaves for each combination.\n</p>\n<p>\nHere is a very simple project definition, for one of my pet projects:\n<a class=\"urlextern\" href=\"https://github.com/sigma/emacs-ci/blob/master/emacs/projects/mocker.py\" rel=\"nofollow\" title=\"https://github.com/sigma/emacs-ci/blob/master/emacs/projects/mocker.py\">https://github.com/sigma/emacs-ci/blob/master/emacs/projects/mocker.py</a> . The\n<code>_project_combinations</code> member defines what features a slave should expose to be\nof interest. If ever we decide that testing with Emacs 23 would be a good idea,\nwe can just add a new element there, and appropriate slaves will be picked\nautomatically, if they exist at all.\n</p>\n<p>\nAt the other end of the spectrum, a slave definition looks like this:\n</p>\n<pre class=\"code\">$ cat slave.yaml\npassword: sdoifio1pofsd\nfeatures:\nos: osx-lion\narch: x64\nemacs: GNU Emacs 24.0.94.1\nbinaries:\nemacs: /usr/local/Cellar/emacs/HEAD/Emacs.app/Contents/MacOS/Emacs</pre>\n<p>\nThis is a simple <a class=\"urlextern\" href=\"http://yaml.org/\" rel=\"nofollow\" title=\"http://yaml.org/\">YAML</a> file that exposes a set of features, and optionally where\nto find them (the emacs binary part). This way, the build steps can be written\nin such a way that they adapt to the exact slave they're running on. Of course,\nthe buildbot slave itself still has to be created :)\n</p>\n<p>\nNote that even the password to connect to the master is under the slave admin's\nresponsibility (and the slave name is just the repository name. This potentially\nallows slaves to be created without any intervention from the master admin. For example, were we to enable some\ngitolite wildcard repositories, we could have some people create slaves\nentirely by themselves.\n</p>\n</div>\n<h2 class=\"sectionedit5\"><a id=\"conclusion\" name=\"conclusion\">Conclusion</a></h2>\n<div class=\"level2\">\n<p>\nWow… that was a long post. Thanks for reading this far :)\n</p>\n<p>\nAgain, this is a pretty prospective topic. I'm not saying any of this is the\nonly true way of dealing with the issue, I'm just saying that this issue needs\nto be adressed somehow.\n</p>\n<p>\nI'd love to hear from people who might be interested in taking part in the\ndiscussion, so feel free to contact me if you have any idea of how you would\nlike to see things evolve. In addition to mail, I'm generally available on <acronym title=\"Internet Relay Chat\">IRC</acronym>\n(channel #emacs, nickname Sigma)\n</p>\n<div class=\"tags\"><span>\n<a class=\"wikilink1\" href=\"http://www.hodique.info/tags/emacs\" rel=\"tag\" title=\"tags:emacs\">emacs</a>\n</span></div>\n</div>\n<span class=\"plugin_feedmod_comments\">\n<a href=\"http://www.hodique.info/blog/2012/04/09/a_community-based_approach_to_emacs_packages_continuous_integration#discussion__section\" title=\"Read or add comments to this article\">Read or add comments to this article</a>\n</span>" "http://www.hodique.info/blog/2012/04/09/a_community-based_approach_to_emacs_packages_continuous_integration" (20355 23140) obsolete 10 nil nil ((title ((type . "html")) "Yann Hodique: A Community-based approach to Emacs packages Continuous Integration") (link ((href . "http://www.hodique.info/blog/2012/04/09/a_community-based_approach_to_emacs_packages_continuous_integration"))) (id nil "http://www.hodique.info/blog/2012/04/09/a_community-based_approach_to_emacs_packages_continuous_integration") (updated nil "2012-04-09T21:53:40+00:00") (content ((type . "html")) "<div class=\"level1\">\n<p></p>\n<div class=\"styler styler-float-left\">\n<p>\n<span class=\"vcard\"><img alt=\"yann.hodique@gmail.com\" class=\"media photo fn\" height=\"40\" src=\"http://www.hodique.info/lib/exe/fetch.php?hash=15d77b&amp;cache=recache&amp;media=http%3A%2F%2Fwww.gravatar.com%2Favatar.php%3Fgravatar_id%3Dd9b955e7af49b0cbfd68c15947b25012%26default%3Dhttp%253A%252F%252Fwww.hodique.info%252Flib%252Fexe%252Ffetch.php%253Fhash%253Dd44619%2526cache%253Drecache%2526media%253Dhttp%25253A%25252F%25252Fwww.hodique.info%25252F%25252Flib%25252Fplugins%25252Favatar%25252Fmonsterid.php%25253Fseed%25253Dd9b955e7af49b0cbfd68c15947b25012%252526size%25253D40%252526.png%26size%3D40%26rating%3DR%26.jpg\" title=\"yann.hodique@gmail.com\" width=\"40\" /></span>\n</p>\n</div>\n<p>\n</p><p>\nIn this post, I'd like to discuss some of my thoughts about the current state\nof Emacs packages development, and in particular those related to proper\nbuilding/testing.\n</p>\n\n</div>\n\n<h2 class=\"sectionedit2\"><a id=\"the_problems\" name=\"the_problems\">The problems</a></h2>\n<div class=\"level2\">\n\n<p>\nHistorically, Emacs packages have had a self-centered, optimistic view of the\nworld : not only did many packages reinvent the same wheel again and again to\navoid depending on other non-official packages (just because there was no good\nuser story for installing them), but most of them didn't have formal tests, let\nalone automated ones.\n</p>\n\n<p>\nI think that's vowed to change somewhat, with the recent introduction of the\npackage management facility (<a class=\"urlextern\" href=\"http://repo.or.cz/w/emacs.git/blob_plain/HEAD:/lisp/emacs-lisp/package.el\" rel=\"nofollow\" title=\"http://repo.or.cz/w/emacs.git/blob_plain/HEAD:/lisp/emacs-lisp/package.el\">package.el</a> in Emacs 24) and the associated\ninfrastructure (<a class=\"urlextern\" href=\"http://elpa.gnu.org/\" rel=\"nofollow\" title=\"http://elpa.gnu.org/\">GNU Elpa</a>, <a class=\"urlextern\" href=\"http://marmalade-repo.org/\" rel=\"nofollow\" title=\"http://marmalade-repo.org/\">Marmalade</a>, <a class=\"urlextern\" href=\"http://melpa.milkbox.net/\" rel=\"nofollow\" title=\"http://melpa.milkbox.net/\">Melpa</a>). This opens the door to actually\nuseful libraries outside of Emacs core. Not that everything is perfect there\n(in particular, the complete lack of proper namespaces is a still big\nobstacle), but we're slowly going there.\n</p>\n\n<p>\nAnyway, with packages being (hopefully) less and less self-contained comes\na big concern about reliability/reproducibility, the central question being\n“how do I make sure my package works”. This is partially adressed by the (also\nquite recent) introduction of an <a class=\"urlextern\" href=\"http://www.emacswiki.org/emacs/ErtTestLibrary\" rel=\"nofollow\" title=\"http://www.emacswiki.org/emacs/ErtTestLibrary\">official test framework</a> in Emacs core.\nBut now, it's pretty clear that we need some better way of running tests under\nvarious conditions.\n</p>\n\n<p>\nTo take an example, as a maintainer of <a class=\"urlextern\" href=\"http://magit.github.com/magit/\" rel=\"nofollow\" title=\"http://magit.github.com/magit/\">Magit</a>, I'd like to make sure that the\ncode runs as expected with:\n</p>\n<ul>\n<li class=\"level1\"><div class=\"li\"> any <acronym title=\"Operating System\">OS</acronym> around</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> at least Emacs 23.x and Emacs 24.x</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> all git versions since something like 1.6.x</div>\n</li>\n</ul>\n\n<p>\nIdeally, all combinations should be tested, but I'd be quite happy already to\nhave a good subset.  Now of course, having systems covering all this is just\nnot realistic for me. I can afford running a couple of VMs from time to time,\ncovering some of the possibilities, but maintaining the whole thing is much\nmore work that I'm willing to do (not even considering the price).\n</p>\n\n<p>\nAlso, quite frankly, the activity of the vast majority of Emacs packages\ndevelopment doesn't justify such a continuous integration infrastructure.\nIt's nice to have tests run automatically when code changes, but having test\nslaves sitting there the whole day waiting for a commit is not.\n</p>\n\n<p>\nWe have 2 separate problems with (in my opinion) a common solution:\n</p>\n<ul>\n<li class=\"level1\"><div class=\"li\"> few package developers can afford doing proper testing for their packages (especially when those packages get complex)</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> virtually no projects are active enough that the cost of a complete setup would make any sense.</div>\n</li>\n</ul>\n\n<p>\nThis calls for mutualization.\n</p>\n\n</div>\n\n<h2 class=\"sectionedit3\"><a id=\"a_proposed_solution\" name=\"a_proposed_solution\">A proposed solution</a></h2>\n<div class=\"level2\">\n\n<p>\nIt's pretty clear there is an Emacs community (arguably several of them :)),\nwith people caring about the overall quality of the packages they're using.\nStructures like <a class=\"urlextern\" href=\"http://marmalade-repo.org/\" rel=\"nofollow\" title=\"http://marmalade-repo.org/\">Marmalade</a>, or even the <a class=\"urlextern\" href=\"http://www.emacswiki.org\" rel=\"nofollow\" title=\"http://www.emacswiki.org\">EmacsWiki</a> would not have taken off.\n</p>\n\n<p>\nIt's also very clear that some members wouldn't mind giving some CPU cycles to\nrun tests, as long as they don't have to think about it too much (hey, we're\n<strong>lazy</strong> persons, right? :)). The only think that's not clear is how many would\nvolunteer, and the level of involvement they'd accept. That's what I'd like to\ndiscover :)\n</p>\n\n<p>\nNow the good thing is that in this community, the main requirements are\nfulfilled in each and every machine: have an <acronym title=\"Operating System\">OS</acronym>, have Emacs installed (and\ngenerally several versions of it). So basically, my point is that we have\na large pool of potential build/test slaves waiting to be used.  Again, this is\nEmacs… most of the packages are built and tested in a matter of seconds, with\nvery few resources consumed in the process.\n</p>\n\n<p>\nAs an example, my main computer, running Ubuntu Oneiric 64 bits is running on\naverage 10-12 hours a day. I also have a OSX Lion virtual machine that's\nrunning about 6 hours a day. Both have development versions of Emacs 24\ninstalled, and the Ubuntu one also has Emacs 23.3.1. I can definitely run 50\nbuild jobs per day (and probably much more) on each machine without even\nnoticing. Actually I'm using them right now as test slaves in my current\nimplementation, and can't tell when jobs are triggered.\nIt'd would also be very easy for me to setup some <a class=\"urlextern\" href=\"http://lxc.teegra.net/\" rel=\"nofollow\" title=\"http://lxc.teegra.net/\">LXC containers</a> to serve multiple <acronym title=\"Operating System\">OS</acronym> versions, or maybe even to leverage <a class=\"urlextern\" href=\"http://pypi.python.org/pypi/virtualenv\" rel=\"nofollow\" title=\"http://pypi.python.org/pypi/virtualenv\">virtualenv</a> to compose environments with the proper application versions. One can go quite far with few resources.\n</p>\n\n<p>\nSo… my idea is to put in relation those projects needing resources, and those\nresources waiting to be used. To accomplish that, we need several things:\n</p>\n<ul>\n<li class=\"level1\"><div class=\"li\"> a way for projects to describe what they seek (Emacs 23 on Windows XP)</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> a <em>simple</em> way for slave owners to describe what they can offer (Emacs 24 on Debian Squeeze)</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> a central place in order to dispatch and monitor the jobs</div>\n</li>\n</ul>\n\n<p>\nNote that in that scenario, it's very important to <em>not</em> require build slaves\nto be available all the time. That would raise a lot the entry barrier, and is\nnot compatible with a communitary approach. Instead, I'd prefer to rely on many\nslaves being sporadically available to cover the “continuous” aspects of\ncontinuous integration.\n</p>\n\n<p>\nI have implemented something just like this on top of <a class=\"urlextern\" href=\"http://trac.buildbot.net/\" rel=\"nofollow\" title=\"http://trac.buildbot.net/\">Buildbot</a> (for no\nparticular reason, except that it sounded fun).  Before I go into details, you\nmight want to have a quick look there to see how it looks for Magit:\n<a class=\"urlextern\" href=\"http://dev.hodique.info/buildbot/waterfall?category=magit\" rel=\"nofollow\" title=\"http://dev.hodique.info/buildbot/waterfall?category=magit\">http://dev.hodique.info/buildbot/waterfall?category=magit</a>\n</p>\n\n</div>\n\n<h2 class=\"sectionedit4\"><a id=\"details_of_the_current_implementation\" name=\"details_of_the_current_implementation\">Details of the current implementation</a></h2>\n<div class=\"level2\">\n\n<p>\nMy current implementation relies on:\n</p>\n<ul>\n<li class=\"level1\"><div class=\"li\"> a heavily customized buildbot configuration (but it's only configuration, runs on regular buildbot) that separates slaves definition from the rest, for ease of management. That configuration is mirrored here: <a class=\"urlextern\" href=\"https://github.com/sigma/emacs-ci\" rel=\"nofollow\" title=\"https://github.com/sigma/emacs-ci\">https://github.com/sigma/emacs-ci</a></div>\n</li>\n<li class=\"level1\"><div class=\"li\"> a <a class=\"urlextern\" href=\"https://github.com/sitaramc/gitolite\" rel=\"nofollow\" title=\"https://github.com/sitaramc/gitolite\">gitolite</a> server that hosts both the buildbot master configuration, and the definitions for slaves (one repository per slave).</div>\n</li>\n</ul>\n\n<p>\nThe idea here is that contrary to regular buildbot instances, the jobs to run\nand the slaves on which to run them are administered completely separately:\n</p>\n<ul>\n<li class=\"level1\"><div class=\"li\"> the buildbot admins maintain the list of projects, their requirements, and the build steps to run.</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> each slave admin maintains the description of what his slave is able to do.</div>\n</li>\n</ul>\n\n<p>\nFor now, each time something is modified on either side, buildbot tries to\nreconfigure itself, by recomputing which combinations can be accomodated for\neach project, and the list of available slaves for each combination.\n</p>\n\n<p>\nHere is a very simple project definition, for one of my pet projects:\n<a class=\"urlextern\" href=\"https://github.com/sigma/emacs-ci/blob/master/emacs/projects/mocker.py\" rel=\"nofollow\" title=\"https://github.com/sigma/emacs-ci/blob/master/emacs/projects/mocker.py\">https://github.com/sigma/emacs-ci/blob/master/emacs/projects/mocker.py</a> . The\n<code>_project_combinations</code> member defines what features a slave should expose to be\nof interest. If ever we decide that testing with Emacs 23 would be a good idea,\nwe can just add a new element there, and appropriate slaves will be picked\nautomatically, if they exist at all.\n</p>\n\n<p>\nAt the other end of the spectrum, a slave definition looks like this:\n</p>\n<pre class=\"code\">$ cat slave.yaml\npassword: sdoifio1pofsd\n\nfeatures:\n  os: osx-lion\n  arch: x64\n  emacs: GNU Emacs 24.0.94.1\n\nbinaries:\n  emacs: /usr/local/Cellar/emacs/HEAD/Emacs.app/Contents/MacOS/Emacs</pre>\n\n<p>\nThis is a simple <a class=\"urlextern\" href=\"http://yaml.org/\" rel=\"nofollow\" title=\"http://yaml.org/\">YAML</a> file that exposes a set of features, and optionally where\nto find them (the emacs binary part). This way, the build steps can be written\nin such a way that they adapt to the exact slave they're running on. Of course,\nthe buildbot slave itself still has to be created :)\n</p>\n\n<p>\nNote that even the password to connect to the master is under the slave admin's\nresponsibility (and the slave name is just the repository name. This potentially \nallows slaves to be created without any intervention from the master admin. For example, were we to enable some\ngitolite wildcard repositories, we could have some people create slaves\nentirely by themselves.\n</p>\n\n</div>\n\n<h2 class=\"sectionedit5\"><a id=\"conclusion\" name=\"conclusion\">Conclusion</a></h2>\n<div class=\"level2\">\n\n<p>\nWow… that was a long post. Thanks for reading this far :)\n</p>\n\n<p>\nAgain, this is a pretty prospective topic. I'm not saying any of this is the\nonly true way of dealing with the issue, I'm just saying that this issue needs\nto be adressed somehow.\n</p>\n\n<p>\nI'd love to hear from people who might be interested in taking part in the\ndiscussion, so feel free to contact me if you have any idea of how you would\nlike to see things evolve. In addition to mail, I'm generally available on <acronym title=\"Internet Relay Chat\">IRC</acronym>\n(channel #emacs, nickname Sigma)\n</p>\n<div class=\"tags\"><span>\n	<a class=\"wikilink1\" href=\"http://www.hodique.info/tags/emacs\" rel=\"tag\" title=\"tags:emacs\">emacs</a>\n</span></div>\n\n</div>\n<span class=\"plugin_feedmod_comments\">\n  <a href=\"http://www.hodique.info/blog/2012/04/09/a_community-based_approach_to_emacs_packages_continuous_integration#discussion__section\" title=\"Read or add comments to this article\">Read or add comments to this article</a>\n</span>") (author nil (name nil "Yann Hodique") (uri nil "http://www.hodique.info/")) (source nil (title ((type . "html")) "Yann Hodique blog:2012") (link ((rel . "self") (href . "http://www.hodique.info/_blog.rss"))) (id nil "http://www.hodique.info/")))) ("Got Emacs?: An Emacs conference?" "<div dir=\"ltr\" style=\"text-align: left;\"><a href=\"https://news.ycombinator.com/item?id=3816383\" target=\"_blank\">This looks like a fabulous idea, via Hacker News</a>, that an <a href=\"http://emacsconf.herokuapp.com/\" target=\"_blank\">Emacs Conference is being planned, probably in London</a>.  Go ahead, sign up or at least provide your inputs on what you'd like the experts to cover for you in the PROPOSALS section of the <a href=\"http://emacsconf.herokuapp.com/\" target=\"_blank\">link</a>.<br />\n<br />\nThis is the best chance to ask for detailed help if you were too embarrassed to ask on the mailing list or Usenet. </div><div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/3165518189103293420-6013831496894213767?l=emacsworld.blogspot.com\" width=\"1\" /></div>\n<p><a href=\"http://feedads.g.doubleclick.net/~a/QEzvml8UozXG6pJ11pP3tDLgLhQ/0/da\"><img border=\"0\" ismap=\"true\" src=\"http://feedads.g.doubleclick.net/~a/QEzvml8UozXG6pJ11pP3tDLgLhQ/0/di\" /></a><br />\n<a href=\"http://feedads.g.doubleclick.net/~a/QEzvml8UozXG6pJ11pP3tDLgLhQ/1/da\"><img border=\"0\" ismap=\"true\" src=\"http://feedads.g.doubleclick.net/~a/QEzvml8UozXG6pJ11pP3tDLgLhQ/1/di\" /></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/GotEmacs?a=pBs1V2RDgn8:h_0qNcw7470:yIl2AUoC8zA\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/GotEmacs?d=yIl2AUoC8zA\" /></a> <a href=\"http://feeds.feedburner.com/~ff/GotEmacs?a=pBs1V2RDgn8:h_0qNcw7470:qj6IDK7rITs\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/GotEmacs?d=qj6IDK7rITs\" /></a> <a href=\"http://feeds.feedburner.com/~ff/GotEmacs?a=pBs1V2RDgn8:h_0qNcw7470:gIN9vFwOqvQ\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/GotEmacs?i=pBs1V2RDgn8:h_0qNcw7470:gIN9vFwOqvQ\" /></a>\n</div><img height=\"1\" src=\"http://feeds.feedburner.com/~r/GotEmacs/~4/pBs1V2RDgn8\" width=\"1\" />" "http://feedproxy.google.com/~r/GotEmacs/~3/pBs1V2RDgn8/emacs-conference.html" (20355 3881) obsolete 11 nil nil ((title ((type . "html")) "Got Emacs?: An Emacs conference?") (link ((href . "http://feedproxy.google.com/~r/GotEmacs/~3/pBs1V2RDgn8/emacs-conference.html"))) (id nil "tag:blogger.com,1999:blog-3165518189103293420.post-6013831496894213767") (updated nil "2012-04-09T16:32:41+00:00") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\"><a href=\"https://news.ycombinator.com/item?id=3816383\" target=\"_blank\">This looks like a fabulous idea, via Hacker News</a>, that an <a href=\"http://emacsconf.herokuapp.com/\" target=\"_blank\">Emacs Conference is being planned, probably in London</a>.  Go ahead, sign up or at least provide your inputs on what you'd like the experts to cover for you in the PROPOSALS section of the <a href=\"http://emacsconf.herokuapp.com/\" target=\"_blank\">link</a>.<br />\n<br />\nThis is the best chance to ask for detailed help if you were too embarrassed to ask on the mailing list or Usenet. </div><div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/3165518189103293420-6013831496894213767?l=emacsworld.blogspot.com\" width=\"1\" /></div>\n<p><a href=\"http://feedads.g.doubleclick.net/~a/QEzvml8UozXG6pJ11pP3tDLgLhQ/0/da\"><img border=\"0\" ismap=\"true\" src=\"http://feedads.g.doubleclick.net/~a/QEzvml8UozXG6pJ11pP3tDLgLhQ/0/di\" /></a><br />\n<a href=\"http://feedads.g.doubleclick.net/~a/QEzvml8UozXG6pJ11pP3tDLgLhQ/1/da\"><img border=\"0\" ismap=\"true\" src=\"http://feedads.g.doubleclick.net/~a/QEzvml8UozXG6pJ11pP3tDLgLhQ/1/di\" /></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/GotEmacs?a=pBs1V2RDgn8:h_0qNcw7470:yIl2AUoC8zA\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/GotEmacs?d=yIl2AUoC8zA\" /></a> <a href=\"http://feeds.feedburner.com/~ff/GotEmacs?a=pBs1V2RDgn8:h_0qNcw7470:qj6IDK7rITs\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/GotEmacs?d=qj6IDK7rITs\" /></a> <a href=\"http://feeds.feedburner.com/~ff/GotEmacs?a=pBs1V2RDgn8:h_0qNcw7470:gIN9vFwOqvQ\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/GotEmacs?i=pBs1V2RDgn8:h_0qNcw7470:gIN9vFwOqvQ\" /></a>\n</div><img height=\"1\" src=\"http://feeds.feedburner.com/~r/GotEmacs/~4/pBs1V2RDgn8\" width=\"1\" />") (author nil (name nil "sivaram") (email nil "noreply@blogger.com") (uri nil "http://emacsworld.blogspot.com/")) (source nil (title ((type . "html")) "Got Emacs?") (subtitle ((type . "html")) "Postings on living in an Emacs world.  Posts will be mostly on using Emacs, related functions and tools.") (link ((rel . "self") (href . "http://feeds.feedburner.com/GotEmacs"))) (id nil "tag:blogger.com,1999:blog-3165518189103293420")))) ("John Sullivan: Photos from Belgium" "<p>\nI <a href=\"http://gallery.wjsullivan.net/v/public/brussels/fosdem-2012/\" rel=\"nofollow\" target=\"_blank\">put up (with almost no filtration) the photos I took</a> while visiting Brussels for FOSDEM in February. Most are from the <a href=\"http://atomium.be/\" rel=\"nofollow\" target=\"_blank\">Atomium</a>.\n</p>\n<img alt=\"\" src=\"http://gallery.wjsullivan.net/d/12269-4/fosdem-2012.jpg\" style=\"padding: 0.5em;\" /><img height=\"1\" src=\"http://feeds.feedburner.com/~r/wjsullivan/~4/SUkF86ubb-o\" width=\"1\" />" "http://feedproxy.google.com/~r/wjsullivan/~3/SUkF86ubb-o/279726.html" (20354 36511) obsolete 12 nil nil ((title ((type . "html")) "John Sullivan: Photos from Belgium") (link ((href . "http://feedproxy.google.com/~r/wjsullivan/~3/SUkF86ubb-o/279726.html"))) (id nil "http://johnsu01.livejournal.com/279726.html") (updated nil "2012-04-09T07:24:15+00:00") (content ((type . "html")) "<p>\nI <a href=\"http://gallery.wjsullivan.net/v/public/brussels/fosdem-2012/\" rel=\"nofollow\" target=\"_blank\">put up (with almost no filtration) the photos I took</a> while visiting Brussels for FOSDEM in February. Most are from the <a href=\"http://atomium.be/\" rel=\"nofollow\" target=\"_blank\">Atomium</a>.\n</p>\n\n<img alt=\"\" src=\"http://gallery.wjsullivan.net/d/12269-4/fosdem-2012.jpg\" style=\"padding: 0.5em;\" /><img height=\"1\" src=\"http://feeds.feedburner.com/~r/wjsullivan/~4/SUkF86ubb-o\" width=\"1\" />") (author nil (name nil "John Sullivan") (uri nil "http://pipes.yahoo.com/pipes/pipe.info?_id=FiExI4MS3RG8VVYcM1rX_Q")) (source nil (title ((type . "html")) "John Sullivan's Emacs and free software blog posts") (subtitle ((type . "html")) "Pipes Output") (link ((rel . "self") (href . "http://pipes.yahoo.com/pipes/pipe.run?_id=FiExI4MS3RG8VVYcM1rX_Q&_render=rss"))) (id nil "http://pipes.yahoo.com/pipes/pipe.info?_id=FiExI4MS3RG8VVYcM1rX_Q")))) ("Chris Ball: Ohanami 2012, Cambridge MA" "<p>(<i>Ohanami</i> refers to the Japanese festival of cherry-blossom viewing, celebrated during the week or or two in which the trees bloom each year.  We've been getting together with friends to sit under the trees here for the last few years.)</p>\n<div align=\"center\">\n<a href=\"http://www.flickr.com/photos/madprime/6909368314/sizes/l/in/photostream/\"><img src=\"http://farm8.staticflickr.com/7093/6909368314_2c294fd3e0.jpg\" /></a>\n<br /><br />\n<a href=\"http://www.flickr.com/photos/madprime/7055451731/sizes/l/in/photostream/\"><img src=\"http://farm6.staticflickr.com/5200/7055451731_2049acc792.jpg\" /></a>\n<br /><br />\n<a href=\"http://www.flickr.com/photos/madprime/6909358224/sizes/l/in/photostream/\"><img src=\"http://farm6.staticflickr.com/5234/6909358224_6ffa06a5b8.jpg\" /></a>\n<br /><br />\n<a href=\"http://www.flickr.com/photos/madprime/7055461735/sizes/l/in/photostream/\"><img src=\"http://farm8.staticflickr.com/7207/7055461735_2088739dc0_z.jpg\" />\n<br /><br />\n</a><a href=\"http://www.flickr.com/photos/madprime/7055462899/sizes/l/in/photostream/\"><img src=\"http://farm6.staticflickr.com/5196/7055462899_a06d05393d.jpg\" /></a>\n</div>" "http://blog.printf.net/articles/2012/04/09/ohanami-2012-cambridge-ma" (20354 20056) obsolete 13 nil nil ((title ((type . "html") (xml:lang . "en-us")) "Chris Ball: Ohanami 2012, Cambridge MA") (link ((href . "http://blog.printf.net/articles/2012/04/09/ohanami-2012-cambridge-ma"))) (id nil "urn:uuid:4cf75e0c-452c-4746-a0fd-935b5a2b73d5") (updated nil "2012-04-09T02:50:00+00:00") (content ((type . "html")) "<p>(<i>Ohanami</i> refers to the Japanese festival of cherry-blossom viewing, celebrated during the week or or two in which the trees bloom each year.  We've been getting together with friends to sit under the trees here for the last few years.)</p>\n\n<div align=\"center\">\n<a href=\"http://www.flickr.com/photos/madprime/6909368314/sizes/l/in/photostream/\"><img src=\"http://farm8.staticflickr.com/7093/6909368314_2c294fd3e0.jpg\" /></a>\n<br /><br />\n<a href=\"http://www.flickr.com/photos/madprime/7055451731/sizes/l/in/photostream/\"><img src=\"http://farm6.staticflickr.com/5200/7055451731_2049acc792.jpg\" /></a>\n<br /><br />\n<a href=\"http://www.flickr.com/photos/madprime/6909358224/sizes/l/in/photostream/\"><img src=\"http://farm6.staticflickr.com/5234/6909358224_6ffa06a5b8.jpg\" /></a>\n<br /><br />\n<a href=\"http://www.flickr.com/photos/madprime/7055461735/sizes/l/in/photostream/\"><img src=\"http://farm8.staticflickr.com/7207/7055461735_2088739dc0_z.jpg\" />\n<br /><br />\n</a><a href=\"http://www.flickr.com/photos/madprime/7055462899/sizes/l/in/photostream/\"><img src=\"http://farm6.staticflickr.com/5196/7055462899_a06d05393d.jpg\" /></a>\n</div>") (author nil (name nil "Chris Ball") (uri nil "http://blog.printf.net")) (source nil (title ((type . "html")) "Chris Ball") (link ((rel . "self") (href . "http://blog.printf.net/xml/rss20/feed.xml"))) (id nil "http://blog.printf.net")))) ("Vincent Toups: Shadchen-el introduction and defpattern tutorial" "<p>Lately I've been working on an Emacs Lisp library I'm pretty proud of,\n<a href=\"https://github.com/VincentToups/shadchen-el\">Shadchen</a>.  It implements extensible pattern matching, somewhat\nlike Racket's Match facility for Emacs Lisp.  In this\ntutorial/introduction I'll explain how to use Shadchen's various\nfacilities and, most importantly, how to extend Shadchen itself with\nnew patterns, which is an interesting subject in and of itself,\ncombining compile time and run-time execution in interesting ways.  If\nyou already know about pattern matching, feel free to jump to the end,\nwhere I talk about writing non-trivial patterns using Shadchen's\n<code>defpattern</code>.</p>\n<h2>The Problem Shadchen Solves</h2>\n<p>Shadchen solves several problems you may not know you may have.  In\none sentence, Shadchen lets you concisely express both destructuring\nand type checking for complex data structures.  It can be thought of\nas combining the features of <code>cond</code>, <code>case</code> and <code>assert</code> into one nice\npackage.  My experience is that this collection of features helps me\nwrite better code, since it encourages me to dilineate exactly the\nkind of data a function or form expects before doing anything with\nit.  </p>\n<p>Shadchen is also conservative - unless you provide a pattern that\nmatches the input data, it will fail with a match error, so you know\nsomething is wrong before something strange happens.</p>\n<p>For instance, suppose we were writing an interpreter for Lisp.  It\nmight look like:</p>\n<pre><code>(defun eval (form env)\n(cond form\n((symbolp form) (eval-symbol form env))\n((listp form)\n(case (car form)\n(if (handle-if (cadr form)\n(caddr form)\n(caddr form) env))\n(let (handle-let\n(cadr form)\n(cdddr form)))\n...))))\n</code></pre>\n<p>Note that we have both a <code>cond</code> and a <code>case</code> here, and that after we\ntest our data, we destructure it.  Here is a similar piece of code\nusing Shadchen:</p>\n<pre><code>(defun eval (form env)\n(match form\n((p #'symbolp s) (eval-symbol s env))\n((list) nil)\n((list 'if pred true-branch false-branch)\n(handle-if pred true-branch false-branch env))\n((list-rest 'let (list-rest pairs) body)\n(handle-let pairs body env))\n...))\n</code></pre>\n<p>(Notes: the pattern <code>p</code> passes when the predicate as its second\nargument is true on the match value, and then matches against the\nthird argument.  So <code>(p #'symbolp s)</code> matches only when form is a\nsymbol and then binds <code>s</code> to that symbol.  <code>list</code> matches when the\ninput is a list and each pattern in the the list pattern matches each\ncorresponding element in the list.  <code>list-rest</code> is similar but any\nleftover parts of the list are matched against the final pattern.)</p>\n<p>This code is more concise, and yet it is also much more explicit, both\nin that it provides better naming for values and it provides more\nexplicit error checking.  For instance, this version will only match\n<code>if</code> with three expressions, where as the previous evaluator would\nhave been fine with the expression <code>(if a b c d e f)</code>.  This version\nalso asserts explicitly that the binding part of the let needs to be a\nlist.  With a custom pattern we could also ensure it was a list of\nsymbol/expression pairs in almost the same space.</p>\n<p>It takes all kinds, but I found that once I got used to programming\nwith pattern matching, it was hard to go back.</p>\n<h2>Other Rad Features of Shadchen</h2>\n<h3>match-let</h3>\n<p>Shadchen wants to let you program in a functional style.  To that end,\nin addition to the regular pattern matching form <code>match</code>, it also\nprovides some other, nice features.  Many algorithms involve examining\nsome intermediate data, checking its structure somehow, and then\nrecursively processing the next step.  Shadchen allows this kind of\nthing with the Scheme-flavored <code>match-let</code> form.</p>\n<p>The form <code>match-let</code> can be used exactly like <code>let</code>:</p>\n<pre><code>(match-let\n((x 10)\n(y 11))\n(+ x y))\n</code></pre>\n<p>But in each \"binding\" pair, the symbol may be replaced with any\nShadchen pattern.  Eg:</p>\n<pre><code>(match-let\n((x 10)\n(y 11)\n((list q r s) (list 1 2 3)))\n(+ x y q r s))\n</code></pre>\n<p>Will give you 27.  If any pattern fails, the form produces a match\nfail error, which means you can use <code>match-let</code> as a <code>let</code> form with\ntidy type checking.</p>\n<p>Finally, a <code>match-let</code> form allows tail recursion.  Invoking <code>recur</code>\nin a <a href=\"http://en.wikipedia.org/wiki/Tail_call\">tail position</a> inside the form causes the <code>match-let</code> to be\nre-entered without growing the stack.  For instance:</p>\n<pre><code>(match-let\n(((list x y) (list 0 0)))\n(if (&lt; (+ x y) 10000)\n(recur (list (+ x 1) (+ x y)))\n(list x y)))\n</code></pre>\n<p>Results in <code>(141 9870)</code> and can't blow the stack.  It is an error to\ninvoke <code>recur</code> in a non-tail position, but because of limitations in\nEmacs Lisp, it is difficult to enforce this statically. </p>\n<h3>defun-match</h3>\n<p>The form <code>defun-match</code> lets you write functions which pattern match on\ntheir arguments and split their calculations across multiple bodies,\nin a bit like the style of <a href=\"http://www.shenlanguage.org/\">Shen</a> or <a href=\"http://www.haskell.org/haskellwiki/Haskell\">Haskell</a>.</p>\n<p>For instance, suppose we have an animal simulator, where each animal\nis represented by a list, the first element of which is a symbol\nrepresenting the animal name.  We can say:</p>\n<pre><code>(defun-match- vocalize ((list-rest 'cat properties))\n\"Cat vocalization.\"\n(message \"Meow\"))\n(defun-match vocalize ((list-rest 'dog properties))\n\"Dog vocalization.\"\n(message \"Woof\"))\n</code></pre>\n<p>Then: </p>\n<pre><code>(vocalize '(cat :name tess))\n(vocalize '(dog :name bowzer))\n</code></pre>\n<p>Functions defined with <code>defun-match</code> can also use <code>recur</code> to re-enter\nthemselves without growing the stack.  Consider a function which\ncauses a list of animals to vocalize:</p>\n<pre><code>(defun-match- vocalize-list (nil) nil)\n(defun-match vocalize-list ((cons animal animals))\n(vocalize animal)\n(recur animals))\n</code></pre>\n<p><code>recur</code> can dispatch to any of the bodies defined for the function and\nit doesn't grow the stack.  It must be invoked from tail position,\nthough non-tail calls can be affected by simply calling the function.</p>\n<p>(N.B. <code>defun-match-</code> with that dangling minus sign causes previous\nbodies to be expunged before defining the indicated body.)</p>\n<h2>Extending Shadchen with defpattern</h2>\n<p>Shadchen is an extensible pattern matching facility.  We can define\nnew patterns much in the way we define new functions, although\npatterns are more like macros than functions.  Let's look at a simple\nexample, and then I'll guide you through a more complex example I just\nadded to the library using the <code>defpattern</code>.</p>\n<p>A quirk of Common and Emacs Lisp is that <code>(car nil)</code> is <code>nil</code> even\nthough <code>nil</code> is not a <code>cons</code> cell, and so does not have a <code>car</code> or a\n<code>cdr</code>.  I hate this behavior, because its quite evident that <code>(cons\nnil some-list)</code> is different from <code>nil</code>, but <code>car</code> can't tell that -\nthe user has to do more inspection to find this out.  Bugs waiting to\nhappen, let me tell you. </p>\n<p>However, I'm nothing if not accommodating, and so the <code>cons</code> pattern in\nShadchen will, in fact, match against <code>nil</code>.  So:</p>\n<pre><code>(match nil\n((cons a b) (list a b)))\n</code></pre>\n<p>Will be <code>'(nil nil)</code>.  Let's define a pattern which is like <code>cons</code>,\nbut only matches against <em>actual cons cells</em>, into which category\n<code>nil</code> fails to fall.</p>\n<pre><code>(defpattern strict-cons (car cdr)\n`(p #'consp (cons ,car ,cdr)))\n</code></pre>\n<p>A defpattern body must evaluate to a legal shadchen pattern.  Each\nargument to the defpattern is also a shadchen pattern.  So this\npattern reads \"define a new pattern <code>strict-cons</code>, which first checks\nthat the match value is a cons cell using the <code>p</code> pattern, and then\nmatches the car and cdr of that cons cell against the patterns <code>car</code>\nand <code>cdr.</code>\".</p>\n<p>During the expansion of a shadchen pattern matching form, user defined\npatterns are looked up and their expansions are inserted into the\nmacro expansion.  In short, <code>defpattern</code> allows you to define new\npatterns <em>in terms of old patterns</em>.</p>\n<p>This might seem very restrictive, but Shadchen provides primitive\npatterns that allow you to write arbitrarily complex pattern matchers\nthat can perform rich computations on their way to rejecting or\naccepting a match.</p>\n<h3>Implementing <code>concat</code>, a non-trivial pattern</h3>\n<p>I just used <code>defpattern</code> to implement a pretty complex pattern,\n<code>concat</code> and it was something of a learning experience.  Writing\ncomplex patterns definitely takes some thought and practice, but\nhopefully this tutorial will bootstrap users to a point where their\nown patterns can be implemented without too much pain.</p>\n<p>What is so complicated about a <code>concat</code> pattern?  Well, we want\n<code>concat</code> to match the concatenation of patterns which match strings.\nEg:</p>\n<pre><code>(concat \"dog\" \"cat\")\n</code></pre>\n<p>Should match \"dogcat\".  Writing a pattern that has this behavior is\neasy:</p>\n<pre><code>(defpattern concat (&amp;rest strings)\n(reduce #'concat strings))\n</code></pre>\n<p>This pattern can't match subpatterns that are anything other than\nstrings, however.  We'd really like to be able to match, for instance:</p>\n<pre><code>(concat (and (or \"dog\" \"cat\") which) \"dog\")\n</code></pre>\n<p>against either \"dogdog\" or \"catdog\", binding <code>which</code> to whatever the\ninitial string contents actually are.  How can we do this?  </p>\n<h3>Nailing down <code>concat</code>'s semantics.</h3>\n<p>We want <code>concat</code> to function this way:</p>\n<p>If the initial pattern is not a string, then try matching that pattern\nagainst larger and larger substrings until either you run out of\nstring to match against, or you match.  If you match, then match,\nagain using <code>concat</code> with the unused patterns, against whatever is\nleft of the string after you've removed the part that matched.\nRepeat until all patterns are exhausted and then make sure the string\nhas been completely consumed too.</p>\n<p>If the initial pattern <em>is</em> a string, then just cleave off the same\nlength of characters from the input, and if they match, recursively\nmatch the rest.  Here is the entry point:</p>\n<pre><code>(defpattern concat (&amp;rest patterns)\n(cond\n((length=0 patterns)\n\"\")\n((length=1 patterns)\n`(? #'stringp ,(car patterns)))\n(:otherwise\n(cond\n((stringp (car patterns))\n`(simple-concat ,@patterns))\n(:otherwise\n`(full-concat 0 ,@patterns))))))\n</code></pre>\n<p>The <code>:otherwise</code> has all the meat, but we defer it to to other\nhelper-patterns; <code>simple-concat</code> and <code>full-concat</code>.  Simple concat\nlooks like this:</p>\n<pre><code>(defpattern simple-concat (&amp;rest patterns)\n(cond\n((length=0 patterns)\n\"\")\n((length=1 patterns)\n`(? #'stringp ,(car patterns)))\n(:otherwise\n(let* ((the-string (car patterns))\n(static-len (length the-string)))\n`(and\n(p #'stringp)\n(p (lambda (s)\n(&gt;= (length s) ,static-len)))\n(p\n(lambda (s)\n(string= (substring s 0 ,static-len) ,the-string)))\n(funcall (lambda (s)\n(substring s ,static-len))\n(concat ,@(cdr patterns))))))))\n</code></pre>\n<p>Look at the backquoted expression.  It is an <code>and</code> pattern, which only\nsucceeds if all the patterns beneath it also succeed.  These patterns\nare <code>(p #'stringp)</code>, which asserts that the input is a string, <code>(p\n(lambda (s) (string= (substring s 0 ,static-len) ,the-string)))</code> which\nasserts that the input is at least long enough to contain the string\nwe want to match against.  The next form asserts that the substring of\nthe input equal to the pattern string in length is equal to the\npattern.  If this is true, then the pattern matches, and we use the\n<code>funcall</code> pattern to match against the <em>rest</em> of the string with the\nleftover patterns.</p>\n<p>The <code>funcall</code> pattern takes the input to the match, applies a\nfunction to it, and then matches the <em>output</em> of that function\napplication to the pattern provided as its third slot.  </p>\n<p><code>full-concat</code> is more complex.  Note that when we invoke\n<code>full-concat</code> we provide it an numerical first argument.  This number\ntells the pattern how far into the string to match we've looked, so it\nstarts at zero.  After all the first pattern could match the empty\nstring.  <code>full-concat</code> looks like this<sup>2</sup>:</p>\n<pre><code>(defpattern full-concat (pivot &amp;rest patterns)\n(assert (numberp pivot)\n()\n\"Pivot should be a number.\")\n(cond\n((length=0 patterns)\n\"\")\n((length=1 patterns)\n`(? #'stringp ,(car patterns)))\n(:otherwise\n`(and\n(p (lambda (s)\n(&gt;= (length s) ,pivot)))\n(or\n(and (funcall\n(lambda (s)\n(substring s 0 ,pivot))\n,(car patterns))\n(funcall\n(lambda (s)\n(substring s ,pivot))\n(concat ,@(cdr patterns))))\n(full-concat ,(+ pivot 1) ,@patterns))))))\n</code></pre>\n<p>Here we use <code>and</code> again.  We first check that the input string is long\nenough to grab the substring indicated by pivot.  If this isn't true,\nthe match fails.  We then use the <code>or</code> pattern to indicate a branch.\nEither of the <code>or</code> patterns might succeed, but the first to do so is\nthe only one that will happen.  The first pattern to <code>or</code> uses funcall\nto peel off the substring of the input from 0 to pivot.  If the\ninitial pattern matches, then we use funcall again to get the rest of\nthe string, and invoke <code>concat</code> again.</p>\n<p>If this match fails, then we invoke <code>full-concat</code> again, but increment\nthe pivot by one, indicating that we want to check against a larger\nsubstring.  </p>\n<p>If this is confusing, and it is understandible if it is, remember the\nfollowing: when writing <code>defpattern</code>s, <code>or</code> is used for flow control,\n<code>and</code> is used to assert multiple things about the input, <code>p</code> is used\nto assert individual arbitrary conditions on the input, and <code>funcall</code>\nis used to transform the input for further matching.  Recursive\npattern expansion is used for iteration <sup>1</sup>.</p>\n<p>And feel free to contact me with questions, if they come up.  </p>\n<hr />\n<p><sup>1</sup> It is a lot like writing prolog, actually.  Pattern\nmatching is a significant distance from lisp to prolog.</p>\n<p><sup>2</sup> After writing this I realized we can do better.  If we get a match for the initial pattern, and then check the rest of the patterns, its possible they will fail because the initial match didn't consume enough of the string.  It is simple to say, \"if the subsequent match fails, keep increasing the pivot and trying again.\"  I leave it as an exercise to the reader to figure out how to represent this trivial backtrackingish thing - but you can always check <a href=\"https://github.com/VincentToups/shadchen-el\">the source</a> for the solution.</p><div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/8115687546775931822-7415789327492212952?l=dorophone.blogspot.com\" width=\"1\" /></div>" "http://dorophone.blogspot.com/2012/04/shadchen-el-introduction-and-defpattern.html" (20352 57265) obsolete 14 nil nil ((title ((type . "html")) "Vincent Toups: Shadchen-el introduction and defpattern tutorial") (link ((href . "http://dorophone.blogspot.com/2012/04/shadchen-el-introduction-and-defpattern.html"))) (id nil "tag:blogger.com,1999:blog-8115687546775931822.post-7415789327492212952") (updated nil "2012-04-08T00:45:37+00:00") (content ((type . "html")) "<p>Lately I've been working on an Emacs Lisp library I'm pretty proud of,\n<a href=\"https://github.com/VincentToups/shadchen-el\">Shadchen</a>.  It implements extensible pattern matching, somewhat\nlike Racket's Match facility for Emacs Lisp.  In this\ntutorial/introduction I'll explain how to use Shadchen's various\nfacilities and, most importantly, how to extend Shadchen itself with\nnew patterns, which is an interesting subject in and of itself,\ncombining compile time and run-time execution in interesting ways.  If\nyou already know about pattern matching, feel free to jump to the end,\nwhere I talk about writing non-trivial patterns using Shadchen's\n<code>defpattern</code>.</p>\n\n<h2>The Problem Shadchen Solves</h2>\n\n<p>Shadchen solves several problems you may not know you may have.  In\none sentence, Shadchen lets you concisely express both destructuring\nand type checking for complex data structures.  It can be thought of\nas combining the features of <code>cond</code>, <code>case</code> and <code>assert</code> into one nice\npackage.  My experience is that this collection of features helps me\nwrite better code, since it encourages me to dilineate exactly the\nkind of data a function or form expects before doing anything with\nit.  </p>\n\n<p>Shadchen is also conservative - unless you provide a pattern that\nmatches the input data, it will fail with a match error, so you know\nsomething is wrong before something strange happens.</p>\n\n<p>For instance, suppose we were writing an interpreter for Lisp.  It\nmight look like:</p>\n\n<pre><code>(defun eval (form env)\n (cond form \n  ((symbolp form) (eval-symbol form env))\n  ((listp form)\n   (case (car form)\n    (if (handle-if (cadr form)\n                   (caddr form)\n                   (caddr form) env)) \n    (let (handle-let \n          (cadr form)\n          (cdddr form)))\n    ...))))\n</code></pre>\n\n<p>Note that we have both a <code>cond</code> and a <code>case</code> here, and that after we\ntest our data, we destructure it.  Here is a similar piece of code\nusing Shadchen:</p>\n\n<pre><code>(defun eval (form env)\n (match form \n  ((p #'symbolp s) (eval-symbol s env))\n  ((list) nil)\n  ((list 'if pred true-branch false-branch)\n   (handle-if pred true-branch false-branch env))\n  ((list-rest 'let (list-rest pairs) body)\n   (handle-let pairs body env))\n  ...))\n</code></pre>\n\n<p>(Notes: the pattern <code>p</code> passes when the predicate as its second\nargument is true on the match value, and then matches against the\nthird argument.  So <code>(p #'symbolp s)</code> matches only when form is a\nsymbol and then binds <code>s</code> to that symbol.  <code>list</code> matches when the\ninput is a list and each pattern in the the list pattern matches each\ncorresponding element in the list.  <code>list-rest</code> is similar but any\nleftover parts of the list are matched against the final pattern.)</p>\n\n<p>This code is more concise, and yet it is also much more explicit, both\nin that it provides better naming for values and it provides more\nexplicit error checking.  For instance, this version will only match\n<code>if</code> with three expressions, where as the previous evaluator would\nhave been fine with the expression <code>(if a b c d e f)</code>.  This version\nalso asserts explicitly that the binding part of the let needs to be a\nlist.  With a custom pattern we could also ensure it was a list of\nsymbol/expression pairs in almost the same space.</p>\n\n<p>It takes all kinds, but I found that once I got used to programming\nwith pattern matching, it was hard to go back.</p>\n\n<h2>Other Rad Features of Shadchen</h2>\n\n<h3>match-let</h3>\n\n<p>Shadchen wants to let you program in a functional style.  To that end,\nin addition to the regular pattern matching form <code>match</code>, it also\nprovides some other, nice features.  Many algorithms involve examining\nsome intermediate data, checking its structure somehow, and then\nrecursively processing the next step.  Shadchen allows this kind of\nthing with the Scheme-flavored <code>match-let</code> form.</p>\n\n<p>The form <code>match-let</code> can be used exactly like <code>let</code>:</p>\n\n<pre><code>(match-let \n  ((x 10)\n   (y 11))\n (+ x y))\n</code></pre>\n\n<p>But in each \"binding\" pair, the symbol may be replaced with any\nShadchen pattern.  Eg:</p>\n\n<pre><code>(match-let \n ((x 10)\n  (y 11)\n  ((list q r s) (list 1 2 3)))\n (+ x y q r s))\n</code></pre>\n\n<p>Will give you 27.  If any pattern fails, the form produces a match\nfail error, which means you can use <code>match-let</code> as a <code>let</code> form with\ntidy type checking.</p>\n\n<p>Finally, a <code>match-let</code> form allows tail recursion.  Invoking <code>recur</code>\nin a <a href=\"http://en.wikipedia.org/wiki/Tail_call\">tail position</a> inside the form causes the <code>match-let</code> to be\nre-entered without growing the stack.  For instance:</p>\n\n<pre><code>(match-let \n (((list x y) (list 0 0)))\n  (if (&lt; (+ x y) 10000)\n      (recur (list (+ x 1) (+ x y)))\n      (list x y)))\n</code></pre>\n\n<p>Results in <code>(141 9870)</code> and can't blow the stack.  It is an error to\ninvoke <code>recur</code> in a non-tail position, but because of limitations in\nEmacs Lisp, it is difficult to enforce this statically. </p>\n\n<h3>defun-match</h3>\n\n<p>The form <code>defun-match</code> lets you write functions which pattern match on\ntheir arguments and split their calculations across multiple bodies,\nin a bit like the style of <a href=\"http://www.shenlanguage.org/\">Shen</a> or <a href=\"http://www.haskell.org/haskellwiki/Haskell\">Haskell</a>.</p>\n\n<p>For instance, suppose we have an animal simulator, where each animal\nis represented by a list, the first element of which is a symbol\nrepresenting the animal name.  We can say:</p>\n\n<pre><code>(defun-match- vocalize ((list-rest 'cat properties))\n  \"Cat vocalization.\"\n  (message \"Meow\"))\n\n(defun-match vocalize ((list-rest 'dog properties))\n  \"Dog vocalization.\"\n  (message \"Woof\"))\n</code></pre>\n\n<p>Then: </p>\n\n<pre><code>(vocalize '(cat :name tess))\n(vocalize '(dog :name bowzer))\n</code></pre>\n\n<p>Functions defined with <code>defun-match</code> can also use <code>recur</code> to re-enter\nthemselves without growing the stack.  Consider a function which\ncauses a list of animals to vocalize:</p>\n\n<pre><code>(defun-match- vocalize-list (nil) nil)\n(defun-match vocalize-list ((cons animal animals))\n  (vocalize animal)\n  (recur animals))\n</code></pre>\n\n<p><code>recur</code> can dispatch to any of the bodies defined for the function and\nit doesn't grow the stack.  It must be invoked from tail position,\nthough non-tail calls can be affected by simply calling the function.</p>\n\n<p>(N.B. <code>defun-match-</code> with that dangling minus sign causes previous\nbodies to be expunged before defining the indicated body.)</p>\n\n<h2>Extending Shadchen with defpattern</h2>\n\n<p>Shadchen is an extensible pattern matching facility.  We can define\nnew patterns much in the way we define new functions, although\npatterns are more like macros than functions.  Let's look at a simple\nexample, and then I'll guide you through a more complex example I just\nadded to the library using the <code>defpattern</code>.</p>\n\n<p>A quirk of Common and Emacs Lisp is that <code>(car nil)</code> is <code>nil</code> even\nthough <code>nil</code> is not a <code>cons</code> cell, and so does not have a <code>car</code> or a\n<code>cdr</code>.  I hate this behavior, because its quite evident that <code>(cons\nnil some-list)</code> is different from <code>nil</code>, but <code>car</code> can't tell that -\nthe user has to do more inspection to find this out.  Bugs waiting to\nhappen, let me tell you. </p>\n\n<p>However, I'm nothing if not accommodating, and so the <code>cons</code> pattern in\nShadchen will, in fact, match against <code>nil</code>.  So:</p>\n\n<pre><code>(match nil \n ((cons a b) (list a b)))\n</code></pre>\n\n<p>Will be <code>'(nil nil)</code>.  Let's define a pattern which is like <code>cons</code>,\nbut only matches against <em>actual cons cells</em>, into which category\n<code>nil</code> fails to fall.</p>\n\n<pre><code>(defpattern strict-cons (car cdr)\n `(p #'consp (cons ,car ,cdr)))\n</code></pre>\n\n<p>A defpattern body must evaluate to a legal shadchen pattern.  Each\nargument to the defpattern is also a shadchen pattern.  So this\npattern reads \"define a new pattern <code>strict-cons</code>, which first checks\nthat the match value is a cons cell using the <code>p</code> pattern, and then\nmatches the car and cdr of that cons cell against the patterns <code>car</code>\nand <code>cdr.</code>\".</p>\n\n<p>During the expansion of a shadchen pattern matching form, user defined\npatterns are looked up and their expansions are inserted into the\nmacro expansion.  In short, <code>defpattern</code> allows you to define new\npatterns <em>in terms of old patterns</em>.</p>\n\n<p>This might seem very restrictive, but Shadchen provides primitive\npatterns that allow you to write arbitrarily complex pattern matchers\nthat can perform rich computations on their way to rejecting or\naccepting a match.</p>\n\n<h3>Implementing <code>concat</code>, a non-trivial pattern</h3>\n\n<p>I just used <code>defpattern</code> to implement a pretty complex pattern,\n<code>concat</code> and it was something of a learning experience.  Writing\ncomplex patterns definitely takes some thought and practice, but\nhopefully this tutorial will bootstrap users to a point where their\nown patterns can be implemented without too much pain.</p>\n\n<p>What is so complicated about a <code>concat</code> pattern?  Well, we want\n<code>concat</code> to match the concatenation of patterns which match strings.\nEg:</p>\n\n<pre><code>(concat \"dog\" \"cat\")\n</code></pre>\n\n<p>Should match \"dogcat\".  Writing a pattern that has this behavior is\neasy:</p>\n\n<pre><code>(defpattern concat (&amp;rest strings)\n (reduce #'concat strings))\n</code></pre>\n\n<p>This pattern can't match subpatterns that are anything other than\nstrings, however.  We'd really like to be able to match, for instance:</p>\n\n<pre><code>(concat (and (or \"dog\" \"cat\") which) \"dog\")\n</code></pre>\n\n<p>against either \"dogdog\" or \"catdog\", binding <code>which</code> to whatever the\ninitial string contents actually are.  How can we do this?  </p>\n\n<h3>Nailing down <code>concat</code>'s semantics.</h3>\n\n<p>We want <code>concat</code> to function this way:</p>\n\n<p>If the initial pattern is not a string, then try matching that pattern\nagainst larger and larger substrings until either you run out of\nstring to match against, or you match.  If you match, then match,\nagain using <code>concat</code> with the unused patterns, against whatever is\nleft of the string after you've removed the part that matched.\nRepeat until all patterns are exhausted and then make sure the string\nhas been completely consumed too.</p>\n\n<p>If the initial pattern <em>is</em> a string, then just cleave off the same\nlength of characters from the input, and if they match, recursively\nmatch the rest.  Here is the entry point:</p>\n\n<pre><code>(defpattern concat (&amp;rest patterns)\n  (cond \n   ((length=0 patterns)\n    \"\")\n   ((length=1 patterns)\n    `(? #'stringp ,(car patterns)))\n   (:otherwise\n    (cond \n     ((stringp (car patterns))\n      `(simple-concat ,@patterns))\n     (:otherwise \n      `(full-concat 0 ,@patterns))))))\n</code></pre>\n\n<p>The <code>:otherwise</code> has all the meat, but we defer it to to other\nhelper-patterns; <code>simple-concat</code> and <code>full-concat</code>.  Simple concat\nlooks like this:</p>\n\n<pre><code>(defpattern simple-concat (&amp;rest patterns)\n  (cond \n   ((length=0 patterns)\n    \"\")\n   ((length=1 patterns)\n    `(? #'stringp ,(car patterns)))\n   (:otherwise\n    (let* ((the-string (car patterns))\n           (static-len (length the-string)))\n      `(and \n        (p #'stringp)\n        (p (lambda (s)\n             (&gt;= (length s) ,static-len)))\n        (p \n         (lambda (s)\n           (string= (substring s 0 ,static-len) ,the-string)))\n        (funcall (lambda (s)\n                   (substring s ,static-len))\n                 (concat ,@(cdr patterns))))))))\n</code></pre>\n\n<p>Look at the backquoted expression.  It is an <code>and</code> pattern, which only\nsucceeds if all the patterns beneath it also succeed.  These patterns\nare <code>(p #'stringp)</code>, which asserts that the input is a string, <code>(p\n(lambda (s) (string= (substring s 0 ,static-len) ,the-string)))</code> which\nasserts that the input is at least long enough to contain the string\nwe want to match against.  The next form asserts that the substring of\nthe input equal to the pattern string in length is equal to the\npattern.  If this is true, then the pattern matches, and we use the\n<code>funcall</code> pattern to match against the <em>rest</em> of the string with the\nleftover patterns.</p>\n\n<p>The <code>funcall</code> pattern takes the input to the match, applies a\nfunction to it, and then matches the <em>output</em> of that function\napplication to the pattern provided as its third slot.  </p>\n\n<p><code>full-concat</code> is more complex.  Note that when we invoke\n<code>full-concat</code> we provide it an numerical first argument.  This number\ntells the pattern how far into the string to match we've looked, so it\nstarts at zero.  After all the first pattern could match the empty\nstring.  <code>full-concat</code> looks like this<sup>2</sup>:</p>\n\n<pre><code>(defpattern full-concat (pivot &amp;rest patterns)\n  (assert (numberp pivot)\n          ()\n          \"Pivot should be a number.\")\n  (cond \n   ((length=0 patterns)\n    \"\")\n   ((length=1 patterns)\n    `(? #'stringp ,(car patterns)))\n   (:otherwise\n    `(and \n      (p (lambda (s)\n           (&gt;= (length s) ,pivot)))\n      (or \n       (and (funcall\n             (lambda (s)\n               (substring s 0 ,pivot))\n             ,(car patterns))\n            (funcall \n             (lambda (s)\n               (substring s ,pivot))\n             (concat ,@(cdr patterns))))\n       (full-concat ,(+ pivot 1) ,@patterns))))))\n</code></pre>\n\n<p>Here we use <code>and</code> again.  We first check that the input string is long\nenough to grab the substring indicated by pivot.  If this isn't true,\nthe match fails.  We then use the <code>or</code> pattern to indicate a branch.\nEither of the <code>or</code> patterns might succeed, but the first to do so is\nthe only one that will happen.  The first pattern to <code>or</code> uses funcall\nto peel off the substring of the input from 0 to pivot.  If the\ninitial pattern matches, then we use funcall again to get the rest of\nthe string, and invoke <code>concat</code> again.</p>\n\n<p>If this match fails, then we invoke <code>full-concat</code> again, but increment\nthe pivot by one, indicating that we want to check against a larger\nsubstring.  </p>\n\n<p>If this is confusing, and it is understandible if it is, remember the\nfollowing: when writing <code>defpattern</code>s, <code>or</code> is used for flow control,\n<code>and</code> is used to assert multiple things about the input, <code>p</code> is used\nto assert individual arbitrary conditions on the input, and <code>funcall</code>\nis used to transform the input for further matching.  Recursive\npattern expansion is used for iteration <sup>1</sup>.</p>\n\n<p>And feel free to contact me with questions, if they come up.  </p>\n\n<hr />\n\n<p><sup>1</sup> It is a lot like writing prolog, actually.  Pattern\nmatching is a significant distance from lisp to prolog.</p>\n\n<p><sup>2</sup> After writing this I realized we can do better.  If we get a match for the initial pattern, and then check the rest of the patterns, its possible they will fail because the initial match didn't consume enough of the string.  It is simple to say, \"if the subsequent match fails, keep increasing the pivot and trying again.\"  I leave it as an exercise to the reader to figure out how to represent this trivial backtrackingish thing - but you can always check <a href=\"https://github.com/VincentToups/shadchen-el\">the source</a> for the solution.</p><div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/8115687546775931822-7415789327492212952?l=dorophone.blogspot.com\" width=\"1\" /></div>") (author nil (name nil "J.V. Toups") (email nil "noreply@blogger.com") (uri nil "http://dorophone.blogspot.com/search/label/emacs")) (source nil (title ((type . "html")) "Dorophone") (subtitle ((type . "html")) "Soon to be replaced with an Elaborate Platinum Mechanism.\n\nOk, but seriously the blog is about programming and technology.") (link ((rel . "self") (href . "http://www.blogger.com/feeds/8115687546775931822/posts/default/-/emacs"))) (id nil "tag:blogger.com,1999:blog-8115687546775931822")))) ("Bozhidar Batsov: MELPA - homebrew (Emacs Edition)" "<p>A few weeks ago I wrote an\n<a href=\"http://batsov.com/articles/2012/02/19/package-management-in-emacs-the-good-the-bad-and-the-ugly/\">article about the state of package management in Emacs</a>. In\nthat article I pointed out that on the side of <a href=\"http://wikemacs.org/wiki/Package.el\">package.el</a> too much\nwas riding on the poorly maintained Marmalade repo. Today\nMarmalade went dark (again) and many people are wondering what to do\nnow. The answer is simple - start using <a href=\"http://melpa.milkbox.net/\">MELPA</a> instead.</p>\n<p>I was thinking of starting a project similar to Marmalade to alleviate\nits problems, but then the MELPA project was brought to my\nattention. This project follows the Homebrew (unofficial OSX package\nmanager) model of using simple GitHub collaboration to maintain and\ngrow a bunch of build recipes. In the case of MELPA, those recipes\nshow how to bundle upstream source packages into package.el-compliant\npackages. The recipes can be tested locally by package authors, and\nthey are run hourly on the MELPA server to create an HTTP package\narchive that Emacs users can simply add to their <code>'package-archives</code>\nlist. As <a href=\"http://technomancy.us\">Phil Hagelberg</a> said - there’s no reason to drag in\ncomplicated dependencies like Node for something that’s essentially a\npile of static files. MELPA on the other hand is written mostly in\nEmacs Lisp and is thus much more comprehensible to casual Emacs hackers.</p>\n<p>Most packages currently contained in MELPA are development snapshots,\nbut the project maintainer\n<a href=\"https://github.com/milkypostman\">Donald Curtis</a> and\n<a href=\"http://www.sanityinc.com/\">Steve Purcell</a> (aka <code>sanityinc</code>) are\nworking on extending the MELPA build scripts to support stable\npackages, using upstream version tags.</p>\n<p>Adding a new package to MELPA is as simple as adding a few lines of\ncode to the <code>pkglist</code> file in MELPA’s source code repo:</p>\n<figure class=\"code\"><span></span><div class=\"highlight\"><table><tbody><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>\n<span class=\"line-number\">2</span>\n<span class=\"line-number\">3</span>\n</pre></td><td class=\"code\"><pre><code class=\"cl\"><span class=\"line\"><span class=\"p\">(</span><span class=\"nv\">name</span> <span class=\"ss\">:url</span> <span class=\"s\">\"&lt;repo url&gt;\"</span>\n</span><span class=\"line\"> <span class=\"ss\">:fetcher</span> <span class=\"nv\">[git|svn|darcs</span><span class=\"err\">|</span><span class=\"nv\">wiki]</span>\n</span><span class=\"line\"> <span class=\"nv\">[:files</span> <span class=\"p\">(</span><span class=\"s\">\"&lt;file1&gt;\"</span><span class=\"o\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span><span class=\"nv\">]</span><span class=\"p\">)</span>\n</span></code></pre></td></tr></tbody></table></div></figure>\n<p>You simply have to fork the <a href=\"https://github.com/milkypostman/melpa\">official repo</a>, modify <code>pkglist</code>, send a pull\nrequest and <code>package.el</code> compatible packages will be built\nautomatically for you on MELPA’s server (you can also build the\npackages locally to test if everything is OK with your recipes). Sure it’s not as easy as\nsubmitting a package via a web UI, but it’s a much more robust\napproach. It also eliminates a common problem in Marmalade - there\nonly the original uploader (+ people selected by him) can update a\npackage. Often the original uploaders are very hard to find…</p>\n<p>To use MELPA with Emacs 24 (or a recent version of <code>package.el</code>) just\nadd this to your <code>.emacs</code> (or equivalent):</p>\n<figure class=\"code\"><span></span><div class=\"highlight\"><table><tbody><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>\n<span class=\"line-number\">2</span>\n</pre></td><td class=\"code\"><pre><code class=\"cl\"><span class=\"line\"><span class=\"p\">(</span><span class=\"nv\">add-to-list</span> <span class=\"ss\">'package-archives</span>\n</span><span class=\"line\"><span class=\"o\">'</span><span class=\"p\">(</span><span class=\"s\">\"melpa\"</span> <span class=\"o\">.</span> <span class=\"s\">\"http://melpa.milkbox.net/packages/\"</span><span class=\"p\">)</span> <span class=\"no\">t</span><span class=\"p\">)</span>\n</span></code></pre></td></tr></tbody></table></div></figure>\n<p>There’s a lot more info regarding MELPA on its official website and\nI’d rather not duplicate it here.</p>\n<p>I would encourage package authors and users to investigate and\ncontribute to MELPA. I’ve already submitted a bunch of packages\nthere and rebased <a href=\"http://batsov.com/prelude\">Emacs Prelude</a> to\nuse MELPA instead of Marmalade.</p>\n<p>Together we can turn MELPA into the most extensive and robust community-supported\n<code>package.el</code> repo! Emacs users deserve one of those :-)</p>" "http://bbatsov.github.com/articles/2012/04/06/melpa-homebrew-emacs-edition/" (20351 1504) obsolete 15 nil nil ((title ((type . "html")) "Bozhidar Batsov: MELPA - homebrew (Emacs Edition)") (link ((href . "http://bbatsov.github.com/articles/2012/04/06/melpa-homebrew-emacs-edition/"))) (id nil "http://bbatsov.github.com/articles/2012/04/06/melpa-homebrew-emacs-edition") (updated nil "2012-04-06T15:04:00+00:00") (content ((type . "html")) "<p>A few weeks ago I wrote an\n<a href=\"http://batsov.com/articles/2012/02/19/package-management-in-emacs-the-good-the-bad-and-the-ugly/\">article about the state of package management in Emacs</a>. In\nthat article I pointed out that on the side of <a href=\"http://wikemacs.org/wiki/Package.el\">package.el</a> too much\nwas riding on the poorly maintained Marmalade repo. Today\nMarmalade went dark (again) and many people are wondering what to do\nnow. The answer is simple - start using <a href=\"http://melpa.milkbox.net/\">MELPA</a> instead.</p>\n\n<p>I was thinking of starting a project similar to Marmalade to alleviate\nits problems, but then the MELPA project was brought to my\nattention. This project follows the Homebrew (unofficial OSX package\nmanager) model of using simple GitHub collaboration to maintain and\ngrow a bunch of build recipes. In the case of MELPA, those recipes\nshow how to bundle upstream source packages into package.el-compliant\npackages. The recipes can be tested locally by package authors, and\nthey are run hourly on the MELPA server to create an HTTP package\narchive that Emacs users can simply add to their <code>'package-archives</code>\nlist. As <a href=\"http://technomancy.us\">Phil Hagelberg</a> said - there’s no reason to drag in\ncomplicated dependencies like Node for something that’s essentially a\npile of static files. MELPA on the other hand is written mostly in\nEmacs Lisp and is thus much more comprehensible to casual Emacs hackers.</p>\n\n<p>Most packages currently contained in MELPA are development snapshots,\nbut the project maintainer\n<a href=\"https://github.com/milkypostman\">Donald Curtis</a> and\n<a href=\"http://www.sanityinc.com/\">Steve Purcell</a> (aka <code>sanityinc</code>) are\nworking on extending the MELPA build scripts to support stable\npackages, using upstream version tags.</p>\n\n<p>Adding a new package to MELPA is as simple as adding a few lines of\ncode to the <code>pkglist</code> file in MELPA’s source code repo:</p>\n\n<figure class=\"code\"><span></span><div class=\"highlight\"><table><tbody><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>\n<span class=\"line-number\">2</span>\n<span class=\"line-number\">3</span>\n</pre></td><td class=\"code\"><pre><code class=\"cl\"><span class=\"line\"><span class=\"p\">(</span><span class=\"nv\">name</span> <span class=\"ss\">:url</span> <span class=\"s\">\"&lt;repo url&gt;\"</span>\n</span><span class=\"line\"> <span class=\"ss\">:fetcher</span> <span class=\"nv\">[git|svn|darcs</span><span class=\"err\">|</span><span class=\"nv\">wiki]</span>\n</span><span class=\"line\"> <span class=\"nv\">[:files</span> <span class=\"p\">(</span><span class=\"s\">\"&lt;file1&gt;\"</span><span class=\"o\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span><span class=\"nv\">]</span><span class=\"p\">)</span>\n</span></code></pre></td></tr></tbody></table></div></figure>\n\n\n<p>You simply have to fork the <a href=\"https://github.com/milkypostman/melpa\">official repo</a>, modify <code>pkglist</code>, send a pull\nrequest and <code>package.el</code> compatible packages will be built\nautomatically for you on MELPA’s server (you can also build the\npackages locally to test if everything is OK with your recipes). Sure it’s not as easy as\nsubmitting a package via a web UI, but it’s a much more robust\napproach. It also eliminates a common problem in Marmalade - there\nonly the original uploader (+ people selected by him) can update a\npackage. Often the original uploaders are very hard to find…</p>\n\n<p>To use MELPA with Emacs 24 (or a recent version of <code>package.el</code>) just\nadd this to your <code>.emacs</code> (or equivalent):</p>\n\n<figure class=\"code\"><span></span><div class=\"highlight\"><table><tbody><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>\n<span class=\"line-number\">2</span>\n</pre></td><td class=\"code\"><pre><code class=\"cl\"><span class=\"line\"><span class=\"p\">(</span><span class=\"nv\">add-to-list</span> <span class=\"ss\">'package-archives</span>\n</span><span class=\"line\"><span class=\"o\">'</span><span class=\"p\">(</span><span class=\"s\">\"melpa\"</span> <span class=\"o\">.</span> <span class=\"s\">\"http://melpa.milkbox.net/packages/\"</span><span class=\"p\">)</span> <span class=\"no\">t</span><span class=\"p\">)</span>\n</span></code></pre></td></tr></tbody></table></div></figure>\n\n\n<p>There’s a lot more info regarding MELPA on its official website and\nI’d rather not duplicate it here.</p>\n\n<p>I would encourage package authors and users to investigate and\ncontribute to MELPA. I’ve already submitted a bunch of packages\nthere and rebased <a href=\"http://batsov.com/prelude\">Emacs Prelude</a> to\nuse MELPA instead of Marmalade.</p>\n\n<p>Together we can turn MELPA into the most extensive and robust community-supported\n<code>package.el</code> repo! Emacs users deserve one of those :-)</p>") (author nil (name nil "Bozhidar Batsov") (uri nil "http://bbatsov.github.com/")) (source nil (title ((type . "html")) "Emacs @ (think)") (link ((rel . "self") (href . "http://bbatsov.github.com/emacs.xml"))) (id nil "http://bbatsov.github.com/")))) ("Julien Danjou: mod_defensible 1.5 released" "<p>Apache 2.4 being out, I noticed that my good old\n<a href=\"http://julien.danjou.info/software/mod_defensible\">mod_defensible</a> did not\ncompile anymore.</p>\n<p>The <a href=\"http://httpd.apache.org/docs/2.4/developer/new_api_2_4.html\">changes in the new Apache 2.4\nAPI</a> were small\nfor its concern, so it was pretty easy to update this software to make it\ncompile again.</p>\n<p>Honestly, I'm not sure that this module is really used into the wild, but I\nstill think that it can serve as a good prototype for doing other things so\nI like keeping it around. :-)</p>\n<p>All this has been triggered by the Apache 2.4 arrival into Debian\nexperimental. Therefore <a href=\"http://git.naquadah.org/?p=mod_defensible.git;a=shortlog;h=refs/heads/debian/unstable\">I've updated the mod_defensible package to use the\nnew\ndh_apache2</a>,\nand imported it into Git at the same time.</p>" "http://julien.danjou.info/blog/2012/mod_defensible-1.5" (20347 7088) obsolete 16 nil nil ((title ((type . "html")) "Julien Danjou: mod_defensible 1.5 released") (link ((href . "http://julien.danjou.info/blog/2012/mod_defensible-1.5"))) (id nil "http://julien.danjou.info/blog/2012/mod_defensible-1.5") (updated nil "2012-04-03T15:48:00+00:00") (content ((type . "html")) "<p>Apache 2.4 being out, I noticed that my good old\n<a href=\"http://julien.danjou.info/software/mod_defensible\">mod_defensible</a> did not\ncompile anymore.</p>\n<p>The <a href=\"http://httpd.apache.org/docs/2.4/developer/new_api_2_4.html\">changes in the new Apache 2.4\nAPI</a> were small\nfor its concern, so it was pretty easy to update this software to make it\ncompile again.</p>\n<p>Honestly, I'm not sure that this module is really used into the wild, but I\nstill think that it can serve as a good prototype for doing other things so\nI like keeping it around. :-)</p>\n<p>All this has been triggered by the Apache 2.4 arrival into Debian\nexperimental. Therefore <a href=\"http://git.naquadah.org/?p=mod_defensible.git;a=shortlog;h=refs/heads/debian/unstable\">I've updated the mod_defensible package to use the\nnew\ndh_apache2</a>,\nand imported it into Git at the same time.</p>") (author nil (name nil "Julien Danjou") (uri nil "http://julien.danjou.info/blog/")) (source nil (title ((type . "html")) "jd:/dev/blog") (link ((rel . "self") (href . "http://julien.danjou.info/blog/index.xml"))) (id nil "http://julien.danjou.info/blog/index.xml")))) ("Tim Bielawa: Setting your Emacsens default directory when launched through a custom keyboard shortcut" "<p>I noticed that Emacs was getting a <code>default-directory</code> value of <code>/</code> when launching it with a custom keyboard shortcut I set up in Gnome (2). The result is that opening a file started my search in the root (<code>/</code>) of the filesystem.</p>\n<p>I suppose this is due to the way in which emacs was invoked (via the window manager). Given that there was no actual <em>present working directory</em>, I can understand that it would default back to using <code>/</code>.</p>\n<p>At the time I was just setting the window title:</p>\n<pre style=\"padding-left: 30px;\">emacs -T Emacs</pre>\n<p>When considering how to work around this I first considered setting the <code>default-directory</code> in my <code>.emacs</code> file. This turned out to be a less an idea solution. Doing so causes it to become a global configuration value (all subsequent emacs launched via the terminal opened in <code>~</code>). So instead, I changed my launcher command to this:</p>\n<pre style=\"padding-left: 30px;\">emacs -T Emacs -eval \"(setq default-directory \\\"~/\\\")\"</pre>\n<p>Works like a champ!</p>" "http://blog.lnx.cx/2012/04/02/setting-your-emacsens-default-directory-when-launched-through-a-custom-keyboard-shortcut/" (20345 55354) obsolete 17 nil nil ((title ((type . "html") (xml:lang . "en")) "Tim Bielawa: Setting your Emacsens default directory when launched through a custom keyboard shortcut") (link ((href . "http://blog.lnx.cx/2012/04/02/setting-your-emacsens-default-directory-when-launched-through-a-custom-keyboard-shortcut/"))) (id nil "http://blog.peopleareducks.com/?p=133") (updated nil "2012-04-02T16:47:54+00:00") (content ((type . "html") (xml:lang . "en")) "<p>I noticed that Emacs was getting a <code>default-directory</code> value of <code>/</code> when launching it with a custom keyboard shortcut I set up in Gnome (2). The result is that opening a file started my search in the root (<code>/</code>) of the filesystem.</p>\n<p>I suppose this is due to the way in which emacs was invoked (via the window manager). Given that there was no actual <em>present working directory</em>, I can understand that it would default back to using <code>/</code>.</p>\n<p>At the time I was just setting the window title:</p>\n<pre style=\"padding-left: 30px;\">emacs -T Emacs</pre>\n<p>When considering how to work around this I first considered setting the <code>default-directory</code> in my <code>.emacs</code> file. This turned out to be a less an idea solution. Doing so causes it to become a global configuration value (all subsequent emacs launched via the terminal opened in <code>~</code>). So instead, I changed my launcher command to this:</p>\n<pre style=\"padding-left: 30px;\">emacs -T Emacs -eval \"(setq default-directory \\\"~/\\\")\"</pre>\n<p>Works like a champ!</p>") (author nil (name nil "Tim Bielawa") (uri nil "http://blog.lnx.cx")) (source nil (title ((type . "html")) "Technitribe » Emacs") (subtitle ((type . "html")) "not at all like a diatribe") (link ((rel . "self") (href . "http://blog.lnx.cx/category/emacs/feed/"))) (id nil "http://blog.lnx.cx")))) ("Rodrigo Lazo: About interactivity and immediate feedback" "<p>  <b>TL;DR</b> Watch <a href=\"https://vimeo.com/36579366\">THIS</a>. </p>\n<p>   Jeff Atwood at <a href=\"http://www.rlazo.org/category/emacs/feed/#www.codinghorror.com\">Coding Horror</a> has made a couple of really interesting   blog posts about the <i>true</i> interactivity and feedback loop   delay. Basically, the longer it takes to get feedback about what you   are doing, the worse. </p>\n<p>   In <a href=\"http://www.codinghorror.com/blog/2012/03/what-you-cant-see-you-cant-get.html\">What you can’t see you can’t get</a>, about document authoring, Jeff   mentions the gripes of working with WYSIWYG editors because of   hidden format tags or invisible whitespaces. The current solution to   this is using LaTeX or markup languages, where you can focus on   content and intermix formatting tags whenever is necessary. I deeply   believe this is a way better approach. <b>BUT</b> there is a <span style=\"text-decoration: underline;\">long</span>   feedback loop between what you are writing and the actual document   being produced. Usually, you write some content, save the document,   compile (a couple of times if necessary), and then, if everything   goes according to plan, you can see your document in a pdf/dvi   viewer. When I was an undergrad student I remember my friends and I   learning LaTeX. Everybody <b>knew</b> that, if you took to long to   compile your document, you had to pray to the LaTeX gods for it to   compile correctly, otherwise you were trap in a bug hunting quest   for the next half an hour. Eventually, for any non-trivial document,   you compile frequently and split your screen in two, in one side you   have your text editor, and in the other your document viewer, to be   able to preview your work. </p>\n<div class=\"figure\">\n<p><img alt=\"Two window setting for later\" src=\"http://media.rlazo.org/pics/latex-two-windows.jpg\" title=\"Two windows\" /></p>\n<p>Source http://www.codinghorror.com/blog/2012/03/what-you-cant-see-you-cant-get.html</p>\n<p></p></div>\n<p>   What about being able to switch between the two easily, while   keeping track of where each part of the document came from? Enter   <a href=\"http://www.aviz.fr/gliimpse/\">Gliimpse</a> project. </p>\n<p>\n</p><p>   Cool! </p>\n<p>   But, in <a href=\"http://www.codinghorror.com/blog/2012/03/visualizing-code-to-fail-faster.html\">Visualizing code to fail faster</a>, we enter the world of <a href=\"http://worrydream.com/\">Bret Victor</a> and his principle: Help ideas flourish by giving their   authors tools with immediate feedback. He argues that, by allowing   people to see what they are doing in the computer right away,   instead of having to imagine it until the computer is ready to   display the results, you strength ideas and enable more creativity   and better understanding. At first it didn’t felt attracted to the   concept, but after watching his talk at CUSEC I’m convinced. </p>\n<p>\n</p><p>   Make some time to <b>watch the video</b>. It’s <span style=\"text-decoration: underline;\">AWESOME</span>, really. I mean   it. </p>" "http://www.rlazo.org/2012/03/30/about-interactivity-and-immediate-feedback/" (20341 44864) obsolete 18 nil nil ((title ((type . "html") (xml:lang . "en")) "Rodrigo Lazo: About interactivity and immediate feedback") (link ((href . "http://www.rlazo.org/2012/03/30/about-interactivity-and-immediate-feedback/"))) (id nil "http://www.rlazo.org/?p=367") (updated nil "2012-03-30T13:04:00+00:00") (content ((type . "html") (xml:lang . "en")) "<p>  <b>TL;DR</b> Watch <a href=\"https://vimeo.com/36579366\">THIS</a>. </p>\n<p>   Jeff Atwood at <a href=\"http://www.rlazo.org/category/emacs/feed/#www.codinghorror.com\">Coding Horror</a> has made a couple of really interesting   blog posts about the <i>true</i> interactivity and feedback loop   delay. Basically, the longer it takes to get feedback about what you   are doing, the worse. </p>\n<p>   In <a href=\"http://www.codinghorror.com/blog/2012/03/what-you-cant-see-you-cant-get.html\">What you can’t see you can’t get</a>, about document authoring, Jeff   mentions the gripes of working with WYSIWYG editors because of   hidden format tags or invisible whitespaces. The current solution to   this is using LaTeX or markup languages, where you can focus on   content and intermix formatting tags whenever is necessary. I deeply   believe this is a way better approach. <b>BUT</b> there is a <span style=\"text-decoration: underline;\">long</span>   feedback loop between what you are writing and the actual document   being produced. Usually, you write some content, save the document,   compile (a couple of times if necessary), and then, if everything   goes according to plan, you can see your document in a pdf/dvi   viewer. When I was an undergrad student I remember my friends and I   learning LaTeX. Everybody <b>knew</b> that, if you took to long to   compile your document, you had to pray to the LaTeX gods for it to   compile correctly, otherwise you were trap in a bug hunting quest   for the next half an hour. Eventually, for any non-trivial document,   you compile frequently and split your screen in two, in one side you   have your text editor, and in the other your document viewer, to be   able to preview your work. </p>\n<div class=\"figure\">\n<p><img alt=\"Two window setting for later\" src=\"http://media.rlazo.org/pics/latex-two-windows.jpg\" title=\"Two windows\" /></p>\n<p>Source http://www.codinghorror.com/blog/2012/03/what-you-cant-see-you-cant-get.html</p>\n<p></p></div>\n<p>   What about being able to switch between the two easily, while   keeping track of where each part of the document came from? Enter   <a href=\"http://www.aviz.fr/gliimpse/\">Gliimpse</a> project. </p>\n<p>     \n</p><p>   Cool! </p>\n<p>   But, in <a href=\"http://www.codinghorror.com/blog/2012/03/visualizing-code-to-fail-faster.html\">Visualizing code to fail faster</a>, we enter the world of <a href=\"http://worrydream.com/\">Bret Victor</a> and his principle: Help ideas flourish by giving their   authors tools with immediate feedback. He argues that, by allowing   people to see what they are doing in the computer right away,   instead of having to imagine it until the computer is ready to   display the results, you strength ideas and enable more creativity   and better understanding. At first it didn’t felt attracted to the   concept, but after watching his talk at CUSEC I’m convinced. </p>\n<p>     \n</p><p>   Make some time to <b>watch the video</b>. It’s <span style=\"text-decoration: underline;\">AWESOME</span>, really. I mean   it. </p>") (author nil (name nil "Rodrigo") (uri nil "http://www.rlazo.org")) (source nil (title ((type . "html")) "rlazo's blog » Emacs") (link ((rel . "self") (href . "http://www.rlazo.org/category/emacs/feed/"))) (id nil "http://www.rlazo.org")))) ("Bozhidar Batsov: WikEmacs - The Other Emacs Wiki" "<p>I’d like to apologize to everyone insulted by my previous\nposts. Contrary to popular belief I acknowledge EmacsWiki’s\ncontribution to the Emacs community. Obviously many people are too\nfond of its current format so I doubt that it will ever change\n(considerably). I didn’t mean to insult anyone, I just wanted to catch\nyour attention (which unfortunately requires harsher words from time to\ntime) and point it in the direction of the existing problems.</p>\n<p>For the people that weren’t happy with EmacsWiki - the ones that felt\nmy pain and were looking for a change I present\n<a href=\"http://wikemacs.org\">WikEmacs</a> (pronounced wikimacs). It’s a\nMediaWiki powered Emacs wiki, that will try to bring to the community\ncleaner, leaner and more up-to-date documentation.</p>\n<p>There are only a few guidelines for the contributors there:</p>\n<ul>\n<li>articles should be geared only towards the current and future\nversions of Emacs (currently 23 and 24) for maintainability’s sake.</li>\n<li>articles should not copy Emacs’s or extension’s official\ndocumentation - they should refer to it instead. An overview, some\nnice pointers, tips and links - that seems like a good article,\ndoesn’t it?</li>\n<li>comments and questions should go to an article’s discussion page</li>\n</ul>\n<p>File uploads are disabled on WikEmacs (but image file uploads will\nprobably be allowed soon) - it will never host Emacs extensions of any\nsort.</p>\n<p>There is a Google discussion group\n<a href=\"https://groups.google.com/forum/?fromgroups#!forum/wikemacs\">here</a>\nfor more general questions regarding the wiki.</p>\n<p>Our goal is not to copy over the 8500 articles available at\nEmacsWiki. It’s to provide a good road map for new users coming to\nEmacs and enough helpful hints and tips for experienced users. Everyone\nis welcome to join our efforts.</p>\n<p>As far as short term goals go - have a look at the outlined structure\nof the wiki (on its home page), pick a section that interests you and\ncreate/extend/improve it. Our content is licensed with GNU’s Free\nDocumentation License (which is compatible with Wikipedia’s and\nprobably EmacsWiki’s GPL2). Some nice blog articles about Emacs might\nbe converted to wiki articles with permission from their authors. You\nmight find <a href=\"http://johnmacfarlane.net/pandoc/try\">pandoc</a> useful to\nautomatically convert articles from other formats to MediaWiki markup\nand <a href=\"https://launchpad.net/mediawiki-el\">mediawiki.el</a> to edit\narticles on wiki from the comfort of your beloved editor.</p>\n<p>Thanks to the people that brought us the original EmacsWiki. Thanks to\neveryone who supported the idea for the new wiki. Thanks in advance to\nall future contributors.</p>\n<p>Some people will undoubtedly see the birth of WikEmacs as a separatist move to fraction\nthe Emacs community. To them I’d like to say that few things in life\nare as productive as competition. Obviously a lot of people willing to\ncontribute to a new wiki are unwilling to do so for EmacsWiki and vice\nversa. This is not a contest and there will be no winner. I wish the\nbest of luck to EmacsWiki and its supporters. What I wish for is to give\nour community the best source of documentation available and the\noption to choose.</p>" "http://bbatsov.github.com/articles/2012/03/26/wikemacs-the-other-emacs-wiki/" (20336 10084) obsolete 21 nil nil ((title ((type . "html")) "Bozhidar Batsov: WikEmacs - The Other Emacs Wiki") (link ((href . "http://bbatsov.github.com/articles/2012/03/26/wikemacs-the-other-emacs-wiki/"))) (id nil "http://bbatsov.github.com/articles/2012/03/26/wikemacs-the-other-emacs-wiki") (updated nil "2012-03-26T08:23:00+00:00") (content ((type . "html")) "<p>I’d like to apologize to everyone insulted by my previous\nposts. Contrary to popular belief I acknowledge EmacsWiki’s\ncontribution to the Emacs community. Obviously many people are too\nfond of its current format so I doubt that it will ever change\n(considerably). I didn’t mean to insult anyone, I just wanted to catch\nyour attention (which unfortunately requires harsher words from time to\ntime) and point it in the direction of the existing problems.</p>\n\n<p>For the people that weren’t happy with EmacsWiki - the ones that felt\nmy pain and were looking for a change I present\n<a href=\"http://wikemacs.org\">WikEmacs</a> (pronounced wikimacs). It’s a\nMediaWiki powered Emacs wiki, that will try to bring to the community\ncleaner, leaner and more up-to-date documentation.</p>\n\n<p>There are only a few guidelines for the contributors there:</p>\n\n<ul>\n<li>articles should be geared only towards the current and future\nversions of Emacs (currently 23 and 24) for maintainability’s sake.</li>\n<li>articles should not copy Emacs’s or extension’s official\ndocumentation - they should refer to it instead. An overview, some\nnice pointers, tips and links - that seems like a good article,\ndoesn’t it?</li>\n<li>comments and questions should go to an article’s discussion page</li>\n</ul>\n\n\n<p>File uploads are disabled on WikEmacs (but image file uploads will\nprobably be allowed soon) - it will never host Emacs extensions of any\nsort.</p>\n\n<p>There is a Google discussion group\n<a href=\"https://groups.google.com/forum/?fromgroups#!forum/wikemacs\">here</a>\nfor more general questions regarding the wiki.</p>\n\n<p>Our goal is not to copy over the 8500 articles available at\nEmacsWiki. It’s to provide a good road map for new users coming to\nEmacs and enough helpful hints and tips for experienced users. Everyone\nis welcome to join our efforts.</p>\n\n<p>As far as short term goals go - have a look at the outlined structure\nof the wiki (on its home page), pick a section that interests you and\ncreate/extend/improve it. Our content is licensed with GNU’s Free\nDocumentation License (which is compatible with Wikipedia’s and\nprobably EmacsWiki’s GPL2). Some nice blog articles about Emacs might\nbe converted to wiki articles with permission from their authors. You\nmight find <a href=\"http://johnmacfarlane.net/pandoc/try\">pandoc</a> useful to\nautomatically convert articles from other formats to MediaWiki markup\nand <a href=\"https://launchpad.net/mediawiki-el\">mediawiki.el</a> to edit\narticles on wiki from the comfort of your beloved editor.</p>\n\n<p>Thanks to the people that brought us the original EmacsWiki. Thanks to\neveryone who supported the idea for the new wiki. Thanks in advance to\nall future contributors.</p>\n\n<p>Some people will undoubtedly see the birth of WikEmacs as a separatist move to fraction\nthe Emacs community. To them I’d like to say that few things in life\nare as productive as competition. Obviously a lot of people willing to\ncontribute to a new wiki are unwilling to do so for EmacsWiki and vice\nversa. This is not a contest and there will be no winner. I wish the\nbest of luck to EmacsWiki and its supporters. What I wish for is to give\nour community the best source of documentation available and the\noption to choose.</p>") (author nil (name nil "Bozhidar Batsov") (uri nil "http://bbatsov.github.com/")) (source nil (title ((type . "html")) "Emacs @ (think)") (link ((rel . "self") (href . "http://bbatsov.github.com/emacs.xml"))) (id nil "http://bbatsov.github.com/")))) ("Da Zhang: LeechBlock – the killer of timekillers" "<div id=\"content\">\n<p>Procrastination, the time-wasting and beating-around-the-bush type of behavior before any progress could be made on the real important things, is very typical among many people, including me.</p>\n<p>I found that visiting my favorite websites before I start working is almost irresistible.</p>\n<p>From Matt Might’s <a href=\"http://matt.might.net/articles/productivity-tips-hints-hacks-tricks-for-grad-students-academics/\">Productivity tips, tricks and hacks for academics</a> and <a href=\"http://matt.might.net/articles/cripple-your-technology/\">Boost your productivity: Cripple your technology</a>, I learned about <a href=\"https://addons.mozilla.org/en-US/firefox/addon/leechblock/\">LeechBlock</a>, which is perfect to block my favorite websites during hours I am supposed to work.</p>\n<p>I can set up what to block (for example, www.cnn.com), when to block (e.g., 0900-1730), how long to block (e.g., 1 min in every hour), what to show when a page is blocked (for me, I used the Journal of Medical Physics website for most recent articles)</p>\n<p>To protect the disciplines from being violated, the LeechBlock is actually designed in a quite tricky and clever way:</p>\n<ul>\n<li>I can set up password to the Option dialog box of LeechBlock for someone else, like my wife, to help them fighting procrastination together;</li>\n<li>or I can let LeechBlock to require me to type in a 64 or 32 digit long randomly generated combination of letters and numbers before accessing its Option dialog box, which is really a pain. (see the pictures below)</li>\n</ul>\n<p style=\"text-align: center;\"><a href=\"http://zhangda.files.wordpress.com/2012/03/leechblock-32-64-code-options.png\"><img alt=\"\" class=\"aligncenter  wp-image-242\" height=\"456\" src=\"http://zhangda.files.wordpress.com/2012/03/leechblock-32-64-code-options.png?w=717&amp;h=456\" title=\"leechblock-32-64-code-options\" width=\"717\" /></a><a href=\"http://zhangda.files.wordpress.com/2012/03/leechblock-32-code.png\"><img alt=\"\" class=\"aligncenter  wp-image-243\" height=\"448\" src=\"http://zhangda.files.wordpress.com/2012/03/leechblock-32-code.png?w=717&amp;h=448\" title=\"leechblock-32-code\" width=\"717\" /></a></p>\n<p>When the path toward surfing online becomes more difficult to approach, it becomes easier for me to resist the desire to do so.</p>\n<p>BTW, I don’t think I need to block IE, because I feel that using IE to surf online is as painful as by-passing the control of LeechBlock :-).</p>\n</div>\n<div id=\"postamble\">\n<p class=\"date\">Date: 2012-03-25 17:38:16 Eastern Daylight Time</p>\n<p class=\"author\">Author: Da Zhang</p>\n<p class=\"creator\">Org version 7.8.03 with Emacs version 24</p>\n<p><a href=\"http://validator.w3.org/check?uri=referer\">Validate XHTML 1.0</a></p>\n</div>\n<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/zhangda.wordpress.com/241/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/zhangda.wordpress.com/241/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godelicious/zhangda.wordpress.com/241/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/delicious/zhangda.wordpress.com/241/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gofacebook/zhangda.wordpress.com/241/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/facebook/zhangda.wordpress.com/241/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gotwitter/zhangda.wordpress.com/241/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/twitter/zhangda.wordpress.com/241/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gostumble/zhangda.wordpress.com/241/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/stumble/zhangda.wordpress.com/241/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godigg/zhangda.wordpress.com/241/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/digg/zhangda.wordpress.com/241/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/goreddit/zhangda.wordpress.com/241/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/reddit/zhangda.wordpress.com/241/\" /></a> <img alt=\"\" border=\"0\" height=\"1\" src=\"http://stats.wordpress.com/b.gif?host=zhangda.wordpress.com&amp;blog=7259137&amp;post=241&amp;subd=zhangda&amp;ref=&amp;feed=1\" width=\"1\" />" "https://zhangda.wordpress.com/2012/03/25/leechblock-the-killer-of-timekillers/" (20335 37536) obsolete 23 nil nil ((title ((type . "html") (xml:lang . "en")) "Da Zhang: LeechBlock – the killer of timekillers") (link ((href . "https://zhangda.wordpress.com/2012/03/25/leechblock-the-killer-of-timekillers/"))) (id nil "http://zhangda.wordpress.com/?p=241") (updated nil "2012-03-25T21:48:16+00:00") (content ((type . "html") (xml:lang . "en")) "<div id=\"content\">\n<p>Procrastination, the time-wasting and beating-around-the-bush type of behavior before any progress could be made on the real important things, is very typical among many people, including me.</p>\n<p>I found that visiting my favorite websites before I start working is almost irresistible.</p>\n<p>From Matt Might’s <a href=\"http://matt.might.net/articles/productivity-tips-hints-hacks-tricks-for-grad-students-academics/\">Productivity tips, tricks and hacks for academics</a> and <a href=\"http://matt.might.net/articles/cripple-your-technology/\">Boost your productivity: Cripple your technology</a>, I learned about <a href=\"https://addons.mozilla.org/en-US/firefox/addon/leechblock/\">LeechBlock</a>, which is perfect to block my favorite websites during hours I am supposed to work.</p>\n<p>I can set up what to block (for example, www.cnn.com), when to block (e.g., 0900-1730), how long to block (e.g., 1 min in every hour), what to show when a page is blocked (for me, I used the Journal of Medical Physics website for most recent articles)</p>\n<p>To protect the disciplines from being violated, the LeechBlock is actually designed in a quite tricky and clever way:</p>\n<ul>\n<li>I can set up password to the Option dialog box of LeechBlock for someone else, like my wife, to help them fighting procrastination together;</li>\n<li>or I can let LeechBlock to require me to type in a 64 or 32 digit long randomly generated combination of letters and numbers before accessing its Option dialog box, which is really a pain. (see the pictures below)</li>\n</ul>\n<p style=\"text-align: center;\"><a href=\"http://zhangda.files.wordpress.com/2012/03/leechblock-32-64-code-options.png\"><img alt=\"\" class=\"aligncenter  wp-image-242\" height=\"456\" src=\"http://zhangda.files.wordpress.com/2012/03/leechblock-32-64-code-options.png?w=717&amp;h=456\" title=\"leechblock-32-64-code-options\" width=\"717\" /></a><a href=\"http://zhangda.files.wordpress.com/2012/03/leechblock-32-code.png\"><img alt=\"\" class=\"aligncenter  wp-image-243\" height=\"448\" src=\"http://zhangda.files.wordpress.com/2012/03/leechblock-32-code.png?w=717&amp;h=448\" title=\"leechblock-32-code\" width=\"717\" /></a></p>\n<p>When the path toward surfing online becomes more difficult to approach, it becomes easier for me to resist the desire to do so.</p>\n<p>BTW, I don’t think I need to block IE, because I feel that using IE to surf online is as painful as by-passing the control of LeechBlock :-).</p>\n</div>\n<div id=\"postamble\">\n<p class=\"date\">Date: 2012-03-25 17:38:16 Eastern Daylight Time</p>\n<p class=\"author\">Author: Da Zhang</p>\n<p class=\"creator\">Org version 7.8.03 with Emacs version 24</p>\n<p><a href=\"http://validator.w3.org/check?uri=referer\">Validate XHTML 1.0</a></p>\n</div>\n<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/zhangda.wordpress.com/241/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/zhangda.wordpress.com/241/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godelicious/zhangda.wordpress.com/241/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/delicious/zhangda.wordpress.com/241/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gofacebook/zhangda.wordpress.com/241/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/facebook/zhangda.wordpress.com/241/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gotwitter/zhangda.wordpress.com/241/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/twitter/zhangda.wordpress.com/241/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gostumble/zhangda.wordpress.com/241/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/stumble/zhangda.wordpress.com/241/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godigg/zhangda.wordpress.com/241/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/digg/zhangda.wordpress.com/241/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/goreddit/zhangda.wordpress.com/241/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/reddit/zhangda.wordpress.com/241/\" /></a> <img alt=\"\" border=\"0\" height=\"1\" src=\"http://stats.wordpress.com/b.gif?host=zhangda.wordpress.com&amp;blog=7259137&amp;post=241&amp;subd=zhangda&amp;ref=&amp;feed=1\" width=\"1\" />") (author nil (name nil "zhangda") (uri nil "https://zhangda.wordpress.com")) (source nil (title ((type . "html")) "Da's recipes on Emacs, IT, and more") (subtitle ((type . "html")) "Da Zhang's web notes") (link ((rel . "self") (href . "https://zhangda.wordpress.com/feed/"))) (id nil "https://zhangda.wordpress.com")))) ("Da Zhang: My color theme color-theme-dawn-night is updated and uploaded to the marmalade repository (updated)" "<div id=\"content\">\n<p>I have been spending time to tweak and design my own color themes since 2007, and published previous<br />\nversions (switch-color-theme-matlab-latex.el) on this blog (<a href=\"http://zhangda.wordpress.com/feed/#my-blog\">http://zhangda.wordpress.com/2009/04/08/my-own-emacs-color-themes-i-use-f6-c-u-f6-to-switch-between-them/</a>).</p>\n<p>I think now it’s a good time to move the package to the more popular host, marmalade, so anyone interested could use the<br />\nemacs package management tool (package.el) to obtain it. If marmalade is included in your package-archives list (see the<br />\ncode below for this), you should be able to see the package “color-theme-dawn-night” after firing up list-packages.</p>\n<pre class=\"src src-lisp\">(setq package-archives '((<span style=\"color: #8b0000; font-weight: bold;\">\"gnu\"</span> . <span style=\"color: #8b0000; font-weight: bold;\">\"http://elpa.gnu.org/packages/\"</span>)\n(<span style=\"color: #8b0000; font-weight: bold;\">\"marmalade\"</span> . <span style=\"color: #8b0000; font-weight: bold;\">\"http://marmalade-repo.org/packages/\"</span>)))</pre>\n<p>You can also download the color-theme-dawn-night.el via <a href=\"http://marmalade-repo.org/packages/color-theme-dawn-night-1.0.el\" title=\"here\">http://marmalade-repo.org/packages/color-theme-dawn-night-1.0.el</a></p>\n<p>Here is a brief description of the color theme:</p>\n<p>color-theme-dawn-night.el contains two customized color themes:</p>\n<p>(1) cl-night<br />\nis a dark-background theme, designed for normal programming,<br />\norg/muse mode editing and LaTeX editing. The foreground colors are designed<br />\nto be somewhat aqua, with a bright and warm feeling.</p>\n<p>(2) cl-dawn<br />\nis designed with a bright and warm background. The color setup was inspired<br />\nby the light yellow background and visual effect of the Matlab programming<br />\nenvironment.</p>\n<p>Call function switch-dawn-night to change to the dark face, and call C-u<br />\nswitch-dawn-night for the bright background face.</p>\n<p>Install the theme:<br />\n(1)Place color-theme-dawn-night.el into your load-path.</p>\n<p>(2)In your .emacs, add:<br />\n(require ‘color-theme-dawn-night)</p>\n<p>(3)optional keybinding<br />\n(global-set-key [f6] ‘switch-dawn-night)</p>\n<p> </p>\n<p>One good thing to tweak the color theme is that you can have a full control of the appearance of Emacs. For example, I adjusted different faces of tabbar to make them appear uniformly and as if in a real tabbar system.  Another example is the color of the line numbers on the left fringe — I made them slim and in a “dark gold” color.</p>\n<p>Here are some screen shots of my color themes.</p>\n<p>color theme dawn night:  night</p>\n<p><a href=\"http://zhangda.files.wordpress.com/2012/03/color-theme-night2.png\"><img alt=\"color-theme-dawn-night: night\" class=\"aligncenter size-large wp-image-237\" height=\"621\" src=\"http://zhangda.files.wordpress.com/2012/03/color-theme-night2.png?w=1024&amp;h=621\" title=\"color-theme-dawn-night: night\" width=\"1024\" /></a></p>\n<p>color theme dawn night:  dawn</p>\n<p><a href=\"http://zhangda.files.wordpress.com/2012/03/color-theme-dawn3.png\"><img alt=\"color-theme-dawn-night: dawn\" class=\"aligncenter size-large wp-image-238\" height=\"621\" src=\"http://zhangda.files.wordpress.com/2012/03/color-theme-dawn3.png?w=1024&amp;h=621\" title=\"color-theme-dawn-night: dawn\" width=\"1024\" /></a></p>\n</div>\n<div id=\"postamble\">\n<p class=\"date\">Date: 2012-03-24</p>\n<p>Author: Da Zhang</p>\n<p><a href=\"http://validator.w3.org/check?uri=referer\">Validate XHTML 1.0</a></p>\n</div>\n<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/zhangda.wordpress.com/222/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/zhangda.wordpress.com/222/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godelicious/zhangda.wordpress.com/222/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/delicious/zhangda.wordpress.com/222/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gofacebook/zhangda.wordpress.com/222/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/facebook/zhangda.wordpress.com/222/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gotwitter/zhangda.wordpress.com/222/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/twitter/zhangda.wordpress.com/222/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gostumble/zhangda.wordpress.com/222/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/stumble/zhangda.wordpress.com/222/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godigg/zhangda.wordpress.com/222/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/digg/zhangda.wordpress.com/222/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/goreddit/zhangda.wordpress.com/222/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/reddit/zhangda.wordpress.com/222/\" /></a> <img alt=\"\" border=\"0\" height=\"1\" src=\"http://stats.wordpress.com/b.gif?host=zhangda.wordpress.com&amp;blog=7259137&amp;post=222&amp;subd=zhangda&amp;ref=&amp;feed=1\" width=\"1\" />" "https://zhangda.wordpress.com/2012/03/24/my-own-color-theme-color-theme-dawn-night-is-uploaded-to-the-marmalade-repository/" (20333 25710) obsolete 24 nil nil ((title ((type . "html") (xml:lang . "en")) "Da Zhang: My color theme color-theme-dawn-night is updated and uploaded to the marmalade repository (updated)") (link ((href . "https://zhangda.wordpress.com/2012/03/24/my-own-color-theme-color-theme-dawn-night-is-uploaded-to-the-marmalade-repository/"))) (id nil "http://zhangda.wordpress.com/?p=222") (updated nil "2012-03-24T06:06:38+00:00") (content ((type . "html") (xml:lang . "en")) "<div id=\"content\">\n<p>I have been spending time to tweak and design my own color themes since 2007, and published previous<br />\nversions (switch-color-theme-matlab-latex.el) on this blog (<a href=\"http://zhangda.wordpress.com/feed/#my-blog\">http://zhangda.wordpress.com/2009/04/08/my-own-emacs-color-themes-i-use-f6-c-u-f6-to-switch-between-them/</a>).</p>\n<p>I think now it’s a good time to move the package to the more popular host, marmalade, so anyone interested could use the<br />\nemacs package management tool (package.el) to obtain it. If marmalade is included in your package-archives list (see the<br />\ncode below for this), you should be able to see the package “color-theme-dawn-night” after firing up list-packages.</p>\n<pre class=\"src src-lisp\">(setq package-archives '((<span style=\"color: #8b0000; font-weight: bold;\">\"gnu\"</span> . <span style=\"color: #8b0000; font-weight: bold;\">\"http://elpa.gnu.org/packages/\"</span>)\n                          (<span style=\"color: #8b0000; font-weight: bold;\">\"marmalade\"</span> . <span style=\"color: #8b0000; font-weight: bold;\">\"http://marmalade-repo.org/packages/\"</span>)))</pre>\n<p>You can also download the color-theme-dawn-night.el via <a href=\"http://marmalade-repo.org/packages/color-theme-dawn-night-1.0.el\" title=\"here\">http://marmalade-repo.org/packages/color-theme-dawn-night-1.0.el</a></p>\n<p>Here is a brief description of the color theme:</p>\n<p>color-theme-dawn-night.el contains two customized color themes:</p>\n<p>(1) cl-night<br />\nis a dark-background theme, designed for normal programming,<br />\norg/muse mode editing and LaTeX editing. The foreground colors are designed<br />\nto be somewhat aqua, with a bright and warm feeling.</p>\n<p>(2) cl-dawn<br />\nis designed with a bright and warm background. The color setup was inspired<br />\nby the light yellow background and visual effect of the Matlab programming<br />\nenvironment.</p>\n<p>Call function switch-dawn-night to change to the dark face, and call C-u<br />\nswitch-dawn-night for the bright background face.</p>\n<p>Install the theme:<br />\n(1)Place color-theme-dawn-night.el into your load-path.</p>\n<p>(2)In your .emacs, add:<br />\n(require ‘color-theme-dawn-night)</p>\n<p>(3)optional keybinding<br />\n(global-set-key [f6] ‘switch-dawn-night)</p>\n<p> </p>\n<p>One good thing to tweak the color theme is that you can have a full control of the appearance of Emacs. For example, I adjusted different faces of tabbar to make them appear uniformly and as if in a real tabbar system.  Another example is the color of the line numbers on the left fringe — I made them slim and in a “dark gold” color.</p>\n<p>Here are some screen shots of my color themes.</p>\n<p>color theme dawn night:  night</p>\n<p><a href=\"http://zhangda.files.wordpress.com/2012/03/color-theme-night2.png\"><img alt=\"color-theme-dawn-night: night\" class=\"aligncenter size-large wp-image-237\" height=\"621\" src=\"http://zhangda.files.wordpress.com/2012/03/color-theme-night2.png?w=1024&amp;h=621\" title=\"color-theme-dawn-night: night\" width=\"1024\" /></a></p>\n<p>color theme dawn night:  dawn</p>\n<p><a href=\"http://zhangda.files.wordpress.com/2012/03/color-theme-dawn3.png\"><img alt=\"color-theme-dawn-night: dawn\" class=\"aligncenter size-large wp-image-238\" height=\"621\" src=\"http://zhangda.files.wordpress.com/2012/03/color-theme-dawn3.png?w=1024&amp;h=621\" title=\"color-theme-dawn-night: dawn\" width=\"1024\" /></a></p>\n</div>\n<div id=\"postamble\">\n<p class=\"date\">Date: 2012-03-24</p>\n<p>Author: Da Zhang</p>\n<p><a href=\"http://validator.w3.org/check?uri=referer\">Validate XHTML 1.0</a></p>\n</div>\n<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/zhangda.wordpress.com/222/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/zhangda.wordpress.com/222/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godelicious/zhangda.wordpress.com/222/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/delicious/zhangda.wordpress.com/222/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gofacebook/zhangda.wordpress.com/222/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/facebook/zhangda.wordpress.com/222/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gotwitter/zhangda.wordpress.com/222/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/twitter/zhangda.wordpress.com/222/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gostumble/zhangda.wordpress.com/222/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/stumble/zhangda.wordpress.com/222/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godigg/zhangda.wordpress.com/222/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/digg/zhangda.wordpress.com/222/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/goreddit/zhangda.wordpress.com/222/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/reddit/zhangda.wordpress.com/222/\" /></a> <img alt=\"\" border=\"0\" height=\"1\" src=\"http://stats.wordpress.com/b.gif?host=zhangda.wordpress.com&amp;blog=7259137&amp;post=222&amp;subd=zhangda&amp;ref=&amp;feed=1\" width=\"1\" />") (author nil (name nil "zhangda") (uri nil "https://zhangda.wordpress.com")) (source nil (title ((type . "html")) "Da's recipes on Emacs, IT, and more") (subtitle ((type . "html")) "Da Zhang's web notes") (link ((rel . "self") (href . "https://zhangda.wordpress.com/feed/"))) (id nil "https://zhangda.wordpress.com")))) ("Irreal: Moving and Returning" "<p>Xah Lee asks <a href=\"http://xahlee.blogspot.com/2012/07/emacs-ways-to-jump-to-points.html\">what’s the best way to jump to another position in a buffer and then return to the original point?</a> Emacs users know a lot of ways of doing this. We can, for example, use 【<kbd>Ctrl</kbd>+<kbd>s</kbd>】 to move the new point and then 【<kbd>Ctrl</kbd>+<kbd>x</kbd> <kbd>Ctrl</kbd>+<kbd>x</kbd>】 to return or we can use any of the push and pop mark tricks that I and many others have written about.</p>\n<p>Lee says he tried all those but that the thing that works best for him is to simply split the window, move to the new position in the window that still has focus and then close that window when he’s done. That way he’s back to where he started quickly and easily. What I like about that method is that it’s easy to remember. In theory I like the other methods but the 【<kbd>Ctrl</kbd>+<kbd>x</kbd> <kbd>Ctrl</kbd>+<kbd>x</kbd>】 sets a new region that has to be turned off and unless I use the push/pop mark methods all the time I tend to forget how to do it.</p>\n<p>For small jumps, <code>ace-jump-mode</code> and then popping the mark with【<kbd>Ctrl</kbd>+<kbd>u</kbd> <kbd>Ctrl</kbd>+<kbd>Space</kbd>】 to return works well. A similar method using【<kbd>Ctrl</kbd>+<kbd>s</kbd>】 or【<kbd>Ctrl</kbd>+<kbd>r</kbd>】 followed by a【<kbd>Ctrl</kbd>+<kbd>u</kbd> <kbd>Ctrl</kbd>+<kbd>Space</kbd>】 also works for me. Those work because they push the mark before the jump. Methods that don’t do that are harder for me to use effectively. In those cases, Lee’s method feels like a win. What do the rest of you do?</p>" "http://irreal.org/blog/?p=927" (20484 193) new 1 nil nil ((title ((type . "html") (xml:lang . "en")) "Irreal: Moving and Returning") (link ((href . "http://irreal.org/blog/?p=927"))) (id nil "http://irreal.org/blog/?p=927") (updated nil "2012-07-16T11:53:37+00:00") (content ((type . "html") (xml:lang . "en")) "<p>Xah Lee asks <a href=\"http://xahlee.blogspot.com/2012/07/emacs-ways-to-jump-to-points.html\">what’s the best way to jump to another position in a buffer and then return to the original point?</a> Emacs users know a lot of ways of doing this. We can, for example, use 【<kbd>Ctrl</kbd>+<kbd>s</kbd>】 to move the new point and then 【<kbd>Ctrl</kbd>+<kbd>x</kbd> <kbd>Ctrl</kbd>+<kbd>x</kbd>】 to return or we can use any of the push and pop mark tricks that I and many others have written about.</p>\n<p>Lee says he tried all those but that the thing that works best for him is to simply split the window, move to the new position in the window that still has focus and then close that window when he’s done. That way he’s back to where he started quickly and easily. What I like about that method is that it’s easy to remember. In theory I like the other methods but the 【<kbd>Ctrl</kbd>+<kbd>x</kbd> <kbd>Ctrl</kbd>+<kbd>x</kbd>】 sets a new region that has to be turned off and unless I use the push/pop mark methods all the time I tend to forget how to do it.</p>\n<p>For small jumps, <code>ace-jump-mode</code> and then popping the mark with【<kbd>Ctrl</kbd>+<kbd>u</kbd> <kbd>Ctrl</kbd>+<kbd>Space</kbd>】 to return works well. A similar method using【<kbd>Ctrl</kbd>+<kbd>s</kbd>】 or【<kbd>Ctrl</kbd>+<kbd>r</kbd>】 followed by a【<kbd>Ctrl</kbd>+<kbd>u</kbd> <kbd>Ctrl</kbd>+<kbd>Space</kbd>】 also works for me. Those work because they push the mark before the jump. Methods that don’t do that are harder for me to use effectively. In those cases, Lee’s method feels like a win. What do the rest of you do?</p>") (author nil (name nil "jcs") (uri nil "http://irreal.org/blog")) (source nil (title ((type . "html")) "Irreal » Emacs") (subtitle ((type . "html")) "The minds had long ago come up with a proper name for it; they called it the Irreal, but they thought of it as Infinite Fun. That was what they really knew it as. The Land of Infinite Fun. --Iain M. Banks, Excession") (link ((rel . "self") (href . "http://irreal.org/blog/?tag=emacs&feed=rss2"))) (id nil "http://irreal.org/blog")))) ("Irreal: Linum-mode" "<p>This is another note to myself. Recently I was examining the internal structure of the decimal expansion of a number. In order to do this, I put the decimal representation of the number in a buffer and did a <code>query-replace-regexp</code> substituting &lt;digit&gt;&lt;space&gt; for each &lt;digit&gt;. Then I set the fill column to 2 and did a refill. That gave me the number with each digit on a single line. I wanted to know the position of each digit. It’s easy to find that out by moving the point to the relevant line and, given that <code>line-number-mode</code> is on, just reading the line number from the mode line. But I wanted to see the positions for all the lines at once.</p>\n<p>I knew there was a command to put each line’s number in the left fringe and had even used it but I couldn’t remember what it was. Furthermore, I couldn’t find it in the documentation. I tried things like <code>apropos line</code> and <code>apropos number</code> and other similar constructions but couldn’t find it. Eventually I gave up and started thinking about where I had first seen the command. It seemed to me that it was in an old Emacs-Fu post so I went to DJCB’s blog and did a search on “line number” and the <a href=\"http://emacs-fu.blogspot.com/2008/12/showing-line-numbers.html\">correct post</a> popped right up.</p>\n<p>The right answer is <code>linum-mode</code>. The command name is suggestive of its function but it’s still hard to go from the functionality to the command’s name so I am documenting it here. It’s not a command that I use very often so it’s hard to remember its name but when you need it, nothing else will do.</p>" "http://irreal.org/blog/?p=898" (20482 51835) new 2 nil nil ((title ((type . "html") (xml:lang . "en")) "Irreal: Linum-mode") (link ((href . "http://irreal.org/blog/?p=898"))) (id nil "http://irreal.org/blog/?p=898") (updated nil "2012-07-15T13:49:47+00:00") (content ((type . "html") (xml:lang . "en")) "<p>This is another note to myself. Recently I was examining the internal structure of the decimal expansion of a number. In order to do this, I put the decimal representation of the number in a buffer and did a <code>query-replace-regexp</code> substituting &lt;digit&gt;&lt;space&gt; for each &lt;digit&gt;. Then I set the fill column to 2 and did a refill. That gave me the number with each digit on a single line. I wanted to know the position of each digit. It’s easy to find that out by moving the point to the relevant line and, given that <code>line-number-mode</code> is on, just reading the line number from the mode line. But I wanted to see the positions for all the lines at once.</p>\n<p>I knew there was a command to put each line’s number in the left fringe and had even used it but I couldn’t remember what it was. Furthermore, I couldn’t find it in the documentation. I tried things like <code>apropos line</code> and <code>apropos number</code> and other similar constructions but couldn’t find it. Eventually I gave up and started thinking about where I had first seen the command. It seemed to me that it was in an old Emacs-Fu post so I went to DJCB’s blog and did a search on “line number” and the <a href=\"http://emacs-fu.blogspot.com/2008/12/showing-line-numbers.html\">correct post</a> popped right up.</p>\n<p>The right answer is <code>linum-mode</code>. The command name is suggestive of its function but it’s still hard to go from the functionality to the command’s name so I am documenting it here. It’s not a command that I use very often so it’s hard to remember its name but when you need it, nothing else will do.</p>") (author nil (name nil "jcs") (uri nil "http://irreal.org/blog")) (source nil (title ((type . "html")) "Irreal » Emacs") (subtitle ((type . "html")) "The minds had long ago come up with a proper name for it; they called it the Irreal, but they thought of it as Infinite Fun. That was what they really knew it as. The Land of Infinite Fun. --Iain M. Banks, Excession") (link ((rel . "self") (href . "http://irreal.org/blog/?tag=emacs&feed=rss2"))) (id nil "http://irreal.org/blog")))) ("Got Emacs?: Hobson-Jobson: The words English owes to India" "<div dir=\"ltr\" style=\"text-align: left;\">\nI found this BBC <a href=\"http://www.bbc.co.uk/news/magazine-18796493\" target=\"_blank\">article on Indian words in English</a> absolutely fascinating as well as a bit eccentric. I like it that, some words are pretty mainstream and some are not in use today and some too unbelievable at first!<br />\n<br />\nThis trivia is not related to Emacs in any way.</div><div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/3165518189103293420-7758737771830229583?l=emacsworld.blogspot.com\" width=\"1\" /></div>\n<p><a href=\"http://feedads.g.doubleclick.net/~a/DPtVMP5gJtj-xvQyjhshA1JQWhA/0/da\"><img border=\"0\" ismap=\"true\" src=\"http://feedads.g.doubleclick.net/~a/DPtVMP5gJtj-xvQyjhshA1JQWhA/0/di\" /></a><br />\n<a href=\"http://feedads.g.doubleclick.net/~a/DPtVMP5gJtj-xvQyjhshA1JQWhA/1/da\"><img border=\"0\" ismap=\"true\" src=\"http://feedads.g.doubleclick.net/~a/DPtVMP5gJtj-xvQyjhshA1JQWhA/1/di\" /></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/GotEmacs?a=XnCjLRA0yWw:4_kkyI2YnDQ:yIl2AUoC8zA\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/GotEmacs?d=yIl2AUoC8zA\" /></a> <a href=\"http://feeds.feedburner.com/~ff/GotEmacs?a=XnCjLRA0yWw:4_kkyI2YnDQ:qj6IDK7rITs\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/GotEmacs?d=qj6IDK7rITs\" /></a> <a href=\"http://feeds.feedburner.com/~ff/GotEmacs?a=XnCjLRA0yWw:4_kkyI2YnDQ:gIN9vFwOqvQ\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/GotEmacs?i=XnCjLRA0yWw:4_kkyI2YnDQ:gIN9vFwOqvQ\" /></a>\n</div><img height=\"1\" src=\"http://feeds.feedburner.com/~r/GotEmacs/~4/XnCjLRA0yWw\" width=\"1\" />" "http://feedproxy.google.com/~r/GotEmacs/~3/XnCjLRA0yWw/hobson-jobson-words-english-owes-to.html" (20481 44844) new 3 nil nil ((title ((type . "html")) "Got Emacs?: Hobson-Jobson: The words English owes to India") (link ((href . "http://feedproxy.google.com/~r/GotEmacs/~3/XnCjLRA0yWw/hobson-jobson-words-english-owes-to.html"))) (id nil "tag:blogger.com,1999:blog-3165518189103293420.post-7758737771830229583") (updated nil "2012-07-14T17:41:00+00:00") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\">\nI found this BBC <a href=\"http://www.bbc.co.uk/news/magazine-18796493\" target=\"_blank\">article on Indian words in English</a> absolutely fascinating as well as a bit eccentric. I like it that, some words are pretty mainstream and some are not in use today and some too unbelievable at first!<br />\n<br />\nThis trivia is not related to Emacs in any way.</div><div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/3165518189103293420-7758737771830229583?l=emacsworld.blogspot.com\" width=\"1\" /></div>\n<p><a href=\"http://feedads.g.doubleclick.net/~a/DPtVMP5gJtj-xvQyjhshA1JQWhA/0/da\"><img border=\"0\" ismap=\"true\" src=\"http://feedads.g.doubleclick.net/~a/DPtVMP5gJtj-xvQyjhshA1JQWhA/0/di\" /></a><br />\n<a href=\"http://feedads.g.doubleclick.net/~a/DPtVMP5gJtj-xvQyjhshA1JQWhA/1/da\"><img border=\"0\" ismap=\"true\" src=\"http://feedads.g.doubleclick.net/~a/DPtVMP5gJtj-xvQyjhshA1JQWhA/1/di\" /></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/GotEmacs?a=XnCjLRA0yWw:4_kkyI2YnDQ:yIl2AUoC8zA\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/GotEmacs?d=yIl2AUoC8zA\" /></a> <a href=\"http://feeds.feedburner.com/~ff/GotEmacs?a=XnCjLRA0yWw:4_kkyI2YnDQ:qj6IDK7rITs\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/GotEmacs?d=qj6IDK7rITs\" /></a> <a href=\"http://feeds.feedburner.com/~ff/GotEmacs?a=XnCjLRA0yWw:4_kkyI2YnDQ:gIN9vFwOqvQ\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/GotEmacs?i=XnCjLRA0yWw:4_kkyI2YnDQ:gIN9vFwOqvQ\" /></a>\n</div><img height=\"1\" src=\"http://feeds.feedburner.com/~r/GotEmacs/~4/XnCjLRA0yWw\" width=\"1\" />") (author nil (name nil "sivaram") (email nil "noreply@blogger.com") (uri nil "http://emacsworld.blogspot.com/")) (source nil (title ((type . "html")) "Got Emacs?") (subtitle ((type . "html")) "Postings on living in an Emacs world.  Posts will be mostly on using Emacs, related functions and tools.") (link ((rel . "self") (href . "http://feeds.feedburner.com/GotEmacs"))) (id nil "tag:blogger.com,1999:blog-3165518189103293420")))) ("tycho garen: Emacs Thoughts + Lisp Function" "<p>In no particular order:</p>\n<h2 id=\"orgmodeguiltandalispfunction\">Org Mode Guilt and a Lisp Function</h2>\n<p>I have some guilt about having mostly forsaken org-mode,<a class=\"footnote\" id=\"fnref:org-and-me\">1</a>\nin particular because I was watching <a href=\"http://sachachua.com/blog/2012/06/emacs-chatting-with-john-wiegley-about-the-cool-things-he-does-with-emacs/\">Sacha Chua's chat with John Wiegley</a>,\nand I think both are such nifty hackers, and have done so many things\nthat are pretty darn nifty.</p>\n<p>I liked what I heard about <code>johnw</code>'s org mode setup so much that I might give\nit a try again. But in the mean time, I wanted to make my \"recompile\nmy tasklist function\" to be a bit more clean. The result is follows:</p>\n<pre><code>(defun tychoish-todo-compile ()\n(interactive)\n(if (get-buffer \"*todo-compile*\")\n(progn\n(switch-to-buffer-other-window (get-buffer \"*todo-compile*\"))\n(recompile))\n(progn\n(compile \"make -j -k -C ~/wiki\")\n(switch-to-buffer-other-window \"*compilation*\")\n(rename-buffer \"*todo-compile*\")))\n(revbufs))\n</code></pre>\n<p>Notables:</p>\n<ul>\n<li><p>This is the first time I've used <code>progn</code> which is somewhat\nembarrassing, but it's a great thing to have in the toolkit\nnow. Link: <a href=\"http://www.gnu.org/software/emacs/emacs-lisp-aintro/html_node/progn.html\">progn</a></p></li>\n<li><p>I hadn't realized until now that there wasn't an <code>else-if</code> form in\nemacs lisp. Weird, but it makes sense.</p></li>\n<li><p><a href=\"http://www.gnu.org/software/emacs/manual/html_node/emacs/Compilation-Mode.html\">Compilation Mode</a>\nis pretty much my current favorite thing in emacs.</p></li>\n<li><p><a href=\"http://www.neilvandyke.org/revbufs/\">revbufs</a> is this amazing thing\nthat reverts buffers if there aren't local modifications, and also\nreports to you if a buffer has changed outside of emacs and there\nare local modifications. So basically \"does everything you want\nwithout destroying anything and then tells you what you need to do\nmanually.\" Smart. Simple. Perfect.</p></li>\n</ul>\n<p>I might need to \"macro-ize\" this, as I have a lot of little compile\nprocesses for which I'd like to be able to trigger/maintain unique\ncompile buffers. That's a project for another day.</p>\n<h2 id=\"emacsthoughts\">Emacs Thoughts</h2>\n<p>I'm even thinking about putting together a post about how, although\nI'm a diehard emacs user, and I've spent a fair bit of time learning\nhow to do really great things with emacs, there are a lot of vim-ish\nthings in my workflow:</p>\n<ul>\n<li><p>I read email with <a href=\"http://mutt.org\">mutt</a> and I've tried to get into\nGNUS, and I try it again every now and then, but I always find it so\nunbelievably gnarly. At least the transition. Same with\n<a href=\"http://notmuch.org\">Notmuch</a>, which I like a lot more (in theory,)\nbut I find the fact that Notmuch and <code>mutt</code> have this fundamental\nmisunderstanding about what constitutes a \"read\" email, to be\ntragic.</p></li>\n<li><p>I use a crazy <a href=\"http://ikiwiki.info/\">ikiwiki</a> +\n<a href=\"http://jblevins.org/projects/deft/\">deft</a> + makefile setup for task\ntracking. As (obliquely) referenced above.</p>\n<p>I might give org another shot, and I've been looking at\n<a href=\"http://taskwarrior.org/projects/show/taskwarrior\">task warrior</a>,\nbut the sad truth is that what I have <em>works incredibly well</em> for in\nmost cases, and switching is hard.</p></li>\n<li><p>I tend jump to a shell window to do version control and other\nthings, even though I'm familiar with\n<a href=\"http://philjackson.github.com/magit/\">magit</a> and <code>dired</code>, my use of\nthese tools is somewhat spotty.</p></li>\n</ul>\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn:org-and-me\"><p>It's not that I think org-mode sucks, or anything. Far\nfrom it, but how I was using org-mode was fundamentally <em>not</em> working\nfor me. I'm thinking about giving it a try again, but we'll see.<a class=\"reversefootnote\"> ↩</a></p></li>\n</ol>\n</div>" "http://tychoish.com/rhizome/emacs-thoughts-and-a-lisp-function/" (20479 40256) new 4 nil nil ((title ((type . "html")) "tycho garen: Emacs Thoughts + Lisp Function") (link ((href . "http://tychoish.com/rhizome/emacs-thoughts-and-a-lisp-function/"))) (id nil "http://tychoish.com/rhizome/emacs-thoughts-and-a-lisp-function/") (updated nil "2012-07-13T04:00:00+00:00") (content ((type . "html")) "<p>In no particular order:</p>\n\n<h2 id=\"orgmodeguiltandalispfunction\">Org Mode Guilt and a Lisp Function</h2>\n\n<p>I have some guilt about having mostly forsaken org-mode,<a class=\"footnote\" id=\"fnref:org-and-me\">1</a>\nin particular because I was watching <a href=\"http://sachachua.com/blog/2012/06/emacs-chatting-with-john-wiegley-about-the-cool-things-he-does-with-emacs/\">Sacha Chua's chat with John Wiegley</a>,\nand I think both are such nifty hackers, and have done so many things\nthat are pretty darn nifty.</p>\n\n<p>I liked what I heard about <code>johnw</code>'s org mode setup so much that I might give\nit a try again. But in the mean time, I wanted to make my \"recompile\nmy tasklist function\" to be a bit more clean. The result is follows:</p>\n\n<pre><code>(defun tychoish-todo-compile ()\n  (interactive)\n  (if (get-buffer \"*todo-compile*\")\n      (progn\n        (switch-to-buffer-other-window (get-buffer \"*todo-compile*\"))\n        (recompile))\n    (progn\n      (compile \"make -j -k -C ~/wiki\")\n      (switch-to-buffer-other-window \"*compilation*\")\n      (rename-buffer \"*todo-compile*\")))\n  (revbufs))\n</code></pre>\n\n<p>Notables:</p>\n\n<ul>\n<li><p>This is the first time I've used <code>progn</code> which is somewhat\nembarrassing, but it's a great thing to have in the toolkit\nnow. Link: <a href=\"http://www.gnu.org/software/emacs/emacs-lisp-aintro/html_node/progn.html\">progn</a></p></li>\n<li><p>I hadn't realized until now that there wasn't an <code>else-if</code> form in\nemacs lisp. Weird, but it makes sense.</p></li>\n<li><p><a href=\"http://www.gnu.org/software/emacs/manual/html_node/emacs/Compilation-Mode.html\">Compilation Mode</a>\nis pretty much my current favorite thing in emacs.</p></li>\n<li><p><a href=\"http://www.neilvandyke.org/revbufs/\">revbufs</a> is this amazing thing\nthat reverts buffers if there aren't local modifications, and also\nreports to you if a buffer has changed outside of emacs and there\nare local modifications. So basically \"does everything you want\nwithout destroying anything and then tells you what you need to do\nmanually.\" Smart. Simple. Perfect.</p></li>\n</ul>\n\n<p>I might need to \"macro-ize\" this, as I have a lot of little compile\nprocesses for which I'd like to be able to trigger/maintain unique\ncompile buffers. That's a project for another day.</p>\n\n<h2 id=\"emacsthoughts\">Emacs Thoughts</h2>\n\n<p>I'm even thinking about putting together a post about how, although\nI'm a diehard emacs user, and I've spent a fair bit of time learning\nhow to do really great things with emacs, there are a lot of vim-ish\nthings in my workflow:</p>\n\n<ul>\n<li><p>I read email with <a href=\"http://mutt.org\">mutt</a> and I've tried to get into\nGNUS, and I try it again every now and then, but I always find it so\nunbelievably gnarly. At least the transition. Same with\n<a href=\"http://notmuch.org\">Notmuch</a>, which I like a lot more (in theory,)\nbut I find the fact that Notmuch and <code>mutt</code> have this fundamental\nmisunderstanding about what constitutes a \"read\" email, to be\ntragic.</p></li>\n<li><p>I use a crazy <a href=\"http://ikiwiki.info/\">ikiwiki</a> +\n<a href=\"http://jblevins.org/projects/deft/\">deft</a> + makefile setup for task\ntracking. As (obliquely) referenced above.</p>\n\n<p>I might give org another shot, and I've been looking at\n<a href=\"http://taskwarrior.org/projects/show/taskwarrior\">task warrior</a>,\nbut the sad truth is that what I have <em>works incredibly well</em> for in\nmost cases, and switching is hard.</p></li>\n<li><p>I tend jump to a shell window to do version control and other\nthings, even though I'm familiar with\n<a href=\"http://philjackson.github.com/magit/\">magit</a> and <code>dired</code>, my use of\nthese tools is somewhat spotty.</p></li>\n</ul>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n\n<li id=\"fn:org-and-me\"><p>It's not that I think org-mode sucks, or anything. Far\nfrom it, but how I was using org-mode was fundamentally <em>not</em> working\nfor me. I'm thinking about giving it a try again, but we'll see.<a class=\"reversefootnote\"> ↩</a></p></li>\n\n</ol>\n</div>") (author nil (name nil "tycho garen") (uri nil "http://tychoish.com/tag/emacs/feed/")) (source nil (title ((type . "html")) "tychoish emacs posts") (subtitle ((type . "html")) "tychoish") (link ((rel . "self") (href . "http://tychoish.com/tag/emacs/feed/index.rss"))) (id nil "http://tychoish.com/tag/emacs/feed/")))) ("Ivan Kanis: Fix Emacs Flicker" "<p>While catching up on news with newsticker Emacs was flickering and it\nwas driving me mad. It dawned on me that it was a timer event\noverdoing display refresh. It's easy to find out the culprit. First\nlook at the variable timer-list.</p>\n<p>You will get a list looking like this:</p>\n<pre class=\"example\">([nil 20478 31448 437738 60 ac-clear-variables-every-minute nil nil]\n[nil 20478 31452 0 60 display-time-event-handler nil nil]\n[nil 20478 31452 0 60 appt-check nil nil])\n</pre>\n<p>Now all you need to do is define each timer functions to do nothing by\nevaluating:</p>\n<pre class=\"example\">(defun ac-clear-variables-every-minute ())\n</pre>\n<p>Do this for each functions listed in the timer variable list and\nyou'll find the function that causes the flicker. Now you can fix it\nby either removing the function, improving it or calling it less\noften.</p>" "http://ivan.kanis.fr/fix-emacs-flicker.html" (20478 4992) new 5 nil nil ((title ((type . "html") (xml:lang . "en-us")) "Ivan Kanis: Fix Emacs Flicker") (link ((href . "http://ivan.kanis.fr/fix-emacs-flicker.html"))) (id nil "http://ivan.kanis.fr/fix-emacs-flicker.html") (updated nil "2012-07-12T00:00:00+00:00") (content ((type . "html")) "<p>While catching up on news with newsticker Emacs was flickering and it\nwas driving me mad. It dawned on me that it was a timer event\noverdoing display refresh. It's easy to find out the culprit. First\nlook at the variable timer-list.</p>\n\n<p>You will get a list looking like this:</p>\n\n<pre class=\"example\">([nil 20478 31448 437738 60 ac-clear-variables-every-minute nil nil]\n [nil 20478 31452 0 60 display-time-event-handler nil nil]\n [nil 20478 31452 0 60 appt-check nil nil])\n</pre>\n\n<p>Now all you need to do is define each timer functions to do nothing by\nevaluating:</p>\n\n<pre class=\"example\">(defun ac-clear-variables-every-minute ())\n</pre>\n\n<p>Do this for each functions listed in the timer variable list and\nyou'll find the function that causes the flicker. Now you can fix it\nby either removing the function, improving it or calling it less\noften.</p>") (author nil (name nil "Ivan Kanis") (uri nil "http://ivan.kanis.fr/blog.html")) (source nil (title ((type . "html")) "Ivan Kanis blog") (link ((rel . "self") (href . "http://kanis.fr/blog-emacs.xml"))) (id nil "http://ivan.kanis.fr/blog.html")))) ("Alex Bennée: Living la vida ELPA" "<p>I’ve been running Emacs 24 direct from the version control tree (technically a git mirror, bzr still confuses me) for some time now. As many people have mentioned ELPA is one of the big features that helps de-clutter an Emacs users ~/.emacs.d directory. I thought it might be a useful exercise to discuss which packages I’m now loading from ELPA and which I still track directly.</p>\n<p>First and formemost is my <a href=\"https://github.com/stsquad/my-emacs-stuff\">my dotemacs collection</a>. Weighing in at around 2700 lines of elisp it’s small by some standards. I’ve toyed with moving my config across to things like the <a href=\"https://github.com/technomancy/emacs-starter-kit/\">Emacs Starter Kit</a> but I’m not sure if it’s worth the transition pain. There is certainly a lot of cruft in my code but there is also quite a lot of muscle memory now invested in it. I have been trying to modularise it a little more but to be honest most of that was driven by a desire to get autoload working nicely which is no longer much of an issue as my session tends to stay up for weeks at an end.</p>\n<p>I’ll gloss over edit-server.el surfice it to say I’d hope your not surprised I keep the development version running given it’s for <a href=\"https://github.com/stsquad/emacs_chrome\">my extension</a> <img alt=\";-)\" class=\"wp-smiley\" src=\"http://www.bennee.com/~alex/blog/wp-includes/images/smilies/icon_wink.gif\" /> </p>\n<p>After that we have Johnathan Rockway’s <a href=\"https://github.com/jrockway/eproject\">eproject</a>. I work with lots of code bases during the day and some sort of sensible project type structure is a must. I’ve tried a number of different solutions and this one stuck as it was fairly lightweight and easy for my smaller lisp brain to extend. I’ve even managed to contribute some changes back. As a result I find tracking the bleeding edge of development useful.</p>\n<p>The same reason applies to Stephen Bach’s <a href=\"https://github.com/sjbach/lusty-emacs\">lusty-emacs</a>. While ido-mode and ibuffer work well for speed nothing matches lusty’s lazy file and buffer matching. It can get a little too much once you start dealing with hundreds of buffers at a time (something <em>midnight-mode</em> is trying to keep on top of). It’s still seeing some activitiy on the repository hence the local checkout.</p>\n<p>Finally the biggie but generally unused <a href=\"http://cedet.sourceforge.net/\">cedet</a>. There has been some work to make it comparitively easy to run out of a src checkout and as long as it’s included early enough it won’t conflict with the built in cedet shipping with Emacs 23+. I still haven’t really made much use of it although I have managed to get a completion out of it when editing some C. It’s basically sitting there until I can commit enough time to figuring out how to use the beast.</p>\n<p>Finally a quick review of the ELPA packages that I’ve got loaded. Obviously there is the latest <em>org-mode</em> which I’m spending an increasing amount of time in. I also have my favourite <em>zenburn-theme</em> for easy on the eyes goodness. The popular GIT interaction mode <em>magit</em> also sits there which I use every day. <em>js2-mode</em> and <em>ssh_config_mode</em> completes the list of modules that I actually use. </p>\n<p>I have a number of additional things in there which I don’t actually use at the moment but I plan to try out including <em>nose</em> (for python unit test), <em>jsshell</em> (for JavaScript coding) and another one I see a lot of the wizards using <em>yasnippet</em> but again is awaiting time to play with.</p>\n<p>So what ELPA packages have you discovered and what hidden gems to you track directly in your .emacs.d?</p>" "http://www.bennee.com/~alex/blog/2012/07/10/living-la-vida-elpa/" (20476 5622) new 6 nil nil ((title ((type . "html") (xml:lang . "en-US")) "Alex Bennée: Living la vida ELPA") (link ((href . "http://www.bennee.com/~alex/blog/2012/07/10/living-la-vida-elpa/"))) (id nil "http://www.bennee.com/~alex/blog/?p=2616") (updated nil "2012-07-10T11:45:58+00:00") (content ((type . "html") (xml:lang . "en-US")) "<p>I’ve been running Emacs 24 direct from the version control tree (technically a git mirror, bzr still confuses me) for some time now. As many people have mentioned ELPA is one of the big features that helps de-clutter an Emacs users ~/.emacs.d directory. I thought it might be a useful exercise to discuss which packages I’m now loading from ELPA and which I still track directly.</p>\n<p>First and formemost is my <a href=\"https://github.com/stsquad/my-emacs-stuff\">my dotemacs collection</a>. Weighing in at around 2700 lines of elisp it’s small by some standards. I’ve toyed with moving my config across to things like the <a href=\"https://github.com/technomancy/emacs-starter-kit/\">Emacs Starter Kit</a> but I’m not sure if it’s worth the transition pain. There is certainly a lot of cruft in my code but there is also quite a lot of muscle memory now invested in it. I have been trying to modularise it a little more but to be honest most of that was driven by a desire to get autoload working nicely which is no longer much of an issue as my session tends to stay up for weeks at an end.</p>\n<p>I’ll gloss over edit-server.el surfice it to say I’d hope your not surprised I keep the development version running given it’s for <a href=\"https://github.com/stsquad/emacs_chrome\">my extension</a> <img alt=\";-)\" class=\"wp-smiley\" src=\"http://www.bennee.com/~alex/blog/wp-includes/images/smilies/icon_wink.gif\" /> </p>\n<p>After that we have Johnathan Rockway’s <a href=\"https://github.com/jrockway/eproject\">eproject</a>. I work with lots of code bases during the day and some sort of sensible project type structure is a must. I’ve tried a number of different solutions and this one stuck as it was fairly lightweight and easy for my smaller lisp brain to extend. I’ve even managed to contribute some changes back. As a result I find tracking the bleeding edge of development useful.</p>\n<p>The same reason applies to Stephen Bach’s <a href=\"https://github.com/sjbach/lusty-emacs\">lusty-emacs</a>. While ido-mode and ibuffer work well for speed nothing matches lusty’s lazy file and buffer matching. It can get a little too much once you start dealing with hundreds of buffers at a time (something <em>midnight-mode</em> is trying to keep on top of). It’s still seeing some activitiy on the repository hence the local checkout.</p>\n<p>Finally the biggie but generally unused <a href=\"http://cedet.sourceforge.net/\">cedet</a>. There has been some work to make it comparitively easy to run out of a src checkout and as long as it’s included early enough it won’t conflict with the built in cedet shipping with Emacs 23+. I still haven’t really made much use of it although I have managed to get a completion out of it when editing some C. It’s basically sitting there until I can commit enough time to figuring out how to use the beast.</p>\n<p>Finally a quick review of the ELPA packages that I’ve got loaded. Obviously there is the latest <em>org-mode</em> which I’m spending an increasing amount of time in. I also have my favourite <em>zenburn-theme</em> for easy on the eyes goodness. The popular GIT interaction mode <em>magit</em> also sits there which I use every day. <em>js2-mode</em> and <em>ssh_config_mode</em> completes the list of modules that I actually use. </p>\n<p>I have a number of additional things in there which I don’t actually use at the moment but I plan to try out including <em>nose</em> (for python unit test), <em>jsshell</em> (for JavaScript coding) and another one I see a lot of the wizards using <em>yasnippet</em> but again is awaiting time to play with.</p>\n<p>So what ELPA packages have you discovered and what hidden gems to you track directly in your .emacs.d?</p>") (author nil (name nil "Alex") (uri nil "http://www.bennee.com/~alex/blog")) (source nil (title ((type . "html")) "Alex's Adventures on the Infobahn » emacs") (subtitle ((type . "html")) "the wanderings of a supposed digital native") (link ((rel . "self") (href . "http://www.bennee.com/~alex/blog/tag/emacs/feed/"))) (id nil "http://www.bennee.com/~alex/blog")))) ("Julien Danjou: Logitech K750 keyboard and Unifying Receiver Linux support" "<p>A year ago, I bought a <a href=\"http://www.logitech.com/keyboards/keyboards/k750-keyboard\">Logitech Wireless Solar Keyboard\nK750</a>. I'm\nparticularly picky on keyboards, but this one is good. It has an incredible\nuseful feature: while being wireless, it has no need for disposable or\nrechargeable batteries, it uses solar power!</p>\n<p><img alt=\"Logitech Wireless Solar Keyboard K750\" src=\"http://julien.danjou.info/media/images/logitech-wireless-solar-keyboard-k750.png\" /></p>\n<p>My problem is that there's obviously no way to know the battery status from\nLinux, the provided application only working on Windows.</p>\n<p>And one dark night, while fragging on QuakeLive, my keyboard stopped\nworking: it had no battery left. This activity being quite energy consuming,\nit emptied the whole battery.</p>\n<p>Someone should write code to get the battery status and light meter from\nLinux: challenge accepted!</p>\n<h1>How the keyboard works</h1>\n<p><span class=\"pull-right\">\n<img alt=\"Logitech Unifying Receiver\" src=\"http://julien.danjou.info/media/images/logitech-unifying.jpg\" />\n</span></p>\n<p>This keyboard, like many of the new wireless devices from Logitech, uses the\n<em>Unifying</em> interface. It's an USB receiver that can be attached up to 6\ndifferents devices (mouse, keyboards…). On old Linux kernel, the <em>Unifying</em>\nreceiver is recognized as only one keyboard and/or one mouse device.</p>\n<p>Recently, a driver called <em>hid-logitech-dj</em> has been added to the Linux\nkernel. With this driver, each device attached to the receiver is recognized\nas one different device.</p>\n<h1>What the Logitech application does</h1>\n<p><span class=\"pull-left\">\n<img alt=\"Logitech Solar App\" src=\"http://julien.danjou.info/media/images/logitech-solar-app.png\" />\n</span></p>\n<p>The Logitech application under Windows works that way: you launch it, and it\ndisplays the battery charge level. On the keyboard, there's a special\n\"light\" button (up right). When pressed, a LED will light up on the\nkeyboard: green if the keyboard is receiving enough light and is charging,\nred if the keyboard does not receive enough light and is therefore\ndischarging. Pushing this same button while the application is running will\nmakes the light meter activated: the application will tell you how much\n<a href=\"http://en.wikipedia.org/wiki/Lux\">lux</a> your keyboard is receiving.</p>\n<h1>Let's reverse engineer this</h1>\n<p>As far as I know, there's nothing in the USB HID protocol that handles this\nkind of functionality (battery status, light meter…) in a standard way. So\nthe first task to accomplish is, unfortunately, to reverse engineer the\nprogram.</p>\n<p>I discovered a bit too late that <a href=\"http://www.youtube.com/watch?v=jMf55KVDPaE\">Drew Fisher did a good presentation on USB\nreverse engineering at 28c3</a>.\nYou might want to take a look at it if you want to reverse engineer on USB.\nI did not need it, but I learned a few things.</p>\n<p>Anyway, my plan was the following: run the Logitech application inside a\nvirtual machine running Windows, give it direct access to the USB keyboard,\nand sniff what happens on the USB wire.</p>\n<p>To achieve that, you need a virtual machine emulator that can do USB\npass-through. Both <a href=\"http://www.linux-kvm.org/page/Main_Page\">KVM</a> and\n<a href=\"https://www.virtualbox.org/\">VirtualBox</a> can do that, but VirtualBox works\nmuch better with USB and allow hot(un)plugging of devices, so I used it.</p>\n<p>To sniff what happens on the USB, you need to load the <em>usbmon</em> Linux kernel\nmodule. Simply doing <code>modprobe usbmon</code> will work. You can then\nuse <a href=\"http://www.wireshark.org/\">Wireshark</a> which know how to use <em>usbmon</em>\ndevices and understand the USB protocol.</p>\n<h2>USB stuff you need to know</h2>\n<p>You don't need to know much about USB to understand what I'll write about\nbelow, but for the sake of comprehensibility I'll write a couple of things\nhere before jumping in.</p>\n<p>To communicate with an USB device, we communicate with one of its\n<em>endpoints</em>. Endpoints are regrouped into an <em>interface</em>. Interfaces are\nregrouped into a <em>configuration</em>. A device might contains one or several\nconfigurations.</p>\n<p>There's also several types of packets in the USB wire protocol, and at least\ntwo of them interest us there, they are:</p>\n<ul>\n<li>Interrupt packets, a packet send spontaneously;</li>\n<li>Controls packets, used for command and status operations.</li>\n</ul>\n<p>All of this and more is well (and better) explained in the <a href=\"http://lwn.net/images/pdf/LDD3/ch13.pdf\">chapter\n13</a> of <a href=\"http://lwn.net/Kernel/LDD3/\">Linux Device Drivers, Third\nEdition</a>.</p>\n<h2>Sniffed data</h2>\n<p>Once everything was set-up, I ran my beloved Wireshark. There's a\nan <abbr title=\"USB Request Block\">URB</abbr> of type <em>interrupt</em> sent each\ntime you press any key with some data in it. Therefore I advise you to plug\nanother keyboard (or use the laptop keyboard if you're doing this on a\nlaptop), otherwise you'll get crazy trying to sniff the keyboard you're\ntyping on.</p>\n<p>At this point, just launching the application does a bunch of USB traffic.\nPressing the \"light\" button on the keyboard makes even more USB packets\ncoming in and out. Here's the interesting packets that I noticed once I\nexcluded the noise:</p>\n<ul>\n<li>When pressing the \"light\" button, an URB of type <em>interrupt</em> is sent by the\nkeyboard to the computer;</li>\n<li>An URB <em>control</em> packet is sent by the computer to the keyboard in\nresponse;</li>\n<li>Regularly URB <em>interrupt</em> packets are sent just after.</li>\n</ul>\n<p>With all this, the next step was clear: understand the packets and reproduce\nthat exchange under Linux.</p>\n<h2>What the packets mean</h2>\n<h3>The \"go for the light meter\" packet</h3>\n<p>The packet sent from the computer to the keyboard is the following.</p>\n<figure>\n<pre>Frame 17: 71 bytes on wire (568 bits), 71 bytes captured (568 bits)\nFrame Length: 71 bytes (568 bits)\nCapture Length: 71 bytes (568 bits)\nUSB URB\nURB id: 0xffff880161997240\nURB type: URB_SUBMIT ('S')\nURB transfer type: URB_CONTROL (0x02)\nEndpoint: 0x00, Direction: OUT\n0... .... = Direction: OUT (0)\n.000 0000 = Endpoint value: 0\nDevice: 6\nURB bus id: 1\nDevice setup request: relevant (0)\nData: present (0)\nURB sec: 1340124450\nURB usec: 495643\nURB status: Operation now in progress (-EINPROGRESS) (-115)\nURB length [bytes]: 7\nData length [bytes]: 7\n[Response in: 18]\n[bInterfaceClass: HID (0x03)]\nURB setup\nbmRequestType: 0x21\n0... .... = Direction: Host-to-device\n.01. .... = Type: Class (0x01)\n...0 0001 = Recipient: Interface (0x01)\nbRequest: SET_REPORT (0x09)\nwValue: 0x0210\nReportID: 16\nReportType: Output (2)\nwIndex: 2\nwLength: 7\n0000  40 72 99 61 01 88 ff ff 53 02 00 06 01 00 00 00   @r.a....S.......\n0010  22 ad e0 4f 00 00 00 00 1b 90 07 00 8d ff ff ff   \"..O............\n0020  07 00 00 00 07 00 00 00 21 09 10 02 02 00 07 00   ........!.......\n0030  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\n0040  10 01 09 03 78 01 00                              ....x..\n</pre>\n</figure>\n<p>What's here interesting is the last part representing the data. <em>wLength</em>\nsays that the length of the data is 7 bytes, so let's take a look at those 7\nbytes: <code>10 01 09 03 78 01 00</code>.</p>\n<p>Well, actually, you can't decode them like that, unless you're a freak or a\nLogitech engineer. And I have actually no idea what they mean. But sending\nthis to the keyboard will trigger an interesting thing: the keyboard will\nstart sending URB interrupt with some data without you pressing any more key.</p>\n<h3>The \"light meter and battery values\" packet</h3>\n<p>This is most interesting packet. This is the one sent by the keyboard to the\nhost and that contains the data we want to retrieve.</p>\n<figure>\n<pre>Frame 1467: 84 bytes on wire (672 bits), 84 bytes captured (672 bits)\nFrame Length: 84 bytes (672 bits)\nCapture Length: 84 bytes (672 bits)\nUSB URB\nURB id: 0xffff88010c43c380\nURB type: URB_COMPLETE ('C')\nURB transfer type: URB_INTERRUPT (0x01)\nEndpoint: 0x83, Direction: IN\n1... .... = Direction: IN (1)\n.000 0011 = Endpoint value: 3\nDevice: 2\nURB bus id: 6\nDevice setup request: not relevant ('-')\nData: present (0)\nURB sec: 1334953309\nURB usec: 728740\nURB status: Success (0)\nURB length [bytes]: 20\nData length [bytes]: 20\n[Request in: 1466]\n[Time from request: 0.992374000 seconds]\n[bInterfaceClass: Unknown (0xffff)]\nLeftover Capture Data: 1102091039000c061d474f4f4400000000000000\n0000  80 c3 43 0c 01 88 ff ff 43 01 83 02 06 00 2d 00   ..C.....C.....-.\n0010  5d c5 91 4f 00 00 00 00 a4 1e 0b 00 00 00 00 00   ]..O............\n0020  14 00 00 00 14 00 00 00 00 00 00 00 00 00 00 00   ................\n0030  02 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00   ................\n0040  11 02 09 10 39 00 0c 06 1d 47 4f 4f 44 00 00 00   ....9....GOOD...\n0050  00 00 00 00                                       ....\n</pre>\n</figure>\n<p>This packets come in regularly (1 per second) on the wire for some time once\nyou sent the \"go for the light meter\" packet. At one point they are emitted\nless often and do not contain the value for the light meter anymore,\nsuggesting that the control packet sent earlier triggers the activation of\nthe light meter for a defined period.</p>\n<p>Now you probably wonder where the data are in this. They're in the 20 bytes\nleftover in the capture data part, indicated by Wireshark, at the end of the\npacket: <code>11 02 09 10 39 00 0c 06 1d 47 4f 4f 44 00 00 00 00 00 00 00</code>.</p>\n<p>Fortunately, it was easy to decode. Knowing we're looking for 2 values\n(battery charge and light meter), we just need to observe and compare the\npacket emitted on the wire with the values displayed by the Logitech Solar\nApp.</p>\n<p>To achieve this, I looked both at the <em>Logitech Solar App</em> and <em>Wireshark</em>\nwhile bringing more and more light near the keyboard, increasing the lux\nvalue received by the meter on the Solar App, and saw that the fields\nrepresented in blue (see below) where changing in Wireshark. Since 2 bytes\nwere changing, I guessed that it was coded on 16 bits, and therefore it was\neasy to correlate the value with the Solar App.</p>\n<figure>\n<pre>[ ....<span style=\"color: red;\">9</span><span style=\"color: blue;\">..</span>..<span style=\"color: green;\">GOOD</span>....... ]\n11 02 09 10 <span style=\"color: red;\">39</span> <span style=\"color: blue;\">00 0c</span> 06 1d <span style=\"color: green;\">47 4f 4f 44</span> 00 00 00 00 00 00 00\n4 bytes - <span style=\"color: red;\">1 byte for battery charge</span> - <span style=\"color: blue;\">2 bytes for light meter</span> - 2 bytes - <span style=\"color: green;\">4 bytes for GOOD</span> - 7 bytes\n</pre>\n</figure>\n<p>In this example, the battery has a charge of <code>0x39 = 57 %</code> and\nthe light meter receives <code>0x0c = 12 lux</code> of light. It's basically\ndark, and that makes sense: it was night and the light was off in my office,\nthe only light being the one coming from my screen.</p>\n<p>I've no idea what the <code>GOOD</code> part of the packet is about, but\nit's present in every packet and it's actually very handy to recognize such\na packet. Therefore I'm considering this as some sort of useful mark for\nnow.</p>\n<p>For the other bytes, they were always the same (<code>0x11 0x2 0x9\n0x10</code> at the beginning, 7 times <code>0x00</code> at the end). The 2\nbytes between the light meter and GOOD probably mean something, but I've no\nidea what for now.</p>\n<h1>Building our solar app</h1>\n<p>Now we've enough information to build our own very basic solar application.\nWe know how to triggers the light meter, and we know how to decode the\npackets.</p>\n<p>We're going to write a small application using\n<a href=\"http://www.libusb.org/\">libusb</a>. Here's a quick example. It's not perfect\nand does not check for error codes, be careful.</p>\n<figure>\n<pre class=\"prettyprint\">/* Written by Julien Danjou  in 2012 */\n#include &lt;linux/hid.h&gt;\n#include &lt;libusb.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\nint main(void)\n{\nlibusb_context *ctx;\nlibusb_init(&amp;ctx);\nlibusb_set_debug(ctx, 3);\n/* Look at the keyboard based on vendor and device id */\nlibusb_device_handle *device_handle = libusb_open_device_with_vid_pid(ctx, 0x046d, 0xc52b);\nfprintf(stderr, \"Found keyboard 0x%p\\n\", device_handle);\nlibusb_device *device = libusb_get_device(device_handle);\nstruct libusb_device_descriptor desc;\nlibusb_get_device_descriptor(device, &amp;desc);\nfor(uint8_t config_index = 0; config_index &lt; desc.bNumConfigurations; config_index++)\n{\nstruct libusb_config_descriptor *config;\nlibusb_get_config_descriptor(device, config_index, &amp;config);\n/* We know we want interface 2 */\nint iface_index = 2;\nconst struct libusb_interface *iface = &amp;config-&gt;interface[iface_index];\nfor (int altsetting_index = 0; altsetting_index &lt; iface-&gt;num_altsetting; altsetting_index++)\n{\nconst struct libusb_interface_descriptor *iface_desc = &amp;iface-&gt;altsetting[al&gt;tsetting_index];\nif (iface_desc-&gt;bInterfaceClass == LIBUSB_CLASS_HID)\n{\nlibusb_detach_kernel_driver(device_handle, iface_index);\nlibusb_claim_interface(device_handle, iface_index);\nunsigned char ret[65535];\nunsigned char payload[] = \"\\x10\\x02\\x09\\x03\\x78\\x01\\x00\";\nif(libusb_control_transfer(device_handle,\nLIBUSB_REQUEST_TYPE_CLASS | LIBUSB_RECIPIENT_INTERFACE,\nHID_REQ_SET_REPORT,\n0x0210, iface_index, payload, sizeof(payload) - 1, 10000))\n{\nint actual_length = 0;\nwhile(actual_length != 20 || strncmp((const char *) &amp;ret[9], \"GOOD\", 4))\nlibusb_interrupt_transfer(device_handle,\niface_desc-&gt;endpoint[0].bEndpointAddress,\nret, sizeof(ret), &amp;actual_length, 100000);\nuint16_t lux = ret[5] &lt;&lt; 8 | ret[6];\nfprintf(stderr, \"Charge: %d %%\\nLight: %d lux\\n\", ret[4], lux);\n}\nlibusb_release_interface(device_handle, iface_index);\nlibusb_attach_kernel_driver(device_handle, iface_index);\n}\n}\n}\nlibusb_close(device_handle);\nlibusb_exit(ctx);\n}\n</pre>\n</figure>\n<p>What the program is doing is the following:</p>\n<ul>\n<li>Request for the Unifying Receiver device based on vendor and product ID</li>\n<li>Get the HID interface</li>\n<li>Detach the HID interface from the kernel driver</li>\n<li>Claim the interface</li>\n<li>Send a control packets, were parameters are defined using the same data we captured earlier</li>\n<li>Read interrupt packets coming in until we receive one we recognize (length\n20 containing the \"GOOD\" string)</li>\n<li>Decode the content (battery charge &amp; light meter)</li>\n<li>Release the interface</li>\n<li>Reattach the kernel driver to the interface</li>\n</ul>\n<p>This gives the following:</p>\n<pre>Found keyboard 0x0x24ec8e0\nCharge: 64 %\nLight: 21 lux\n</pre>\n<p>Challenge accomplished!</p>\n<h1>To be continued</h1>\n<p>Unfortunately, this approach has at least one major drawback. We have to\ndisconnect the <em>Logitech Unifying Receiver</em> from the kernel. That means that\nwhile we're waiting for the packet, we're dropping packets corresponding to\nother events from every connected device (key presses, pointer motions…).</p>\n<p>In order to solve that, I sent a request for help on the\n<a href=\"http://vger.kernel.org/vger-lists.html#linux-input\">linux-input</a> mailing\nlist. That way, I learned that Logitech is actually using the HID++ protocol\nto communicate with the devices using the Unifying Receiver. <a href=\"http://6xq.net\">Lars-Dominik\nBraun</a> managed to get the HID++ specifications from Logitech\nand <a href=\"http://6xq.net/git/lars/lshidpp.git/plain/doc/logitech_hidpp_2.0_specification_draft_2012-06-04.pdf\">published\nthem</a>\nwith their authorization.</p>\n<p>This opens a whole new world. With that document, I may be able to\nunderstand the part I reverse engineered and convert this to a more useful\nand generic library using the hidraw interface (so we don't have to\ndisconnect the devices from the kernel driver).</p>" "http://julien.danjou.info/blog/2012/logitech-k750-linux-support" (20475 6480) new 7 nil nil ((title ((type . "html")) "Julien Danjou: Logitech K750 keyboard and Unifying Receiver Linux support") (link ((href . "http://julien.danjou.info/blog/2012/logitech-k750-linux-support"))) (id nil "http://julien.danjou.info/blog/2012/logitech-k750-linux-support") (updated nil "2012-07-09T17:48:00+00:00") (content ((type . "html")) "<p>A year ago, I bought a <a href=\"http://www.logitech.com/keyboards/keyboards/k750-keyboard\">Logitech Wireless Solar Keyboard\nK750</a>. I'm\nparticularly picky on keyboards, but this one is good. It has an incredible\nuseful feature: while being wireless, it has no need for disposable or\nrechargeable batteries, it uses solar power!</p>\n<p><img alt=\"Logitech Wireless Solar Keyboard K750\" src=\"http://julien.danjou.info/media/images/logitech-wireless-solar-keyboard-k750.png\" /></p>\n<p>My problem is that there's obviously no way to know the battery status from\nLinux, the provided application only working on Windows.</p>\n<p>And one dark night, while fragging on QuakeLive, my keyboard stopped\nworking: it had no battery left. This activity being quite energy consuming,\nit emptied the whole battery.</p>\n<p>Someone should write code to get the battery status and light meter from\nLinux: challenge accepted!</p>\n<h1>How the keyboard works</h1>\n<p><span class=\"pull-right\">\n<img alt=\"Logitech Unifying Receiver\" src=\"http://julien.danjou.info/media/images/logitech-unifying.jpg\" />\n</span></p>\n<p>This keyboard, like many of the new wireless devices from Logitech, uses the\n<em>Unifying</em> interface. It's an USB receiver that can be attached up to 6\ndifferents devices (mouse, keyboards…). On old Linux kernel, the <em>Unifying</em>\nreceiver is recognized as only one keyboard and/or one mouse device.</p>\n<p>Recently, a driver called <em>hid-logitech-dj</em> has been added to the Linux\nkernel. With this driver, each device attached to the receiver is recognized\nas one different device.</p>\n<h1>What the Logitech application does</h1>\n<p><span class=\"pull-left\">\n<img alt=\"Logitech Solar App\" src=\"http://julien.danjou.info/media/images/logitech-solar-app.png\" />\n</span></p>\n<p>The Logitech application under Windows works that way: you launch it, and it\ndisplays the battery charge level. On the keyboard, there's a special\n\"light\" button (up right). When pressed, a LED will light up on the\nkeyboard: green if the keyboard is receiving enough light and is charging,\nred if the keyboard does not receive enough light and is therefore\ndischarging. Pushing this same button while the application is running will\nmakes the light meter activated: the application will tell you how much\n<a href=\"http://en.wikipedia.org/wiki/Lux\">lux</a> your keyboard is receiving.</p>\n<h1>Let's reverse engineer this</h1>\n<p>As far as I know, there's nothing in the USB HID protocol that handles this\nkind of functionality (battery status, light meter…) in a standard way. So\nthe first task to accomplish is, unfortunately, to reverse engineer the\nprogram.</p>\n<p>I discovered a bit too late that <a href=\"http://www.youtube.com/watch?v=jMf55KVDPaE\">Drew Fisher did a good presentation on USB\nreverse engineering at 28c3</a>.\nYou might want to take a look at it if you want to reverse engineer on USB.\nI did not need it, but I learned a few things.</p>\n<p>Anyway, my plan was the following: run the Logitech application inside a\nvirtual machine running Windows, give it direct access to the USB keyboard,\nand sniff what happens on the USB wire.</p>\n<p>To achieve that, you need a virtual machine emulator that can do USB\npass-through. Both <a href=\"http://www.linux-kvm.org/page/Main_Page\">KVM</a> and\n<a href=\"https://www.virtualbox.org/\">VirtualBox</a> can do that, but VirtualBox works\nmuch better with USB and allow hot(un)plugging of devices, so I used it.</p>\n<p>To sniff what happens on the USB, you need to load the <em>usbmon</em> Linux kernel\nmodule. Simply doing <code>modprobe usbmon</code> will work. You can then\nuse <a href=\"http://www.wireshark.org/\">Wireshark</a> which know how to use <em>usbmon</em>\ndevices and understand the USB protocol.</p>\n<h2>USB stuff you need to know</h2>\n<p>You don't need to know much about USB to understand what I'll write about\nbelow, but for the sake of comprehensibility I'll write a couple of things\nhere before jumping in.</p>\n<p>To communicate with an USB device, we communicate with one of its\n<em>endpoints</em>. Endpoints are regrouped into an <em>interface</em>. Interfaces are\nregrouped into a <em>configuration</em>. A device might contains one or several\nconfigurations.</p>\n<p>There's also several types of packets in the USB wire protocol, and at least\ntwo of them interest us there, they are:</p>\n<ul>\n<li>Interrupt packets, a packet send spontaneously;</li>\n<li>Controls packets, used for command and status operations.</li>\n</ul>\n<p>All of this and more is well (and better) explained in the <a href=\"http://lwn.net/images/pdf/LDD3/ch13.pdf\">chapter\n13</a> of <a href=\"http://lwn.net/Kernel/LDD3/\">Linux Device Drivers, Third\nEdition</a>.</p>\n<h2>Sniffed data</h2>\n<p>Once everything was set-up, I ran my beloved Wireshark. There's a\nan <abbr title=\"USB Request Block\">URB</abbr> of type <em>interrupt</em> sent each\ntime you press any key with some data in it. Therefore I advise you to plug\nanother keyboard (or use the laptop keyboard if you're doing this on a\nlaptop), otherwise you'll get crazy trying to sniff the keyboard you're\ntyping on.</p>\n<p>At this point, just launching the application does a bunch of USB traffic.\nPressing the \"light\" button on the keyboard makes even more USB packets\ncoming in and out. Here's the interesting packets that I noticed once I\nexcluded the noise:</p>\n<ul>\n<li>When pressing the \"light\" button, an URB of type <em>interrupt</em> is sent by the\n  keyboard to the computer;</li>\n<li>An URB <em>control</em> packet is sent by the computer to the keyboard in\n  response;</li>\n<li>Regularly URB <em>interrupt</em> packets are sent just after.</li>\n</ul>\n<p>With all this, the next step was clear: understand the packets and reproduce\nthat exchange under Linux.</p>\n<h2>What the packets mean</h2>\n<h3>The \"go for the light meter\" packet</h3>\n<p>The packet sent from the computer to the keyboard is the following.</p>\n<figure>\n<pre>Frame 17: 71 bytes on wire (568 bits), 71 bytes captured (568 bits)\n    Frame Length: 71 bytes (568 bits)\n    Capture Length: 71 bytes (568 bits)\nUSB URB\n    URB id: 0xffff880161997240\n    URB type: URB_SUBMIT ('S')\n    URB transfer type: URB_CONTROL (0x02)\n    Endpoint: 0x00, Direction: OUT\n        0... .... = Direction: OUT (0)\n        .000 0000 = Endpoint value: 0\n    Device: 6\n    URB bus id: 1\n    Device setup request: relevant (0)\n    Data: present (0)\n    URB sec: 1340124450\n    URB usec: 495643\n    URB status: Operation now in progress (-EINPROGRESS) (-115)\n    URB length [bytes]: 7\n    Data length [bytes]: 7\n    [Response in: 18]\n    [bInterfaceClass: HID (0x03)]\n    URB setup\n        bmRequestType: 0x21\n            0... .... = Direction: Host-to-device\n            .01. .... = Type: Class (0x01)\n            ...0 0001 = Recipient: Interface (0x01)\n    bRequest: SET_REPORT (0x09)\n    wValue: 0x0210\n        ReportID: 16\n        ReportType: Output (2)\n    wIndex: 2\n    wLength: 7\n0000  40 72 99 61 01 88 ff ff 53 02 00 06 01 00 00 00   @r.a....S.......\n0010  22 ad e0 4f 00 00 00 00 1b 90 07 00 8d ff ff ff   \"..O............\n0020  07 00 00 00 07 00 00 00 21 09 10 02 02 00 07 00   ........!.......\n0030  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\n0040  10 01 09 03 78 01 00                              ....x..\n</pre>\n</figure>\n\n<p>What's here interesting is the last part representing the data. <em>wLength</em>\nsays that the length of the data is 7 bytes, so let's take a look at those 7\nbytes: <code>10 01 09 03 78 01 00</code>.</p>\n<p>Well, actually, you can't decode them like that, unless you're a freak or a\nLogitech engineer. And I have actually no idea what they mean. But sending\nthis to the keyboard will trigger an interesting thing: the keyboard will\nstart sending URB interrupt with some data without you pressing any more key.</p>\n<h3>The \"light meter and battery values\" packet</h3>\n<p>This is most interesting packet. This is the one sent by the keyboard to the\nhost and that contains the data we want to retrieve.</p>\n<figure>\n<pre>Frame 1467: 84 bytes on wire (672 bits), 84 bytes captured (672 bits)\n    Frame Length: 84 bytes (672 bits)\n    Capture Length: 84 bytes (672 bits)\nUSB URB\n    URB id: 0xffff88010c43c380\n    URB type: URB_COMPLETE ('C')\n    URB transfer type: URB_INTERRUPT (0x01)\n    Endpoint: 0x83, Direction: IN\n        1... .... = Direction: IN (1)\n        .000 0011 = Endpoint value: 3\n    Device: 2\n    URB bus id: 6\n    Device setup request: not relevant ('-')\n    Data: present (0)\n    URB sec: 1334953309\n    URB usec: 728740\n    URB status: Success (0)\n    URB length [bytes]: 20\n    Data length [bytes]: 20\n    [Request in: 1466]\n    [Time from request: 0.992374000 seconds]\n    [bInterfaceClass: Unknown (0xffff)]\nLeftover Capture Data: 1102091039000c061d474f4f4400000000000000\n\n0000  80 c3 43 0c 01 88 ff ff 43 01 83 02 06 00 2d 00   ..C.....C.....-.\n0010  5d c5 91 4f 00 00 00 00 a4 1e 0b 00 00 00 00 00   ]..O............\n0020  14 00 00 00 14 00 00 00 00 00 00 00 00 00 00 00   ................\n0030  02 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00   ................\n0040  11 02 09 10 39 00 0c 06 1d 47 4f 4f 44 00 00 00   ....9....GOOD...\n0050  00 00 00 00                                       ....\n\n</pre>\n</figure>\n\n<p>This packets come in regularly (1 per second) on the wire for some time once\nyou sent the \"go for the light meter\" packet. At one point they are emitted\nless often and do not contain the value for the light meter anymore,\nsuggesting that the control packet sent earlier triggers the activation of\nthe light meter for a defined period.</p>\n<p>Now you probably wonder where the data are in this. They're in the 20 bytes\nleftover in the capture data part, indicated by Wireshark, at the end of the\npacket: <code>11 02 09 10 39 00 0c 06 1d 47 4f 4f 44 00 00 00 00 00 00 00</code>.</p>\n<p>Fortunately, it was easy to decode. Knowing we're looking for 2 values\n(battery charge and light meter), we just need to observe and compare the\npacket emitted on the wire with the values displayed by the Logitech Solar\nApp.</p>\n<p>To achieve this, I looked both at the <em>Logitech Solar App</em> and <em>Wireshark</em>\nwhile bringing more and more light near the keyboard, increasing the lux\nvalue received by the meter on the Solar App, and saw that the fields\nrepresented in blue (see below) where changing in Wireshark. Since 2 bytes\nwere changing, I guessed that it was coded on 16 bits, and therefore it was\neasy to correlate the value with the Solar App.</p>\n<figure>\n<pre>[ ....<span style=\"color: red;\">9</span><span style=\"color: blue;\">..</span>..<span style=\"color: green;\">GOOD</span>....... ]\n11 02 09 10 <span style=\"color: red;\">39</span> <span style=\"color: blue;\">00 0c</span> 06 1d <span style=\"color: green;\">47 4f 4f 44</span> 00 00 00 00 00 00 00\n4 bytes - <span style=\"color: red;\">1 byte for battery charge</span> - <span style=\"color: blue;\">2 bytes for light meter</span> - 2 bytes - <span style=\"color: green;\">4 bytes for GOOD</span> - 7 bytes\n</pre>\n</figure>\n\n<p>In this example, the battery has a charge of <code>0x39 = 57 %</code> and\nthe light meter receives <code>0x0c = 12 lux</code> of light. It's basically\ndark, and that makes sense: it was night and the light was off in my office,\nthe only light being the one coming from my screen.</p>\n<p>I've no idea what the <code>GOOD</code> part of the packet is about, but\nit's present in every packet and it's actually very handy to recognize such\na packet. Therefore I'm considering this as some sort of useful mark for\nnow.</p>\n<p>For the other bytes, they were always the same (<code>0x11 0x2 0x9\n0x10</code> at the beginning, 7 times <code>0x00</code> at the end). The 2\nbytes between the light meter and GOOD probably mean something, but I've no\nidea what for now.</p>\n<h1>Building our solar app</h1>\n<p>Now we've enough information to build our own very basic solar application.\nWe know how to triggers the light meter, and we know how to decode the\npackets.</p>\n<p>We're going to write a small application using\n<a href=\"http://www.libusb.org/\">libusb</a>. Here's a quick example. It's not perfect\nand does not check for error codes, be careful.</p>\n<figure>\n<pre class=\"prettyprint\">/* Written by Julien Danjou  in 2012 */\n\n#include &lt;linux/hid.h&gt;\n\n#include &lt;libusb.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    libusb_context *ctx;\n    libusb_init(&amp;ctx);\n    libusb_set_debug(ctx, 3);\n\n    /* Look at the keyboard based on vendor and device id */\n    libusb_device_handle *device_handle = libusb_open_device_with_vid_pid(ctx, 0x046d, 0xc52b);\n\n    fprintf(stderr, \"Found keyboard 0x%p\\n\", device_handle);\n\n    libusb_device *device = libusb_get_device(device_handle);\n\n    struct libusb_device_descriptor desc;\n\n    libusb_get_device_descriptor(device, &amp;desc);\n\n    for(uint8_t config_index = 0; config_index &lt; desc.bNumConfigurations; config_index++)\n    {\n        struct libusb_config_descriptor *config;\n\n        libusb_get_config_descriptor(device, config_index, &amp;config);\n\n        /* We know we want interface 2 */\n        int iface_index = 2;\n        const struct libusb_interface *iface = &amp;config-&gt;interface[iface_index];\n\n        for (int altsetting_index = 0; altsetting_index &lt; iface-&gt;num_altsetting; altsetting_index++)\n        {\n            const struct libusb_interface_descriptor *iface_desc = &amp;iface-&gt;altsetting[al&gt;tsetting_index];\n\n            if (iface_desc-&gt;bInterfaceClass == LIBUSB_CLASS_HID)\n            {\n                libusb_detach_kernel_driver(device_handle, iface_index);\n                libusb_claim_interface(device_handle, iface_index);\n\n                unsigned char ret[65535];\n\n                unsigned char payload[] = \"\\x10\\x02\\x09\\x03\\x78\\x01\\x00\";\n\n                if(libusb_control_transfer(device_handle,\n                                           LIBUSB_REQUEST_TYPE_CLASS | LIBUSB_RECIPIENT_INTERFACE,\n                                           HID_REQ_SET_REPORT,\n                                           0x0210, iface_index, payload, sizeof(payload) - 1, 10000))\n                {\n                    int actual_length = 0;\n\n                    while(actual_length != 20 || strncmp((const char *) &amp;ret[9], \"GOOD\", 4))\n                        libusb_interrupt_transfer(device_handle,\n                                                  iface_desc-&gt;endpoint[0].bEndpointAddress,\n                                                  ret, sizeof(ret), &amp;actual_length, 100000);\n\n                    uint16_t lux = ret[5] &lt;&lt; 8 | ret[6];\n\n                    fprintf(stderr, \"Charge: %d %%\\nLight: %d lux\\n\", ret[4], lux);\n                }\n\n                libusb_release_interface(device_handle, iface_index);\n                libusb_attach_kernel_driver(device_handle, iface_index);\n            }\n        }\n    }\n\n    libusb_close(device_handle);\n    libusb_exit(ctx);\n}\n\n</pre>\n</figure>\n\n<p>What the program is doing is the following:</p>\n<ul>\n<li>Request for the Unifying Receiver device based on vendor and product ID</li>\n<li>Get the HID interface</li>\n<li>Detach the HID interface from the kernel driver</li>\n<li>Claim the interface</li>\n<li>Send a control packets, were parameters are defined using the same data we captured earlier</li>\n<li>Read interrupt packets coming in until we receive one we recognize (length\n  20 containing the \"GOOD\" string)</li>\n<li>Decode the content (battery charge &amp; light meter)</li>\n<li>Release the interface</li>\n<li>Reattach the kernel driver to the interface</li>\n</ul>\n<p>This gives the following:</p>\n<pre>Found keyboard 0x0x24ec8e0\nCharge: 64 %\nLight: 21 lux\n</pre>\n\n<p>Challenge accomplished!</p>\n<h1>To be continued</h1>\n<p>Unfortunately, this approach has at least one major drawback. We have to\ndisconnect the <em>Logitech Unifying Receiver</em> from the kernel. That means that\nwhile we're waiting for the packet, we're dropping packets corresponding to\nother events from every connected device (key presses, pointer motions…).</p>\n<p>In order to solve that, I sent a request for help on the\n<a href=\"http://vger.kernel.org/vger-lists.html#linux-input\">linux-input</a> mailing\nlist. That way, I learned that Logitech is actually using the HID++ protocol\nto communicate with the devices using the Unifying Receiver. <a href=\"http://6xq.net\">Lars-Dominik\nBraun</a> managed to get the HID++ specifications from Logitech\nand <a href=\"http://6xq.net/git/lars/lshidpp.git/plain/doc/logitech_hidpp_2.0_specification_draft_2012-06-04.pdf\">published\nthem</a>\nwith their authorization.</p>\n<p>This opens a whole new world. With that document, I may be able to\nunderstand the part I reverse engineered and convert this to a more useful\nand generic library using the hidraw interface (so we don't have to\ndisconnect the devices from the kernel driver).</p>") (author nil (name nil "Julien Danjou") (uri nil "http://julien.danjou.info/blog/")) (source nil (title ((type . "html")) "jd:/dev/blog") (link ((rel . "self") (href . "http://julien.danjou.info/blog/index.xml"))) (id nil "http://julien.danjou.info/blog/index.xml")))) ("Got Emacs?: Interesting Emacs linkfest" "<div dir=\"ltr\" style=\"text-align: left;\">\nJust so you know, that I'm snowed under again and it's criminal not to share my blog laziness with all and sundry.<br />\n<br />\nAnother <a href=\"http://comments.gmane.org/gmane.emacs.help/85636\" target=\"_blank\">Emacs mail client/backend choice discussion</a> that crops up regularly in gnu.emacs.help.  If you haven't made up your mind, this won't help either but it sure helps in being more indecisive.  I dunno.<br />\n<br />\nRunning up and down your C code while coding and want a better way to track and come back to where you last coded?  Well, C K Kashyap seems to miss his vi keys and whaddya know?  Emacs has some key bindings for that and more as you can see in the thread <a href=\"http://comments.gmane.org/gmane.emacs.help/85708\" target=\"_blank\">'Tips for quick jumping back and forth'</a>.  Take a look for various productivity tips.<br />\n<br />\nJohn Wiegley has been doing some wonderful stuff that might help people who are annoyed that Emacs hangs for 1.5 <strike>nano/micro/milli</strike> seconds before resuming when sending out mail messages or calling unknown executables instead of writing elisp functions to do the right thing(TM).  So he's gone ahead and posted <a href=\"http://permalink.gmane.org/gmane.emacs.sources/3634\">async.el</a>, followed  by <a href=\"http://permalink.gmane.org/gmane.emacs.sources/3635\">dired-async</a> and again followed by <a href=\"http://permalink.gmane.org/gmane.emacs.sources/3636\">smtpmail-async</a>. He's using the new fangled <a href=\"https://github.com/\">github</a> so all those of you clever enough to speak git, check it out.<br />\n<br />\nSeeing so much stuff, yours truly went ahead and asked whether this feature,async, is going to be part of Emacs main and the man actually responded to my email! Amazing.  For those chaps who thought Emacs Developers don't respond to feedback....tphthhp.   I kid, I kid.  (I should add, that all the <a href=\"http://blog.gmane.org/gmane.emacs.devel\" target=\"_blank\">Emacs-Devel</a> people I have contacted, have responded to me or to the list whenever I contacted them).<br />\n<br />\nJohn apparently never sleeps.  When the whole world is turning into Big Brother, you are encouraged to rat out yourself (and others) by tracking all the email addresses you send and store them, for later....beatings prolly?  Err...he's written <a href=\"http://www.blogger.com/\"><span id=\"goog_1797679105\"></span>gnus-harvest</a> <span id=\"goog_1797679106\"></span>that needs <a href=\"http://www.sqlite.org/\">sqlite</a> to store all the email addresses compared to <span>.mailrc</span> or <a href=\"http://emacswiki.org/emacs/CategoryBbdb\">BBDB</a>.<br />\n<br />\nAnd I just noticed that <a href=\"http://www.tug.org/texlive/\">Texlive 2012 is now available</a>, thanks to <a href=\"https://groups.google.com/group/comp.text.tex/browse_thread/thread/42227d8aea6dffc8\" target=\"_blank\">this texlive post</a> in <a href=\"https://groups.google.com/group/comp.text.tex/topics?gvc=1\" target=\"_blank\">comp.text.tex</a><br />\n<br /><br />\nThat's it as I head back to my cave.</div><div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/3165518189103293420-979789299985712468?l=emacsworld.blogspot.com\" width=\"1\" /></div>\n<p><a href=\"http://feedads.g.doubleclick.net/~a/KT4NalVSFlm1Tm76psuyvqklEvE/0/da\"><img border=\"0\" ismap=\"true\" src=\"http://feedads.g.doubleclick.net/~a/KT4NalVSFlm1Tm76psuyvqklEvE/0/di\" /></a><br />\n<a href=\"http://feedads.g.doubleclick.net/~a/KT4NalVSFlm1Tm76psuyvqklEvE/1/da\"><img border=\"0\" ismap=\"true\" src=\"http://feedads.g.doubleclick.net/~a/KT4NalVSFlm1Tm76psuyvqklEvE/1/di\" /></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/GotEmacs?a=3p6ATmZylAc:tyaUSCJ5qS4:yIl2AUoC8zA\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/GotEmacs?d=yIl2AUoC8zA\" /></a> <a href=\"http://feeds.feedburner.com/~ff/GotEmacs?a=3p6ATmZylAc:tyaUSCJ5qS4:qj6IDK7rITs\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/GotEmacs?d=qj6IDK7rITs\" /></a> <a href=\"http://feeds.feedburner.com/~ff/GotEmacs?a=3p6ATmZylAc:tyaUSCJ5qS4:gIN9vFwOqvQ\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/GotEmacs?i=3p6ATmZylAc:tyaUSCJ5qS4:gIN9vFwOqvQ\" /></a>\n</div><img height=\"1\" src=\"http://feeds.feedburner.com/~r/GotEmacs/~4/3p6ATmZylAc\" width=\"1\" />" "http://feedproxy.google.com/~r/GotEmacs/~3/3p6ATmZylAc/interesting-emacs-linkfest.html" (20475 5367) new 8 nil nil ((title ((type . "html")) "Got Emacs?: Interesting Emacs linkfest") (link ((href . "http://feedproxy.google.com/~r/GotEmacs/~3/3p6ATmZylAc/interesting-emacs-linkfest.html"))) (id nil "tag:blogger.com,1999:blog-3165518189103293420.post-979789299985712468") (updated nil "2012-07-09T17:29:27+00:00") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\">\nJust so you know, that I'm snowed under again and it's criminal not to share my blog laziness with all and sundry.<br />\n<br />\nAnother <a href=\"http://comments.gmane.org/gmane.emacs.help/85636\" target=\"_blank\">Emacs mail client/backend choice discussion</a> that crops up regularly in gnu.emacs.help.  If you haven't made up your mind, this won't help either but it sure helps in being more indecisive.  I dunno.<br />\n<br />\nRunning up and down your C code while coding and want a better way to track and come back to where you last coded?  Well, C K Kashyap seems to miss his vi keys and whaddya know?  Emacs has some key bindings for that and more as you can see in the thread <a href=\"http://comments.gmane.org/gmane.emacs.help/85708\" target=\"_blank\">'Tips for quick jumping back and forth'</a>.  Take a look for various productivity tips.<br />\n<br />\nJohn Wiegley has been doing some wonderful stuff that might help people who are annoyed that Emacs hangs for 1.5 <strike>nano/micro/milli</strike> seconds before resuming when sending out mail messages or calling unknown executables instead of writing elisp functions to do the right thing(TM).  So he's gone ahead and posted <a href=\"http://permalink.gmane.org/gmane.emacs.sources/3634\">async.el</a>, followed  by <a href=\"http://permalink.gmane.org/gmane.emacs.sources/3635\">dired-async</a> and again followed by <a href=\"http://permalink.gmane.org/gmane.emacs.sources/3636\">smtpmail-async</a>. He's using the new fangled <a href=\"https://github.com/\">github</a> so all those of you clever enough to speak git, check it out.<br />\n<br />\nSeeing so much stuff, yours truly went ahead and asked whether this feature,async, is going to be part of Emacs main and the man actually responded to my email! Amazing.  For those chaps who thought Emacs Developers don't respond to feedback....tphthhp.   I kid, I kid.  (I should add, that all the <a href=\"http://blog.gmane.org/gmane.emacs.devel\" target=\"_blank\">Emacs-Devel</a> people I have contacted, have responded to me or to the list whenever I contacted them).<br />\n<br />\nJohn apparently never sleeps.  When the whole world is turning into Big Brother, you are encouraged to rat out yourself (and others) by tracking all the email addresses you send and store them, for later....beatings prolly?  Err...he's written <a href=\"http://www.blogger.com/\"><span id=\"goog_1797679105\"></span>gnus-harvest</a> <span id=\"goog_1797679106\"></span>that needs <a href=\"http://www.sqlite.org/\">sqlite</a> to store all the email addresses compared to <span>.mailrc</span> or <a href=\"http://emacswiki.org/emacs/CategoryBbdb\">BBDB</a>.<br />\n<br />\nAnd I just noticed that <a href=\"http://www.tug.org/texlive/\">Texlive 2012 is now available</a>, thanks to <a href=\"https://groups.google.com/group/comp.text.tex/browse_thread/thread/42227d8aea6dffc8\" target=\"_blank\">this texlive post</a> in <a href=\"https://groups.google.com/group/comp.text.tex/topics?gvc=1\" target=\"_blank\">comp.text.tex</a><br />\n<br /><br />\nThat's it as I head back to my cave.</div><div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/3165518189103293420-979789299985712468?l=emacsworld.blogspot.com\" width=\"1\" /></div>\n<p><a href=\"http://feedads.g.doubleclick.net/~a/KT4NalVSFlm1Tm76psuyvqklEvE/0/da\"><img border=\"0\" ismap=\"true\" src=\"http://feedads.g.doubleclick.net/~a/KT4NalVSFlm1Tm76psuyvqklEvE/0/di\" /></a><br />\n<a href=\"http://feedads.g.doubleclick.net/~a/KT4NalVSFlm1Tm76psuyvqklEvE/1/da\"><img border=\"0\" ismap=\"true\" src=\"http://feedads.g.doubleclick.net/~a/KT4NalVSFlm1Tm76psuyvqklEvE/1/di\" /></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/GotEmacs?a=3p6ATmZylAc:tyaUSCJ5qS4:yIl2AUoC8zA\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/GotEmacs?d=yIl2AUoC8zA\" /></a> <a href=\"http://feeds.feedburner.com/~ff/GotEmacs?a=3p6ATmZylAc:tyaUSCJ5qS4:qj6IDK7rITs\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/GotEmacs?d=qj6IDK7rITs\" /></a> <a href=\"http://feeds.feedburner.com/~ff/GotEmacs?a=3p6ATmZylAc:tyaUSCJ5qS4:gIN9vFwOqvQ\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/GotEmacs?i=3p6ATmZylAc:tyaUSCJ5qS4:gIN9vFwOqvQ\" /></a>\n</div><img height=\"1\" src=\"http://feeds.feedburner.com/~r/GotEmacs/~4/3p6ATmZylAc\" width=\"1\" />") (author nil (name nil "sivaram") (email nil "noreply@blogger.com") (uri nil "http://emacsworld.blogspot.com/")) (source nil (title ((type . "html")) "Got Emacs?") (subtitle ((type . "html")) "Postings on living in an Emacs world.  Posts will be mostly on using Emacs, related functions and tools.") (link ((rel . "self") (href . "http://feeds.feedburner.com/GotEmacs"))) (id nil "tag:blogger.com,1999:blog-3165518189103293420")))) ("Raimon Grau: Emacs 24 is frozen" "Emacs 24 entered the feature freeze state a couple of weeks ago, so it's the moment to install it and start fiddling with its new features (I want to try the editable occur buffer, and some asynchronous goodies for gnus).<br /><br />There have been a couple of posts in planet emacsen that explain how easy is to install  it in debian or ubuntu (natty).<br /><br />The thing is that I use an older ubuntu version and I had to compile it myself.  Not very problematic, but here's the couple of libs that I had to install before being able to compile it.  Obviously, you'll need the usual binutils and dev tools. also you'll need these packages.<br /><br />apt-get install autoconf texinfo libxpm-dev libgif-dev libgtk2.0-dev xserver-xorg-dev xorg-dev libfontconfig-dev libfreetype-dev libxft-dev  # probably, not everything is needed, but once you warm up, apt-get is too easy.<br /><br />Then, just get the code from the repo, and configure install in proper directory:<br /><br /><pre><br />git clone https://github.com/emacsmirror/emacs.git <br />cd emacs<br />./autogen.sh<br />./configure --prefix=~/emacs-24<br />make install</pre><br /><br />Now you have your emacs in ~/emacs-24/bin/emacs, and hopefully, everything will work from the beginning.  I had to disable a couple of lines in my .emacs file, but just minor things.<br /><br />Now it's time to try emacs-starter-kit 2.<div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/8696405790788556158-7264027342289447425?l=puntoblogspot.blogspot.com\" width=\"1\" /></div>" "http://puntoblogspot.blogspot.com/2011/10/emacs-24-is-frozen.html" (20474 41345) new 9 nil nil ((title ((type . "html")) "Raimon Grau: Emacs 24 is frozen") (link ((href . "http://puntoblogspot.blogspot.com/2011/10/emacs-24-is-frozen.html"))) (id nil "tag:blogger.com,1999:blog-8696405790788556158.post-7264027342289447425") (updated nil "2012-07-09T09:16:49+00:00") (content ((type . "html")) "Emacs 24 entered the feature freeze state a couple of weeks ago, so it's the moment to install it and start fiddling with its new features (I want to try the editable occur buffer, and some asynchronous goodies for gnus).<br /><br />There have been a couple of posts in planet emacsen that explain how easy is to install  it in debian or ubuntu (natty).<br /><br />The thing is that I use an older ubuntu version and I had to compile it myself.  Not very problematic, but here's the couple of libs that I had to install before being able to compile it.  Obviously, you'll need the usual binutils and dev tools. also you'll need these packages.<br /><br />apt-get install autoconf texinfo libxpm-dev libgif-dev libgtk2.0-dev xserver-xorg-dev xorg-dev libfontconfig-dev libfreetype-dev libxft-dev  # probably, not everything is needed, but once you warm up, apt-get is too easy.<br /><br />Then, just get the code from the repo, and configure install in proper directory:<br /><br /><pre><br />git clone https://github.com/emacsmirror/emacs.git <br />cd emacs<br />./autogen.sh<br />./configure --prefix=~/emacs-24<br />make install</pre><br /><br />Now you have your emacs in ~/emacs-24/bin/emacs, and hopefully, everything will work from the beginning.  I had to disable a couple of lines in my .emacs file, but just minor things.<br /><br />Now it's time to try emacs-starter-kit 2.<div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/8696405790788556158-7264027342289447425?l=puntoblogspot.blogspot.com\" width=\"1\" /></div>") (author nil (name nil "Raimon Grau") (email nil "noreply@blogger.com") (uri nil "http://puntoblogspot.blogspot.com/search/label/emacs")) (source nil (title ((type . "html")) "puntoblogspot") (subtitle ((type . "html")) "Technical stuff, mostly") (link ((rel . "self") (href . "http://www.blogger.com/feeds/8696405790788556158/posts/default/-/emacs"))) (id nil "tag:blogger.com,1999:blog-8696405790788556158")))) ("Emacs-fu: replace-regexp and numbering lines" "<div class=\"outline-2\" id=\"outline-container-1\">\n<div class=\"outline-text-2\" id=\"text-1\">\n<p>\nI saw the <a href=\"http://emacsworld.blogspot.fi/2012/06/numbering-lines-and-lists-in-emacs.html?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed:+GotEmacs+(Got+Emacs?)\">Got Emacs? posting</a> showing off the new emacs-24\n<code>rectangle-numbers-lines</code> command, to number a bunch of lines in buffer,\ni.e..:\n</p>\n<pre class=\"example\">foo\nbar\ncuux\n</pre>\n<p>\nbecomes:\n</p>\n<pre class=\"example\">1 foo\n2 bar\n3 cuux\n</pre>\n<p>\nVery cool! An alternative is to use <code>cua-mode</code>, mark the column for the\nnumbers with <code>cua-set-rectangle-mark</code> (<code>C-RET</code>), and then use <code>M-x   cua-sequence-rectangle</code> (which takes you throught the steps, and has a lot of\nflexibility.\n</p>\n<p>\nBut let's look at yet another way: using <code>replace-regexp</code>. If we select (mark)\nthe list once more, we can do <code>M-x replace-regexp RET ^ RET \\#. RET</code> Note that\nthe <code>#</code> is a special meta-character that represents <i>the number of   replacements already made</i>. This has the somewhat clumsy side-effect that your\nlist be numbered, starting at 0 rather than 1, so you should add a\ndummy-element at the beginning. Clearly, <code>replace-regexp</code> is inferior for\nsimply adding some line numbers – however, it has the flexibility to do some\nsmarter things.\n</p>\n<p>\nSmarter things? Yes! <code>replace-regexp</code> allows you to use arbitrary\nLisp-expressions in the replace strings. So, let's suppose that we want to use\n<i>letters</i> instead of numbers for our lines. Easy – again, select (mark) your\nlines, <code>M-x replace-regexp RET ^ RET \\,(format \"%c. \" (+ ?a \\#)) RET</code>  and we get:\n</p>\n<pre class=\"example\">a. foo\nb. bar\nc. cuux\n</pre>\n<p>\nAdmittedly, not the most world-shattering thing, but it does show the powers\nhidden in something as common as <code>replace-regexp</code>.\n</p></div>\n</div><div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/3992530807750384868-5939839926163380313?l=emacs-fu.blogspot.com\" width=\"1\" /></div>" "http://emacs-fu.blogspot.com/2012/07/replace-regexp-and-numbering-lines.html" (20474 38920) new 10 nil nil ((title ((type . "html")) "Emacs-fu: replace-regexp and numbering lines") (link ((href . "http://emacs-fu.blogspot.com/2012/07/replace-regexp-and-numbering-lines.html"))) (id nil "tag:blogger.com,1999:blog-3992530807750384868.post-5939839926163380313") (updated nil "2012-07-09T08:36:24+00:00") (content ((type . "html")) "<div class=\"outline-2\" id=\"outline-container-1\">\n<div class=\"outline-text-2\" id=\"text-1\">\n\n\n<p>\n  I saw the <a href=\"http://emacsworld.blogspot.fi/2012/06/numbering-lines-and-lists-in-emacs.html?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed:+GotEmacs+(Got+Emacs?)\">Got Emacs? posting</a> showing off the new emacs-24\n  <code>rectangle-numbers-lines</code> command, to number a bunch of lines in buffer,\n  i.e..:\n</p>\n\n\n\n<pre class=\"example\">foo\nbar\ncuux\n</pre>\n\n\n<p>\n  becomes:\n</p>\n\n\n\n<pre class=\"example\">1 foo\n2 bar\n3 cuux\n</pre>\n\n\n<p>\n  Very cool! An alternative is to use <code>cua-mode</code>, mark the column for the\n  numbers with <code>cua-set-rectangle-mark</code> (<code>C-RET</code>), and then use <code>M-x   cua-sequence-rectangle</code> (which takes you throught the steps, and has a lot of\n  flexibility.\n</p>\n<p>\n  But let's look at yet another way: using <code>replace-regexp</code>. If we select (mark)\n  the list once more, we can do <code>M-x replace-regexp RET ^ RET \\#. RET</code> Note that\n  the <code>#</code> is a special meta-character that represents <i>the number of   replacements already made</i>. This has the somewhat clumsy side-effect that your\n  list be numbered, starting at 0 rather than 1, so you should add a\n  dummy-element at the beginning. Clearly, <code>replace-regexp</code> is inferior for\n  simply adding some line numbers – however, it has the flexibility to do some\n  smarter things.\n</p>\n<p>\n  Smarter things? Yes! <code>replace-regexp</code> allows you to use arbitrary\n  Lisp-expressions in the replace strings. So, let's suppose that we want to use\n  <i>letters</i> instead of numbers for our lines. Easy – again, select (mark) your\n  lines, <code>M-x replace-regexp RET ^ RET \\,(format \"%c. \" (+ ?a \\#)) RET</code>  and we get:\n</p>\n\n\n\n<pre class=\"example\">a. foo\nb. bar\nc. cuux\n</pre>\n\n\n<p>\n  Admittedly, not the most world-shattering thing, but it does show the powers\n  hidden in something as common as <code>replace-regexp</code>.\n</p></div>\n</div><div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/3992530807750384868-5939839926163380313?l=emacs-fu.blogspot.com\" width=\"1\" /></div>") (author nil (name nil "djcb") (email nil "noreply@blogger.com") (uri nil "http://emacs-fu.blogspot.com/search/label/new")) (source nil (title ((type . "html")) "emacs-fu") (subtitle ((type . "html")) "useful tricks for emacs") (link ((rel . "self") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/-/new"))) (id nil "tag:blogger.com,1999:blog-3992530807750384868")))) ("Rubén Berenguel: Back to gnus (emacs mail reader)" "<div style=\"float: left; margin: 5px;\"><a href=\"http://2.bp.blogspot.com/_f3d3llNlZKQ/SwHBZziLTzI/AAAAAAAABbk/r9Z1OZMR4ow/s1600/mango-emacs.jpg\"><img alt=\"\" border=\"0\" id=\"BLOGGER_PHOTO_ID_5404813676895751986\" src=\"http://2.bp.blogspot.com/_f3d3llNlZKQ/SwHBZziLTzI/AAAAAAAABbk/r9Z1OZMR4ow/s400/mango-emacs.jpg\" style=\"cursor: pointer; height: 160px; width: 200px;\" /></a><br /><div style=\"text-align: center;\"><span class=\"Apple-style-span\" style=\"font-size: 78%;\">From </span></div><div style=\"text-align: center;\"><span class=\"Apple-style-span\" style=\"font-size: 78%;\"><a href=\"http://www.ee.ryerson.ca/~elf/emacs/logo/\">The Design of the Emacs Logo</a></span></div></div><div style=\"text-align: justify;\"><span class=\"capital\">I</span>'ve been thinking about getting a new Macbook lately (my heart and wallet were divided among a <a href=\"http://www.amazon.com/gp/product/B005CWJABQ?ie=UTF8&amp;camp=213733&amp;creative=393177&amp;creativeASIN=B005CWJABQ&amp;linkCode=shr&amp;tag=rbersblog-20&amp;keywords=macbook%20air%2011%26%2334%3B&amp;qid=1341686972&amp;ref_=sr_1_1&amp;s=electronics&amp;sr=1-1\" target=\"_blank\">11\" Air</a> or a <a href=\"http://www.amazon.com/gp/product/B007471PZQ?ie=UTF8&amp;camp=213733&amp;creative=393177&amp;creativeASIN=B007471PZQ&amp;linkCode=shr&amp;tag=rbersblog-20&amp;keywords=macbook%20pro%20retina&amp;qid=1341685278&amp;ref_=sr_1_1&amp;sr=8-1\" target=\"_blank\">15\" Retina Pro</a>). My 4-year old Macbook (Early 2008 I think, 2 GB Ram, Intel Core Duo 2.4 GHz) was showing its age. Mainly when I had the RAM and cache hungry inhabitants of my dock active: Yorufukurou (the best twitter client for managing multiple accounts in a Mac I've seen) and Sparrow (mail client).</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">Why was I using Sparrow? Back when I started my current job, I was using gnus in emacs, after the quite successful <a href=\"http://www.mostlymaths.net/2010/12/emacs-30-day-challenge.html\">30 days in emacs challenge</a> I did in the beginning of that year. But for some reason I can't remember I moved from gnus to Thunderbird, which I could use both in my Mac and my netbook (I have the vague feeling that gnus had some problems in my netbook). I kept using Thunderbird for a long while until I found Sparrow. What did I find so appealing about Sparrow? <em>Keyboard shortcuts</em>. Yeah, I want to archive, move and delete mails quickly without moving my mouse. Sparrow had that (Apple Mail and Thunderbird do not.) What baffles me is why I didn't try gnus again. Anyway.</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">I was so happy, pressing keys and moving emails around. But my Mac was increasingly sluggish: if I had Chrome with more than a handful of tabs, Sparrow and Yorufukurou I could get the spinning beachball of death after doing anything. So you can imagine what PITA was starting MAMP or running a Django test server (for my <a href=\"http://blog.whatlanguageis.com/\" target=\"_blank\">What Language Is project</a>, among others). The <span style=\"font-family: 'courier new';\">purge</span> command only helped a little, closing Chrome, Adium and others did almost nothing. Rebooting helped some more, but wasn't a decent solution. What was the problem?</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\"><span class=\"capital\">P</span>aging. And caching. In the last months I've been living with around 3-4 GB of free space. It should be plenty for system paging in the disk cache. The problem is that it was not plenty for Sparrow's mail cache. I found this out when, after a reboot my hard disk showed almost 3 more free GB. It could not be Chrome's cache, since I had cleared it very recently. It could not be my Mac's cache, since last time I checked before rebooting I had less than 1 GB paged and had some (little) free memory still. I opened Sparrow and then checked its caches in the Library folder. amounted to more than 1.5 GB, just after booting. Damn.</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">Just by coincidence around this time I read <a href=\"http://sachachua.com/blog/2012/07/transcript-emacs-chat-john-wiegley/\">a post by Sacha Chua, talking with John Wiegley</a> (emacs lisp developer) and thought: maybe it's time to give <span style=\"font-family: 'courier new';\">gnus</span> another try. I thought I'd need some heavy configuration tweaking or whatever before getting to grips with it. I thought I had a reason for giving up <span style=\"font-family: 'courier new';\">gnus</span>. Just in case aliases or multiple accounts were a problem before, I disabled gmail and only left my work account (I'd use gmail in the web interface for personal emails) before starting gnus again. My password was wrong, I changed it. I set up multiple mail aliases for my work account: tweaked the borrowed function I was using to select an SMTP account to switch to my main account in case of unknown account (since I have more than 20 aliases over it and configuring all them was overkill.)</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\"><span class=\"capital\">U</span>sed <span style=\"font-family: 'Courier New', Courier, monospace;\">gnus</span> again for a while. My Mac was floating around without paging. The fan didn't spin. No hard drive sounds. Quick keyboard shortcuts I almost know by heart by now. <span style=\"font-family: 'courier new';\">Gnus</span>, here I am again.</div><br /><div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/13497321-5169218865863850413?l=www.mostlymaths.net\" width=\"1\" /></div>" "http://www.mostlymaths.net/2012/07/back-to-gnus-emacs-mail-reader.html" (20472 34065) new 11 nil nil ((title ((type . "html")) "Rubén Berenguel: Back to gnus (emacs mail reader)") (link ((href . "http://www.mostlymaths.net/2012/07/back-to-gnus-emacs-mail-reader.html"))) (id nil "tag:blogger.com,1999:blog-13497321.post-5169218865863850413") (updated nil "2012-07-07T18:50:57+00:00") (content ((type . "html")) "<div style=\"float: left; margin: 5px;\"><a href=\"http://2.bp.blogspot.com/_f3d3llNlZKQ/SwHBZziLTzI/AAAAAAAABbk/r9Z1OZMR4ow/s1600/mango-emacs.jpg\"><img alt=\"\" border=\"0\" id=\"BLOGGER_PHOTO_ID_5404813676895751986\" src=\"http://2.bp.blogspot.com/_f3d3llNlZKQ/SwHBZziLTzI/AAAAAAAABbk/r9Z1OZMR4ow/s400/mango-emacs.jpg\" style=\"cursor: pointer; height: 160px; width: 200px;\" /></a><br /><div style=\"text-align: center;\"><span class=\"Apple-style-span\" style=\"font-size: 78%;\">From </span></div><div style=\"text-align: center;\"><span class=\"Apple-style-span\" style=\"font-size: 78%;\"><a href=\"http://www.ee.ryerson.ca/~elf/emacs/logo/\">The Design of the Emacs Logo</a></span></div></div><div style=\"text-align: justify;\"><span class=\"capital\">I</span>'ve been thinking about getting a new Macbook lately (my heart and wallet were divided among a <a href=\"http://www.amazon.com/gp/product/B005CWJABQ?ie=UTF8&amp;camp=213733&amp;creative=393177&amp;creativeASIN=B005CWJABQ&amp;linkCode=shr&amp;tag=rbersblog-20&amp;keywords=macbook%20air%2011%26%2334%3B&amp;qid=1341686972&amp;ref_=sr_1_1&amp;s=electronics&amp;sr=1-1\" target=\"_blank\">11\" Air</a> or a <a href=\"http://www.amazon.com/gp/product/B007471PZQ?ie=UTF8&amp;camp=213733&amp;creative=393177&amp;creativeASIN=B007471PZQ&amp;linkCode=shr&amp;tag=rbersblog-20&amp;keywords=macbook%20pro%20retina&amp;qid=1341685278&amp;ref_=sr_1_1&amp;sr=8-1\" target=\"_blank\">15\" Retina Pro</a>). My 4-year old Macbook (Early 2008 I think, 2 GB Ram, Intel Core Duo 2.4 GHz) was showing its age. Mainly when I had the RAM and cache hungry inhabitants of my dock active: Yorufukurou (the best twitter client for managing multiple accounts in a Mac I've seen) and Sparrow (mail client).</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">Why was I using Sparrow? Back when I started my current job, I was using gnus in emacs, after the quite successful <a href=\"http://www.mostlymaths.net/2010/12/emacs-30-day-challenge.html\">30 days in emacs challenge</a> I did in the beginning of that year. But for some reason I can't remember I moved from gnus to Thunderbird, which I could use both in my Mac and my netbook (I have the vague feeling that gnus had some problems in my netbook). I kept using Thunderbird for a long while until I found Sparrow. What did I find so appealing about Sparrow? <em>Keyboard shortcuts</em>. Yeah, I want to archive, move and delete mails quickly without moving my mouse. Sparrow had that (Apple Mail and Thunderbird do not.) What baffles me is why I didn't try gnus again. Anyway.</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">I was so happy, pressing keys and moving emails around. But my Mac was increasingly sluggish: if I had Chrome with more than a handful of tabs, Sparrow and Yorufukurou I could get the spinning beachball of death after doing anything. So you can imagine what PITA was starting MAMP or running a Django test server (for my <a href=\"http://blog.whatlanguageis.com/\" target=\"_blank\">What Language Is project</a>, among others). The <span style=\"font-family: 'courier new';\">purge</span> command only helped a little, closing Chrome, Adium and others did almost nothing. Rebooting helped some more, but wasn't a decent solution. What was the problem?</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\"><span class=\"capital\">P</span>aging. And caching. In the last months I've been living with around 3-4 GB of free space. It should be plenty for system paging in the disk cache. The problem is that it was not plenty for Sparrow's mail cache. I found this out when, after a reboot my hard disk showed almost 3 more free GB. It could not be Chrome's cache, since I had cleared it very recently. It could not be my Mac's cache, since last time I checked before rebooting I had less than 1 GB paged and had some (little) free memory still. I opened Sparrow and then checked its caches in the Library folder. amounted to more than 1.5 GB, just after booting. Damn.</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">Just by coincidence around this time I read <a href=\"http://sachachua.com/blog/2012/07/transcript-emacs-chat-john-wiegley/\">a post by Sacha Chua, talking with John Wiegley</a> (emacs lisp developer) and thought: maybe it's time to give <span style=\"font-family: 'courier new';\">gnus</span> another try. I thought I'd need some heavy configuration tweaking or whatever before getting to grips with it. I thought I had a reason for giving up <span style=\"font-family: 'courier new';\">gnus</span>. Just in case aliases or multiple accounts were a problem before, I disabled gmail and only left my work account (I'd use gmail in the web interface for personal emails) before starting gnus again. My password was wrong, I changed it. I set up multiple mail aliases for my work account: tweaked the borrowed function I was using to select an SMTP account to switch to my main account in case of unknown account (since I have more than 20 aliases over it and configuring all them was overkill.)</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\"><span class=\"capital\">U</span>sed <span style=\"font-family: 'Courier New', Courier, monospace;\">gnus</span> again for a while. My Mac was floating around without paging. The fan didn't spin. No hard drive sounds. Quick keyboard shortcuts I almost know by heart by now. <span style=\"font-family: 'courier new';\">Gnus</span>, here I am again.</div><br /><div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/13497321-5169218865863850413?l=www.mostlymaths.net\" width=\"1\" /></div>") (author nil (name nil "Rubén Berenguel") (email nil "noreply@blogger.com") (uri nil "http://www.mostlymaths.net/search/label/emacs")) (source nil (title ((type . "html")) "Mostly Maths") (subtitle ((type . "html")) "Programming for backyard gardeners, cooking for linux users, drawing for mathematicians. WTF?") (link ((rel . "self") (href . "http://www.blogger.com/feeds/13497321/posts/default/-/emacs"))) (id nil "tag:blogger.com,1999:blog-13497321")))) ("Ben Simon: Farewell Old Friends, You'll Be Fondly Remembered" "These may look like an old couch, chair and table - but what you're really looking at is sacred history. Well, perhaps not sacred, or we wouldn't be donating them to make room for more up to date replacements.<br />\n<a href=\"http://4.bp.blogspot.com/-YG1G1XZRmhw/T_cRetUAn2I/AAAAAAAAMRk/hXCk7HXTubE/s1600/IMG_3613.JPG\" rel=\"nofollow\" target=\"_blank\"><img border=\"0\" height=\"267\" src=\"http://4.bp.blogspot.com/-YG1G1XZRmhw/T_cRetUAn2I/AAAAAAAAMRk/hXCk7HXTubE/s400/IMG_3613.JPG\" width=\"400\" /></a>  <a href=\"http://1.bp.blogspot.com/-ZKxBtunTjug/T_cReW_yYmI/AAAAAAAAMRY/jf_edNl40Xs/s1600/IMG_3615.JPG\" rel=\"nofollow\" target=\"_blank\"><img border=\"0\" height=\"267\" src=\"http://1.bp.blogspot.com/-ZKxBtunTjug/T_cReW_yYmI/AAAAAAAAMRY/jf_edNl40Xs/s400/IMG_3615.JPG\" width=\"400\" /></a>  <br />\n<b>The Couch</b>. 14 years ago, when Shira I moved into our very first place (the cutest, loveliest rental-town home, for which we paid $690/mo or so) we had no furniture. Well, perhaps not *no* furniture: we had a bed (thanks Mom and Dad!), a folding bridge table and some folding chairs. That was it. We dutifully went and picked out a brand new couch (which we still have). As we were paying, we casually asked when delivery we be - assuming a few days.  Nope, our couch would be ready in 12 weeks. 12 weeks?!<br />\nOne day, during those 12 weeks, we were in a massive furniture store, that had a massive selection of clearance/one off pieces. I found this incredible \"couch\" in the bunch - it was a recliner, had vibrating seats and was super comfortable. It even had a speaker phone built into the center console! Oh yeah, it was this unfortunate green color. And it had one other minor flaw, it was only 2/3rds of a couch. Apparently, it was part of a sectional at one point in its life.  Like a 5 year old, I begged and pleaded to allow Shira to let me buy it. She did so, on the condition that we would get rid of it shortly after our real couch arrived. Like I said, that was 14 years ago.<br />\nAhhh, 2/3rds of a couch. You fit perfectly in our apartments and house. Nobody ever judged you for missing one side.  Children of all ages had such joy climbing on you and turning on and off your vibrating seats and pressing your defunct telephone buttons. You will be missed.<br />\n<b>The Table</b>. Again, you have to go back 14 years or so to appreciate this table.  Picture it - a house with no furniture in it. While we were getting settled in our new city, Shira took a gig doing temp work for an office furniture store. One day, an employee came in and quietly pulled Shira aside. In a hushed whisper, she explained that a mismatched table top had come in, and if she wanted it, it was all hers.  The employee was also able to produce a mismatched, but perfectly acceptable table base to go with the table top.<br />\nThat table top and base served first as our kitchen table, then as our dining room table and finally as a computer desk.  It's turned out to be one of the most durable pieces of furniture we've ever owned, looking as good today as it did the day we were gifted it. I look at that tiny table and wonder how that was ever our main eating surface. But it was.<br />\n<b>The Chair</b>.  Good news, you don't have to go back 14 years to learn the history of the chair. You just need to go back 12 -- back to 2000, when the tech bubble was going strong. I worked at AmazingMedia, where, like every other tech company, we had lots of employees and all the infrastructure we could ask for. That is, until the bubble burst, and people started getting laid off.  As the company shrank, we downsized not just people but stuff. The result, I took home both my desk chair (which I sit on to this day), as well as this extra chair.<br />\nIn some respects, this chair remains a cautionary reminder of what happens when you live beyond your means (people end up getting laid off).  Since the fast and furious days of the 2000's, where designers creating (dare I say, \"cranking out) templates sat,  to many a quiet morning where I'd drink tea and catch up on e-mail, to sitting with our 1 year old and watching <a href=\"http://www.youtube.com/watch?v=8EM30ZHz04Q\" rel=\"nofollow\" target=\"_blank\">Pete Seeger's perform Skip To My Lou</a> about a million times, to our 7 year old doing his homework on it, this chair has seen quite a bit of use. And through it, it's been rock solid.<br />\nThe furniture we'll be replacing this with may be more polished, and, sure, the new couch may not be missing a side. But, still, these new pieces will come to us without soul.  Still, I'm optimistic: given time, (say, 12 to 14 years), I expect the new pieces will be just as storied as the ones we're giving up today.<div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/12753102-5301808174089808471?l=benjisimon.blogspot.com\" width=\"1\" /></div>" "http://benjisimon.blogspot.com/2012/07/farewell-old-friends-youll-be-fondly.html" (20470 56900) new 12 nil nil ((title ((type . "html")) "Ben Simon: Farewell Old Friends, You'll Be Fondly Remembered") (link ((href . "http://benjisimon.blogspot.com/2012/07/farewell-old-friends-youll-be-fondly.html"))) (id nil "tag:blogger.com,1999:blog-12753102.post-5301808174089808471") (updated nil "2012-07-06T12:47:00+00:00") (content ((type . "html")) "These may look like an old couch, chair and table - but what you're really looking at is sacred history. Well, perhaps not sacred, or we wouldn't be donating them to make room for more up to date replacements.<br />\n<a href=\"http://4.bp.blogspot.com/-YG1G1XZRmhw/T_cRetUAn2I/AAAAAAAAMRk/hXCk7HXTubE/s1600/IMG_3613.JPG\" rel=\"nofollow\" target=\"_blank\"><img border=\"0\" height=\"267\" src=\"http://4.bp.blogspot.com/-YG1G1XZRmhw/T_cRetUAn2I/AAAAAAAAMRk/hXCk7HXTubE/s400/IMG_3613.JPG\" width=\"400\" /></a>  <a href=\"http://1.bp.blogspot.com/-ZKxBtunTjug/T_cReW_yYmI/AAAAAAAAMRY/jf_edNl40Xs/s1600/IMG_3615.JPG\" rel=\"nofollow\" target=\"_blank\"><img border=\"0\" height=\"267\" src=\"http://1.bp.blogspot.com/-ZKxBtunTjug/T_cReW_yYmI/AAAAAAAAMRY/jf_edNl40Xs/s400/IMG_3615.JPG\" width=\"400\" /></a>  <br />\n<b>The Couch</b>. 14 years ago, when Shira I moved into our very first place (the cutest, loveliest rental-town home, for which we paid $690/mo or so) we had no furniture. Well, perhaps not *no* furniture: we had a bed (thanks Mom and Dad!), a folding bridge table and some folding chairs. That was it. We dutifully went and picked out a brand new couch (which we still have). As we were paying, we casually asked when delivery we be - assuming a few days.  Nope, our couch would be ready in 12 weeks. 12 weeks?!<br />\nOne day, during those 12 weeks, we were in a massive furniture store, that had a massive selection of clearance/one off pieces. I found this incredible \"couch\" in the bunch - it was a recliner, had vibrating seats and was super comfortable. It even had a speaker phone built into the center console! Oh yeah, it was this unfortunate green color. And it had one other minor flaw, it was only 2/3rds of a couch. Apparently, it was part of a sectional at one point in its life.  Like a 5 year old, I begged and pleaded to allow Shira to let me buy it. She did so, on the condition that we would get rid of it shortly after our real couch arrived. Like I said, that was 14 years ago.<br />\nAhhh, 2/3rds of a couch. You fit perfectly in our apartments and house. Nobody ever judged you for missing one side.  Children of all ages had such joy climbing on you and turning on and off your vibrating seats and pressing your defunct telephone buttons. You will be missed.<br />\n<b>The Table</b>. Again, you have to go back 14 years or so to appreciate this table.  Picture it - a house with no furniture in it. While we were getting settled in our new city, Shira took a gig doing temp work for an office furniture store. One day, an employee came in and quietly pulled Shira aside. In a hushed whisper, she explained that a mismatched table top had come in, and if she wanted it, it was all hers.  The employee was also able to produce a mismatched, but perfectly acceptable table base to go with the table top.<br />\nThat table top and base served first as our kitchen table, then as our dining room table and finally as a computer desk.  It's turned out to be one of the most durable pieces of furniture we've ever owned, looking as good today as it did the day we were gifted it. I look at that tiny table and wonder how that was ever our main eating surface. But it was.<br />\n<b>The Chair</b>.  Good news, you don't have to go back 14 years to learn the history of the chair. You just need to go back 12 -- back to 2000, when the tech bubble was going strong. I worked at AmazingMedia, where, like every other tech company, we had lots of employees and all the infrastructure we could ask for. That is, until the bubble burst, and people started getting laid off.  As the company shrank, we downsized not just people but stuff. The result, I took home both my desk chair (which I sit on to this day), as well as this extra chair.<br />\nIn some respects, this chair remains a cautionary reminder of what happens when you live beyond your means (people end up getting laid off).  Since the fast and furious days of the 2000's, where designers creating (dare I say, \"cranking out) templates sat,  to many a quiet morning where I'd drink tea and catch up on e-mail, to sitting with our 1 year old and watching <a href=\"http://www.youtube.com/watch?v=8EM30ZHz04Q\" rel=\"nofollow\" target=\"_blank\">Pete Seeger's perform Skip To My Lou</a> about a million times, to our 7 year old doing his homework on it, this chair has seen quite a bit of use. And through it, it's been rock solid.<br />\nThe furniture we'll be replacing this with may be more polished, and, sure, the new couch may not be missing a side. But, still, these new pieces will come to us without soul.  Still, I'm optimistic: given time, (say, 12 to 14 years), I expect the new pieces will be just as storied as the ones we're giving up today.<div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/12753102-5301808174089808471?l=benjisimon.blogspot.com\" width=\"1\" /></div>") (author nil (name nil "Ben Simon") (uri nil "http://pipes.yahoo.com/pipes/pipe.info?_id=cb318680d0fab4cbaec11d558af0f71f")) (source nil (title ((type . "html")) "Ben Simon") (subtitle ((type . "html")) "Pipes Output") (link ((rel . "self") (href . "http://pipes.yahoo.com/pipes/pipe.run?_id=cb318680d0fab4cbaec11d558af0f71f&_render=rss"))) (id nil "http://pipes.yahoo.com/pipes/pipe.info?_id=cb318680d0fab4cbaec11d558af0f71f")))) ("sachachua: Transcript: Emacs chat with John Wiegley" "<p>This post is long, so if you’re reading this on the main page, go to <a href=\"http://sachachua.com/blog/2012/07/transcript-emacs-chat-john-wiegley/\">http://sachachua.com/blog/2012/07/transcript-emacs-chat-john-wiegley/</a> to view the full transcript!</p>\n<p><span id=\"more-23536\"></span></p>\n<p>Here’s the video.</p>\n<p>\n</p><p><a href=\"http://vimeo.com/44778543\">John Wiegley – June 26, 2012</a> from <a href=\"http://vimeo.com/user1851927\">Sacha Chua</a> on <a href=\"http://vimeo.com\">Vimeo</a>.</p>\n<h3>A day in the life of John Wiegley</h3>\n<p>\nSacha: One of the things I’ve always been curious about is all the different things that you use Emacs for. You’ve been one of our role models for ages now, and clearly you do a lot of Emacs Lisp programming with it, but what’s a day in the life of John Wiegley like?\n</p>\n<p>\nJ: I spend the most of my time in Org and Gnus. All of my task management… I think I’ve processed over 5,000 tasks in Org mode now, since I started using it. I’m a very very heavy Org mode user. I’m always in Gnus, always checking my e-mail through that. I use ERC. I actually run a second Emacs. For my Mac, I built another Emacs under another name, and I use that Emacs just for running ERC. I use that in conjunction with bitlbee so that I’m always on IM, always on IRC, and also that’s my Twitter client as well. So that’s always running on the side as well. I spend a lot of time then in Eshell, all the programming modes… Most of my day work is in C and C++ when I’m not hacking elisp.\n</p>\n<p>\nS: Why do you keep your ERC in a separate Emacs? To minimize distraction, or…\n</p>\n<p>\nJ: When I’m hacking on Emacs, I end up needing to restart it quite often. Many many times a day, sometimes. That’s because I never know which definitions… Sometimes you change a definition from a function to a macro or vice versa, and you don’t know which other definitions you have to reevaluate in order for them to inline the new definition. Rather than have to figure that out all the time, I just restart Emacs.\n</p>\n<p>\nS: Hence your trick of making sure that everything’s compiled and that you’re requiring all the files you need so that it loads up cleanly.\n</p>\n<p>\nJ: I just recently fixed a problem in my .emacs and I discovered that compiling it was not giving me any speed benefit. I thought compilation was what was making my .emacs run so fast, and it wasn’t. It was that I was loading—when I was running a non-byte-compiled Emacs,I was loading things that I didn’t need to load. When I fixed that problem, which is now fixed in my .emacs repository, Emacs loads in just over a second, but without doing any byte-compilation in my Emacs.\n</p>\n<p>\nS: I must definitely be doing something long, because my Emacs takes a while to load.\n</p>\n<p>\nJ: How long?\n</p>\n<p>\nS: I don’t know. I tried using the profiling thing, and because I use the Emacs Starter Kit, it didn’t get very deep. It feels like ten seconds or so. It takes a while. I can’t be bouncing it up and down like you do.\n</p>\n<p>\nS: So you do a lot of Emacs Lisp programming, naturally. You’re on ERC, and you’re doing C and C++ development. Are there other really weird things you do that people wouldn’t expect Emacs to handle?\n</p>\n<p>\nJ: Let me think… I use it to play chess online.\n</p>\n<p>\nS: Yeah, there are so many games in there! I play Nethack in there, so… pot, kettle, black, here.\n</p>\n<p>\nJ: I use it to look at databases. I use it… Let’s see… I of course use TRAMP to edit not only files remotely, but also local files through sudo so that I can edit them. Weird things I do in Emacs… A mode I forgot to mention is that I use git for all the version control that I do, and so magit is a mode that I just basically live in. For any project that I’m working on, the magit buffer becomes the home buffer for that project, and I’m constantly looking at that buffer to see what work I’ve done, what work should be committed now.\n</p>\n<p>\nS: I haven’t made that a big part of my workflow yet, but I’ve heard such good things about it.\n</p>\n<p>\nJ: It’s a very nice mode. I use it in conjunction with the built-in vc mode of Emacs. If I’m editing a file and I really quickly want to know what I’ve done to this file, I’ll do C-x v = to get the diff of the current file. If I want an overview of what have I been doing and what I have been touching, I’ll go to the magit buffer and look at the stats.\n</p>\n<p>\nS: I guess you version-control your Org files too. How many Org files do you typically work with, and how do you manage that?\n</p>\n<p>\nJ: I have eight. All of my active tasks exist in a single Org file. The other seven Org files are all archives. I have an archive file for every project, even though the live project lives in the main TODO file. That way, when I do an Org search, it’s only at that time that it loads in all of the Org files to do the search. I need Org to be as quick as it can, since I’m basically modifying tasks and adding tasks to it as the days go on.\n</p>\n<p>\nS: That could be it. I’ve got a humongous Org file and org-refile takes a while trying to parse it.\n</p>\n<p>\nJ: Yes, it does, it does. I use Dropbox to synchronize my Org-mode files to my iPhone because I use org-mobile. Another interesting tool I have found is that there’s an app for the iPhone called dropVox, which lets you take a voice note and it puts it into Dropbox. I have an Org-mode hook so that whenever I open my Org-mode buffer, if there’s an audio file in my Dropvox box, it will pop up Dired and show it to me, meaning “You should listen to this and add it as a note to your Org mode now.”\n</p>\n<p>\nS: That’s awesome. That’s like If This Then That on steroids.\n</p>\n<p>\nJ: All during the day, new tasks are coming in. They’re either coming in by ideas, by e-mail, by webpages… I have a keybinding I use in Emacs. Since I don’t use M-m for anything else, M-m is my make-a-note keybinding. So, wherever I’m at, if I hit M-m, it will make an org-capture and it will link it to whatever I was on when I did the capture, and it will link it to whatever I was on when I did the capture. If I was on an e-mail, it links it to the e-mail. Well, there’s a tool for the Mac called Quick Keys, and Quick Keys lets you rebind things globally on your system. I’ve made it so that M-n works anywhere on the system and tries to be as intelligent as it can. If I’m looking at Chrome and I hit M-n, it will take me to Emacs, pop up the org-capture buffer, and then put a link over to the webpage that I was looking at.\n</p>\n<p>\nS: Is that using org-protocol or just QuickKeys?\n</p>\n<p>\nJ: It’s not using org-protocol. It’s just using QuickKeys. The only thing QuickKeys is really doing is it’s switching over, and then I use AppleScript from Emacs to talk to Chrome and get the information. I actually use AppleScript quite a lot for many different things. Using AppleScript from Emacs is something I do often.\n</p>\n<p>\nS: What are some of the other AppleScripty things you do with Emacs?\n</p>\n<p>\nJ: I don’t like to keep Dropbox running all the time because it takes lots of background CPU. At the end of a few days, when I look at my process list and I look at total time in the kernel spent by all the process, Dropbox is usually #2 behind the kernel itself. That’s a little egregious to me when I’m only using it once in a while. I have Applescript so that in Org Mode, when I say go get my mobile tasks, it starts up Dropbox, waits half a minute, and then stops Dropbox. So it’s just running enough time to do this synchronization. And of course, I use that async module that I told you about last week to do that work.\n</p>\n<p>\nS: It sounds like you’ve got it quite integrated into the other things you use on your Mac. That’s fantastic.\n</p>\n<p>\nJ: Emacs is the center of my entire environment.\n</p>\n<p>\nS: Being able to glue all these bits together and make things work… That’s incredible.\n</p>\n<h3>On wishlists and Emacs Lisp</h3>\n<p>\nS: What are some of things you wish you could glue together? What’s the John Wiegley to-code-some-point-in-the-future list?\n</p>\n<p>\nJ: I’d like it if Emacs had a foreign function interface so that I could talk directly to databases and other things. There’s a fork of XEmacs that can communicate directly with PostgreSQL, and something like that would be nice because there are some systems that I work with where it would just be faster and more efficient if Emacs could talk to those systems directly instead of me having to communicate with them over a process. Embedding a Python interpreter, or embedding a Ruby interpreter…\n</p>\n<p>\nS: Vim is extensible in a couple of different languages now, isn’t it?\n</p>\n<p>\nJ: I do prefer Emacs Lisp. I have to tell you that probably of all the languages I’ve used, definitely, Emacs Lisp has been the most fun. I won’t call it the best language out there because it does have its downsides and it’s a little bit slow. I can’t use it for most general tasks. But it’s fun, because you see results immediately, the debugger’s easy to use, the documentation is great and completely available at the tip of your fingers. It may be true that I have written more new code in Emacs Lisp than in any other language by this time.\n</p>\n<p>\nS: I wouldn’t be surprised.\n</p>\n<p>\nJ: I’ve worked on much bigger projects in C and C++, but those didn’t always involve spitting out reams and reams of new code. Whereas as the day goes by, I’m writing new Emacs Lisp functions usually left and right to get particular jobs done.\n</p>\n<p>\nS: I’m always running into your name. Oh, Planner! Oh, remember! Oh, eshell!\n</p>\n<p>\nJ: Too bad not all of those projects succeeded as well as I’d hoped.\n</p>\n<p>\nS: Going back to talking about org-capture and picking up an annotation really quickly… I remember when we were playing around with that. Finding ways to hook parts of Emacs into all the different parts of Emacs… It’s great to see so many people playing around with these ideas.\n</p>\n<h3>The Emacs community</h3>\n<p>\nJ: It’s a great community. It’s a good culture around Emacs.\n</p>\n<p>\nS: How did we end up with something as cool as this? Emacs is pretty unique among the software packages or open source tools I’ve seen. Vim users are pretty happy and they share a lot of tips, and on the other end of the spectrum there’s Eclipse, and there’s a ton of development work around Eclipse, but Emacs… it’s old, but lots of stuff is going on. Why?\n</p>\n<p>\nJ: My opinion on that would be is that the real success was the Lisp machine. The Lisp machine was an entire machine that was what Emacs is to editing. You sit down at your operating system and it doesn’t matter what you’re using – your editor, your shell, your document viewer, whatever – they’re all written in Lisp. You can modify them as you go. The documentation for anything is available as you’re looking at it. You can pop the system into a debugger at any time. Lisp machines may not have succeeded, but Emacs Lisp… Emacs took that environment and that idea, and brought it down to the domain of a single application, the editor. It gives us all the cool things about the Lisp machine: the fact that the debugger’s available all the time and the documentation is completely cross-linked with everything. I think that’s probably what we’re experiencing, and that’s why it’s so much fun.\n</p>\n<p>\nS: … And the fact that you can get in, you can tweak just that little thing just a little bit, and eventually end up with this massive Emacs configuration because you’ve been tweaking it to fit you.\n</p>\n<p>\nJ: I have to say that the original designers and Dr. Stallman – they had a very good idea when they put in a lot of hooks throughout Emacs. There are other extensible systems out there in the world that are not as extensible because they lack sufficient degree of hookage inside, places where you can latch on a piece of code to execute when something happens. Emacs has got those everywhere. That plus its advising system lets you basically change the behaviour of anything or augment the behaviour of anything.\n</p>\n<p>\nS: I have to confess it’s one of the things I like the way that Ruby on Rails will let you open up classes, redefine functions, and then continue on with your work. The extensibility built into the very language is very very helpful. It also can be very intimidating.\n</p>\n<h3>Learning Emacs</h3>\n<p>\nS: We’ve talked about this before. You’re maybe one of a few Emacs users over there. I’ll on occasion run into someone who’s curious about Emacs but hasn’t taken the plunge. How do we get more people interested in this stuff?\n</p>\n<p>\nJ: Well, getting them interested is not that hard. It’s getting them to climb the learning curve that’s difficult. My wife’s a physician, and she sees what I do with Org-mode. She’s been tempted to learn Emacs just to use Org-mode.\n</p>\n<p>\nS: I hear a lot of stories like that.\n</p>\n<p>\nJ: But the learning curve is so enormous that she just doesn’t have the time to learn it.\n</p>\n<p>\nS: At some point you were very much into Vi, and then you said, okay, we’re going to learn things the Emacs way. You just sat down and you did it. Is that something we expect people to sit down and do at some point? Have you come across any things that make it easier for people?\n</p>\n<p>\nJ: Not necessarily that make it easier for people, unfortunately. I think it’s a philosophy thing. I use Emacs. I’m in Emacs and I use Emacs probably 70% of my every working day. It pays dividends to master it. Every efficiency gain I get in Emacs, I get to make use of right away, and it pays off as the days go by. There are people who type for their living who don’t know how to touch-type. That, to me, is the exact same scenario. How can you make your living as an engineer, typing day in, day out, and yet lose the productivity that you would gain by learning to touch-type. Even learning to touch-type – yeah, it will take you a few weeks. You either use a piece of software or go to class, whatever. So there is a hump that you have to get over, and you may not have the time to get over that hump right now, but it’s an investment, and that investment will pay off.\n</p>\n<p>\nS: Get to know your tools and get to know them really well, because you’re using them all the time. In terms of Emacs, Emacs being very very big and Emacs being something that moves very quickly, what are some of the things that you want to dig into and learn more about?\n</p>\n<p>\nJ: I would like to learn the C side of Emacs more. I’ve never known the C side of Emacs. I’ve just recently been looking at the bytecode interpreter and trying to learn how it does what it does to see if there are ways to get better performance into Emacs. That, for me, is the undiscovered country. That’s where I want to go next.\n</p>\n<p>\nS: It does sound like a lot of deep magic. That’s the very core of it.\n</p>\n<p>\nJ: It’s not as crazy as it seems. It’s pretty well done on the inside. Emacs without all of its Lisp modes and packages on top of it, if you boil it down to just its essence… the kernel is not really that huge. It’s a very small, very tidy, simple thing. Of course, there are places where it has some rough edges that can be smoothed, but it’s not what people think of as Emacs. They think of this kitchen sink application that does absolutely everything. That’s a lot of Lisp stuff that goes around the little kernel, whereas the kernel is very tight and small. I want to know more about that because anything done in the kernel affects everything else.\n</p>\n<p>\nS: If you ever get around to doing annotated source code, I’d definitely read that.\n</p>\n<h3>Making money with Emacs</h3>\n<p>\nS: I hear you’re kinda on the hook for eshell documentation or whatever else people would like you to write.\n</p>\n<p>\nJ: That’s true. There’s a reason why the eshell documentation was never written. This would be a whole different discussion. I have some misgivings about what kind of world the GPL would create if it was everywhere. I do a lot of my programming as a hobbyist, but I have to make money programming as well.\n</p>\n<p>\nThe way to make money through software is usually to sell it. Otherwise, if you make money only through services, that never takes off. If you make a piece of software and you license it, it can take off. It can start making money for you and you don’t have to work to earn every day. Then you can use that time that you now have to make more software.\n</p>\n<p>\nIf the only income that you ever made was based on services, then you basically have to be working all day long, and when would you ever get your hobby coding done? When you only have six to eight hours a day to do any coding at all (because there are things that we have to do), you want to have a setup where you can do as much creative coding as possible.\n</p>\n<p>\nSince the GPL’s view of the world is that you get paid through the services and you get paid through the documentation, when I released eshell, my thought was, “Okay, I’ve written the code, the code is in the GPL, so it’s freely distributable and I can’t charge anyone for it, but if they want services around eshell, then they can pay me for that.” I have always told the community that if someone wants to step up and pay for it, I’ll write the eshell documentation. But that’s never happened. So if the community doesn’t value the eshell documentation enough to pay me to do it, then why would I spend the time that I could be spending coding to write it?\n</p>\n<p>\nS: Do you know what kind of bounty system we have or something like that for lots of people to say, “I want to pitch in so and so much to e-shell documentation?” Do we have that?\n</p>\n<p>\nJ: Yeah, or a Kickstarter project, for example.\n</p>\n<p>\nS: That would be cool.\n</p>\n<h3>New users and Emacs happiness</h3>\n<p>\nS: You’ve been an awesomely prolific Emacs Lisp programmer, so it would be interesting…\n</p>\n<p>\nJ: Well, it’s just that I’ve been doing it for so long. It’s been eighteen years now since the first package that I wrote and submitted to Emacs. I know! You were just a kid back then when I was writing align.el.\n</p>\n<p>\nS: I was ten! I’ve used align.el.\n</p>\n<p>\nJ: Yup. It was made when you were ten.\n</p>\n<p>\nS: Are you seeing a lot of other young people get interested in this stuff?\n</p>\n<p>\nJ: Sure! It’s basically if you’re not going to be using an IDE like Visual Studio or Eclipse or something, Emacs is still one of the two great editors out there. It’s either going to be you go with Emacs or you go with Vim. It still pulls in new people all the time.\n</p>\n<p>\nS: There’s just so much. Once people start customizing it, they get sucked in. As you said earlier, there’s a lot of interest in Emacs from the nontechnical side of the world. Writing, scientific papers…\n</p>\n<p>\nJ: We’re getting a lot of new users just because of Org mode.\n</p>\n<p>\nS: How many years ago was that? Now, it’s just grown into this massive thing where people are writing their research papers and they’re doing their data analyses in org-babel, and having something come out… Literate programming writ large.\n</p>\n<p>\nJ: I started using it in 2007 and I think it was a couple of years old by then already. I tried to drop Org-mode a couple of times. I was thinking, there are sexier-looking apps for the Mac. There are apps that have better and tighter integration for the iPhone. On two different occasions, I left, converted all of my tasks over to a different program, used that program for a few months, came back to Org… and I always felt happy to be back in Org. I don’t know what it is about it. It looks right. It feels right. It’s got the right balance between how finely you can enter and manipulate the information, and how coarsely you can look at it at a glance. Other applications that I used… I don’t know.\n</p>\n<p>\nThere was just something about them, but I wasn’t getting the tasks done. I would put all the tasks into the application and I’d be excited about it for a few weeks, and then after a couple of months, I just wouldn’t look at it any more. I would know that the tasks were in it, but I would never do anything about them. The way I use Org Mode, I use it like a day planner, so that every task I intend to do is scheduled for a particular day. I’m rescheduling tasks and moving them to new days every single day for years now, and it just never has felt like a burden. So there’s something that Org does right.\n</p>\n<p>\nS: There’s the hack that you told me about the other time where you change your window size, so you watch it shrink as you finish your tasks.\n</p>\n<p>\nJ: I fit it to the window.\n</p>\n<p>\nS: Little motivational hacks that you can do because you can play around with the tool itself. I remember when I was trying to learn through flashcards using flashcard.el, I rigged it up so that it would tell me a joke using fortune.el and everything I got something right. It was either that or show me a cute cat picture from the files I’d saved off icanhascheezburger. The fact that you can hack it to do all sorts of crazy things… that’s incredible.\n</p>\n<p>\nJ: I just started playing around with its ability to view PDF files. You can use C-x C-f to open a PDF file and you’ll see it in your Emacs. It renders them page by page as PNG files, and then uses the Imagemagick extension built into Emacs 24 to show you those pages. Which is useful to me because I’m often looking at a language specification as I’m writing code, and it’s nice to have it in another buffer the way that I would have Emacs documentation. I can look at the C++ standard now and have it just be in another buffer.\n</p>\n<p>\nS: How did you come across this new capability, because I didn’t know about this?\n</p>\n<p>\nJ: I think I ran into it accidentally. I think I was in Dired mode and I hit return on a PDF instead of hitting ! to open it, and all of a sudden, there it was, and I was, like, “Wow, I didn’t know Emacs could do that…”\n</p>\n<p>\nS: Basically, for people who want to learn things… Just do random things in Emacs!\n</p>\n<p>\nJ: Although if you’re going to do random things in Emacs, take notes. Otherwise, you’ll never know how to get back to what you found.\n</p>\n<p>\nS: That’s what the lossage buffer is for, isn’t it?\n</p>\n<p>\nJ: The lossage buffer can be a bit hard to read, though.\n</p>\n<p>\nS: Execute-extended-command?\n</p>\n<p>\nJ: I did find on Emacswiki a mode called Command Log. It keeps in a very readable form every command you use.\n</p>\n<p>\nS: I definitely have to pick up this habit of yours of just reading Emacswiki.\n</p>\n<p>\nJ: That’s how I started learning. You asked about how people get over the learning hump. I’ll tell you what I did. Back in 1994, when I started really wanting to know Emacs, what I did was I printed out the Emacs manual, which at the time was I think seven or eight hundred pages. It was just single-sided paper. I probably killed a small tree doing it. But I brought that stack of papers over to my desk and I put it to the side. At the time, my machine was slow enough that I was often waiting for builds to finish. What I would do is while whatever was building on my machine, I would pick up the top page of the Emacs manual, I’d read it, and then I would throw it away. I just did that over several weeks’ time. I ended up reading the Emacs manual in all of this dead time that I had, waiting for compilations to finish. I made that a yearly habit for the first four years, just to constantly refresh my knowledge of what’s in there, because it’s such a massively huge environment. It helped.\n</p>\n<p>\nS: My story is that I’ve used Emacspeak to synthesize the Emacs manual so that I can listen to it while walking around. I was reading my mail off Gnus at the time. You could use Emacspeak to read your mail and all of that stuff. You find all these ways to cram information into your brain. I would be up for more podcasts. I see people are coming out with books as well. There’s the Org mode book. That might be another way for you to do it, right? You write your documentation and you say, here’s a book that you can buy. But then it’s very speculative work, I suppose.\n</p>\n<h3>Back to earning</h3>\n<p> S: Speaking of other things that integrate into Emacs… Thank you for writing Ledger, by the way, because I still run all my finances with it. I have no idea where I’m going to find an accountant who understands Ledger…</p>\n<p>\nJ: Our biggest problem right now.\n</p>\n<p>\nS: Either we put together a Kickstarter so that you end up writing a manual and accountants all over the world will be like, “This is awesome!”. Or I just learn how to use Quickbooks.\n</p>\n<p>\nJ: Ledger does have a manual. That was one I wrote the manual for. It’s also not GPLed.\n</p>\n<p>\nS: There you go. There are ways to work around that… So your ideal is figure out how people can pay you for documentation because all the code is GPLed anyway. Are there other models that seem to be working for other people, other ways to make the awesome hackers that work on this stuff happy so that people can keep working on this cool stuff?\n</p>\n<p>\nJ: Not with Emacs hacking. I’ve been paid one time now to do a course on Emacs because my company does training, and Emacs training is one of things that we do offer.\n</p>\n<p>\nS: You should definitely explore that remote training aspect.\n</p>\n<p>\nJ: We’re looking into that. I believe that is the only time in my life that I have earned money just because of Emacs. So it hasn’t paid for itself monetarily, but it’s paid for itself in other ways.\n</p>\n<p>\nS: In terms of efficiency, being able to do all these things and fly through that. Anyway, that might be an interesting challenge for us also, figuring out how we can get more Emacs geeks to be rich and famous.\n</p>\n<p>\nJ: That’ll be the day.\n</p>\n<p>\nS: Imagine if we had an Emacs app marketplace?\n</p>\n<p>\nJ: Yeah, seriously… Wow. Just propose that idea on the mailing list and see what a flamewar that would begin.\n</p>\n<h3>The developer community</h3>\n<p>\nS: But it is very nice to be able to play around with all these packages, and there are thousands… A lot of them will go and look for ways to integrate with each other, like the way BBDB integrates with Gnus.\n</p>\n<p>\nJ: That’s another one that I use. And there’s always new stuff coming out, and authors are very good about interacting with each other. The author of helm just recently incorporated using my async module that I wrote. He did that just in a matter of a few days. Since helm is something I rely upon on all the time, I’m very happy to see that.\n</p>\n<p>\nS: That’s actually one of the challenges I came across when it came to writing documentation or writing a book about Emacs, especially the modules that people are working on. The packages, right? You share an idea, and the maintainers would be, like, “That’s an excellent idea!” and they would fold it in. So I kept running out of book topics! That’s a good thing about the community. It moves so fast.\n</p>\n<p>\nJ: If people are looking to know Emacs better, they should also stop by the IRC channel. I’m there every day, and a lot of people there can give good help if you have questions.\n</p>\n<p>\nS: Yeah. It only looks off-topic from time to time, but if people show up with Emacs questions…\n</p>\n<p>\nJ: It also depends on the time of day, too.\n</p>\n<p>\nS: Do evenings tend to work for you? When do people usually hang out there?\n</p>\n<p>\nJ: I’m a night coder, so that’s when I’m there, but people are there all around the clock.\n</p>\n<p>\nS: I tend to drop by in the evenings too, when I remember to do that. ERC makes it so easy because it’s just there.\n</p>\n<p>\nJ: Yeah, I haven’t seen you there that often. You should come by more.\n</p>\n<p>\nS: I know.\n</p>\n<p>\nJ: I always see you at the very end of my night, what would be dawn for most people. That’s when you usually come in.\n</p>\n<p>\nS: That’s funny. I’ve got to work on my timing. One of the things I want to do is figure out if we can have a regular Google Hangout or whatever, right… It’s easy to do screen-sharing through that and you can have multiple people, so, if we just get people together and say, “What have you learned about Emacs lately?” then it’s slightly more visual than IRC.\n</p>\n<p>\nJ: There’s also Twitter. A lot of people use that to talk about new stuff they’ve found in Emacs.\n</p>\n<p>\nS: Yeah, I’ve seen a couple of people tweeting really short Emacs tips, and it’s great to see that kind of stuff going on. I remember people used to have Emacs tips in their e-mail signatures as well. All these little ways to increase randomness. Emacs is so huge that if you just find little ways to say, “Oh, hey, there’s this new feature” or “There’s this interesting command over here,” who knows what it’ll spark?\n</p>\n<p>\nJ: There’s too much good stuff.\n</p>\n<h3>More tips for new people</h3>\n<p>\nS: So you recommend that if people are new, they should check out the IRC channel, EmacsWiki…\n</p>\n<p>\nJ: Go through the Emacs tutorial first. Then stop by the channel, read the Emacs manual, pick something you want to accomplish with Emacs and focus your learning around making that happen, rather than taking on the task of trying to swallow the whole thing right up front.\n</p>\n<p>\nS: People will easily divide into… You want to do programming, check out the EmacsWiki pages on the respective languages. If you want to do text editing or the subspecies of research paper editing or whatever else, then there are pages for that too.\n</p>\n<p>\nJ: There’s always more stuff out there than you’re aware of. I’ve been trying to make myself aware of everything that’s out there, and I keep running into new stuff on a daily basis. Just yesterday I found swank-js, which lets you interact with the Javascript interpreter inside your browser as a REPL. You can connect to Firefox and be manipulating the webpage through an Emacs REPL using Javascript. Isn’t that crazy? If I were doing web development, I could see that that would just be invaluable.\n</p>\n<p>\nS: I will go have to check that out. You’ve also mentioned a couple of other Emacs blogs, like Mastering Emacs… Is that one syndicated on Planet Emacsen yet?\n</p>\n<p>\nJ: I don’t know. I’m not sure if I have… I aggregate all of my feeds in Gnus into a virtual group, so I’m never aware of the actual source of any feed, I just get presented with one group that has all the current happenings in Emacs.\n</p>\n<h3>Emacs blogs and reading with Gnus + Gwene</h3>\n<p>\nS: Someday we should totally get your OPML and cross-reference it with everything that’s syndicated there.\n</p>\n<p>\nJ: That’s true. That wouldn’t be a bad project, maintain an OPML file of all the Emacs feeds out there on the Net, because I would love to keep my list updated. I went through and did a search through Gwene to see all the feeds that it had syndicated, which is of course not all the feeds that are out there. I did that two years ago, so there have been new feeds since.\n</p>\n<p>\nS: I’ll take that away as a TODO and see if Planet Emacsen will have all these things… Who was that in charge of it? Edward, Edward O’Connor.\n</p>\n<p>\nJ: Yeah, that’s right. So any time you find a new feed, add it to Gwene. That way, anyone who goes to the Gwene server with Gnus can just do a search for all groups matching to Emacs and subscribe to them all.\n</p>\n<p>\nS: With Gwene, when you reply, does it get posted as a comment too?\n</p>\n<p>\nJ: I’ve never replied to anything on a Gwene server, so I have no idea what it does.\n</p>\n<p>\nS: Yeah, it would be tricky to make it that smart. It would be cool, but it would be tricky.\n</p>\n<p>\nJ: There are so many blogging platforms and some require authorization and some have CAPTCHAs… It would be tough. I really thank Lars for setting that server up, because it allows me to digest a lot of news about Emacs in a very short period of time each day.\n</p>\n<h3>Dealing with data overload</h3>\n<p>\nS: What are some of your other massive-amounts-of-information-how-do-I-deal-with-this tips?\n</p>\n<p>\nJ: You mean just coping with data overload?\n</p>\n<p>\nS: Whether it’s programming, news, mail… How do you filter?\n</p>\n<p>\nJ: I use virtual groups a lot to aggregate so that I’m not overwhelmed by a huge number of groups that have lots of unread messages. I’d rather have fewer groups with more messages in them. Then I use Gnus’ very handy adaptive scoring with Gwene. In my .emacs repository, there’s a file called my-gnus-score. I’ve codified everything related to my scoring configuration in that file, so if you want to use the system that I use, that’s the file to get. Adaptive scoring basically allows me to go into a group and then if I see a thread there that’s not interesting to me and I don’t read it, I will never see that thread again. All of my groups only ever show me threads I’m currently reading, or new threads. I don’t have to wait through stuff I’m not interested in any more. It’s not that it just downscores it, it doesn’t appear at all. That’s a good way for me to cope with the thousands of articles per day that get downloaded to my machine, because I’m only reading maybe forty of them at best. That’s one good way to cope with the data over load.\n</p>\n<p>\nS: I’ve never found anything that had the kind of scoring that Gnus has. I want it with everything. I want it with Gmail, I want it with all that stuff… C’mon, get with the times!\n</p>\n<p>\nJ: Even though I receive my e-mail at Gmail, I suck it down to my machine with fetchmail and I put it into a local dovecot server so that Gnus will hold sway over it. The other thing that’s valuable in coping with data overload is just structure.\n</p>\n<p>\nStructure is really the key to everything. And when structure gets too big, then you just need metastructure. As long as you have some way to get to the thing that you need to know when you need to know it, but your top-level view – the thing that you’re thinking about in your mind – is always small, then it doesn’t matter how much information you have.\n</p>\n<p>\nI stopped deleting things that I downloaded a few years ago. I started having enough disk space that I just keep everything. You never know when you’re going to want it again. You never know when that version you had isn’t going to be on the Internet any more, etc. I have a giant file server that I built that just accumulates lots of information. There’s a directory in my home directory called archives, and archives now has about 400GB of files in it across millions of files. There are files within files. It’s just an enormous amount of information.\n</p>\n<p>\nBut the way that I manage that data overload is just by structure. I developed a taxonomy to put things into places by category and by topic. Whenever I have a file or whenever I’m looking for a file, I can know within seconds what the path name leading to that file or group of files is going to be, because I adhere to the taxonomy rigidly. I have an inbox where new stuff comes in, and then I sort the stuff out from the inbox using Dired into the parts of the taxonomy that it needs to go in.\n</p>\n<p>\nThe key there is that even though I have all this data – which is way more data than Spotlight or systems like that are ever going to help me search through – by having the right structure, the data is easy to find.\n</p>\n<p>\nI use Org mode as a sort of meta-structure so that if there are parts of that structure that I often refer to, I’ll put a link to them in Org mode. In Org mode, I’ll have a hot list, and the hot list are the things I care most about right now. The hot list will just branch to other lists or to other areas on the machine or other parts of the Web. You want to keep the hot list down to a reasonable small amount, so like ten to twenty items. That should branch out into everything else. Everything should ultimately go down to the leaves of everything that you have. If you have anything unowned by your hierarchy, it will get lost or it will just become forgotten. I believe that hierarchy is the solution to any problem in terms of data overload.\n</p>\n<p>\nS: I was just thinking about how I can organize my ever-growing Org files and I’ve been trying to create categorical indexes, going through all these things, creating links to my blog (external information and all of that)… but it’s fascinating to see how people have been organizing, especially since you’ve been using it for a while, and you have tons of information in it. Lists of lists.\n</p>\n<p>\nJ: And also information I keep needing to refer to, even years later. I’ll remember… I knew at one point how to disable the Spotlight index, for example, but I can’t remember the command. That command is no longer in my Zsh history file. How am I going to know that information? If I search for it, I might find it, but there are some things you just can’t search Google for because it’s too abstract. I’ll write it down in my Org mode file and even though it’s in the archive file, it’s still searchable, it’s still indexable. I can ask my whole system, what do you know about Spotlight? I’ll get a list back of all the things I ever thought were valuable to know about Spotlight, and in that list will be indexing, disabling, etc.\n</p>\n<p>\nS: That is an excellent use of Org mode. I remember you showed me a glimpse of your Emacs org file where you were listing all these things you were learning about Emacs, and that file looked really long.\n</p>\n<h3>Maintaining your information</h3>\n<p>\nJ: It does require some investment, though. Maintaining structure like this requires always weeding and pruning, combing and going through the data. My wife and I have a word for it. She’s Persian, and the Persian word for putting things in order is monazem(?). She’ll ask me—I’l l be at my computer, playing around with it—and she’ll say, “Are you monazeming?” All that I’m doing is just moving stuff around, I’m renaming things, I’m building index links… That might not be a fun task for everyone. Maybe part of me always wanted to be a librarian when I grew up. I actually get a lot of pleasure out of that. I find it relaxing. I find that imposing order on the chaos of my machine gives me a greater feeling of order in my own life, and that makes me better able to handle the new information that’s going to come in the next day.\n</p>\n<p>\nS: It also helps you remember what’s in your file, so you know what you can search for.\n</p>\n<p>\nJ: That’s very important. Our memory, it’s not ever going to be good enough to just keep our eyes on the thousand things we might have in our configuration or the million things we might have in our machines these days. That doesn’t even include all the things we’ve seen on the Internet, thought were cool, but haven’t noted down anywhere. We just remember that it’s there, but we’re losing those all the time and we’re not aware that we’re losing them.\n</p>\n<p>\nS: At least until you plug your browser history into an Org thingy that automatically captures all of that stuff. People used to have browser plugins that did that…\n</p>\n<p>\nJ: That’s a neat idea, actually. Hmm…. I like that idea. I used to not have any cap on my history in the browser, but ultimately it makes the browser too slow. But it would be nice to queue it out to a log file or a database where it just gives the link, a title, and a synopsis of the contents. That would be kinda nice. You’re giving me ideas, Sacha.\n</p>\n<h3>Wrapping up</h3>\n<p>\nS: So, we’ll see it next week, then? Okay. Lots of tips on all these different things you can do with Emacs, where to get started, how to organize a huge archive of information (lists of lists and breaking things down)… Any parting words before I line up other people to bring on to this “Let’s Talk about Emacs” thing?\n</p>\n<p>\nJ: Just that Emacs is fun. All of this technical stuff, all of these features… the reason I use it is because it’s fun.\n</p>\n<p>\nS: It is. It’s a lot of fun. It’s even more fun because… Well, I get to bump into people like you, and the Emacs community is so awesome!\n</p>\n<p>\nJ: I got to know you through it as well! That’s been a great thing.\n</p>\n<p>\nS: When you made me the maintainer of Planner, I was, like, “Oh my gosh, I’ve never maintained anything before.” I was a university student, and it was an excellent experience.\n</p>\n<p>\nJ: I always appreciated the little cards that you sent me from time to time through the years, mentioning your uses of Planner…\n</p>\n<p>\nS: I should send cards to Carsten too. Bastien is the new maintainer, isn’t he? Emacs appreciation cards.\n</p>\n<p>\nJ: That’s right. I think that’s a great thing you did. Thanks, Sacha!\n</p>\n<p>\nS: Thank you so much. Nice talking to you, and I’ll catch you again sometime.\n</p>\n<p>\nJ: Have a good night!\n</p>\n<p>\n(Transcription took me 2:35 for 0:44 of audio.)</p>\n<p>Read the original or check out the comments on: <a href=\"http://sachachua.com/blog/2012/07/transcript-emacs-chat-john-wiegley/\">Transcript: Emacs chat with John Wiegley</a> (Sacha Chua's blog)</p>" "http://sachachua.com/blog/2012/07/transcript-emacs-chat-john-wiegley/" (20465 36166) new 13 nil nil ((title ((type . "html") (xml:lang . "en-US")) "sachachua: Transcript: Emacs chat with John Wiegley") (link ((href . "http://sachachua.com/blog/2012/07/transcript-emacs-chat-john-wiegley/"))) (id nil "http://sachachua.com/blog/?p=23536") (updated nil "2012-07-02T12:00:06+00:00") (content ((type . "html") (xml:lang . "en-US")) "<p>This post is long, so if you’re reading this on the main page, go to <a href=\"http://sachachua.com/blog/2012/07/transcript-emacs-chat-john-wiegley/\">http://sachachua.com/blog/2012/07/transcript-emacs-chat-john-wiegley/</a> to view the full transcript!</p>\n<p><span id=\"more-23536\"></span></p>\n<p>Here’s the video.</p>\n<p>\n</p><p><a href=\"http://vimeo.com/44778543\">John Wiegley – June 26, 2012</a> from <a href=\"http://vimeo.com/user1851927\">Sacha Chua</a> on <a href=\"http://vimeo.com\">Vimeo</a>.</p>\n<h3>A day in the life of John Wiegley</h3>\n<p>\nSacha: One of the things I’ve always been curious about is all the different things that you use Emacs for. You’ve been one of our role models for ages now, and clearly you do a lot of Emacs Lisp programming with it, but what’s a day in the life of John Wiegley like?\n</p>\n<p>\nJ: I spend the most of my time in Org and Gnus. All of my task management… I think I’ve processed over 5,000 tasks in Org mode now, since I started using it. I’m a very very heavy Org mode user. I’m always in Gnus, always checking my e-mail through that. I use ERC. I actually run a second Emacs. For my Mac, I built another Emacs under another name, and I use that Emacs just for running ERC. I use that in conjunction with bitlbee so that I’m always on IM, always on IRC, and also that’s my Twitter client as well. So that’s always running on the side as well. I spend a lot of time then in Eshell, all the programming modes… Most of my day work is in C and C++ when I’m not hacking elisp.\n</p>\n<p>\nS: Why do you keep your ERC in a separate Emacs? To minimize distraction, or…\n</p>\n<p>\nJ: When I’m hacking on Emacs, I end up needing to restart it quite often. Many many times a day, sometimes. That’s because I never know which definitions… Sometimes you change a definition from a function to a macro or vice versa, and you don’t know which other definitions you have to reevaluate in order for them to inline the new definition. Rather than have to figure that out all the time, I just restart Emacs.\n</p>\n<p>\nS: Hence your trick of making sure that everything’s compiled and that you’re requiring all the files you need so that it loads up cleanly.\n</p>\n<p>\nJ: I just recently fixed a problem in my .emacs and I discovered that compiling it was not giving me any speed benefit. I thought compilation was what was making my .emacs run so fast, and it wasn’t. It was that I was loading—when I was running a non-byte-compiled Emacs,I was loading things that I didn’t need to load. When I fixed that problem, which is now fixed in my .emacs repository, Emacs loads in just over a second, but without doing any byte-compilation in my Emacs.\n</p>\n<p>\nS: I must definitely be doing something long, because my Emacs takes a while to load.\n</p>\n<p>\nJ: How long?\n</p>\n<p>\nS: I don’t know. I tried using the profiling thing, and because I use the Emacs Starter Kit, it didn’t get very deep. It feels like ten seconds or so. It takes a while. I can’t be bouncing it up and down like you do.\n</p>\n<p>\nS: So you do a lot of Emacs Lisp programming, naturally. You’re on ERC, and you’re doing C and C++ development. Are there other really weird things you do that people wouldn’t expect Emacs to handle?\n</p>\n<p>\nJ: Let me think… I use it to play chess online.\n</p>\n<p>\nS: Yeah, there are so many games in there! I play Nethack in there, so… pot, kettle, black, here.\n</p>\n<p>\nJ: I use it to look at databases. I use it… Let’s see… I of course use TRAMP to edit not only files remotely, but also local files through sudo so that I can edit them. Weird things I do in Emacs… A mode I forgot to mention is that I use git for all the version control that I do, and so magit is a mode that I just basically live in. For any project that I’m working on, the magit buffer becomes the home buffer for that project, and I’m constantly looking at that buffer to see what work I’ve done, what work should be committed now.\n</p>\n<p>\nS: I haven’t made that a big part of my workflow yet, but I’ve heard such good things about it.\n</p>\n<p>\nJ: It’s a very nice mode. I use it in conjunction with the built-in vc mode of Emacs. If I’m editing a file and I really quickly want to know what I’ve done to this file, I’ll do C-x v = to get the diff of the current file. If I want an overview of what have I been doing and what I have been touching, I’ll go to the magit buffer and look at the stats.\n</p>\n<p>\nS: I guess you version-control your Org files too. How many Org files do you typically work with, and how do you manage that?\n</p>\n<p>\nJ: I have eight. All of my active tasks exist in a single Org file. The other seven Org files are all archives. I have an archive file for every project, even though the live project lives in the main TODO file. That way, when I do an Org search, it’s only at that time that it loads in all of the Org files to do the search. I need Org to be as quick as it can, since I’m basically modifying tasks and adding tasks to it as the days go on.\n</p>\n<p>\nS: That could be it. I’ve got a humongous Org file and org-refile takes a while trying to parse it.\n</p>\n<p>\nJ: Yes, it does, it does. I use Dropbox to synchronize my Org-mode files to my iPhone because I use org-mobile. Another interesting tool I have found is that there’s an app for the iPhone called dropVox, which lets you take a voice note and it puts it into Dropbox. I have an Org-mode hook so that whenever I open my Org-mode buffer, if there’s an audio file in my Dropvox box, it will pop up Dired and show it to me, meaning “You should listen to this and add it as a note to your Org mode now.”\n</p>\n<p>\nS: That’s awesome. That’s like If This Then That on steroids.\n</p>\n<p>\nJ: All during the day, new tasks are coming in. They’re either coming in by ideas, by e-mail, by webpages… I have a keybinding I use in Emacs. Since I don’t use M-m for anything else, M-m is my make-a-note keybinding. So, wherever I’m at, if I hit M-m, it will make an org-capture and it will link it to whatever I was on when I did the capture, and it will link it to whatever I was on when I did the capture. If I was on an e-mail, it links it to the e-mail. Well, there’s a tool for the Mac called Quick Keys, and Quick Keys lets you rebind things globally on your system. I’ve made it so that M-n works anywhere on the system and tries to be as intelligent as it can. If I’m looking at Chrome and I hit M-n, it will take me to Emacs, pop up the org-capture buffer, and then put a link over to the webpage that I was looking at.\n</p>\n<p>\nS: Is that using org-protocol or just QuickKeys?\n</p>\n<p>\nJ: It’s not using org-protocol. It’s just using QuickKeys. The only thing QuickKeys is really doing is it’s switching over, and then I use AppleScript from Emacs to talk to Chrome and get the information. I actually use AppleScript quite a lot for many different things. Using AppleScript from Emacs is something I do often.\n</p>\n<p>\nS: What are some of the other AppleScripty things you do with Emacs?\n</p>\n<p>\nJ: I don’t like to keep Dropbox running all the time because it takes lots of background CPU. At the end of a few days, when I look at my process list and I look at total time in the kernel spent by all the process, Dropbox is usually #2 behind the kernel itself. That’s a little egregious to me when I’m only using it once in a while. I have Applescript so that in Org Mode, when I say go get my mobile tasks, it starts up Dropbox, waits half a minute, and then stops Dropbox. So it’s just running enough time to do this synchronization. And of course, I use that async module that I told you about last week to do that work.\n</p>\n<p>\nS: It sounds like you’ve got it quite integrated into the other things you use on your Mac. That’s fantastic.\n</p>\n<p>\nJ: Emacs is the center of my entire environment.\n</p>\n<p>\nS: Being able to glue all these bits together and make things work… That’s incredible.\n</p>\n<h3>On wishlists and Emacs Lisp</h3>\n<p>\nS: What are some of things you wish you could glue together? What’s the John Wiegley to-code-some-point-in-the-future list?\n</p>\n<p>\nJ: I’d like it if Emacs had a foreign function interface so that I could talk directly to databases and other things. There’s a fork of XEmacs that can communicate directly with PostgreSQL, and something like that would be nice because there are some systems that I work with where it would just be faster and more efficient if Emacs could talk to those systems directly instead of me having to communicate with them over a process. Embedding a Python interpreter, or embedding a Ruby interpreter…\n</p>\n<p>\nS: Vim is extensible in a couple of different languages now, isn’t it?\n</p>\n<p>\nJ: I do prefer Emacs Lisp. I have to tell you that probably of all the languages I’ve used, definitely, Emacs Lisp has been the most fun. I won’t call it the best language out there because it does have its downsides and it’s a little bit slow. I can’t use it for most general tasks. But it’s fun, because you see results immediately, the debugger’s easy to use, the documentation is great and completely available at the tip of your fingers. It may be true that I have written more new code in Emacs Lisp than in any other language by this time.\n</p>\n<p>\nS: I wouldn’t be surprised.\n</p>\n<p>\nJ: I’ve worked on much bigger projects in C and C++, but those didn’t always involve spitting out reams and reams of new code. Whereas as the day goes by, I’m writing new Emacs Lisp functions usually left and right to get particular jobs done.\n</p>\n<p>\nS: I’m always running into your name. Oh, Planner! Oh, remember! Oh, eshell!\n</p>\n<p>\nJ: Too bad not all of those projects succeeded as well as I’d hoped.\n</p>\n<p>\nS: Going back to talking about org-capture and picking up an annotation really quickly… I remember when we were playing around with that. Finding ways to hook parts of Emacs into all the different parts of Emacs… It’s great to see so many people playing around with these ideas.\n</p>\n<h3>The Emacs community</h3>\n<p>\nJ: It’s a great community. It’s a good culture around Emacs.\n</p>\n<p>\nS: How did we end up with something as cool as this? Emacs is pretty unique among the software packages or open source tools I’ve seen. Vim users are pretty happy and they share a lot of tips, and on the other end of the spectrum there’s Eclipse, and there’s a ton of development work around Eclipse, but Emacs… it’s old, but lots of stuff is going on. Why?\n</p>\n<p>\nJ: My opinion on that would be is that the real success was the Lisp machine. The Lisp machine was an entire machine that was what Emacs is to editing. You sit down at your operating system and it doesn’t matter what you’re using – your editor, your shell, your document viewer, whatever – they’re all written in Lisp. You can modify them as you go. The documentation for anything is available as you’re looking at it. You can pop the system into a debugger at any time. Lisp machines may not have succeeded, but Emacs Lisp… Emacs took that environment and that idea, and brought it down to the domain of a single application, the editor. It gives us all the cool things about the Lisp machine: the fact that the debugger’s available all the time and the documentation is completely cross-linked with everything. I think that’s probably what we’re experiencing, and that’s why it’s so much fun.\n</p>\n<p>\nS: … And the fact that you can get in, you can tweak just that little thing just a little bit, and eventually end up with this massive Emacs configuration because you’ve been tweaking it to fit you.\n</p>\n<p>\nJ: I have to say that the original designers and Dr. Stallman – they had a very good idea when they put in a lot of hooks throughout Emacs. There are other extensible systems out there in the world that are not as extensible because they lack sufficient degree of hookage inside, places where you can latch on a piece of code to execute when something happens. Emacs has got those everywhere. That plus its advising system lets you basically change the behaviour of anything or augment the behaviour of anything.\n</p>\n<p>\nS: I have to confess it’s one of the things I like the way that Ruby on Rails will let you open up classes, redefine functions, and then continue on with your work. The extensibility built into the very language is very very helpful. It also can be very intimidating.\n</p>\n<h3>Learning Emacs</h3>\n<p>\nS: We’ve talked about this before. You’re maybe one of a few Emacs users over there. I’ll on occasion run into someone who’s curious about Emacs but hasn’t taken the plunge. How do we get more people interested in this stuff?\n</p>\n<p>\nJ: Well, getting them interested is not that hard. It’s getting them to climb the learning curve that’s difficult. My wife’s a physician, and she sees what I do with Org-mode. She’s been tempted to learn Emacs just to use Org-mode.\n</p>\n<p>\nS: I hear a lot of stories like that.\n</p>\n<p>\nJ: But the learning curve is so enormous that she just doesn’t have the time to learn it.\n</p>\n<p>\nS: At some point you were very much into Vi, and then you said, okay, we’re going to learn things the Emacs way. You just sat down and you did it. Is that something we expect people to sit down and do at some point? Have you come across any things that make it easier for people?\n</p>\n<p>\nJ: Not necessarily that make it easier for people, unfortunately. I think it’s a philosophy thing. I use Emacs. I’m in Emacs and I use Emacs probably 70% of my every working day. It pays dividends to master it. Every efficiency gain I get in Emacs, I get to make use of right away, and it pays off as the days go by. There are people who type for their living who don’t know how to touch-type. That, to me, is the exact same scenario. How can you make your living as an engineer, typing day in, day out, and yet lose the productivity that you would gain by learning to touch-type. Even learning to touch-type – yeah, it will take you a few weeks. You either use a piece of software or go to class, whatever. So there is a hump that you have to get over, and you may not have the time to get over that hump right now, but it’s an investment, and that investment will pay off.\n</p>\n<p>\nS: Get to know your tools and get to know them really well, because you’re using them all the time. In terms of Emacs, Emacs being very very big and Emacs being something that moves very quickly, what are some of the things that you want to dig into and learn more about?\n</p>\n<p>\nJ: I would like to learn the C side of Emacs more. I’ve never known the C side of Emacs. I’ve just recently been looking at the bytecode interpreter and trying to learn how it does what it does to see if there are ways to get better performance into Emacs. That, for me, is the undiscovered country. That’s where I want to go next.\n</p>\n<p>\nS: It does sound like a lot of deep magic. That’s the very core of it.\n</p>\n<p>\nJ: It’s not as crazy as it seems. It’s pretty well done on the inside. Emacs without all of its Lisp modes and packages on top of it, if you boil it down to just its essence… the kernel is not really that huge. It’s a very small, very tidy, simple thing. Of course, there are places where it has some rough edges that can be smoothed, but it’s not what people think of as Emacs. They think of this kitchen sink application that does absolutely everything. That’s a lot of Lisp stuff that goes around the little kernel, whereas the kernel is very tight and small. I want to know more about that because anything done in the kernel affects everything else.\n</p>\n<p>\nS: If you ever get around to doing annotated source code, I’d definitely read that.\n</p>\n<h3>Making money with Emacs</h3>\n<p>\nS: I hear you’re kinda on the hook for eshell documentation or whatever else people would like you to write.\n</p>\n<p>\nJ: That’s true. There’s a reason why the eshell documentation was never written. This would be a whole different discussion. I have some misgivings about what kind of world the GPL would create if it was everywhere. I do a lot of my programming as a hobbyist, but I have to make money programming as well.\n</p>\n<p>\nThe way to make money through software is usually to sell it. Otherwise, if you make money only through services, that never takes off. If you make a piece of software and you license it, it can take off. It can start making money for you and you don’t have to work to earn every day. Then you can use that time that you now have to make more software.\n</p>\n<p>\nIf the only income that you ever made was based on services, then you basically have to be working all day long, and when would you ever get your hobby coding done? When you only have six to eight hours a day to do any coding at all (because there are things that we have to do), you want to have a setup where you can do as much creative coding as possible.\n</p>\n<p>\nSince the GPL’s view of the world is that you get paid through the services and you get paid through the documentation, when I released eshell, my thought was, “Okay, I’ve written the code, the code is in the GPL, so it’s freely distributable and I can’t charge anyone for it, but if they want services around eshell, then they can pay me for that.” I have always told the community that if someone wants to step up and pay for it, I’ll write the eshell documentation. But that’s never happened. So if the community doesn’t value the eshell documentation enough to pay me to do it, then why would I spend the time that I could be spending coding to write it?\n</p>\n<p>\nS: Do you know what kind of bounty system we have or something like that for lots of people to say, “I want to pitch in so and so much to e-shell documentation?” Do we have that?\n</p>\n<p>\nJ: Yeah, or a Kickstarter project, for example.\n</p>\n<p>\nS: That would be cool.\n</p>\n<h3>New users and Emacs happiness</h3>\n<p>\nS: You’ve been an awesomely prolific Emacs Lisp programmer, so it would be interesting…\n</p>\n<p>\nJ: Well, it’s just that I’ve been doing it for so long. It’s been eighteen years now since the first package that I wrote and submitted to Emacs. I know! You were just a kid back then when I was writing align.el.\n</p>\n<p>\nS: I was ten! I’ve used align.el.\n</p>\n<p>\nJ: Yup. It was made when you were ten.\n</p>\n<p>\nS: Are you seeing a lot of other young people get interested in this stuff?\n</p>\n<p>\nJ: Sure! It’s basically if you’re not going to be using an IDE like Visual Studio or Eclipse or something, Emacs is still one of the two great editors out there. It’s either going to be you go with Emacs or you go with Vim. It still pulls in new people all the time.\n</p>\n<p>\nS: There’s just so much. Once people start customizing it, they get sucked in. As you said earlier, there’s a lot of interest in Emacs from the nontechnical side of the world. Writing, scientific papers…\n</p>\n<p>\nJ: We’re getting a lot of new users just because of Org mode.\n</p>\n<p>\nS: How many years ago was that? Now, it’s just grown into this massive thing where people are writing their research papers and they’re doing their data analyses in org-babel, and having something come out… Literate programming writ large.\n</p>\n<p>\nJ: I started using it in 2007 and I think it was a couple of years old by then already. I tried to drop Org-mode a couple of times. I was thinking, there are sexier-looking apps for the Mac. There are apps that have better and tighter integration for the iPhone. On two different occasions, I left, converted all of my tasks over to a different program, used that program for a few months, came back to Org… and I always felt happy to be back in Org. I don’t know what it is about it. It looks right. It feels right. It’s got the right balance between how finely you can enter and manipulate the information, and how coarsely you can look at it at a glance. Other applications that I used… I don’t know.\n</p>\n<p>\nThere was just something about them, but I wasn’t getting the tasks done. I would put all the tasks into the application and I’d be excited about it for a few weeks, and then after a couple of months, I just wouldn’t look at it any more. I would know that the tasks were in it, but I would never do anything about them. The way I use Org Mode, I use it like a day planner, so that every task I intend to do is scheduled for a particular day. I’m rescheduling tasks and moving them to new days every single day for years now, and it just never has felt like a burden. So there’s something that Org does right.\n</p>\n<p>\nS: There’s the hack that you told me about the other time where you change your window size, so you watch it shrink as you finish your tasks.\n</p>\n<p>\nJ: I fit it to the window.\n</p>\n<p>\nS: Little motivational hacks that you can do because you can play around with the tool itself. I remember when I was trying to learn through flashcards using flashcard.el, I rigged it up so that it would tell me a joke using fortune.el and everything I got something right. It was either that or show me a cute cat picture from the files I’d saved off icanhascheezburger. The fact that you can hack it to do all sorts of crazy things… that’s incredible.\n</p>\n<p>\nJ: I just started playing around with its ability to view PDF files. You can use C-x C-f to open a PDF file and you’ll see it in your Emacs. It renders them page by page as PNG files, and then uses the Imagemagick extension built into Emacs 24 to show you those pages. Which is useful to me because I’m often looking at a language specification as I’m writing code, and it’s nice to have it in another buffer the way that I would have Emacs documentation. I can look at the C++ standard now and have it just be in another buffer.\n</p>\n<p>\nS: How did you come across this new capability, because I didn’t know about this?\n</p>\n<p>\nJ: I think I ran into it accidentally. I think I was in Dired mode and I hit return on a PDF instead of hitting ! to open it, and all of a sudden, there it was, and I was, like, “Wow, I didn’t know Emacs could do that…”\n</p>\n<p>\nS: Basically, for people who want to learn things… Just do random things in Emacs!\n</p>\n<p>\nJ: Although if you’re going to do random things in Emacs, take notes. Otherwise, you’ll never know how to get back to what you found.\n</p>\n<p>\nS: That’s what the lossage buffer is for, isn’t it?\n</p>\n<p>\nJ: The lossage buffer can be a bit hard to read, though.\n</p>\n<p>\nS: Execute-extended-command?\n</p>\n<p>\nJ: I did find on Emacswiki a mode called Command Log. It keeps in a very readable form every command you use.\n</p>\n<p>\nS: I definitely have to pick up this habit of yours of just reading Emacswiki.\n</p>\n<p>\nJ: That’s how I started learning. You asked about how people get over the learning hump. I’ll tell you what I did. Back in 1994, when I started really wanting to know Emacs, what I did was I printed out the Emacs manual, which at the time was I think seven or eight hundred pages. It was just single-sided paper. I probably killed a small tree doing it. But I brought that stack of papers over to my desk and I put it to the side. At the time, my machine was slow enough that I was often waiting for builds to finish. What I would do is while whatever was building on my machine, I would pick up the top page of the Emacs manual, I’d read it, and then I would throw it away. I just did that over several weeks’ time. I ended up reading the Emacs manual in all of this dead time that I had, waiting for compilations to finish. I made that a yearly habit for the first four years, just to constantly refresh my knowledge of what’s in there, because it’s such a massively huge environment. It helped.\n</p>\n<p>\nS: My story is that I’ve used Emacspeak to synthesize the Emacs manual so that I can listen to it while walking around. I was reading my mail off Gnus at the time. You could use Emacspeak to read your mail and all of that stuff. You find all these ways to cram information into your brain. I would be up for more podcasts. I see people are coming out with books as well. There’s the Org mode book. That might be another way for you to do it, right? You write your documentation and you say, here’s a book that you can buy. But then it’s very speculative work, I suppose.\n</p>\n<h3>Back to earning</h3>\n<p> S: Speaking of other things that integrate into Emacs… Thank you for writing Ledger, by the way, because I still run all my finances with it. I have no idea where I’m going to find an accountant who understands Ledger…</p>\n<p>\nJ: Our biggest problem right now.\n</p>\n<p>\nS: Either we put together a Kickstarter so that you end up writing a manual and accountants all over the world will be like, “This is awesome!”. Or I just learn how to use Quickbooks.\n</p>\n<p>\nJ: Ledger does have a manual. That was one I wrote the manual for. It’s also not GPLed.\n</p>\n<p>\nS: There you go. There are ways to work around that… So your ideal is figure out how people can pay you for documentation because all the code is GPLed anyway. Are there other models that seem to be working for other people, other ways to make the awesome hackers that work on this stuff happy so that people can keep working on this cool stuff?\n</p>\n<p>\nJ: Not with Emacs hacking. I’ve been paid one time now to do a course on Emacs because my company does training, and Emacs training is one of things that we do offer.\n</p>\n<p>\nS: You should definitely explore that remote training aspect.\n</p>\n<p>\nJ: We’re looking into that. I believe that is the only time in my life that I have earned money just because of Emacs. So it hasn’t paid for itself monetarily, but it’s paid for itself in other ways.\n</p>\n<p>\nS: In terms of efficiency, being able to do all these things and fly through that. Anyway, that might be an interesting challenge for us also, figuring out how we can get more Emacs geeks to be rich and famous.\n</p>\n<p>\nJ: That’ll be the day.\n</p>\n<p>\nS: Imagine if we had an Emacs app marketplace?\n</p>\n<p>\nJ: Yeah, seriously… Wow. Just propose that idea on the mailing list and see what a flamewar that would begin.\n</p>\n<h3>The developer community</h3>\n<p>\nS: But it is very nice to be able to play around with all these packages, and there are thousands… A lot of them will go and look for ways to integrate with each other, like the way BBDB integrates with Gnus.\n</p>\n<p>\nJ: That’s another one that I use. And there’s always new stuff coming out, and authors are very good about interacting with each other. The author of helm just recently incorporated using my async module that I wrote. He did that just in a matter of a few days. Since helm is something I rely upon on all the time, I’m very happy to see that.\n</p>\n<p>\nS: That’s actually one of the challenges I came across when it came to writing documentation or writing a book about Emacs, especially the modules that people are working on. The packages, right? You share an idea, and the maintainers would be, like, “That’s an excellent idea!” and they would fold it in. So I kept running out of book topics! That’s a good thing about the community. It moves so fast.\n</p>\n<p>\nJ: If people are looking to know Emacs better, they should also stop by the IRC channel. I’m there every day, and a lot of people there can give good help if you have questions.\n</p>\n<p>\nS: Yeah. It only looks off-topic from time to time, but if people show up with Emacs questions…\n</p>\n<p>\nJ: It also depends on the time of day, too.\n</p>\n<p>\nS: Do evenings tend to work for you? When do people usually hang out there?\n</p>\n<p>\nJ: I’m a night coder, so that’s when I’m there, but people are there all around the clock.\n</p>\n<p>\nS: I tend to drop by in the evenings too, when I remember to do that. ERC makes it so easy because it’s just there.\n</p>\n<p>\nJ: Yeah, I haven’t seen you there that often. You should come by more.\n</p>\n<p>\nS: I know.\n</p>\n<p>\nJ: I always see you at the very end of my night, what would be dawn for most people. That’s when you usually come in.\n</p>\n<p>\nS: That’s funny. I’ve got to work on my timing. One of the things I want to do is figure out if we can have a regular Google Hangout or whatever, right… It’s easy to do screen-sharing through that and you can have multiple people, so, if we just get people together and say, “What have you learned about Emacs lately?” then it’s slightly more visual than IRC.\n</p>\n<p>\nJ: There’s also Twitter. A lot of people use that to talk about new stuff they’ve found in Emacs.\n</p>\n<p>\nS: Yeah, I’ve seen a couple of people tweeting really short Emacs tips, and it’s great to see that kind of stuff going on. I remember people used to have Emacs tips in their e-mail signatures as well. All these little ways to increase randomness. Emacs is so huge that if you just find little ways to say, “Oh, hey, there’s this new feature” or “There’s this interesting command over here,” who knows what it’ll spark?\n</p>\n<p>\nJ: There’s too much good stuff.\n</p>\n<h3>More tips for new people</h3>\n<p>\nS: So you recommend that if people are new, they should check out the IRC channel, EmacsWiki…\n</p>\n<p>\nJ: Go through the Emacs tutorial first. Then stop by the channel, read the Emacs manual, pick something you want to accomplish with Emacs and focus your learning around making that happen, rather than taking on the task of trying to swallow the whole thing right up front.\n</p>\n<p>\nS: People will easily divide into… You want to do programming, check out the EmacsWiki pages on the respective languages. If you want to do text editing or the subspecies of research paper editing or whatever else, then there are pages for that too.\n</p>\n<p>\nJ: There’s always more stuff out there than you’re aware of. I’ve been trying to make myself aware of everything that’s out there, and I keep running into new stuff on a daily basis. Just yesterday I found swank-js, which lets you interact with the Javascript interpreter inside your browser as a REPL. You can connect to Firefox and be manipulating the webpage through an Emacs REPL using Javascript. Isn’t that crazy? If I were doing web development, I could see that that would just be invaluable.\n</p>\n<p>\nS: I will go have to check that out. You’ve also mentioned a couple of other Emacs blogs, like Mastering Emacs… Is that one syndicated on Planet Emacsen yet?\n</p>\n<p>\nJ: I don’t know. I’m not sure if I have… I aggregate all of my feeds in Gnus into a virtual group, so I’m never aware of the actual source of any feed, I just get presented with one group that has all the current happenings in Emacs.\n</p>\n<h3>Emacs blogs and reading with Gnus + Gwene</h3>\n<p>\nS: Someday we should totally get your OPML and cross-reference it with everything that’s syndicated there.\n</p>\n<p>\nJ: That’s true. That wouldn’t be a bad project, maintain an OPML file of all the Emacs feeds out there on the Net, because I would love to keep my list updated. I went through and did a search through Gwene to see all the feeds that it had syndicated, which is of course not all the feeds that are out there. I did that two years ago, so there have been new feeds since.\n</p>\n<p>\nS: I’ll take that away as a TODO and see if Planet Emacsen will have all these things… Who was that in charge of it? Edward, Edward O’Connor.\n</p>\n<p>\nJ: Yeah, that’s right. So any time you find a new feed, add it to Gwene. That way, anyone who goes to the Gwene server with Gnus can just do a search for all groups matching to Emacs and subscribe to them all.\n</p>\n<p>\nS: With Gwene, when you reply, does it get posted as a comment too?\n</p>\n<p>\nJ: I’ve never replied to anything on a Gwene server, so I have no idea what it does.\n</p>\n<p>\nS: Yeah, it would be tricky to make it that smart. It would be cool, but it would be tricky.\n</p>\n<p>\nJ: There are so many blogging platforms and some require authorization and some have CAPTCHAs… It would be tough. I really thank Lars for setting that server up, because it allows me to digest a lot of news about Emacs in a very short period of time each day.\n</p>\n<h3>Dealing with data overload</h3>\n<p>\nS: What are some of your other massive-amounts-of-information-how-do-I-deal-with-this tips?\n</p>\n<p>\nJ: You mean just coping with data overload?\n</p>\n<p>\nS: Whether it’s programming, news, mail… How do you filter?\n</p>\n<p>\nJ: I use virtual groups a lot to aggregate so that I’m not overwhelmed by a huge number of groups that have lots of unread messages. I’d rather have fewer groups with more messages in them. Then I use Gnus’ very handy adaptive scoring with Gwene. In my .emacs repository, there’s a file called my-gnus-score. I’ve codified everything related to my scoring configuration in that file, so if you want to use the system that I use, that’s the file to get. Adaptive scoring basically allows me to go into a group and then if I see a thread there that’s not interesting to me and I don’t read it, I will never see that thread again. All of my groups only ever show me threads I’m currently reading, or new threads. I don’t have to wait through stuff I’m not interested in any more. It’s not that it just downscores it, it doesn’t appear at all. That’s a good way for me to cope with the thousands of articles per day that get downloaded to my machine, because I’m only reading maybe forty of them at best. That’s one good way to cope with the data over load.\n</p>\n<p>\nS: I’ve never found anything that had the kind of scoring that Gnus has. I want it with everything. I want it with Gmail, I want it with all that stuff… C’mon, get with the times!\n</p>\n<p>\nJ: Even though I receive my e-mail at Gmail, I suck it down to my machine with fetchmail and I put it into a local dovecot server so that Gnus will hold sway over it. The other thing that’s valuable in coping with data overload is just structure.\n</p>\n<p>\nStructure is really the key to everything. And when structure gets too big, then you just need metastructure. As long as you have some way to get to the thing that you need to know when you need to know it, but your top-level view – the thing that you’re thinking about in your mind – is always small, then it doesn’t matter how much information you have.\n</p>\n<p>\nI stopped deleting things that I downloaded a few years ago. I started having enough disk space that I just keep everything. You never know when you’re going to want it again. You never know when that version you had isn’t going to be on the Internet any more, etc. I have a giant file server that I built that just accumulates lots of information. There’s a directory in my home directory called archives, and archives now has about 400GB of files in it across millions of files. There are files within files. It’s just an enormous amount of information.\n</p>\n<p>\nBut the way that I manage that data overload is just by structure. I developed a taxonomy to put things into places by category and by topic. Whenever I have a file or whenever I’m looking for a file, I can know within seconds what the path name leading to that file or group of files is going to be, because I adhere to the taxonomy rigidly. I have an inbox where new stuff comes in, and then I sort the stuff out from the inbox using Dired into the parts of the taxonomy that it needs to go in.\n</p>\n<p>\nThe key there is that even though I have all this data – which is way more data than Spotlight or systems like that are ever going to help me search through – by having the right structure, the data is easy to find.\n</p>\n<p>\nI use Org mode as a sort of meta-structure so that if there are parts of that structure that I often refer to, I’ll put a link to them in Org mode. In Org mode, I’ll have a hot list, and the hot list are the things I care most about right now. The hot list will just branch to other lists or to other areas on the machine or other parts of the Web. You want to keep the hot list down to a reasonable small amount, so like ten to twenty items. That should branch out into everything else. Everything should ultimately go down to the leaves of everything that you have. If you have anything unowned by your hierarchy, it will get lost or it will just become forgotten. I believe that hierarchy is the solution to any problem in terms of data overload.\n</p>\n<p>\nS: I was just thinking about how I can organize my ever-growing Org files and I’ve been trying to create categorical indexes, going through all these things, creating links to my blog (external information and all of that)… but it’s fascinating to see how people have been organizing, especially since you’ve been using it for a while, and you have tons of information in it. Lists of lists.\n</p>\n<p>\nJ: And also information I keep needing to refer to, even years later. I’ll remember… I knew at one point how to disable the Spotlight index, for example, but I can’t remember the command. That command is no longer in my Zsh history file. How am I going to know that information? If I search for it, I might find it, but there are some things you just can’t search Google for because it’s too abstract. I’ll write it down in my Org mode file and even though it’s in the archive file, it’s still searchable, it’s still indexable. I can ask my whole system, what do you know about Spotlight? I’ll get a list back of all the things I ever thought were valuable to know about Spotlight, and in that list will be indexing, disabling, etc.\n</p>\n<p>\nS: That is an excellent use of Org mode. I remember you showed me a glimpse of your Emacs org file where you were listing all these things you were learning about Emacs, and that file looked really long.\n</p>\n<h3>Maintaining your information</h3>\n<p>\nJ: It does require some investment, though. Maintaining structure like this requires always weeding and pruning, combing and going through the data. My wife and I have a word for it. She’s Persian, and the Persian word for putting things in order is monazem(?). She’ll ask me—I’l l be at my computer, playing around with it—and she’ll say, “Are you monazeming?” All that I’m doing is just moving stuff around, I’m renaming things, I’m building index links… That might not be a fun task for everyone. Maybe part of me always wanted to be a librarian when I grew up. I actually get a lot of pleasure out of that. I find it relaxing. I find that imposing order on the chaos of my machine gives me a greater feeling of order in my own life, and that makes me better able to handle the new information that’s going to come in the next day.\n</p>\n<p>\nS: It also helps you remember what’s in your file, so you know what you can search for.\n</p>\n<p>\nJ: That’s very important. Our memory, it’s not ever going to be good enough to just keep our eyes on the thousand things we might have in our configuration or the million things we might have in our machines these days. That doesn’t even include all the things we’ve seen on the Internet, thought were cool, but haven’t noted down anywhere. We just remember that it’s there, but we’re losing those all the time and we’re not aware that we’re losing them.\n</p>\n<p>\nS: At least until you plug your browser history into an Org thingy that automatically captures all of that stuff. People used to have browser plugins that did that…\n</p>\n<p>\nJ: That’s a neat idea, actually. Hmm…. I like that idea. I used to not have any cap on my history in the browser, but ultimately it makes the browser too slow. But it would be nice to queue it out to a log file or a database where it just gives the link, a title, and a synopsis of the contents. That would be kinda nice. You’re giving me ideas, Sacha.\n</p>\n<h3>Wrapping up</h3>\n<p>\nS: So, we’ll see it next week, then? Okay. Lots of tips on all these different things you can do with Emacs, where to get started, how to organize a huge archive of information (lists of lists and breaking things down)… Any parting words before I line up other people to bring on to this “Let’s Talk about Emacs” thing?\n</p>\n<p>\nJ: Just that Emacs is fun. All of this technical stuff, all of these features… the reason I use it is because it’s fun.\n</p>\n<p>\nS: It is. It’s a lot of fun. It’s even more fun because… Well, I get to bump into people like you, and the Emacs community is so awesome!\n</p>\n<p>\nJ: I got to know you through it as well! That’s been a great thing.\n</p>\n<p>\nS: When you made me the maintainer of Planner, I was, like, “Oh my gosh, I’ve never maintained anything before.” I was a university student, and it was an excellent experience.\n</p>\n<p>\nJ: I always appreciated the little cards that you sent me from time to time through the years, mentioning your uses of Planner…\n</p>\n<p>\nS: I should send cards to Carsten too. Bastien is the new maintainer, isn’t he? Emacs appreciation cards.\n</p>\n<p>\nJ: That’s right. I think that’s a great thing you did. Thanks, Sacha!\n</p>\n<p>\nS: Thank you so much. Nice talking to you, and I’ll catch you again sometime.\n</p>\n<p>\nJ: Have a good night!\n</p>\n<p>\n(Transcription took me 2:35 for 0:44 of audio.)</p>\n<p>Read the original or check out the comments on: <a href=\"http://sachachua.com/blog/2012/07/transcript-emacs-chat-john-wiegley/\">Transcript: Emacs chat with John Wiegley</a> (Sacha Chua's blog)</p>") (author nil (name nil "Sacha Chua") (uri nil "http://sachachua.com/blog")) (source nil (title ((type . "html")) "sacha chua :: living an awesome life » emacs") (subtitle ((type . "html")) "I help organizations and people learn how to connect and collaborate more effectively using Web 2.0 tools.") (link ((rel . "self") (href . "http://feeds.feedburner.com/pimpmyemacs"))) (id nil "http://sachachua.com/blog")))) ("Julien Danjou: Making the jump: working freelance" "<p>For the last 10 years, I've been working on many Free Software projects.\nFrom <a href=\"http://www.debian.org\">Debian</a> to <a href=\"http://openstack.org\">OpenStack</a>,\nthrough <a href=\"http://awesome.naquadah.org\">awesome</a>,\n<a href=\"http://www.gnu.org/software/emacs/\">Emacs</a>,\n<a href=\"http://xcb.freedesktop.org\">XCB</a> and <a href=\"http://julien.danjou.info/projects\">many\nmore</a>. This obviously allowed me to\nenhance my technical skills, but it also taught me about Free Software and\nOpen Source development processes, and how to work with and close to the\ncommunity.</p>\n<p>Working for almost 6 years at <a href=\"http://easter-eggs.com\">Easter-eggs</a> taught\nme how to work in an autonomous manner, how to lead and manage a project.\nAnd how to run a company, thanks to the cooperative status of this great\none.</p>\n<p>These are the reasons why I decided to leave my latest job and run my own\ncompany to work as a <a href=\"http://julien.danjou.info/freelance\">freelance consultant &amp;\ndeveloper</a> specialized in Free\nSoftware, starting today.</p>\n<p>Therefore, I am now able and available to provide expertise and development\non Free Software, including upstream contribution. Especially on projects I\nalready worked on recently, like <a href=\"http://www.openstack.org\">OpenStack</a>.</p>" "http://julien.danjou.info/blog/2012/making-the-jump" (20465 32260) new 14 nil nil ((title ((type . "html")) "Julien Danjou: Making the jump: working freelance") (link ((href . "http://julien.danjou.info/blog/2012/making-the-jump"))) (id nil "http://julien.danjou.info/blog/2012/making-the-jump") (updated nil "2012-07-02T10:55:00+00:00") (content ((type . "html")) "<p>For the last 10 years, I've been working on many Free Software projects.\nFrom <a href=\"http://www.debian.org\">Debian</a> to <a href=\"http://openstack.org\">OpenStack</a>,\nthrough <a href=\"http://awesome.naquadah.org\">awesome</a>,\n<a href=\"http://www.gnu.org/software/emacs/\">Emacs</a>,\n<a href=\"http://xcb.freedesktop.org\">XCB</a> and <a href=\"http://julien.danjou.info/projects\">many\nmore</a>. This obviously allowed me to\nenhance my technical skills, but it also taught me about Free Software and\nOpen Source development processes, and how to work with and close to the\ncommunity.</p>\n<p>Working for almost 6 years at <a href=\"http://easter-eggs.com\">Easter-eggs</a> taught\nme how to work in an autonomous manner, how to lead and manage a project.\nAnd how to run a company, thanks to the cooperative status of this great\none.</p>\n<p>These are the reasons why I decided to leave my latest job and run my own\ncompany to work as a <a href=\"http://julien.danjou.info/freelance\">freelance consultant &amp;\ndeveloper</a> specialized in Free\nSoftware, starting today.</p>\n<p>Therefore, I am now able and available to provide expertise and development\non Free Software, including upstream contribution. Especially on projects I\nalready worked on recently, like <a href=\"http://www.openstack.org\">OpenStack</a>.</p>") (author nil (name nil "Julien Danjou") (uri nil "http://julien.danjou.info/blog/")) (source nil (title ((type . "html")) "jd:/dev/blog") (link ((rel . "self") (href . "http://julien.danjou.info/blog/index.xml"))) (id nil "http://julien.danjou.info/blog/index.xml")))) ("Phil Hagelberg: in which the facts are laid out concerning swarm coding" "<p>I've found that user groups often fall into a pattern of lecture\nstyle presentations with slide shows. Since it's usually difficult\nto find presenters, often it ends up that after a while whoever\nfounded the group speaks repeatedly. This leads to burn-out and\nisn't sustainable even if you're fortunate enough to have\npresenters who are skilled public speakers. It's also simply not a\nvery good way to learn; your mind is a lot more involved in a when\nengaged in active discussion.</p>\n<p>This is why at the <a href=\"http://seajure.github.com\">Seattle\nClojure group</a> we follow a different model that focuses on code\nand participation. A few months ago at\nthe <a href=\"http://clojurewest.org\">ClojureWest conference</a> I\ngave\na <a href=\"https://github.com/strangeloop/clojurewest2012-slides/raw/master/Hagelberg-SwarmCoding.pdf\">short\ntalk</a> (PDF) explaining the motivation behind this style. I call\nit \"swarm coding\".</p>\n<img align=\"right\" alt=\"school at athens\" src=\"http://technomancy.us/i/athens.jpg\" />\n<p>The Socratic Method is a form of learning that centers around\ngetting people to ask the right questions rather than just\ntelling. It's often used in group settings with classical\neducation methods, and I've found it's a great way to run a user\ngroup meeting as well. If you can get everyone hooked in to\nparticipate in a shared editor session and come up with an idea\nfor a small project, you can collaborate in a unique, engaging way\nand learn a lot.</p>\n<p>We've found SSH, tmux, and Emacs to be a great combination for\nthis. The host prepares his machine with a new user created just\nfor the purpose of swarming, and everyone is given the username,\nhostname, and password to log in over SSH.</p>\n<p>\n<kbd>$ ssh swarm@zuse.local</kbd><br />\n<kbd>$ tmux attach</kbd>\n</p>\n<p>Once logged in, running <kbd>tmux attach</kbd> allows a user to\njoin an in-process session started by the host, and control can be\npassed around as discussion progresses. If someone has an idea for\nhow to address a certain problem, they can just try it out\nstraight away.</p>\n<p>Usually skill levels vary widely in group settings like this, so\nit's important for the facilitator to be able to gauge them,\nusually by just getting quick introductions from everyone in the\ngroup beforehand. The temptation is often for those that really\nknow their way around to just power through and write some\nslick code, perhaps pausing to explain a particularly subtle\ntechnique. It's more rewarding to let control pass around the\ngroup and try to keep everyone involved, but it can be\ndifficult.</p>\n<p>It's probably a good idea to dedicate a meeting to a tooling\nworkshop at first to get people started. Especially with Clojure\nthe initial setup can be intimidating, so the newcomers find\nit valuable to get help just getting the basics working on their\nlaptops. While I don't recommend newcomers try to learn Emacs as\ntheir main editor at the same time as picking up a new\nlanguage, it really makes collaboration over SSH much easier, so\nbasic familiarity is helpful.</p>\n<p>I've coded\nup <a href=\"https://github.com/technomancy/swarming\">some\nscripts</a> to automate setup of swarming sessions. It handles\ngetting basic dotfiles in place and provides instructions for how\nto join a session when people log in. Right now it only supports\nClojure, Leiningen, and Emacs, but there's no reason it couldn't\nbe extended for Vim or other languages.</p>\n<p>There are a few things to watch for here. First of all, we've\nonly tried this with groups of up to 12 participants. Group\ndynamics break down when things get larger, so you may want to\nsplit up into groups. You could try splitting a project into\nindependent parts that could be coded by each group if your\nproject divides naturally this way, or you could try both tackling\nthe same problem and comparing solutions at the end.</p>\n<p>Picking a project to try is also tricky. You want it to be\nsomewhat useful and not contrived, but you also need it to match\nthe skill level of the group and still be able to make progress on\nit in a couple hours. It's a lot of fun if you end up with a\nproject you can publish to Clojars or Heroku at the end.</p>\n<p>Happy Hacking!</p>" "http://technomancy.us/162" (20463 54630) new 15 nil nil ((title ((type . "html") (xml:lang . "en-US")) "Phil Hagelberg: in which the facts are laid out concerning swarm coding") (link ((href . "http://technomancy.us/162"))) (id nil "tag:technomancy.us,2007:in%20which%20the%20facts%20are%20laid%20out%20concerning%20swarm%20coding") (updated nil "2012-07-01T04:43:18+00:00") (content ((type . "html") (xml:lang . "en-US")) "<p>I've found that user groups often fall into a pattern of lecture\n  style presentations with slide shows. Since it's usually difficult\n  to find presenters, often it ends up that after a while whoever\n  founded the group speaks repeatedly. This leads to burn-out and\n  isn't sustainable even if you're fortunate enough to have\n  presenters who are skilled public speakers. It's also simply not a\n  very good way to learn; your mind is a lot more involved in a when\n  engaged in active discussion.</p>\n\n<p>This is why at the <a href=\"http://seajure.github.com\">Seattle\n  Clojure group</a> we follow a different model that focuses on code\n  and participation. A few months ago at\n  the <a href=\"http://clojurewest.org\">ClojureWest conference</a> I\n  gave\n  a <a href=\"https://github.com/strangeloop/clojurewest2012-slides/raw/master/Hagelberg-SwarmCoding.pdf\">short\n  talk</a> (PDF) explaining the motivation behind this style. I call\n  it \"swarm coding\".</p>\n\n<img align=\"right\" alt=\"school at athens\" src=\"http://technomancy.us/i/athens.jpg\" />\n\n<p>The Socratic Method is a form of learning that centers around\n  getting people to ask the right questions rather than just\n  telling. It's often used in group settings with classical\n  education methods, and I've found it's a great way to run a user\n  group meeting as well. If you can get everyone hooked in to\n  participate in a shared editor session and come up with an idea\n  for a small project, you can collaborate in a unique, engaging way\n  and learn a lot.</p>\n\n<p>We've found SSH, tmux, and Emacs to be a great combination for\n  this. The host prepares his machine with a new user created just\n  for the purpose of swarming, and everyone is given the username,\n  hostname, and password to log in over SSH.</p>\n\n<p>\n  <kbd>$ ssh swarm@zuse.local</kbd><br />\n  <kbd>$ tmux attach</kbd>\n</p>\n\n<p>Once logged in, running <kbd>tmux attach</kbd> allows a user to\n  join an in-process session started by the host, and control can be\n  passed around as discussion progresses. If someone has an idea for\n  how to address a certain problem, they can just try it out\n  straight away.</p>\n\n<p>Usually skill levels vary widely in group settings like this, so\n  it's important for the facilitator to be able to gauge them,\n  usually by just getting quick introductions from everyone in the\n  group beforehand. The temptation is often for those that really\n  know their way around to just power through and write some\n  slick code, perhaps pausing to explain a particularly subtle\n  technique. It's more rewarding to let control pass around the\n  group and try to keep everyone involved, but it can be\n  difficult.</p>\n\n<p>It's probably a good idea to dedicate a meeting to a tooling\n  workshop at first to get people started. Especially with Clojure\n  the initial setup can be intimidating, so the newcomers find\n  it valuable to get help just getting the basics working on their\n  laptops. While I don't recommend newcomers try to learn Emacs as\n  their main editor at the same time as picking up a new\n  language, it really makes collaboration over SSH much easier, so\n  basic familiarity is helpful.</p>\n\n<p>I've coded\n  up <a href=\"https://github.com/technomancy/swarming\">some\n  scripts</a> to automate setup of swarming sessions. It handles\n  getting basic dotfiles in place and provides instructions for how\n  to join a session when people log in. Right now it only supports\n  Clojure, Leiningen, and Emacs, but there's no reason it couldn't\n  be extended for Vim or other languages.</p>\n\n<p>There are a few things to watch for here. First of all, we've\n  only tried this with groups of up to 12 participants. Group\n  dynamics break down when things get larger, so you may want to\n  split up into groups. You could try splitting a project into\n  independent parts that could be coded by each group if your\n  project divides naturally this way, or you could try both tackling\n  the same problem and comparing solutions at the end.</p>\n\n<p>Picking a project to try is also tricky. You want it to be\n  somewhat useful and not contrived, but you also need it to match\n  the skill level of the group and still be able to make progress on\n  it in a couple hours. It's a lot of fun if you end up with a\n  project you can publish to Clojars or Heroku at the end.</p>\n\n<p>Happy Hacking!</p>") (author nil (name nil "Phil Hagelberg") (uri nil "http://technomancy.us/")) (source nil (title ((type . "html")) "Technomancy") (link ((rel . "self") (href . "http://technomancy.us/feed/atom"))) (id nil "tag:technomancy.us,2007:blog/")))) ("sachachua: Emacs: Chatting with John Wiegley about the cool things he does with Emacs" "<p>\n</p><p><a href=\"http://vimeo.com/44778543\">John Wiegley – June 26, 2012</a> from <a href=\"http://vimeo.com/user1851927\">Sacha Chua</a> on <a href=\"http://vimeo.com\">Vimeo</a>.</p>\n<p><a href=\"http://newartisans.com/2011/04/letter-to-the-fsf/\">Read more context for John Wiegley’s thoughts on the GPL</a>. Note from Sacha: The WordPress folks seem to have figured out how to earn money with premium themes, plugins, and training, so it’s not incompatible with the GPL… =)</p>\n<p>John Wiegley is one of my Emacs heroes. =) Check out John’s <a href=\"https://github.com/jwiegley\">Emacs configuration and other tools</a> on Github. John occasionally posts Emacs-related things at <a href=\"http://newartisans.com/\">newartisans.com</a>. You can find him on Twitter as <a href=\"http://twitter.com/jwiegley\">@jwiegley</a>. Enjoy!</p>\n<p>Read the original or check out the comments on: <a href=\"http://sachachua.com/blog/2012/06/emacs-chatting-with-john-wiegley-about-the-cool-things-he-does-with-emacs/\">Emacs: Chatting with John Wiegley about the cool things he does with Emacs</a> (Sacha Chua's blog)</p>" "http://sachachua.com/blog/2012/06/emacs-chatting-with-john-wiegley-about-the-cool-things-he-does-with-emacs/" (20458 59235) new 16 nil nil ((title ((type . "html") (xml:lang . "en-US")) "sachachua: Emacs: Chatting with John Wiegley about the cool things he does with Emacs") (link ((href . "http://sachachua.com/blog/2012/06/emacs-chatting-with-john-wiegley-about-the-cool-things-he-does-with-emacs/"))) (id nil "http://sachachua.com/blog/?p=23526") (updated nil "2012-06-27T10:58:43+00:00") (content ((type . "html") (xml:lang . "en-US")) "<p>\n</p><p><a href=\"http://vimeo.com/44778543\">John Wiegley – June 26, 2012</a> from <a href=\"http://vimeo.com/user1851927\">Sacha Chua</a> on <a href=\"http://vimeo.com\">Vimeo</a>.</p>\n<p><a href=\"http://newartisans.com/2011/04/letter-to-the-fsf/\">Read more context for John Wiegley’s thoughts on the GPL</a>. Note from Sacha: The WordPress folks seem to have figured out how to earn money with premium themes, plugins, and training, so it’s not incompatible with the GPL… =)</p>\n<p>John Wiegley is one of my Emacs heroes. =) Check out John’s <a href=\"https://github.com/jwiegley\">Emacs configuration and other tools</a> on Github. John occasionally posts Emacs-related things at <a href=\"http://newartisans.com/\">newartisans.com</a>. You can find him on Twitter as <a href=\"http://twitter.com/jwiegley\">@jwiegley</a>. Enjoy!</p>\n<p>Read the original or check out the comments on: <a href=\"http://sachachua.com/blog/2012/06/emacs-chatting-with-john-wiegley-about-the-cool-things-he-does-with-emacs/\">Emacs: Chatting with John Wiegley about the cool things he does with Emacs</a> (Sacha Chua's blog)</p>") (author nil (name nil "Sacha Chua") (uri nil "http://sachachua.com/blog")) (source nil (title ((type . "html")) "sacha chua :: living an awesome life » emacs") (subtitle ((type . "html")) "I help organizations and people learn how to connect and collaborate more effectively using Web 2.0 tools.") (link ((rel . "self") (href . "http://feeds.feedburner.com/pimpmyemacs"))) (id nil "http://sachachua.com/blog")))) ("Ivan Kanis: The Happy Manifesto" "<p>I am reading the <a href=\"http://ivan.kanis.fr/happy-manifesto.pdf\">Happy Manifesto</a>, fantastic stuff.</p>" "http://ivan.kanis.fr/the-happy-manifesto.html" (20456 64384) new 17 nil nil ((title ((type . "html") (xml:lang . "en-us")) "Ivan Kanis: The Happy Manifesto") (link ((href . "http://ivan.kanis.fr/the-happy-manifesto.html"))) (id nil "http://ivan.kanis.fr/the-happy-manifesto.html") (updated nil "2012-06-26T00:00:00+00:00") (content ((type . "html")) "<p>I am reading the <a href=\"http://ivan.kanis.fr/happy-manifesto.pdf\">Happy Manifesto</a>, fantastic stuff.</p>") (author nil (name nil "Ivan Kanis") (uri nil "http://ivan.kanis.fr/blog.html")) (source nil (title ((type . "html")) "Ivan Kanis blog") (link ((rel . "self") (href . "http://kanis.fr/blog-emacs.xml"))) (id nil "http://ivan.kanis.fr/blog.html")))) ("Robert Adesam: Org Mode VM Mairix Link Type, Evolved" "Almost one year ago I posted <a href=\"http://robert-adesam.blogspot.se/2011/07/orgmode-capture-to-insert-mairix-link.html\">a rather crude solution</a> on how to create and use a mairix link type in <a href=\"http://www.emacswiki.org/emacs/CategoryViewMail\">VM</a> and <a href=\"http://orgmode.org/\">Org mode</a>. This functionality is now invaluable in my every day work. During this last year it has also evolved to be less crude, it now<br /><ul><li>decodes mime-encoded strings,</li><li>stores enough properties for</li><ul><li><code>org-email-link-description-format</code> to be used in full, and</li><li>all vm specific information, including <code>%:fromto</code>, to be used in <code>org-capture-templates</code>.</li></ul></ul>Below is the current implementation, the reset of <code>:fromto</code> in <code>org-store-link-plist</code> to expand the escape is not nice but works:  <br /><pre class=\"prettyprint lang-el\">;; Add mairix as new link type in org<br />(org-add-link-type \"mairix\" 'ra/org-vm-mairix-open)<br />(add-hook 'org-store-link-functions 'ra/org-vm-store-mairix-link)<br /><br />;; Store link as mairix search for message ID<br />;; Most from org-vm-store-link in org-vm.el, modded<br />(defun ra/org-vm-store-mairix-link ()<br />  \"Store a link to the current VM message as a Mairix search for<br />  its Message ID.\"<br />  (when<br />      (and (or (eq major-mode 'vm-summary-mode)<br />               (eq major-mode 'vm-presentation-mode))<br />           (save-window-excursion<br />             (vm-select-folder-buffer) buffer-file-name))<br />    (and (eq major-mode 'vm-presentation-mode)<br />         (vm-summarize))<br />    (vm-follow-summary-cursor)<br />    (save-excursion<br />      (vm-select-folder-buffer)<br />      (let* (<br />             ;; Collect properties<br />             (message <br />              (car vm-message-pointer))<br />             (subject <br />              (vm-decode-mime-encoded-words-in-string <br />               (vm-su-subject message)))<br />             (from <br />              (vm-decode-mime-encoded-words-in-string <br />               (vm-get-header-contents message \"From\")))<br />             (to <br />              (vm-decode-mime-encoded-words-in-string <br />               (vm-get-header-contents message \"To\")))<br />             (message-id <br />              (vm-su-message-id message))<br />             ;; Date needed for full use of org-email-link-description<br />             ;; and for use in capture templates<br />             (date <br />              (vm-get-header-contents message \"Date\"))<br />             ;; Date active/inactive in correct time stamp format for<br />             ;; use in capture templates<br />             (date-ts <br />              (and date<br />                   (ignore-errors <br />                     (format-time-string<br />                      (org-time-stamp-format t)<br />                      (date-to-time date)))))<br />             (date-ts-ia <br />              (and date<br />                   (ignore-errors<br />                     (format-time-string<br />                      (org-time-stamp-format t t)<br />                      (date-to-time date)))))<br />             (link <br />              (org-make-link <br />               \"mairix:\"<br />               (format \"m:%s\"<br />                       (org-remove-angle-brackets message-id)))))<br />        (org-store-link-props <br />         :type \"mairix\"<br />         :message-id message-id<br />         :from from<br />         :to to<br />         :subject subject<br />         :date date<br />         :date-timestamp date-ts<br />         :date-timestamp-inactive date-ts-ia<br />         :link link)<br />        (org-add-link-props<br />         :description (org-email-link-description))<br />        ;; It seems we need to reset :fromto with expanded escapes<br />        ;; after :description to use %:fromto in<br />        ;; org-capture-templates... bug?<br />        (org-add-link-props<br />         :fromto (org-replace-escapes <br />                  (or (plist-get org-store-link-plist :fromto)<br />                      \"from %f\") ; if org-from-is-user-regexp is nil<br />                  (list<br />                   (cons <br />                    \"%f\" <br />                    (or (plist-get org-store-link-plist :fromname)<br />                        (plist-get org-store-link-plist :fromaddress)<br />                        \"?\"))<br />                   (cons <br />                    \"%t\" <br />                    (or (plist-get org-store-link-plist :toname)<br />                        (plist-get org-store-link-plist :toaddress)<br />                        \"?\")))))<br />        ;; save vm folder and update the mairix db<br />        (vm-save-folder)<br />        (mairix-update-database) ; Make sure mairix-synchronous-update<br />                                 ; is nil, default, so we do not have<br />                                 ; to wait<br />        link))))<br /><br />;; Open the mairix link, making use of mairix.el to make the search<br />;; and display the results<br />(defun ra/org-vm-mairix-open (msearch)<br />  \"Search for messages with message-id with mairix, and display<br />  them in a VM folder. This requires a proper mairix.el<br />  setup.\"<br />  (mairix-search msearch t))<br /></pre>Of course, as stated in my <a href=\"http://robert-adesam.blogspot.se/2011/07/orgmode-capture-to-insert-mairix-link.html\">old blog post</a>, a working setup of <a href=\"http://www.rpcurnow.force9.co.uk/mairix/\">Mairix</a> and the <a href=\"http://www.emacswiki.org/emacs/MairixSearch\">Emacs Mairix mode</a> is still required.<code></code><div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/1139989336831951363-9109240368470968986?l=robert-adesam.blogspot.com\" width=\"1\" /></div>" "http://robert-adesam.blogspot.com/2012/06/org-mode-vm-mairix-link-type-evolved.html" (20456 25950) new 18 nil nil ((title ((type . "html")) "Robert Adesam: Org Mode VM Mairix Link Type, Evolved") (link ((href . "http://robert-adesam.blogspot.com/2012/06/org-mode-vm-mairix-link-type-evolved.html"))) (id nil "tag:blogger.com,1999:blog-1139989336831951363.post-9109240368470968986") (updated nil "2012-06-25T13:19:26+00:00") (content ((type . "html")) "Almost one year ago I posted <a href=\"http://robert-adesam.blogspot.se/2011/07/orgmode-capture-to-insert-mairix-link.html\">a rather crude solution</a> on how to create and use a mairix link type in <a href=\"http://www.emacswiki.org/emacs/CategoryViewMail\">VM</a> and <a href=\"http://orgmode.org/\">Org mode</a>. This functionality is now invaluable in my every day work. During this last year it has also evolved to be less crude, it now<br /><ul><li>decodes mime-encoded strings,</li><li>stores enough properties for</li><ul><li><code>org-email-link-description-format</code> to be used in full, and</li><li>all vm specific information, including <code>%:fromto</code>, to be used in <code>org-capture-templates</code>.</li></ul></ul>Below is the current implementation, the reset of <code>:fromto</code> in <code>org-store-link-plist</code> to expand the escape is not nice but works:  <br /><pre class=\"prettyprint lang-el\">;; Add mairix as new link type in org<br />(org-add-link-type \"mairix\" 'ra/org-vm-mairix-open)<br />(add-hook 'org-store-link-functions 'ra/org-vm-store-mairix-link)<br /><br />;; Store link as mairix search for message ID<br />;; Most from org-vm-store-link in org-vm.el, modded<br />(defun ra/org-vm-store-mairix-link ()<br />  \"Store a link to the current VM message as a Mairix search for<br />  its Message ID.\"<br />  (when<br />      (and (or (eq major-mode 'vm-summary-mode)<br />               (eq major-mode 'vm-presentation-mode))<br />           (save-window-excursion<br />             (vm-select-folder-buffer) buffer-file-name))<br />    (and (eq major-mode 'vm-presentation-mode)<br />         (vm-summarize))<br />    (vm-follow-summary-cursor)<br />    (save-excursion<br />      (vm-select-folder-buffer)<br />      (let* (<br />             ;; Collect properties<br />             (message <br />              (car vm-message-pointer))<br />             (subject <br />              (vm-decode-mime-encoded-words-in-string <br />               (vm-su-subject message)))<br />             (from <br />              (vm-decode-mime-encoded-words-in-string <br />               (vm-get-header-contents message \"From\")))<br />             (to <br />              (vm-decode-mime-encoded-words-in-string <br />               (vm-get-header-contents message \"To\")))<br />             (message-id <br />              (vm-su-message-id message))<br />             ;; Date needed for full use of org-email-link-description<br />             ;; and for use in capture templates<br />             (date <br />              (vm-get-header-contents message \"Date\"))<br />             ;; Date active/inactive in correct time stamp format for<br />             ;; use in capture templates<br />             (date-ts <br />              (and date<br />                   (ignore-errors <br />                     (format-time-string<br />                      (org-time-stamp-format t)<br />                      (date-to-time date)))))<br />             (date-ts-ia <br />              (and date<br />                   (ignore-errors<br />                     (format-time-string<br />                      (org-time-stamp-format t t)<br />                      (date-to-time date)))))<br />             (link <br />              (org-make-link <br />               \"mairix:\"<br />               (format \"m:%s\"<br />                       (org-remove-angle-brackets message-id)))))<br />        (org-store-link-props <br />         :type \"mairix\"<br />         :message-id message-id<br />         :from from<br />         :to to<br />         :subject subject<br />         :date date<br />         :date-timestamp date-ts<br />         :date-timestamp-inactive date-ts-ia<br />         :link link)<br />        (org-add-link-props<br />         :description (org-email-link-description))<br />        ;; It seems we need to reset :fromto with expanded escapes<br />        ;; after :description to use %:fromto in<br />        ;; org-capture-templates... bug?<br />        (org-add-link-props<br />         :fromto (org-replace-escapes <br />                  (or (plist-get org-store-link-plist :fromto)<br />                      \"from %f\") ; if org-from-is-user-regexp is nil<br />                  (list<br />                   (cons <br />                    \"%f\" <br />                    (or (plist-get org-store-link-plist :fromname)<br />                        (plist-get org-store-link-plist :fromaddress)<br />                        \"?\"))<br />                   (cons <br />                    \"%t\" <br />                    (or (plist-get org-store-link-plist :toname)<br />                        (plist-get org-store-link-plist :toaddress)<br />                        \"?\")))))<br />        ;; save vm folder and update the mairix db<br />        (vm-save-folder)<br />        (mairix-update-database) ; Make sure mairix-synchronous-update<br />                                 ; is nil, default, so we do not have<br />                                 ; to wait<br />        link))))<br /><br />;; Open the mairix link, making use of mairix.el to make the search<br />;; and display the results<br />(defun ra/org-vm-mairix-open (msearch)<br />  \"Search for messages with message-id with mairix, and display<br />  them in a VM folder. This requires a proper mairix.el<br />  setup.\"<br />  (mairix-search msearch t))<br /></pre>Of course, as stated in my <a href=\"http://robert-adesam.blogspot.se/2011/07/orgmode-capture-to-insert-mairix-link.html\">old blog post</a>, a working setup of <a href=\"http://www.rpcurnow.force9.co.uk/mairix/\">Mairix</a> and the <a href=\"http://www.emacswiki.org/emacs/MairixSearch\">Emacs Mairix mode</a> is still required.<code></code><div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/1139989336831951363-9109240368470968986?l=robert-adesam.blogspot.com\" width=\"1\" /></div>") (author nil (name nil "Robert Adesam") (email nil "noreply@blogger.com") (uri nil "http://robert-adesam.blogspot.com/search/label/emacs")) (source nil (title ((type . "html")) "Robert Adesam") (subtitle ((type . "html")) "About Technology in General and Emacs in Particular.") (link ((rel . "self") (href . "http://www.blogger.com/feeds/1139989336831951363/posts/default/-/emacs"))) (id nil "tag:blogger.com,1999:blog-1139989336831951363")))) ("Robert Adesam: Capture Attribute Indicator in VM for Org Mode Captured Emails" "Problem -- adding an attribute indicator in the vm summary buffer for emails I have org mode-captured some action/actions from. Due to old age(?) I now and then tend to forget if I have added items on my GTD-lists from an email, which sometime generates duplicate items or more...<br /><br />The quick solution I came up with was to<br /><ol><li>add a user-defined label, <i>captured</i>, to the email I just captured some action from, and</li><li>modify the vm summary format with a user defined specifier to show the character <i>C</i> next to the attribute indicators if the email has the captured label.</li></ol>The first step was really really easy thanks to <code>org-capture-after-finalize-hook</code>, in <code>.emacs</code> I did<br /><pre class=\"prettyprint lang-el\">;; Add a hook to the label-setting-function.<br />(add-hook 'org-capture-after-finalize-hook<br />          'ra/vm-add-captured-message-label)<br /><br />;; Add a label to the current email, may also reside in .vm<br />(defun ra/vm-add-captured-message-label ()<br />  \"Adds the \\\"captured\\\" label to the current email.\"<br /> (if (equal \"mairix\" (plist-get org-store-link-plist :type))<br />     ;;<br />     ;; if you do not use mairix-type links you can<br />     ;; - comment out the equal-condition above, and<br />     ;; - comment in the or-condition below.<br />     ;;<br />     ;; (or (eq major-mode 'vm-summary-mode)<br />     ;;     (eq major-mode 'vm-presentation-mode))<br />     ;;<br />     (vm-add-message-labels \"captured\" 1)))<br /></pre>The second step was also quite straight forward, in <code>.vm</code> I added <br /><pre class=\"prettyprint lang-el\">;; VM summary template<br />(setq vm-summary-format<br />      \"%n %*%a%1UC %-17.17F %-3.3m %2d %S %I\\\"%s\\\"\\n\")<br /><br />;; VM summary function C<br />(defun vm-summary-function-C (message)<br />  \"Given a VM message, returns a \\\"C\\\" if it has been labelled<br />  \\\"captured\\\".\"<br />  (if (member \"captured\" (vm-labels-of message))<br />      \"C\"<br />    \"\"))<br /></pre>In the <code>vm-summary-format</code> template above, note the sequence <code>%a%1UC</code> where<br /><ul><li><code>%a</code> is the usual attribute indicators, and<code> </code></li><li><code>%1UC</code> is where the <code>vm-summary-function-C</code> is called and my custom \"attribute indicator\", the single <code>C</code> character, may be inserted.</li></ul><br />To conclude -- I did not add a new attribute and attribute indicator, but my own custom user-defined label, <i>captured</i>, and my own custom user-defined label indicator, <i>C</i>.<br /><br />This solution is far from perfect, eg capturing anything else while being in a vm summary or presentation buffer will get the current email labelled. An alternative would then be to create a new capture template and key combo for capturing emails... but that will probably mess things up for me, hitting the correct combo in the correct buffer... :P<br /><br />Finally a rowshot from vm summary after capturing, indicator R for replied and C for captured:<br /><br /><pre class=\"prettyprint lang-el\">-&gt;  6    R C Robert Adesam     Jun 21 50 \"Emacs for Linguists\"<br /></pre><div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/1139989336831951363-995943517985477119?l=robert-adesam.blogspot.com\" width=\"1\" /></div>" "http://robert-adesam.blogspot.com/2012/06/capture-attribute-indicator-in-vm-for.html" (20453 49603) new 19 nil nil ((title ((type . "html")) "Robert Adesam: Capture Attribute Indicator in VM for Org Mode Captured Emails") (link ((href . "http://robert-adesam.blogspot.com/2012/06/capture-attribute-indicator-in-vm-for.html"))) (id nil "tag:blogger.com,1999:blog-1139989336831951363.post-995943517985477119") (updated nil "2012-06-23T13:16:51+00:00") (content ((type . "html")) "Problem -- adding an attribute indicator in the vm summary buffer for emails I have org mode-captured some action/actions from. Due to old age(?) I now and then tend to forget if I have added items on my GTD-lists from an email, which sometime generates duplicate items or more...<br /><br />The quick solution I came up with was to<br /><ol><li>add a user-defined label, <i>captured</i>, to the email I just captured some action from, and</li><li>modify the vm summary format with a user defined specifier to show the character <i>C</i> next to the attribute indicators if the email has the captured label.</li></ol>The first step was really really easy thanks to <code>org-capture-after-finalize-hook</code>, in <code>.emacs</code> I did<br /><pre class=\"prettyprint lang-el\">;; Add a hook to the label-setting-function.<br />(add-hook 'org-capture-after-finalize-hook<br />          'ra/vm-add-captured-message-label)<br /><br />;; Add a label to the current email, may also reside in .vm<br />(defun ra/vm-add-captured-message-label ()<br />  \"Adds the \\\"captured\\\" label to the current email.\"<br /> (if (equal \"mairix\" (plist-get org-store-link-plist :type))<br />     ;;<br />     ;; if you do not use mairix-type links you can<br />     ;; - comment out the equal-condition above, and<br />     ;; - comment in the or-condition below.<br />     ;;<br />     ;; (or (eq major-mode 'vm-summary-mode)<br />     ;;     (eq major-mode 'vm-presentation-mode))<br />     ;;<br />     (vm-add-message-labels \"captured\" 1)))<br /></pre>The second step was also quite straight forward, in <code>.vm</code> I added <br /><pre class=\"prettyprint lang-el\">;; VM summary template<br />(setq vm-summary-format<br />      \"%n %*%a%1UC %-17.17F %-3.3m %2d %S %I\\\"%s\\\"\\n\")<br /><br />;; VM summary function C<br />(defun vm-summary-function-C (message)<br />  \"Given a VM message, returns a \\\"C\\\" if it has been labelled<br />  \\\"captured\\\".\"<br />  (if (member \"captured\" (vm-labels-of message))<br />      \"C\"<br />    \"\"))<br /></pre>In the <code>vm-summary-format</code> template above, note the sequence <code>%a%1UC</code> where<br /><ul><li><code>%a</code> is the usual attribute indicators, and<code> </code></li><li><code>%1UC</code> is where the <code>vm-summary-function-C</code> is called and my custom \"attribute indicator\", the single <code>C</code> character, may be inserted.</li></ul><br />To conclude -- I did not add a new attribute and attribute indicator, but my own custom user-defined label, <i>captured</i>, and my own custom user-defined label indicator, <i>C</i>.<br /><br />This solution is far from perfect, eg capturing anything else while being in a vm summary or presentation buffer will get the current email labelled. An alternative would then be to create a new capture template and key combo for capturing emails... but that will probably mess things up for me, hitting the correct combo in the correct buffer... :P<br /><br />Finally a rowshot from vm summary after capturing, indicator R for replied and C for captured:<br /><br /><pre class=\"prettyprint lang-el\">-&gt;  6    R C Robert Adesam     Jun 21 50 \"Emacs for Linguists\"<br /></pre><div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/1139989336831951363-995943517985477119?l=robert-adesam.blogspot.com\" width=\"1\" /></div>") (author nil (name nil "Robert Adesam") (email nil "noreply@blogger.com") (uri nil "http://robert-adesam.blogspot.com/search/label/emacs")) (source nil (title ((type . "html")) "Robert Adesam") (subtitle ((type . "html")) "About Technology in General and Emacs in Particular.") (link ((rel . "self") (href . "http://www.blogger.com/feeds/1139989336831951363/posts/default/-/emacs"))) (id nil "tag:blogger.com,1999:blog-1139989336831951363")))) ("Benjamin Slade: Who uses Linux? (+Emacs, +TeX)" "<div dir=\"ltr\" style=\"text-align: left;\"><div style=\"text-align: left;\"><div style=\"text-align: left;\"><div style=\"text-align: justify;\"><h3>     Some really rough notes. Suggestions welcome. </h3>Notable people who use Linux (with additional notes on Emacs and TeX users), a first draft.<br /><br />My rough criterion for determining who counts as \"famous\": does the person have a Wikipedia entry? </div><br /><div style=\"text-align: justify;\">Presumably many more can be added under \"computer-related\" (which is why I put it at the bottom). I'm only listing each person once, under most relevant/salient category (otherwise I could, for instance, list Shuttleworth also under an \"astronaut\" category).<br /><br />See also: \"<a href=\"http://usesthis.com/interviews/linux/\">The Setup / Linux</a>\" and \"<a href=\"http://www.mylinuxrig.com/\">My Linux Rig</a>\" for more 'prominent' people and their Linux setups.</div></div><br /><h3 style=\"color: black; text-align: left;\">                 Political</h3><h4 style=\"text-align: left;\">                 <a href=\"http://falkvinge.net/\">Rick Falkvinge</a>, founder of Swedish Pirate Party [<a href=\"https://en.wikipedia.org/wiki/Rick_Falkvinge\">Wikipedia entry</a>]</h4><ul style=\"text-align: left;\"><li>Uses an Ubuntu Linux set-up [<a href=\"http://rick.falkvinge.usesthis.com/\">http://rick.falkvinge.usesthis.com</a>/]</li></ul><h4 style=\"text-align: left;\">                 Christian Engström, Swedish Pirate Party MEP [<a href=\"https://en.wikipedia.org/wiki/Christian_Engstr%C3%B6m\">Wikipedia entry</a>]</h4><ul style=\"text-align: left;\"><li>Seems to use some sort of Ubuntu Linux set-up [<a href=\"http://www.blogger.com/%20https://christianengstrom.wordpress.com/2010/03/07/installing-ipredator-under-ubuntu-linux-9-10/\">1</a>, <a href=\"https://christianengstrom.wordpress.com/2008/05/20/3g-mobilt-bredband-pa-ubuntu-linux/\">2</a>, <a href=\"https://christianengstrom.wordpress.com/2007/12/16/holland-valjer-oppen-kallkod/\">3</a>]</li><li>Couple of pics with Richard Stallman from 2004 [<a href=\"http://christianengstrom.files.wordpress.com/2007/10/ce_vilnius_original.jpg\">1</a>, <a href=\"http://christianengstrom.files.wordpress.com/2007/10/ce_riga_original.jpg\">2</a>]</li></ul><h4 style=\"text-align: left;\">                 <a href=\"http://ameliaandersdotter.eu/\">Amelia Andersdotter</a>, Swedish Pirate Party MEP [<a href=\"https://en.wikipedia.org/wiki/Amelia_Andersdotter\">Wikipedia entry</a>]</h4><ul style=\"text-align: left;\"><li>Mentions using Arch, Fedora [<a href=\"http://www.mylinuxrig.com/post/17820200505/the-linux-setup-amelia-andersdotter-eu-parliament\">1</a>, <a href=\"https://www.networkworld.com/community/node/79232\">2</a>] </li><li>Also Emacs and TeX (see above links)</li></ul><h3 style=\"text-align: left;\">               Writers</h3><h4 style=\"text-align: left;\">             <a href=\"http://craphound.com/\">Cory Doctorow</a>, blogger, journalist, &amp; sci-fi/fantasy author [<a href=\"https://en.wikipedia.org/wiki/Cory_doctorow\">Wikipedia entry</a>]</h4><ul style=\"text-align: left;\"><li>Uses Ubuntu Linux since 2006 [<a href=\"http://www.guardian.co.uk/technology/2011/may/17/computing-opensource\">1</a>, <a href=\"http://www.linuxjournal.com/magazine/cory-doctorowmdashlinux-guru\">2</a>]</li><li>arguments for copyright reform (videos):</li><ul><li><a href=\"https://www.youtube.com/watch?v=NkBX-981_es\">Pwned: How copyright turns us all into IP serfs</a></li><li><a href=\"https://www.youtube.com/watch?v=HUEvRyemKSg\">The coming war on general computation</a></li><li><a href=\"https://www.youtube.com/watch?v=n-jbe4gBbLw\">@ the Pirate Party International General Assembly in Prague 2012</a></li></ul></ul><h4 style=\"text-align: left;\">             <a href=\"http://www.antipope.org/charlie/\">Charlie Stross</a>, sci-fi/horror/fantasy author [<a href=\"https://en.wikipedia.org/wiki/Charlie_Stross\">Wikipedia entry</a>]</h4><ul style=\"text-align: left;\"><li>formerly the monthly Linux columnist for <a href=\"https://en.wikipedia.org/wiki/Computer_Shopper_%28UK_magazine%29\">Computer Shopper </a></li><li>uses Linux, but mainly for running server, otherwise Mac [<a href=\"http://www.antipope.org/charlie/blog-static/2009/01/i_get_mail.html\">1</a>, <a href=\"http://charlie.stross.usesthis.com/\">2</a>, <a href=\"http://www.badlanguage.net/interview-with-sci-fi-author-charles-stross\">3</a>]</li><li>position on piracy: \"If you've downloaded unauthorized copies of my books, instead of hitting  on a tipjar button, I urge you to buy a (new) copy of one of my books....Your typical book publisher is not like the music or movie industry;  they run on thin margins, and they're staffed by underpaid, overworked  folk who do it because they love books, not because they're trying to  make themselves rich on the back of a thousand ruthlessly exploited  artists.  I think their effort deserves to be rewarded appropriately...\" [<a href=\"http://www.antipope.org/charlie/blog-static/2009/03/reminder-why-theres-no-tipjar.html\">1</a>] </li></ul><h4 style=\"text-align: left;\">             <a href=\"http://www.hipiers.com/\">Piers Anthony</a>, fantasy/sci-fi author [<a href=\"https://en.wikipedia.org/wiki/Piers_anthony\">Wikipedia entry</a>]</h4><ul style=\"text-align: left;\"><li>switched to Linux in 2000 [<a href=\"http://www.thepowerbase.com/2011/11/piers-anthony-an-ogre-and-a-penguin/\">1</a>, <a href=\"http://www.hipiers.com/00oct.html\">2</a>, <a href=\"http://www.hipiers.com/01april.html\">3</a>, <a href=\"http://www.hipiers.com/01june.html\">4</a>] </li><li>mentions using a number of different distros, including Ubuntu &amp; Fedora [<a href=\"http://hipiers.com/11aug.html\">1</a>]</li><li>use of Linux seems at least in part principle-driven [<a href=\"http://www.hipiers.com/06aug.html\">1</a>, <a href=\"http://www.thepowerbase.com/2011/11/piers-anthony-an-ogre-and-a-penguin/\">2</a>]</li><li>uses LibreOffice [<a href=\"http://www.hipiers.com/12may.html\">1</a>]</li><li>concerns about piracy:</li><ul><li>speaks approvingly of Harlan Ellison's war on piracy (2002-4) [<a href=\"http://www.hipiers.com/02june.html\">1</a>, <a href=\"http://www.hipiers.com/04aug.html\">2</a>]</li><li>complaints about piracy &amp; Ebay (2010) [<a href=\"http://www.hipiers.com/10mar.html\">1</a>]</li><li>some recognition of danger of censoring internet: \"THE WEEK had an item on Internet piracy of music, books, and movies, and efforts to stop it. I have discussed this here before, but it bears repeating: pirates are thieves who are destroying the ability of creative artists to make a living, myself included; a LOT of my works are chronically stolen. The pirates need to be stopped. The problem is how to do it without censoring free expression itself. I think there does have to be a law, but one carefully crafted to shut down only the pirates.\" (2012) [<a href=\"http://www.hipiers.com/12feb.html\">1</a>]</li></ul></ul><h4 style=\"text-align: left;\">            <a href=\"http://www.nealstephenson.com/\">Neal Stephenson</a>, sci-fi/speculative fiction author [<a href=\"https://en.wikipedia.org/wiki/Neal_Stephenson\">Wikipedia entry</a>]</h4><ul style=\"text-align: left;\"><li>fondness for both Mac &amp; Linux [sources?]</li><li>author of long essay \"<a href=\"https://en.wikipedia.org/wiki/In_the_Beginning..._Was_the_Command_Line\">In the Beginning... Was the Command Line</a>\" (1999)</li><ul><li><a href=\"https://github.com/robmadole/beginning_command_line\">ebook git repository</a></li><li><a href=\"http://www.cryptonomicon.com/beginning.html\">zipped plain text file</a></li><li><a href=\"http://www.amazon.com/exec/obidos/ASIN/0380815931/beowulfonsteo-20/103-1779062-0455006?creative=125581&amp;camp=2321&amp;link_code=as1\">print book from Amazon </a></li></ul><li>used Emacs [<a href=\"http://www.emacswiki.org/emacs/NealStephenson\">1</a>] </li><ul><li>for which novels? (<i>Cryptonomicon</i>? others?)</li></ul><li>stopped using Emacs [<a href=\"http://www.forbes.com/sites/davidewalt/2011/09/19/neal-stephenson-reamde-video-games/2/\">1</a>]</li><li>plans to start using Emacs (&amp; Linux) again [<a href=\"http://www.reddit.com/r/Fantasy/comments/vdt11/i_am_neal_stephenson_author_geek_and_now_sword/c53nsh5\">1</a>] </li></ul><h3 style=\"text-align: left;\">             Actors &amp; film-related</h3><h4 style=\"text-align: left;\">            <a href=\"http://www.stephenfry.com/\">Stephen Fry</a>, actor [<a href=\"https://en.wikipedia.org/wiki/Stephen_fry\">Wikipedia entry</a>]</h4><ul style=\"text-align: left;\"><li>likes Apple products [source?]</li><li>but also touts GNU [<a href=\"http://www.guardian.co.uk/technology/2008/feb/02/opensource.stephenfry\">1</a>, <a href=\"http://www.stephenfry.com/2008/09/01/happy-birthday-to-gnu/\">2</a>, <a href=\"https://www.gnu.org/fry/\">3</a>] </li></ul><h4 style=\"text-align: left;\">            <a href=\"http://wilwheaton.typepad.com/\">Wil Wheaton</a>, actor [<a href=\"https://en.wikipedia.org/wiki/Wil_wheaton\">Wikipedia entry</a>]</h4><ul style=\"text-align: left;\"><li>primarily uses Macs, but also uses Linux [<a href=\"http://wilwheaton.typepad.com/wwdnbackup/2010/04/wil-wheaton-prime-uses-linux-to-bring-you-evil-wil-wheaton-sitting-in-sheldons-spot.html\">1</a>, <a href=\"http://www.wilwheaton.net/mt/archives/001117.php\">2</a>] </li><li>support for Bittorrent [<a href=\"http://www.itworld.com/cloud-computing/277540/bittorrent-not-always-piracy-says-wil-wheaton\">1</a>]</li></ul><h3 style=\"text-align: left;\">             Programmers &amp; computer-related</h3><h4 style=\"text-align: left;\">             Linus Torvalds [<a href=\"https://en.wikipedia.org/wiki/Linus_torvalds\">Wikipedia entry</a>]</h4><ul style=\"text-align: left;\"><li>creator of <a href=\"https://en.wikipedia.org/wiki/Linux\">Linux</a></li><li>used Fedora (2008) [<a href=\"http://news.oreilly.com/2008/07/linux-torvalds-on-linux-distri.htmlhttp://news.oreilly.com/2008/07/linux-torvalds-on-linux-distri.html\">1</a>] </li><li>switched to openSUSE at some point in 2012(?) [<a href=\"http://www.quora.com/Linux/What-Linux-distribution-does-Linus-Torvalds-use-on-his-MacBook-Air\">1</a>]</li><li>uses Apple hardware [<a href=\"http://a2mac.org/2012/05/linus-torvalds-loves-your-macbook-air/\">1</a>] </li><li>uses an Emacs-like editor based on <a href=\"https://en.wikipedia.org/wiki/MicroEMACS\">MicroEMACS</a>, a <a href=\"https://git.kernel.org/?p=editors/uemacs/uemacs.git;a=summary\">customised version of uEmacs/PK</a> </li></ul><h4 style=\"text-align: left;\">             <a href=\"http://www.stallman.org/\">Richard Stallman</a> [<a href=\"https://en.wikipedia.org/wiki/Richard_stallman\">Wikipedia entry</a>]</h4><ul style=\"text-align: left;\"><li>used <a href=\"http://www.gnewsense.org/\">gNewSense</a>, a <a href=\"https://www.gnu.org/distros/free-distros.html\">fully-free</a> GNU/Linux distribution in 2010 [<a href=\"http://richard.stallman.usesthis.com/\">1</a>] </li><li>founder of the <a href=\"https://www.gnu.org/\">GNU project</a> (1983) </li><li>founder of <a href=\"https://www.fsf.org/\">Free Software Foundation</a> (1985) </li><li>creator of <a href=\"http://www.gnu.org/software/emacs\">Emacs</a> (1976)</li><li>co-creator of <a href=\"https://www.gnu.org/software/texinfo/\">Texinfo</a>, presupposing knowledge/use of TeX</li><li>supports <a href=\"https://en.wikipedia.org/wiki/Copyleft\">copyleft </a></li><ul><li>one (of many) talks on copyright issues: <a href=\"https://www.youtube.com/watch?v=SNBMdDaYhZA\">@ University of Calgary </a>(2009)</li><li><a href=\"https://www.gnu.org/philosophy/misinterpreting-copyright.html\">statement on copyright </a></li><li><a href=\"https://www.gnu.org/philosophy/pirate-party.html\">statement on worries about abolishment of copyright for copyleft</a> (re: Pirate Party platform) </li></ul></ul><h4 style=\"text-align: left;\">            Mark Shuttleworth, programmer, entreprenuer, astronaut [<a href=\"https://en.wikipedia.org/wiki/Mark_Shuttleworth\">Wikipedia entry</a>]</h4><ul style=\"text-align: left;\"><li>started the <a href=\"http://www.ubuntu.com/community\">Ubuntu Foundation</a> (2005) for <a href=\"http://www.ubuntu.com/\">Ubuntu Linux</a> development</li></ul><h4 style=\"text-align: left;\">             <a href=\"http://www-cs-faculty.stanford.edu/%7Eknuth/\">Donald Knuth</a>, computer scientist &amp; professor [<a href=\"https://en.wikipedia.org/wiki/Donald_knuth\">Wikipedia entry</a>]</h4><ul style=\"text-align: left;\"><li>creator of <a href=\"http://www.tug.org/\">TeX</a> typesetting system (1978), upon which <a href=\"http://www.latex-project.org/\">LaTeX</a>, <a href=\"http://www.luatex.org/\">LuaTeX</a> etc. are based </li><li>uses Ubuntu Linux (as of 2008) [<a href=\"http://www.informit.com/articles/article.aspx?p=1193856\">1</a>]</li><li>uses Emacs to edit TeX [<a href=\"http://www.informit.com/articles/article.aspx?p=1193856\">1</a>] </li><li>friends with computer security researcher <a href=\"https://en.wikipedia.org/wiki/Jacob_Appelbaum\">Jacob Appelbaum</a> [<a href=\"http://laughingsquid.com/jacob-appelbaum-donald-knuth-demonstrate-the-recursive-homeboys-principle/\">1</a>]</li></ul><h4 style=\"text-align: left;\">             <a href=\"http://www.americanmcgee.com/\">American McGee</a>, game designer [<a href=\"https://en.wikipedia.org/wiki/American_mcgee\">Wikipedia entry</a>] </h4><ul style=\"text-align: left;\"><li> switched to Ubuntu Linux (from Windows) with plans to \"stay switched\" (2006) [<a href=\"http://www.americanmcgee.com/2006/07/26/wga-and-activation-failures-dont-faze-redmond/\">1</a>]</li></ul><h4 style=\"text-align: left;\">         John \"maddog\" Hall, director of <a href=\"http://www.li.org/\"><i>Linux International</i></a> &amp;  professor of computer science [<a href=\"https://en.wikipedia.org/wiki/Maddog\">Wikipedia entry</a>]</h4><ul style=\"text-align: left;\"><li>runs different Linux distributions depending on employer [<a href=\"http://www.mylinuxrig.com/post/19511715022/the-linux-setup-jon-maddog-hall-linux\">1</a>]</li></ul><ul style=\"text-align: left;\"></ul></div><hr /><h3 style=\"text-align: left;\">      Some Initial Ruminations</h3><div style=\"text-align: left;\"><div style=\"text-align: justify;\">A number of the people above fall into two rough groupings: \"technology/gadget-lovers\" vs. \"ideological-users\". So Stephen Fry and Wil Wheaton would fall into the first category, as would perhaps Charlie Stross and even Linus Torvalds. On the ideological side are (of course) Richard Stallman, Cory Doctorow, Piers Anthony, and the Pirate Party MPs. Anthony's position in the latter grouping is interesting, given his position on piracy. Stallman's position is similar to the Pirate MPs in certain respects, but values the legal status of copyleft.</div><br /><h3 style=\"text-align: left;\">     What about <a href=\"https://en.wikipedia.org/wiki/Free_culture_movement\">Free Culture</a> proponents?</h3><div style=\"text-align: justify;\">What computer setups do Free Culture proponents use? Particularly, I'm wondering about <a href=\"https://en.wikipedia.org/wiki/Lawrence_Lessig\">Lawrence Lessig</a>, founding father of the Free Culture movement (largely based on Stallman's Free Software Foundation) and founder of the <a href=\"http://creativecommons.org/\">Creative Commons licences</a>. <a href=\"https://en.wikipedia.org/wiki/Nina_Paley\">Nina Paley</a> is another prominent Free Culture activist, but I'm pretty sure she's largely (solely?) a Mac user.</div><div style=\"text-align: justify;\"><br /></div><h3 style=\"text-align: justify;\">     Hattrick winners and other random notes</h3><div style=\"text-align: justify;\">Amelia Andersdotter, Donald Knuth, and Richard Stallman take hattrick prizes for Linux-Emacs-TeX use. (For an extra bonus, Andersdotter also explicitly mentions use of <a href=\"http://www.orgmode.org/\">org-mode</a> in Emacs.) </div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">Of course there are various connections between some of the characters mentioned above. For instance, Doctorow releases his novels under Lessig's Creative Common licences; Doctorow &amp; Stross are co-writing a novel [<a href=\"http://craphound.com/?p=4062\">1</a>]; etc.<br /><br />In terms of the general public, the actors are (unsurprisingly) probably the best known: I would guess Stephen Fry is the most famous person listed above. </div><div style=\"text-align: justify;\"><br /></div><h4 style=\"text-align: justify;\">     Again, suggestions/additions welcome. </h4></div></div><div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/9417648313224391-5509821819154543312?l=babbagefiles.blogspot.com\" width=\"1\" /></div>" "http://babbagefiles.blogspot.com/2012/06/who-uses-linux-emacs-tex.html" (20453 30307) new 20 nil nil ((title ((type . "html")) "Benjamin Slade: Who uses Linux? (+Emacs, +TeX)") (link ((href . "http://babbagefiles.blogspot.com/2012/06/who-uses-linux-emacs-tex.html"))) (id nil "tag:blogger.com,1999:blog-9417648313224391.post-5509821819154543312") (updated nil "2012-06-23T07:55:15+00:00") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\"><div style=\"text-align: left;\"><div style=\"text-align: left;\"><div style=\"text-align: justify;\"><h3>     Some really rough notes. Suggestions welcome. </h3>Notable people who use Linux (with additional notes on Emacs and TeX users), a first draft.<br /><br />My rough criterion for determining who counts as \"famous\": does the person have a Wikipedia entry? </div><br /><div style=\"text-align: justify;\">Presumably many more can be added under \"computer-related\" (which is why I put it at the bottom). I'm only listing each person once, under most relevant/salient category (otherwise I could, for instance, list Shuttleworth also under an \"astronaut\" category).<br /><br />See also: \"<a href=\"http://usesthis.com/interviews/linux/\">The Setup / Linux</a>\" and \"<a href=\"http://www.mylinuxrig.com/\">My Linux Rig</a>\" for more 'prominent' people and their Linux setups.</div></div><br /><h3 style=\"color: black; text-align: left;\">                 Political</h3><h4 style=\"text-align: left;\">                 <a href=\"http://falkvinge.net/\">Rick Falkvinge</a>, founder of Swedish Pirate Party [<a href=\"https://en.wikipedia.org/wiki/Rick_Falkvinge\">Wikipedia entry</a>]</h4><ul style=\"text-align: left;\"><li>Uses an Ubuntu Linux set-up [<a href=\"http://rick.falkvinge.usesthis.com/\">http://rick.falkvinge.usesthis.com</a>/]</li></ul><h4 style=\"text-align: left;\">                 Christian Engström, Swedish Pirate Party MEP [<a href=\"https://en.wikipedia.org/wiki/Christian_Engstr%C3%B6m\">Wikipedia entry</a>]</h4><ul style=\"text-align: left;\"><li>Seems to use some sort of Ubuntu Linux set-up [<a href=\"http://www.blogger.com/%20https://christianengstrom.wordpress.com/2010/03/07/installing-ipredator-under-ubuntu-linux-9-10/\">1</a>, <a href=\"https://christianengstrom.wordpress.com/2008/05/20/3g-mobilt-bredband-pa-ubuntu-linux/\">2</a>, <a href=\"https://christianengstrom.wordpress.com/2007/12/16/holland-valjer-oppen-kallkod/\">3</a>]</li><li>Couple of pics with Richard Stallman from 2004 [<a href=\"http://christianengstrom.files.wordpress.com/2007/10/ce_vilnius_original.jpg\">1</a>, <a href=\"http://christianengstrom.files.wordpress.com/2007/10/ce_riga_original.jpg\">2</a>]</li></ul><h4 style=\"text-align: left;\">                 <a href=\"http://ameliaandersdotter.eu/\">Amelia Andersdotter</a>, Swedish Pirate Party MEP [<a href=\"https://en.wikipedia.org/wiki/Amelia_Andersdotter\">Wikipedia entry</a>]</h4><ul style=\"text-align: left;\"><li>Mentions using Arch, Fedora [<a href=\"http://www.mylinuxrig.com/post/17820200505/the-linux-setup-amelia-andersdotter-eu-parliament\">1</a>, <a href=\"https://www.networkworld.com/community/node/79232\">2</a>] </li><li>Also Emacs and TeX (see above links)</li></ul><h3 style=\"text-align: left;\">               Writers</h3><h4 style=\"text-align: left;\">             <a href=\"http://craphound.com/\">Cory Doctorow</a>, blogger, journalist, &amp; sci-fi/fantasy author [<a href=\"https://en.wikipedia.org/wiki/Cory_doctorow\">Wikipedia entry</a>]</h4><ul style=\"text-align: left;\"><li>Uses Ubuntu Linux since 2006 [<a href=\"http://www.guardian.co.uk/technology/2011/may/17/computing-opensource\">1</a>, <a href=\"http://www.linuxjournal.com/magazine/cory-doctorowmdashlinux-guru\">2</a>]</li><li>arguments for copyright reform (videos):</li><ul><li><a href=\"https://www.youtube.com/watch?v=NkBX-981_es\">Pwned: How copyright turns us all into IP serfs</a></li><li><a href=\"https://www.youtube.com/watch?v=HUEvRyemKSg\">The coming war on general computation</a></li><li><a href=\"https://www.youtube.com/watch?v=n-jbe4gBbLw\">@ the Pirate Party International General Assembly in Prague 2012</a></li></ul></ul><h4 style=\"text-align: left;\">             <a href=\"http://www.antipope.org/charlie/\">Charlie Stross</a>, sci-fi/horror/fantasy author [<a href=\"https://en.wikipedia.org/wiki/Charlie_Stross\">Wikipedia entry</a>]</h4><ul style=\"text-align: left;\"><li>formerly the monthly Linux columnist for <a href=\"https://en.wikipedia.org/wiki/Computer_Shopper_%28UK_magazine%29\">Computer Shopper </a></li><li>uses Linux, but mainly for running server, otherwise Mac [<a href=\"http://www.antipope.org/charlie/blog-static/2009/01/i_get_mail.html\">1</a>, <a href=\"http://charlie.stross.usesthis.com/\">2</a>, <a href=\"http://www.badlanguage.net/interview-with-sci-fi-author-charles-stross\">3</a>]</li><li>position on piracy: \"If you've downloaded unauthorized copies of my books, instead of hitting  on a tipjar button, I urge you to buy a (new) copy of one of my books....Your typical book publisher is not like the music or movie industry;  they run on thin margins, and they're staffed by underpaid, overworked  folk who do it because they love books, not because they're trying to  make themselves rich on the back of a thousand ruthlessly exploited  artists.  I think their effort deserves to be rewarded appropriately...\" [<a href=\"http://www.antipope.org/charlie/blog-static/2009/03/reminder-why-theres-no-tipjar.html\">1</a>] </li></ul><h4 style=\"text-align: left;\">             <a href=\"http://www.hipiers.com/\">Piers Anthony</a>, fantasy/sci-fi author [<a href=\"https://en.wikipedia.org/wiki/Piers_anthony\">Wikipedia entry</a>]</h4><ul style=\"text-align: left;\"><li>switched to Linux in 2000 [<a href=\"http://www.thepowerbase.com/2011/11/piers-anthony-an-ogre-and-a-penguin/\">1</a>, <a href=\"http://www.hipiers.com/00oct.html\">2</a>, <a href=\"http://www.hipiers.com/01april.html\">3</a>, <a href=\"http://www.hipiers.com/01june.html\">4</a>] </li><li>mentions using a number of different distros, including Ubuntu &amp; Fedora [<a href=\"http://hipiers.com/11aug.html\">1</a>]</li><li>use of Linux seems at least in part principle-driven [<a href=\"http://www.hipiers.com/06aug.html\">1</a>, <a href=\"http://www.thepowerbase.com/2011/11/piers-anthony-an-ogre-and-a-penguin/\">2</a>]</li><li>uses LibreOffice [<a href=\"http://www.hipiers.com/12may.html\">1</a>]</li><li>concerns about piracy:</li><ul><li>speaks approvingly of Harlan Ellison's war on piracy (2002-4) [<a href=\"http://www.hipiers.com/02june.html\">1</a>, <a href=\"http://www.hipiers.com/04aug.html\">2</a>]</li><li>complaints about piracy &amp; Ebay (2010) [<a href=\"http://www.hipiers.com/10mar.html\">1</a>]</li><li>some recognition of danger of censoring internet: \"THE WEEK had an item on Internet piracy of music, books, and movies, and efforts to stop it. I have discussed this here before, but it bears repeating: pirates are thieves who are destroying the ability of creative artists to make a living, myself included; a LOT of my works are chronically stolen. The pirates need to be stopped. The problem is how to do it without censoring free expression itself. I think there does have to be a law, but one carefully crafted to shut down only the pirates.\" (2012) [<a href=\"http://www.hipiers.com/12feb.html\">1</a>]</li></ul></ul><h4 style=\"text-align: left;\">            <a href=\"http://www.nealstephenson.com/\">Neal Stephenson</a>, sci-fi/speculative fiction author [<a href=\"https://en.wikipedia.org/wiki/Neal_Stephenson\">Wikipedia entry</a>]</h4><ul style=\"text-align: left;\"><li>fondness for both Mac &amp; Linux [sources?]</li><li>author of long essay \"<a href=\"https://en.wikipedia.org/wiki/In_the_Beginning..._Was_the_Command_Line\">In the Beginning... Was the Command Line</a>\" (1999)</li><ul><li><a href=\"https://github.com/robmadole/beginning_command_line\">ebook git repository</a></li><li><a href=\"http://www.cryptonomicon.com/beginning.html\">zipped plain text file</a></li><li><a href=\"http://www.amazon.com/exec/obidos/ASIN/0380815931/beowulfonsteo-20/103-1779062-0455006?creative=125581&amp;camp=2321&amp;link_code=as1\">print book from Amazon </a></li></ul><li>used Emacs [<a href=\"http://www.emacswiki.org/emacs/NealStephenson\">1</a>] </li><ul><li>for which novels? (<i>Cryptonomicon</i>? others?)</li></ul><li>stopped using Emacs [<a href=\"http://www.forbes.com/sites/davidewalt/2011/09/19/neal-stephenson-reamde-video-games/2/\">1</a>]</li><li>plans to start using Emacs (&amp; Linux) again [<a href=\"http://www.reddit.com/r/Fantasy/comments/vdt11/i_am_neal_stephenson_author_geek_and_now_sword/c53nsh5\">1</a>] </li></ul><h3 style=\"text-align: left;\">             Actors &amp; film-related</h3><h4 style=\"text-align: left;\">            <a href=\"http://www.stephenfry.com/\">Stephen Fry</a>, actor [<a href=\"https://en.wikipedia.org/wiki/Stephen_fry\">Wikipedia entry</a>]</h4><ul style=\"text-align: left;\"><li>likes Apple products [source?]</li><li>but also touts GNU [<a href=\"http://www.guardian.co.uk/technology/2008/feb/02/opensource.stephenfry\">1</a>, <a href=\"http://www.stephenfry.com/2008/09/01/happy-birthday-to-gnu/\">2</a>, <a href=\"https://www.gnu.org/fry/\">3</a>] </li></ul><h4 style=\"text-align: left;\">            <a href=\"http://wilwheaton.typepad.com/\">Wil Wheaton</a>, actor [<a href=\"https://en.wikipedia.org/wiki/Wil_wheaton\">Wikipedia entry</a>]</h4><ul style=\"text-align: left;\"><li>primarily uses Macs, but also uses Linux [<a href=\"http://wilwheaton.typepad.com/wwdnbackup/2010/04/wil-wheaton-prime-uses-linux-to-bring-you-evil-wil-wheaton-sitting-in-sheldons-spot.html\">1</a>, <a href=\"http://www.wilwheaton.net/mt/archives/001117.php\">2</a>] </li><li>support for Bittorrent [<a href=\"http://www.itworld.com/cloud-computing/277540/bittorrent-not-always-piracy-says-wil-wheaton\">1</a>]</li></ul><h3 style=\"text-align: left;\">             Programmers &amp; computer-related</h3><h4 style=\"text-align: left;\">             Linus Torvalds [<a href=\"https://en.wikipedia.org/wiki/Linus_torvalds\">Wikipedia entry</a>]</h4><ul style=\"text-align: left;\"><li>creator of <a href=\"https://en.wikipedia.org/wiki/Linux\">Linux</a></li><li>used Fedora (2008) [<a href=\"http://news.oreilly.com/2008/07/linux-torvalds-on-linux-distri.htmlhttp://news.oreilly.com/2008/07/linux-torvalds-on-linux-distri.html\">1</a>] </li><li>switched to openSUSE at some point in 2012(?) [<a href=\"http://www.quora.com/Linux/What-Linux-distribution-does-Linus-Torvalds-use-on-his-MacBook-Air\">1</a>]</li><li>uses Apple hardware [<a href=\"http://a2mac.org/2012/05/linus-torvalds-loves-your-macbook-air/\">1</a>] </li><li>uses an Emacs-like editor based on <a href=\"https://en.wikipedia.org/wiki/MicroEMACS\">MicroEMACS</a>, a <a href=\"https://git.kernel.org/?p=editors/uemacs/uemacs.git;a=summary\">customised version of uEmacs/PK</a> </li></ul><h4 style=\"text-align: left;\">             <a href=\"http://www.stallman.org/\">Richard Stallman</a> [<a href=\"https://en.wikipedia.org/wiki/Richard_stallman\">Wikipedia entry</a>]</h4><ul style=\"text-align: left;\"><li>used <a href=\"http://www.gnewsense.org/\">gNewSense</a>, a <a href=\"https://www.gnu.org/distros/free-distros.html\">fully-free</a> GNU/Linux distribution in 2010 [<a href=\"http://richard.stallman.usesthis.com/\">1</a>] </li><li>founder of the <a href=\"https://www.gnu.org/\">GNU project</a> (1983) </li><li>founder of <a href=\"https://www.fsf.org/\">Free Software Foundation</a> (1985) </li><li>creator of <a href=\"http://www.gnu.org/software/emacs\">Emacs</a> (1976)</li><li>co-creator of <a href=\"https://www.gnu.org/software/texinfo/\">Texinfo</a>, presupposing knowledge/use of TeX</li><li>supports <a href=\"https://en.wikipedia.org/wiki/Copyleft\">copyleft </a></li><ul><li>one (of many) talks on copyright issues: <a href=\"https://www.youtube.com/watch?v=SNBMdDaYhZA\">@ University of Calgary </a>(2009)</li><li><a href=\"https://www.gnu.org/philosophy/misinterpreting-copyright.html\">statement on copyright </a></li><li><a href=\"https://www.gnu.org/philosophy/pirate-party.html\">statement on worries about abolishment of copyright for copyleft</a> (re: Pirate Party platform) </li></ul></ul><h4 style=\"text-align: left;\">            Mark Shuttleworth, programmer, entreprenuer, astronaut [<a href=\"https://en.wikipedia.org/wiki/Mark_Shuttleworth\">Wikipedia entry</a>]</h4><ul style=\"text-align: left;\"><li>started the <a href=\"http://www.ubuntu.com/community\">Ubuntu Foundation</a> (2005) for <a href=\"http://www.ubuntu.com/\">Ubuntu Linux</a> development</li></ul><h4 style=\"text-align: left;\">             <a href=\"http://www-cs-faculty.stanford.edu/%7Eknuth/\">Donald Knuth</a>, computer scientist &amp; professor [<a href=\"https://en.wikipedia.org/wiki/Donald_knuth\">Wikipedia entry</a>]</h4><ul style=\"text-align: left;\"><li>creator of <a href=\"http://www.tug.org/\">TeX</a> typesetting system (1978), upon which <a href=\"http://www.latex-project.org/\">LaTeX</a>, <a href=\"http://www.luatex.org/\">LuaTeX</a> etc. are based </li><li>uses Ubuntu Linux (as of 2008) [<a href=\"http://www.informit.com/articles/article.aspx?p=1193856\">1</a>]</li><li>uses Emacs to edit TeX [<a href=\"http://www.informit.com/articles/article.aspx?p=1193856\">1</a>] </li><li>friends with computer security researcher <a href=\"https://en.wikipedia.org/wiki/Jacob_Appelbaum\">Jacob Appelbaum</a> [<a href=\"http://laughingsquid.com/jacob-appelbaum-donald-knuth-demonstrate-the-recursive-homeboys-principle/\">1</a>]</li></ul><h4 style=\"text-align: left;\">             <a href=\"http://www.americanmcgee.com/\">American McGee</a>, game designer [<a href=\"https://en.wikipedia.org/wiki/American_mcgee\">Wikipedia entry</a>] </h4><ul style=\"text-align: left;\"><li> switched to Ubuntu Linux (from Windows) with plans to \"stay switched\" (2006) [<a href=\"http://www.americanmcgee.com/2006/07/26/wga-and-activation-failures-dont-faze-redmond/\">1</a>]</li></ul><h4 style=\"text-align: left;\">         John \"maddog\" Hall, director of <a href=\"http://www.li.org/\"><i>Linux International</i></a> &amp;  professor of computer science [<a href=\"https://en.wikipedia.org/wiki/Maddog\">Wikipedia entry</a>]</h4><ul style=\"text-align: left;\"><li>runs different Linux distributions depending on employer [<a href=\"http://www.mylinuxrig.com/post/19511715022/the-linux-setup-jon-maddog-hall-linux\">1</a>]</li></ul><ul style=\"text-align: left;\"></ul></div><hr /><h3 style=\"text-align: left;\">      Some Initial Ruminations</h3><div style=\"text-align: left;\"><div style=\"text-align: justify;\">A number of the people above fall into two rough groupings: \"technology/gadget-lovers\" vs. \"ideological-users\". So Stephen Fry and Wil Wheaton would fall into the first category, as would perhaps Charlie Stross and even Linus Torvalds. On the ideological side are (of course) Richard Stallman, Cory Doctorow, Piers Anthony, and the Pirate Party MPs. Anthony's position in the latter grouping is interesting, given his position on piracy. Stallman's position is similar to the Pirate MPs in certain respects, but values the legal status of copyleft.</div><br /><h3 style=\"text-align: left;\">     What about <a href=\"https://en.wikipedia.org/wiki/Free_culture_movement\">Free Culture</a> proponents?</h3><div style=\"text-align: justify;\">What computer setups do Free Culture proponents use? Particularly, I'm wondering about <a href=\"https://en.wikipedia.org/wiki/Lawrence_Lessig\">Lawrence Lessig</a>, founding father of the Free Culture movement (largely based on Stallman's Free Software Foundation) and founder of the <a href=\"http://creativecommons.org/\">Creative Commons licences</a>. <a href=\"https://en.wikipedia.org/wiki/Nina_Paley\">Nina Paley</a> is another prominent Free Culture activist, but I'm pretty sure she's largely (solely?) a Mac user.</div><div style=\"text-align: justify;\"><br /></div><h3 style=\"text-align: justify;\">     Hattrick winners and other random notes</h3><div style=\"text-align: justify;\">Amelia Andersdotter, Donald Knuth, and Richard Stallman take hattrick prizes for Linux-Emacs-TeX use. (For an extra bonus, Andersdotter also explicitly mentions use of <a href=\"http://www.orgmode.org/\">org-mode</a> in Emacs.) </div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">Of course there are various connections between some of the characters mentioned above. For instance, Doctorow releases his novels under Lessig's Creative Common licences; Doctorow &amp; Stross are co-writing a novel [<a href=\"http://craphound.com/?p=4062\">1</a>]; etc.<br /><br />In terms of the general public, the actors are (unsurprisingly) probably the best known: I would guess Stephen Fry is the most famous person listed above. </div><div style=\"text-align: justify;\"><br /></div><h4 style=\"text-align: justify;\">     Again, suggestions/additions welcome. </h4></div></div><div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/9417648313224391-5509821819154543312?l=babbagefiles.blogspot.com\" width=\"1\" /></div>") (author nil (name nil "be_slayed") (email nil "noreply@blogger.com") (uri nil "http://babbagefiles.blogspot.com/search/label/emacs")) (source nil (title ((type . "html")) "The Babbage Files") (subtitle ((type . "html")) "tips, hacks, and musings") (link ((rel . "self") (href . "http://www.blogger.com/feeds/9417648313224391/posts/default/-/emacs"))) (id nil "tag:blogger.com,1999:blog-9417648313224391")))) ("Benjamin Slade: Emacs in the future: after the ice-caps melt" "<div dir=\"ltr\" style=\"text-align: left;\"><div style=\"text-align: justify;\">Emacs 24.1 is <a href=\"https://lists.gnu.org/archive/html/emacs-devel/2012-06/msg00164.html\">out</a>. I haven't really tried it properly yet. All of the pre-release Emacs 24 snapshots I tried had severe memory-leak problems (at least with my set-up) and the quick try-out of 24.1 I did do revealed that it seems to be incompatible with <a href=\"http://emacswiki.org/emacs/TwitteringMode\">twittering-mode</a>. Since Emacs 23.3 is still working nicely for me, perhaps I'll wait a bit before trying 24.1 seriously.</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">Speaking of the future of Emacs, a great quote from <a href=\"http://www.kieranhealy.org/\">sociologist Kieran Healy</a> on <a href=\"http://kieran.healy.usesthis.com/\">The Setup (\"usesthis.com\") site</a>: </div><blockquote class=\"tr_bq\"><div style=\"text-align: justify;\">Emacs ... will be there when the icecaps  melt and the cities drown, when humanity destroys itself in fire and  zombies, when the roaches finally achieve sentience, take over, and  begin using computers themselves - at which point its various Ctrl-Meta  key-chords will seem not merely satisfyingly ergonomic for the typical  arthropod, but also direct evidence for the universe's Intelligent  Design by some six-legged, multi-jointed God.</div></blockquote></div><div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/9417648313224391-5997327834213705977?l=babbagefiles.blogspot.com\" width=\"1\" /></div>" "http://babbagefiles.blogspot.com/2012/06/emacs-in-future-after-ice-caps-melt.html" (20450 12863) new 21 nil nil ((title ((type . "html")) "Benjamin Slade: Emacs in the future: after the ice-caps melt") (link ((href . "http://babbagefiles.blogspot.com/2012/06/emacs-in-future-after-ice-caps-melt.html"))) (id nil "tag:blogger.com,1999:blog-9417648313224391.post-5997327834213705977") (updated nil "2012-06-20T20:27:43+00:00") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\"><div style=\"text-align: justify;\">Emacs 24.1 is <a href=\"https://lists.gnu.org/archive/html/emacs-devel/2012-06/msg00164.html\">out</a>. I haven't really tried it properly yet. All of the pre-release Emacs 24 snapshots I tried had severe memory-leak problems (at least with my set-up) and the quick try-out of 24.1 I did do revealed that it seems to be incompatible with <a href=\"http://emacswiki.org/emacs/TwitteringMode\">twittering-mode</a>. Since Emacs 23.3 is still working nicely for me, perhaps I'll wait a bit before trying 24.1 seriously.</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">Speaking of the future of Emacs, a great quote from <a href=\"http://www.kieranhealy.org/\">sociologist Kieran Healy</a> on <a href=\"http://kieran.healy.usesthis.com/\">The Setup (\"usesthis.com\") site</a>: </div><blockquote class=\"tr_bq\"><div style=\"text-align: justify;\">Emacs ... will be there when the icecaps  melt and the cities drown, when humanity destroys itself in fire and  zombies, when the roaches finally achieve sentience, take over, and  begin using computers themselves - at which point its various Ctrl-Meta  key-chords will seem not merely satisfyingly ergonomic for the typical  arthropod, but also direct evidence for the universe's Intelligent  Design by some six-legged, multi-jointed God.</div></blockquote></div><div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/9417648313224391-5997327834213705977?l=babbagefiles.blogspot.com\" width=\"1\" /></div>") (author nil (name nil "be_slayed") (email nil "noreply@blogger.com") (uri nil "http://babbagefiles.blogspot.com/search/label/emacs")) (source nil (title ((type . "html")) "The Babbage Files") (subtitle ((type . "html")) "tips, hacks, and musings") (link ((rel . "self") (href . "http://www.blogger.com/feeds/9417648313224391/posts/default/-/emacs"))) (id nil "tag:blogger.com,1999:blog-9417648313224391")))) ("Emacs-fu: who holds this value?" "<div class=\"outline-2\" id=\"outline-container-1\">\n<div class=\"outline-text-2\" id=\"text-1\">\n<p>\nSomething from the category of useful things hiding in emacs… Suppose you\nare looking for the variable that holds a certain value. How to find it?\n</p>\n<p>\nEasy: <code>M-x apropos-value</code>\n</p>\n<p>\nSo, for example, finding all variables that hold your e-mail address:\n</p>\n<p>\n<code>M-x apropos-value RET me@example.com RET</code>\n</p>\n<p>\nand you'll get all the matches in the <code>*Apropos*</code>-buffer. HT: Stephen\nEglen.\n</p>\n<p>\nAlso check the various other <code>M-x apropos-...</code> commands, they all help you\nfind useful information if you can remember a word. Except for… <code>M-x   apropos-zippy</code>… eh?\n</p>\n</div>\n</div><div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/3992530807750384868-2369075462762171577?l=emacs-fu.blogspot.com\" width=\"1\" /></div>" "http://emacs-fu.blogspot.com/2012/06/who-holds-this-value.html" (20450 6042) new 22 nil nil ((title ((type . "html")) "Emacs-fu: who holds this value?") (link ((href . "http://emacs-fu.blogspot.com/2012/06/who-holds-this-value.html"))) (id nil "tag:blogger.com,1999:blog-3992530807750384868.post-2369075462762171577") (updated nil "2012-06-20T18:34:02+00:00") (content ((type . "html")) "<div class=\"outline-2\" id=\"outline-container-1\">\n<div class=\"outline-text-2\" id=\"text-1\">\n\n<p>\n  Something from the category of useful things hiding in emacs… Suppose you\n  are looking for the variable that holds a certain value. How to find it?\n</p>\n<p>\n  Easy: <code>M-x apropos-value</code>\n</p>\n<p>\n  So, for example, finding all variables that hold your e-mail address:\n</p>\n<p>\n  <code>M-x apropos-value RET me@example.com RET</code>\n</p>\n<p>\n  and you'll get all the matches in the <code>*Apropos*</code>-buffer. HT: Stephen\n  Eglen. \n</p>\n<p>\n  Also check the various other <code>M-x apropos-...</code> commands, they all help you\n  find useful information if you can remember a word. Except for… <code>M-x   apropos-zippy</code>… eh?\n</p>\n\n</div>\n</div><div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/3992530807750384868-2369075462762171577?l=emacs-fu.blogspot.com\" width=\"1\" /></div>") (author nil (name nil "djcb") (email nil "noreply@blogger.com") (uri nil "http://emacs-fu.blogspot.com/search/label/new")) (source nil (title ((type . "html")) "emacs-fu") (subtitle ((type . "html")) "useful tricks for emacs") (link ((rel . "self") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/-/new"))) (id nil "tag:blogger.com,1999:blog-3992530807750384868")))) ("Raimon Grau: erc-oops" "Hi again emacsians.  <br />Maybe you're familiar with this IRC log samples.  <br /><br /><pre>  15:54 [rgc] xb<br />  15:54 [rgc] ooops, C-fail<br /><br />  12:02 [xyz] ls<br />  12:02 [xyz] oops<br /><br />  00:21 [foo] cd<br />  00:22 [foo] wrong buffer :/<br /></pre><br /> To avoid that, some time ago I wrote some elisp to <a href=\"http://puntoblogspot.blogspot.com.es/2009/09/read-only-irc-channels-using-erc.html\">make erc-buffers read-only</a>, but I just came up with a better solution:  <br />     <pre class=\"src src-emacs-lisp\">(<span style=\"color: #f0dfaf; font-weight: bold;\">defun</span> <span style=\"color: #8cd0d3;\">rgrau-erc-oops</span> (txt)<br />  (<span style=\"color: #f0dfaf; font-weight: bold;\">when</span> (member txt '(<span style=\"color: #cc9393;\">\"ls\"</span> <span style=\"color: #cc9393;\">\"xb\"</span> <span style=\"color: #cc9393;\">\"cd\"</span>))<br />      (setq erc-send-this nil)))<br /><br />(add-to-list 'erc-send-pre-hook 'rgrau-erc-oops)<br /></pre> <br /><br />It's too simple to make an erc module out of that(isn't it?), so I just put it in this blog entry.<div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/8696405790788556158-5881915093754438802?l=puntoblogspot.blogspot.com\" width=\"1\" /></div>" "http://puntoblogspot.blogspot.com/2012/06/erc-oops.html" (20448 30419) new 23 nil nil ((title ((type . "html")) "Raimon Grau: erc-oops") (link ((href . "http://puntoblogspot.blogspot.com/2012/06/erc-oops.html"))) (id nil "tag:blogger.com,1999:blog-8696405790788556158.post-5881915093754438802") (updated nil "2012-06-19T12:55:47+00:00") (content ((type . "html")) "Hi again emacsians.  <br />Maybe you're familiar with this IRC log samples.  <br /><br /><pre>  15:54 [rgc] xb<br />  15:54 [rgc] ooops, C-fail<br /><br />  12:02 [xyz] ls<br />  12:02 [xyz] oops<br /><br />  00:21 [foo] cd<br />  00:22 [foo] wrong buffer :/<br /></pre><br /> To avoid that, some time ago I wrote some elisp to <a href=\"http://puntoblogspot.blogspot.com.es/2009/09/read-only-irc-channels-using-erc.html\">make erc-buffers read-only</a>, but I just came up with a better solution:  <br />     <pre class=\"src src-emacs-lisp\">(<span style=\"color: #f0dfaf; font-weight: bold;\">defun</span> <span style=\"color: #8cd0d3;\">rgrau-erc-oops</span> (txt)<br />  (<span style=\"color: #f0dfaf; font-weight: bold;\">when</span> (member txt '(<span style=\"color: #cc9393;\">\"ls\"</span> <span style=\"color: #cc9393;\">\"xb\"</span> <span style=\"color: #cc9393;\">\"cd\"</span>))<br />      (setq erc-send-this nil)))<br /><br />(add-to-list 'erc-send-pre-hook 'rgrau-erc-oops)<br /></pre> <br /><br />It's too simple to make an erc module out of that(isn't it?), so I just put it in this blog entry.<div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/8696405790788556158-5881915093754438802?l=puntoblogspot.blogspot.com\" width=\"1\" /></div>") (author nil (name nil "Raimon Grau") (email nil "noreply@blogger.com") (uri nil "http://puntoblogspot.blogspot.com/search/label/emacs")) (source nil (title ((type . "html")) "puntoblogspot") (subtitle ((type . "html")) "Technical stuff, mostly") (link ((rel . "self") (href . "http://www.blogger.com/feeds/8696405790788556158/posts/default/-/emacs"))) (id nil "tag:blogger.com,1999:blog-8696405790788556158")))) ("Chris Ball: Phineas" "<p>Our son (and first child) arrived on Thursday! Phineas Charles Ball was a bit early (although not early enough to be technically premature) at 37 weeks 3 days. He's healthy and on the large side for his gestational age (the size of a 38.5 week baby).  More photos <a href=\"http://www.flickr.com/photos/madprime/sets/72157630153469516/show/\">in this Flickr set</a>.</p>\n<div align=\"center\">\n<a href=\"http://www.flickr.com/photos/madprime/7383408482\"><img src=\"http://farm9.staticflickr.com/8156/7383408482_63339e0f51_d.jpg\" /><br /><i>T+2 minutes</i></a><br /><br />\n<a href=\"http://www.flickr.com/photos/madprime/7383410326\"><img src=\"http://farm8.staticflickr.com/7216/7383410326_2c65cdffe4_d.jpg\" /><br /><i>Birth weigh-in</i></a><br /><br />\n<a href=\"http://www.flickr.com/photos/madprime/7383417796\"><img src=\"http://farm8.staticflickr.com/7244/7383417796_21985ab3f0_d.jpg\" /><br /><i>Happy new parents</i></a><br /><br />\n<a href=\"http://www.flickr.com/photos/madprime/7383419076\"><img src=\"http://farm9.staticflickr.com/8016/7383419076_cb94a42c87_d.jpg\" /><br /><i>Swaddled</i></a><br /><br />\n<a href=\"http://www.flickr.com/photos/madprime/7383420720\"><img src=\"http://farm8.staticflickr.com/7080/7383420720_b7aa0caa22_d.jpg\" /><br /><i>Getting ready for car ride home from hospital</i></a><br /><br />\n<a href=\"http://www.flickr.com/photos/madprime/7383421752\"><img src=\"http://farm8.staticflickr.com/7090/7383421752_6ec6b7c625_d.jpg\" /><br /><i>Home at last!</i></a><br />\n</div>" "http://blog.printf.net/articles/2012/06/18/phineas" (20446 37004) new 24 nil nil ((title ((type . "html") (xml:lang . "en-us")) "Chris Ball: Phineas") (link ((href . "http://blog.printf.net/articles/2012/06/18/phineas"))) (id nil "urn:uuid:a7a7a6f5-54c0-4212-ad38-c11cde467d16") (updated nil "2012-06-18T02:21:00+00:00") (content ((type . "html")) "<p>Our son (and first child) arrived on Thursday! Phineas Charles Ball was a bit early (although not early enough to be technically premature) at 37 weeks 3 days. He's healthy and on the large side for his gestational age (the size of a 38.5 week baby).  More photos <a href=\"http://www.flickr.com/photos/madprime/sets/72157630153469516/show/\">in this Flickr set</a>.</p>\n\n<div align=\"center\">\n<a href=\"http://www.flickr.com/photos/madprime/7383408482\"><img src=\"http://farm9.staticflickr.com/8156/7383408482_63339e0f51_d.jpg\" /><br /><i>T+2 minutes</i></a><br /><br />\n<a href=\"http://www.flickr.com/photos/madprime/7383410326\"><img src=\"http://farm8.staticflickr.com/7216/7383410326_2c65cdffe4_d.jpg\" /><br /><i>Birth weigh-in</i></a><br /><br />\n<a href=\"http://www.flickr.com/photos/madprime/7383417796\"><img src=\"http://farm8.staticflickr.com/7244/7383417796_21985ab3f0_d.jpg\" /><br /><i>Happy new parents</i></a><br /><br />\n<a href=\"http://www.flickr.com/photos/madprime/7383419076\"><img src=\"http://farm9.staticflickr.com/8016/7383419076_cb94a42c87_d.jpg\" /><br /><i>Swaddled</i></a><br /><br />\n<a href=\"http://www.flickr.com/photos/madprime/7383420720\"><img src=\"http://farm8.staticflickr.com/7080/7383420720_b7aa0caa22_d.jpg\" /><br /><i>Getting ready for car ride home from hospital</i></a><br /><br />\n<a href=\"http://www.flickr.com/photos/madprime/7383421752\"><img src=\"http://farm8.staticflickr.com/7090/7383421752_6ec6b7c625_d.jpg\" /><br /><i>Home at last!</i></a><br />\n</div>") (author nil (name nil "Chris Ball") (uri nil "http://blog.printf.net")) (source nil (title ((type . "html")) "Chris Ball") (link ((rel . "self") (href . "http://blog.printf.net/xml/rss20/feed.xml"))) (id nil "http://blog.printf.net")))) ("Alex Ott: ECB &amp; fresh Emacs/CEDET..." "I already twitted about this, and also wrote to ECB &amp; CEDET mailing lists, but I also want to reach Planet Emacs readers :-)<br /><br />I made small changes in the ECB code that allow to use it together with fresh Emacs &amp; CEDET versions. Modified code is available in <a href=\"https://github.com/alexott/ecb/tree/new-cedet\">my github</a> (in the <b>new-cedet</b> branch!). I tried this version together with CEDET from trunk, and also with CEDET from Emacs 24.1, and it worked for me.<br />If you're using ECB, please try this modified version, and leave feedback (either here, or by sending e-mail to me or to ECB mailing list). If you'll find bugs, feel free to file a bug using github's issue tracker.<br /><br /><div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/6862508-7077606750640819257?l=alexott.blogspot.com\" width=\"1\" /></div>" "http://alexott.blogspot.com/2012/06/ecb-fresh-emacscedet.html" (20445 55565) new 25 nil nil ((title ((type . "html")) "Alex Ott: ECB &amp; fresh Emacs/CEDET...") (link ((href . "http://alexott.blogspot.com/2012/06/ecb-fresh-emacscedet.html"))) (id nil "tag:blogger.com,1999:blog-6862508.post-7077606750640819257") (updated nil "2012-06-17T13:18:05+00:00") (content ((type . "html")) "I already twitted about this, and also wrote to ECB &amp; CEDET mailing lists, but I also want to reach Planet Emacs readers :-)<br /><br />I made small changes in the ECB code that allow to use it together with fresh Emacs &amp; CEDET versions. Modified code is available in <a href=\"https://github.com/alexott/ecb/tree/new-cedet\">my github</a> (in the <b>new-cedet</b> branch!). I tried this version together with CEDET from trunk, and also with CEDET from Emacs 24.1, and it worked for me.<br />If you're using ECB, please try this modified version, and leave feedback (either here, or by sending e-mail to me or to ECB mailing list). If you'll find bugs, feel free to file a bug using github's issue tracker.<br /><br /><div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/6862508-7077606750640819257?l=alexott.blogspot.com\" width=\"1\" /></div>") (author nil (name nil "Alex Ott") (email nil "noreply@blogger.com") (uri nil "http://alexott.blogspot.com/search/label/emacs")) (source nil (title ((type . "html")) "Alex Ott's blog") (subtitle ((type . "html")) "Blog dedicated to Software Development, Unixes, Content Filtering, Emacs, Lisp, and other things.") (link ((rel . "self") (href . "http://www.blogger.com/feeds/6862508/posts/default/-/emacs"))) (id nil "tag:blogger.com,1999:blog-6862508")))) ("Flickr tag 'emacs': After #vim won that contest, @activestate showed up and declared #komodo the winner" "<p><a href=\"http://www.flickr.com/people/afresh1/\">AFresh1</a> posted a photo:</p>\n<p><a href=\"http://www.flickr.com/photos/afresh1/7184696889/\" title=\"After #vim won that contest, @activestate showed up and declared #komodo the winner\"><img alt=\"After #vim won that contest, @activestate showed up and declared #komodo the winner\" height=\"180\" src=\"http://farm8.staticflickr.com/7103/7184696889_58fb6fe7c3_m.jpg\" width=\"240\" /></a></p>" "http://www.flickr.com/photos/afresh1/7184696889/" (20441 2367) new 26 nil nil ((title ((type . "html")) "Flickr tag 'emacs': After #vim won that contest, @activestate showed up and declared #komodo the winner") (link ((href . "http://www.flickr.com/photos/afresh1/7184696889/"))) (id nil "tag:flickr.com,2004:/photo/7184696889") (updated nil "2012-06-13T21:42:23+00:00") (content ((type . "html")) "<p><a href=\"http://www.flickr.com/people/afresh1/\">AFresh1</a> posted a photo:</p>\n	\n<p><a href=\"http://www.flickr.com/photos/afresh1/7184696889/\" title=\"After #vim won that contest, @activestate showed up and declared #komodo the winner\"><img alt=\"After #vim won that contest, @activestate showed up and declared #komodo the winner\" height=\"180\" src=\"http://farm8.staticflickr.com/7103/7184696889_58fb6fe7c3_m.jpg\" width=\"240\" /></a></p>") (author nil (name nil "AFresh1") (email nil "nobody@flickr.com") (uri nil "http://www.flickr.com/photos/tags/emacs/")) (source nil (title ((type . "html")) "Recent Uploads tagged emacs") (link ((rel . "self") (href . "http://api.flickr.com/services/feeds/photos_public.gne?tags=emacs&lang=en-us&format=rss_200"))) (id nil "http://www.flickr.com/photos/tags/emacs/")))) ("Flickr tag 'emacs': Then #exvi showed up so they had some rounds of that at #yapcna2012" "<p><a href=\"http://www.flickr.com/people/afresh1/\">AFresh1</a> posted a photo:</p>\n<p><a href=\"http://www.flickr.com/photos/afresh1/7184691085/\" title=\"Then #exvi showed up so they had some rounds of that at #yapcna2012\"><img alt=\"Then #exvi showed up so they had some rounds of that at #yapcna2012\" height=\"180\" src=\"http://farm9.staticflickr.com/8151/7184691085_acd1b0e5e1_m.jpg\" width=\"240\" /></a></p>" "http://www.flickr.com/photos/afresh1/7184691085/" (20441 2246) new 27 nil nil ((title ((type . "html")) "Flickr tag 'emacs': Then #exvi showed up so they had some rounds of that at #yapcna2012") (link ((href . "http://www.flickr.com/photos/afresh1/7184691085/"))) (id nil "tag:flickr.com,2004:/photo/7184691085") (updated nil "2012-06-13T21:40:22+00:00") (content ((type . "html")) "<p><a href=\"http://www.flickr.com/people/afresh1/\">AFresh1</a> posted a photo:</p>\n	\n<p><a href=\"http://www.flickr.com/photos/afresh1/7184691085/\" title=\"Then #exvi showed up so they had some rounds of that at #yapcna2012\"><img alt=\"Then #exvi showed up so they had some rounds of that at #yapcna2012\" height=\"180\" src=\"http://farm9.staticflickr.com/8151/7184691085_acd1b0e5e1_m.jpg\" width=\"240\" /></a></p>") (author nil (name nil "AFresh1") (email nil "nobody@flickr.com") (uri nil "http://www.flickr.com/photos/tags/emacs/")) (source nil (title ((type . "html")) "Recent Uploads tagged emacs") (link ((rel . "self") (href . "http://api.flickr.com/services/feeds/photos_public.gne?tags=emacs&lang=en-us&format=rss_200"))) (id nil "http://www.flickr.com/photos/tags/emacs/")))) ("Chris Ball: Boston Dragon Boat Festival 2012" "<p>All photos are CC-BY-SA 3.0, and there are more in <a href=\"http://www.flickr.com/photos/madprime/sets/72157630036961563/show/\">this Flickr set</a>.</p>\n<div align=\"center\">\n<a href=\"http://www.flickr.com/photos/madprime/7359749558/in/photostream/\"><img src=\"http://farm8.staticflickr.com/7218/7359749558_21a42c74c1_d.jpg\" /><br /><i>\nWellness Warriors</i></a><br /><br />\n<a href=\"http://www.flickr.com/photos/madprime/7359730936/sizes/m/in/photostream/\"><img src=\"http://farm9.staticflickr.com/8004/7359730936_4acb1227d6_d.jpg\" /><br /><i>Harvard Dudley: Athena boat crosses first!</i></a><br /><br />\n<a href=\"http://www.flickr.com/photos/madprime/7174496377/in/photostream/\"><img src=\"http://farm8.staticflickr.com/7082/7174496377_65942dc102_z_d.jpg\" /><br /><i>Dragon Dance: The dragon enters</i></a><br /><br />\n<a href=\"http://www.flickr.com/photos/madprime/7359726312/in/photostream/\"><img src=\"http://farm9.staticflickr.com/8001/7359726312_97bc1f31bb_d.jpg\" /><br /><i>Dragon Dance: The dragon circles</i></a><br /><br />\n<a href=\"http://www.flickr.com/photos/madprime/7359727146/in/photostream/\"><img src=\"http://farm8.staticflickr.com/7083/7359727146_8a25a7c6ab_d.jpg\" /><br /><i>Dragon Dance: The dragon rises</i></a><br /><br />\n<a href=\"http://www.flickr.com/photos/madprime/7174514135/sizes/m/in/photostream/\"><img src=\"http://farm9.staticflickr.com/8168/7174514135_a1f41fc316_d.jpg\" /><br /><i>(the pink wig is to blend in with the female rowers)</i></a><br /><br />\n<a href=\"http://www.flickr.com/photos/madprime/7174518809/in/photostream/\"><img src=\"http://farm8.staticflickr.com/7098/7174518809_5f28c658e3_d.jpg\" /><br /><i>Harvard Dudley: Athena from above</i></a><br />\n</div>" "http://blog.printf.net/articles/2012/06/11/boston-dragon-boat-festival-2012" (20437 26708) new 28 nil nil ((title ((type . "html") (xml:lang . "en-us")) "Chris Ball: Boston Dragon Boat Festival 2012") (link ((href . "http://blog.printf.net/articles/2012/06/11/boston-dragon-boat-festival-2012"))) (id nil "urn:uuid:19ace983-e3f4-4502-bcbe-d2b9fb71fbd1") (updated nil "2012-06-11T03:39:00+00:00") (content ((type . "html")) "<p>All photos are CC-BY-SA 3.0, and there are more in <a href=\"http://www.flickr.com/photos/madprime/sets/72157630036961563/show/\">this Flickr set</a>.</p>\n\n<div align=\"center\">\n<a href=\"http://www.flickr.com/photos/madprime/7359749558/in/photostream/\"><img src=\"http://farm8.staticflickr.com/7218/7359749558_21a42c74c1_d.jpg\" /><br /><i>\nWellness Warriors</i></a><br /><br />\n<a href=\"http://www.flickr.com/photos/madprime/7359730936/sizes/m/in/photostream/\"><img src=\"http://farm9.staticflickr.com/8004/7359730936_4acb1227d6_d.jpg\" /><br /><i>Harvard Dudley: Athena boat crosses first!</i></a><br /><br />\n<a href=\"http://www.flickr.com/photos/madprime/7174496377/in/photostream/\"><img src=\"http://farm8.staticflickr.com/7082/7174496377_65942dc102_z_d.jpg\" /><br /><i>Dragon Dance: The dragon enters</i></a><br /><br />\n<a href=\"http://www.flickr.com/photos/madprime/7359726312/in/photostream/\"><img src=\"http://farm9.staticflickr.com/8001/7359726312_97bc1f31bb_d.jpg\" /><br /><i>Dragon Dance: The dragon circles</i></a><br /><br />\n<a href=\"http://www.flickr.com/photos/madprime/7359727146/in/photostream/\"><img src=\"http://farm8.staticflickr.com/7083/7359727146_8a25a7c6ab_d.jpg\" /><br /><i>Dragon Dance: The dragon rises</i></a><br /><br />\n<a href=\"http://www.flickr.com/photos/madprime/7174514135/sizes/m/in/photostream/\"><img src=\"http://farm9.staticflickr.com/8168/7174514135_a1f41fc316_d.jpg\" /><br /><i>(the pink wig is to blend in with the female rowers)</i></a><br /><br />\n<a href=\"http://www.flickr.com/photos/madprime/7174518809/in/photostream/\"><img src=\"http://farm8.staticflickr.com/7098/7174518809_5f28c658e3_d.jpg\" /><br /><i>Harvard Dudley: Athena from above</i></a><br />\n</div>") (author nil (name nil "Chris Ball") (uri nil "http://blog.printf.net")) (source nil (title ((type . "html")) "Chris Ball") (link ((rel . "self") (href . "http://blog.printf.net/xml/rss20/feed.xml"))) (id nil "http://blog.printf.net")))) ("Ignacio Paz Posse: emacs, how to highlight what you just pasted" "<p>This is a way to select whatever text we had just inserted inside a buffer. I forgotten this trick until now that used it again. A small tip worth annotating that might come in handy for somebody else as well:<br />\n1) yank(paste) the text <strong>“C-y”</strong><br />\n2) mark the point where the cursor landed, (using point-to-register), do <strong>“C-x r SPC”</strong> and pick any letter ( a-z)<br />\n3) go back to the point where you initially were, by doing <strong>“C-u SPC”</strong><br />\n4) set the mark there,<strong>“C-SPC”</strong><br />\n5) use <strong>“C-x r j”</strong> (+ the letter picked) to go up the point where the yanked text ends inside your buffer.<br />\n6) Voila, the text yanked is highlighted ready for whatever manipulation you need to do onto it.</p>\n<p>ps: Of course in case you pasted text at the end of the buffer is simpler,<br />\njust a matter of:<br />\n<strong>“C-u SPC”</strong><br />\n<strong>“C-SPC”</strong> to mark<br />\n<strong>“M – &gt;”</strong> to go to the end</p>\n<p><strong>UPDATE</strong>: Actually, thanks to Peter (see comment below) I learned that this is possible just doing “<strong>C-x C-x after the yank if you have transient mark mode enabled</strong>” .</p>\n<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/ignaciopp.wordpress.com/926/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/ignaciopp.wordpress.com/926/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godelicious/ignaciopp.wordpress.com/926/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/delicious/ignaciopp.wordpress.com/926/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gofacebook/ignaciopp.wordpress.com/926/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/facebook/ignaciopp.wordpress.com/926/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gotwitter/ignaciopp.wordpress.com/926/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/twitter/ignaciopp.wordpress.com/926/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gostumble/ignaciopp.wordpress.com/926/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/stumble/ignaciopp.wordpress.com/926/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godigg/ignaciopp.wordpress.com/926/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/digg/ignaciopp.wordpress.com/926/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/goreddit/ignaciopp.wordpress.com/926/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/reddit/ignaciopp.wordpress.com/926/\" /></a> <img alt=\"\" border=\"0\" height=\"1\" src=\"http://stats.wordpress.com/b.gif?host=ignaciopp.wordpress.com&amp;blog=7647034&amp;post=926&amp;subd=ignaciopp&amp;ref=&amp;feed=1\" width=\"1\" />" "http://ignaciopp.wordpress.com/2012/06/04/emacs-how-to-highlight-what-you-just-pasted/" (20429 28138) new 29 nil nil ((title ((type . "html") (xml:lang . "en")) "Ignacio Paz Posse: emacs, how to highlight what you just pasted") (link ((href . "http://ignaciopp.wordpress.com/2012/06/04/emacs-how-to-highlight-what-you-just-pasted/"))) (id nil "http://ignaciopp.wordpress.com/?p=926") (updated nil "2012-06-05T02:24:42+00:00") (content ((type . "html") (xml:lang . "en")) "<p>This is a way to select whatever text we had just inserted inside a buffer. I forgotten this trick until now that used it again. A small tip worth annotating that might come in handy for somebody else as well:<br />\n1) yank(paste) the text <strong>“C-y”</strong><br />\n2) mark the point where the cursor landed, (using point-to-register), do <strong>“C-x r SPC”</strong> and pick any letter ( a-z)<br />\n3) go back to the point where you initially were, by doing <strong>“C-u SPC”</strong><br />\n4) set the mark there,<strong>“C-SPC”</strong><br />\n5) use <strong>“C-x r j”</strong> (+ the letter picked) to go up the point where the yanked text ends inside your buffer.<br />\n6) Voila, the text yanked is highlighted ready for whatever manipulation you need to do onto it.</p>\n<p>ps: Of course in case you pasted text at the end of the buffer is simpler,<br />\njust a matter of:<br />\n<strong>“C-u SPC”</strong><br />\n<strong>“C-SPC”</strong> to mark<br />\n<strong>“M – &gt;”</strong> to go to the end</p>\n<p><strong>UPDATE</strong>: Actually, thanks to Peter (see comment below) I learned that this is possible just doing “<strong>C-x C-x after the yank if you have transient mark mode enabled</strong>” .</p>\n<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/ignaciopp.wordpress.com/926/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/ignaciopp.wordpress.com/926/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godelicious/ignaciopp.wordpress.com/926/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/delicious/ignaciopp.wordpress.com/926/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gofacebook/ignaciopp.wordpress.com/926/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/facebook/ignaciopp.wordpress.com/926/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gotwitter/ignaciopp.wordpress.com/926/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/twitter/ignaciopp.wordpress.com/926/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gostumble/ignaciopp.wordpress.com/926/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/stumble/ignaciopp.wordpress.com/926/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godigg/ignaciopp.wordpress.com/926/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/digg/ignaciopp.wordpress.com/926/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/goreddit/ignaciopp.wordpress.com/926/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/reddit/ignaciopp.wordpress.com/926/\" /></a> <img alt=\"\" border=\"0\" height=\"1\" src=\"http://stats.wordpress.com/b.gif?host=ignaciopp.wordpress.com&amp;blog=7647034&amp;post=926&amp;subd=ignaciopp&amp;ref=&amp;feed=1\" width=\"1\" />") (author nil (name nil "ignacio") (uri nil "http://ignaciopp.wordpress.com")) (source nil (title ((type . "html")) "Nachopp's Blog » emacs") (subtitle ((type . "html")) "notes and tidbits about emacs, gnu tools, web programming, and sysadmin related stuff") (link ((rel . "self") (href . "http://ignaciopp.wordpress.com/tag/emacs/feed/"))) (id nil "http://ignaciopp.wordpress.com")))) ("John Sullivan: To nook" "<p>\nMy curiosity was definitely <a href=\"http://www.gadgetbox.msnbc.msn.com/technology/gadgetbox/nookd-bookseller-replaces-kindle-nook-war-peace-e-book-808308\" rel=\"nofollow\" target=\"_blank\">nookd</a> by this story.\n</p>\n<p>\nWhile this doesn't seem to have been an act of censorship or anything nefarious by Barnes and Noble itself, this does point to just how terrifying ebooks can be if we aren't careful. In the future, when we are dealing with the entirety of human knowledge, we better be careful with the find and replace function. And we better make sure we control our computer systems so that other people can't nook us without our permission.\n</p>\n<p>\nSee also:\n</p>\n<ul>\n<li><a href=\"http://futureoftheinternet.org/war-and-nookd\" rel=\"nofollow\" target=\"_blank\">War and Nookd</a></li>\n<li><a href=\"http://villagecraftsmen.blogspot.de/2012/05/nookd.html\" rel=\"nofollow\" target=\"_blank\">Nookd</a></li>\n</ul>\n<p>\nAs someone who read <cite>War and Peace</cite> in paper form, much of it in bed, I definitely empathized with this:\n</p>\n<blockquote>\n<p>\nSome weeks ago I decided that I wanted to read Tolstoy's War and Peace. Lou Ann loaned me her copy. At more than 1100 pages, reading it in bed required as much strength as balancing a box of bricks in my hands. In my senior years I have developed arthritis in my thumbs, which made the effort not only difficult, but painful.\n</p>\n</blockquote><img height=\"1\" src=\"http://feeds.feedburner.com/~r/wjsullivan/~4/BIchR-iPnlQ\" width=\"1\" />" "http://feedproxy.google.com/~r/wjsullivan/~3/BIchR-iPnlQ/281373.html" (20428 55487) new 30 nil nil ((title ((type . "html")) "John Sullivan: To nook") (link ((href . "http://feedproxy.google.com/~r/wjsullivan/~3/BIchR-iPnlQ/281373.html"))) (id nil "http://johnsu01.livejournal.com/281373.html") (updated nil "2012-06-04T15:48:15+00:00") (content ((type . "html")) "<p>\nMy curiosity was definitely <a href=\"http://www.gadgetbox.msnbc.msn.com/technology/gadgetbox/nookd-bookseller-replaces-kindle-nook-war-peace-e-book-808308\" rel=\"nofollow\" target=\"_blank\">nookd</a> by this story.\n</p>\n\n<p>\nWhile this doesn't seem to have been an act of censorship or anything nefarious by Barnes and Noble itself, this does point to just how terrifying ebooks can be if we aren't careful. In the future, when we are dealing with the entirety of human knowledge, we better be careful with the find and replace function. And we better make sure we control our computer systems so that other people can't nook us without our permission.\n</p>\n\n<p>\nSee also:\n</p>\n\n<ul>\n<li><a href=\"http://futureoftheinternet.org/war-and-nookd\" rel=\"nofollow\" target=\"_blank\">War and Nookd</a></li>\n<li><a href=\"http://villagecraftsmen.blogspot.de/2012/05/nookd.html\" rel=\"nofollow\" target=\"_blank\">Nookd</a></li>\n</ul>\n\n<p>\nAs someone who read <cite>War and Peace</cite> in paper form, much of it in bed, I definitely empathized with this:\n</p>\n\n<blockquote>\n<p>\nSome weeks ago I decided that I wanted to read Tolstoy's War and Peace. Lou Ann loaned me her copy. At more than 1100 pages, reading it in bed required as much strength as balancing a box of bricks in my hands. In my senior years I have developed arthritis in my thumbs, which made the effort not only difficult, but painful. \n</p>\n</blockquote><img height=\"1\" src=\"http://feeds.feedburner.com/~r/wjsullivan/~4/BIchR-iPnlQ\" width=\"1\" />") (author nil (name nil "John Sullivan") (uri nil "http://pipes.yahoo.com/pipes/pipe.info?_id=FiExI4MS3RG8VVYcM1rX_Q")) (source nil (title ((type . "html")) "John Sullivan's Emacs and free software blog posts") (subtitle ((type . "html")) "Pipes Output") (link ((rel . "self") (href . "http://pipes.yahoo.com/pipes/pipe.run?_id=FiExI4MS3RG8VVYcM1rX_Q&_render=rss"))) (id nil "http://pipes.yahoo.com/pipes/pipe.info?_id=FiExI4MS3RG8VVYcM1rX_Q")))))